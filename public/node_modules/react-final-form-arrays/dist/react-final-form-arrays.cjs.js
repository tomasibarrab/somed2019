'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));
var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var React = require('react');
var reactLifecyclesCompat = require('react-lifecycles-compat');
var finalForm = require('final-form');
var reactFinalForm = require('react-final-form');

function diffSubscription (a, b, keys) {
  if (a) {
    if (b) {
      // $FlowFixMe
      return keys.some(function (key) {
        return a[key] !== b[key];
      });
    } else {
      return true;
    }
  } else {
    return !!b;
  }
}

// shared logic between components that use either render prop,
// children render function, or component prop
function renderComponent(props, name) {
  var render = props.render,
      children = props.children,
      component = props.component,
      rest = _objectWithoutPropertiesLoose(props, ["render", "children", "component"]);

  if (component) {
    return React.createElement(component, _extends({}, rest, {
      children: children
    })); // inject children back in
  }

  if (render) {
    return render(_extends({}, rest, {
      children: children
    })); // inject children back in
  } // istanbul ignore next


  if (typeof children !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      console.error("Warning: Must specify either a render prop, a render function as children, or a component prop to " + name);
      return null; // warning will alert developer to their mistake
    }
  }

  return children(rest);
}

var version = '2.0.1';
var versions = {
  'final-form': finalForm.version,
  'react-final-form': reactFinalForm.version,
  'react-final-form-arrays': version
};
var all = finalForm.fieldSubscriptionItems.reduce(function (result, key) {
  result[key] = true;
  return result;
}, {});

var FieldArray =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(FieldArray, _React$Component);

  function FieldArray(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "isEqual", function (a, b) {
      if (typeof _this.props.isEqual === 'function') {
        return _this.props.isEqual(a, b);
      }

      return true;
    });

    _defineProperty(_assertThisInitialized(_this), "subscribe", function (_ref, listener) {
      var name = _ref.name,
          subscription = _ref.subscription;
      _this.unsubscribe = _this.props.reactFinalForm.registerField(name, listener, subscription ? _extends({}, subscription, {
        length: true
      }) : all, {
        getValidator: function getValidator() {
          return _this.validate;
        },
        isEqual: _this.isEqual
      });
    });

    _defineProperty(_assertThisInitialized(_this), "validate", function () {
      var validate = _this.props.validate;
      if (!validate) return undefined;
      var error = validate(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);

      if (!error || Array.isArray(error)) {
        return error;
      } else {
        var arrayError = [] // gross, but we have to set a string key on the array
        ;
        arrayError[finalForm.ARRAY_ERROR] = error;
        return arrayError;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "bindMutators", function (_ref2) {
      var name = _ref2.name;
      var reactFinalForm = _this.props.reactFinalForm;

      if (reactFinalForm) {
        var mutators = reactFinalForm.mutators;
        var hasMutators = !!(mutators && mutators.push && mutators.pop); // istanbul ignore next

        if (process.env.NODE_ENV !== 'production' && !hasMutators) {
          console.error('Warning: Array mutators not found. You need to provide the mutators from final-form-arrays to your form');
        }

        if (hasMutators) {
          _this.mutators = Object.keys(mutators).reduce(function (result, key) {
            result[key] = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return mutators[key].apply(mutators, [name].concat(args));
            };

            return result;
          }, {});
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "notify", function (state) {
      setTimeout(function () {
        if (_this.mounted) {
          _this.setState({
            state: state
          });
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "forEach", function (iterator) {
      var name = _this.props.name; // required || for Flow, but results in uncovered line in Jest/Istanbul
      // istanbul ignore next

      var length = _this.state.state ? _this.state.state.length || 0 : 0;

      for (var i = 0; i < length; i++) {
        iterator(name + "[" + i + "]", i);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "map", function (iterator) {
      var name = _this.props.name; // required || for Flow, but results in uncovered line in Jest/Istanbul
      // istanbul ignore next

      var length = _this.state.state ? _this.state.state.length || 0 : 0;
      var results = [];

      for (var i = 0; i < length; i++) {
        results.push(iterator(name + "[" + i + "]", i));
      }

      return results;
    });

    var initialState; // istanbul ignore next

    if (process.env.NODE_ENV !== 'production' && !props.reactFinalForm) {
      console.error('Warning: FieldArray must be used inside of a ReactFinalForm component');
    }

    var _reactFinalForm = props.reactFinalForm;

    if (_reactFinalForm) {
      // avoid error, warning will alert developer to their mistake
      _this.subscribe(props, function (state) {
        if (initialState) {
          _this.notify(state);
        } else {
          initialState = state;
        }
      });
    }

    _this.state = {
      state: initialState
    };

    _this.bindMutators(props);

    _this.mounted = false;
    return _this;
  }

  var _proto = FieldArray.prototype;

  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var name = nextProps.name,
        subscription = nextProps.subscription;

    if (this.props.name !== name || diffSubscription(this.props.subscription, subscription, finalForm.fieldSubscriptionItems)) {
      if (this.props.reactFinalForm) {
        // avoid error, warning will alert developer to their mistake
        this.unsubscribe();
        this.subscribe(nextProps, this.notify);
      }
    }

    if (this.props.name !== name) {
      this.bindMutators(nextProps);
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
    this.unsubscribe();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        name = _this$props.name,
        rest = _objectWithoutPropertiesLoose(_this$props, ["name"]);

    var _ref3 = this.state.state || {},
        length = _ref3.length,
        active = _ref3.active,
        dirty = _ref3.dirty,
        dirtySinceLastSubmit = _ref3.dirtySinceLastSubmit,
        error = _ref3.error,
        initial = _ref3.initial,
        invalid = _ref3.invalid,
        pristine = _ref3.pristine,
        submitError = _ref3.submitError,
        submitFailed = _ref3.submitFailed,
        submitSucceeded = _ref3.submitSucceeded,
        touched = _ref3.touched,
        valid = _ref3.valid,
        visited = _ref3.visited,
        fieldStateFunctions = _objectWithoutPropertiesLoose(_ref3, ["length", "active", "dirty", "dirtySinceLastSubmit", "error", "initial", "invalid", "pristine", "submitError", "submitFailed", "submitSucceeded", "touched", "valid", "visited"]);

    var meta = {
      active: active,
      dirty: dirty,
      dirtySinceLastSubmit: dirtySinceLastSubmit,
      error: error,
      initial: initial,
      invalid: invalid,
      pristine: pristine,
      submitError: submitError,
      submitFailed: submitFailed,
      submitSucceeded: submitSucceeded,
      touched: touched,
      valid: valid,
      visited: visited
    };

    var fieldState = _extends({}, meta, fieldStateFunctions);

    return renderComponent(_extends({
      fields: _extends({
        name: name,
        forEach: this.forEach,
        length: length,
        map: this.map
      }, this.mutators, fieldState),
      meta: meta
    }, rest, {
      __versions: versions
    }), "FieldArray(" + name + ")");
  };

  return FieldArray;
}(React.Component);

_defineProperty(FieldArray, "displayName", "ReactFinalFormFieldArray(" + finalForm.version + ")(" + version + ")");

reactLifecyclesCompat.polyfill(FieldArray);
var decorated = reactFinalForm.withReactFinalForm(FieldArray);

exports.FieldArray = decorated;
exports.version = version;
