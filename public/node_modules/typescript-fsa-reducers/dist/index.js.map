{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,iDAA0E;AAqF1E,iCACI,YAAe;IAEf,MAAM,CAAC,WAAW,CAAO,YAAY,CAAC,CAAC;AAC3C,CAAC;AAJD,0DAIC;AAED;IACI,MAAM,CAAC,WAAW,EAAQ,CAAC;AAC/B,CAAC;AAFD,gEAEC;AAED;IAII,MAAM,CAAC,WAAW,EAAa,CAAC;AACpC,CAAC;AALD,4CAKC;AASD,qBACI,YAAkB;IAElB,IAAM,KAAK,GAAwB,EAAE,CAAC;IACtC,IAAM,OAAO,GAAG,kBAAkB,CAAC,YAAY,EAAE,KAAK,CAGrD,CAAC;IAEF,OAAO,CAAC,cAAc,GAAG,UACrB,aAA+B,EAC/B,OAAsC;QAEtC,KAAK,CAAC,IAAI,CAAC,EAAE,aAAa,eAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,GAAG,UACX,aAA+B,EAC/B,OAA8B;QAE9B,OAAA,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,UAAC,KAAK,EAAE,MAAM;YAChD,OAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;QAA9B,CAA8B,CACjC;IAFD,CAEC,CAAC;IAEN,OAAO,CAAC,eAAe,GAAG,UACtB,cAAuC,EACvC,OAAsC;QAEtC,GAAG,CAAC,CAAwB,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc;YAArC,IAAM,aAAa,uBAAA;YACpB,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SAClD;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,GAAG,UACZ,cAAuC,EACvC,OAA8B;QAE9B,OAAA,OAAO,CAAC,eAAe,CAAC,cAAc,EAAE,UAAC,KAAK,EAAE,MAAM;YAClD,OAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;QAA9B,CAA8B,CACjC;IAFD,CAEC,CAAC;IACN,OAAO,CAAC,KAAK,GAAG,cAAM,OAAA,kBAAkB,CAAC,YAAY,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,EAA/C,CAA+C,CAAC;IAEtE,MAAM,CAAC,OAAO,CAAC;AACnB,CAAC;AAED,4BACI,YAA6B,EAC7B,KAA0B;IAE1B,MAAM,CAAC,UAAC,KAA2B,EAAE,MAAiB;QAA9C,sBAAA,EAAA,QAAQ,YAAmB;QAC/B,GAAG,CAAC,CAAqC,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAnC,IAAA,gBAA0B,EAAxB,gCAAa,EAAE,oBAAO;YAC/B,EAAE,CAAC,CAAC,uBAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAClC,CAAC;SACJ;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC,CAAC;AACN,CAAC","sourcesContent":["import { Action, ActionCreator, AnyAction, isType } from \"typescript-fsa\";\n\nexport interface ReducerBuilder<InS extends OutS, OutS> {\n    case<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS>;\n    caseWithAction<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS>;\n\n    // cases variadic overloads\n    cases<P1>(\n        actionCreators: [ActionCreator<P1>],\n        handler: Handler<InS, OutS, P1>,\n    ): ReducerBuilder<InS, OutS>;\n    cases<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, P1 | P2>,\n    ): ReducerBuilder<InS, OutS>;\n    cases<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3>,\n    ): ReducerBuilder<InS, OutS>;\n    cases<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3 | P4>,\n    ): ReducerBuilder<InS, OutS>;\n    cases<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS>;\n\n    // casesWithAction variadic overloads\n    casesWithAction<P1>(\n        actionCreators: [ActionCreator<P1>],\n        handler: Handler<InS, OutS, Action<P1>>,\n    ): ReducerBuilder<InS, OutS>;\n    casesWithAction<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, Action<P1 | P2>>,\n    ): ReducerBuilder<InS, OutS>;\n    casesWithAction<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3>>,\n    ): ReducerBuilder<InS, OutS>;\n    casesWithAction<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3 | P4>>,\n    ): ReducerBuilder<InS, OutS>;\n    casesWithAction<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS>;\n\n    // Intentionally avoid AnyAction type so packages can export reducers\n    // created using .build() without requiring a dependency on typescript-fsa.\n    build(): (state: InS | undefined, action: { type: any }) => OutS;\n    (state: InS | undefined, action: AnyAction): OutS;\n}\n\nexport type Handler<InS extends OutS, OutS, P> = (\n    state: InS,\n    payload: P,\n) => OutS;\n\nexport function reducerWithInitialState<S>(\n    initialState: S,\n): ReducerBuilder<S, S> {\n    return makeReducer<S, S>(initialState);\n}\n\nexport function reducerWithoutInitialState<S>(): ReducerBuilder<S, S> {\n    return makeReducer<S, S>();\n}\n\nexport function upcastingReducer<InS extends OutS, OutS>(): ReducerBuilder<\n    InS,\n    OutS\n> {\n    return makeReducer<InS, OutS>();\n}\n\ninterface Case<InS extends OutS, OutS, P> {\n    actionCreator: ActionCreator<P>;\n    handler: Handler<InS, OutS, Action<P>>;\n}\n\ntype CaseList<InS extends OutS, OutS> = Array<Case<InS, OutS, any>>;\n\nfunction makeReducer<InS extends OutS, OutS>(\n    initialState?: InS,\n): ReducerBuilder<InS, OutS> {\n    const cases: CaseList<InS, OutS> = [];\n    const reducer = getReducerFunction(initialState, cases) as ReducerBuilder<\n        InS,\n        OutS\n    >;\n\n    reducer.caseWithAction = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        cases.push({ actionCreator, handler });\n        return reducer;\n    };\n\n    reducer.case = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.caseWithAction(actionCreator, (state, action) =>\n            handler(state, action.payload),\n        );\n\n    reducer.casesWithAction = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        for (const actionCreator of actionCreators) {\n            reducer.caseWithAction(actionCreator, handler);\n        }\n        return reducer;\n    };\n\n    reducer.cases = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.casesWithAction(actionCreators, (state, action) =>\n            handler(state, action.payload),\n        );\n    reducer.build = () => getReducerFunction(initialState, cases.slice());\n\n    return reducer;\n}\n\nfunction getReducerFunction<InS extends OutS, OutS>(\n    initialState: InS | undefined,\n    cases: CaseList<InS, OutS>,\n) {\n    return (state = initialState as InS, action: AnyAction) => {\n        for (const { actionCreator, handler } of cases) {\n            if (isType(action, actionCreator)) {\n                return handler(state, action);\n            }\n        }\n        return state;\n    };\n}\n"]}