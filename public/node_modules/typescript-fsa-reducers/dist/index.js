"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_fsa_1 = require("typescript-fsa");
function reducerWithInitialState(initialState) {
    return makeReducer(initialState);
}
exports.reducerWithInitialState = reducerWithInitialState;
function reducerWithoutInitialState() {
    return makeReducer();
}
exports.reducerWithoutInitialState = reducerWithoutInitialState;
function upcastingReducer() {
    return makeReducer();
}
exports.upcastingReducer = upcastingReducer;
function makeReducer(initialState) {
    var cases = [];
    var reducer = getReducerFunction(initialState, cases);
    reducer.caseWithAction = function (actionCreator, handler) {
        cases.push({ actionCreator: actionCreator, handler: handler });
        return reducer;
    };
    reducer.case = function (actionCreator, handler) {
        return reducer.caseWithAction(actionCreator, function (state, action) {
            return handler(state, action.payload);
        });
    };
    reducer.casesWithAction = function (actionCreators, handler) {
        for (var _i = 0, actionCreators_1 = actionCreators; _i < actionCreators_1.length; _i++) {
            var actionCreator = actionCreators_1[_i];
            reducer.caseWithAction(actionCreator, handler);
        }
        return reducer;
    };
    reducer.cases = function (actionCreators, handler) {
        return reducer.casesWithAction(actionCreators, function (state, action) {
            return handler(state, action.payload);
        });
    };
    reducer.build = function () { return getReducerFunction(initialState, cases.slice()); };
    return reducer;
}
function getReducerFunction(initialState, cases) {
    return function (state, action) {
        if (state === void 0) { state = initialState; }
        for (var _i = 0, cases_1 = cases; _i < cases_1.length; _i++) {
            var _a = cases_1[_i], actionCreator = _a.actionCreator, handler = _a.handler;
            if (typescript_fsa_1.isType(action, actionCreator)) {
                return handler(state, action);
            }
        }
        return state;
    };
}
//# sourceMappingURL=index.js.map