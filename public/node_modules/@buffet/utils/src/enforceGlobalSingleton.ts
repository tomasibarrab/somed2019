/* istanbul ignore file */

/**
 * ES modules are *intended* to be singletons, but this assumption can be broken by symlinks, version conflicts, and
 * misconfigurations in tooling. Use this function when it is imperative that a piece of state be globally unique in an
 * application.
 *
 * @param name - should be a globally unique key describing your singleton module
 * @param initializer - a function that will be run
 * @returns either the return value of your initializer, or the result of a previously created instance.
 */
export function enforceGlobalSingleton<T>(name: string, initializer: () => T): T {
  const safeName = `__buffet/${name}__`;
  const win = window as any;

  if (win[safeName] === undefined) {
    win[safeName] = initializer();
  } else {
    if (process.env.NODE_ENV === 'development') {
      console.warn('This module is intended to be a singleton, but it has been instantiated multiple times.');
    }
  }

  return win[safeName];
}
