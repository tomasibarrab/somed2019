import React from 'react';
import { storiesOf } from '@storybook/react';
import { Button, Props, Theme } from './src/Button';
import { BrowserRouter, Link } from 'react-router-dom';

const buffet = {
  componentName: '@buffet/button'
};

class ButtonStory extends React.Component<any, Props> {
  constructor(props: any) {
    super(props);

    this.state = {
      type: 'button',
      busy: false,
      disabled: false,
      size: 'large',
      onClick: this.onClick
    };
    this.toggleType = this.toggleType.bind(this);
    this.toggleSize = this.toggleSize.bind(this);
    this.toggleBusy = this.toggleBusy.bind(this);
    this.toggleDisabled = this.toggleDisabled.bind(this);
    this.renderButtonType = this.renderButtonType.bind(this);
  }

  onClick() {
    console.log('button clicked');
  }

  toggleType(e: React.ChangeEvent<HTMLSelectElement>) {
    const type = e.currentTarget.value as 'button' | 'link' | 'a';
    this.setState({ type });
  }

  toggleSize(e: React.ChangeEvent<HTMLSelectElement>) {
    const size = e.currentTarget.value as 'large' | 'small' | 'xsmall';
    this.setState({ size });
  }

  toggleBusy() {
    this.setState({ busy: !this.state.busy });
  }

  toggleDisabled() {
    this.setState({ disabled: !this.state.disabled });
  }

  renderButtonType(buttonType: any) {
    const themes: Theme[] = ['default', 'primary', 'publish', 'bare', 'hollow'];

    return themes.map(theme => {
      const commonProps = {
        busy: this.state.busy,
        disabled: this.state.disabled,
        key: theme,
        size: this.state.size,
        theme
      };

      switch (buttonType) {
        case 'button':
          return (
            <Button {...commonProps} onClick={this.onClick} type="button" testId="a-test-id">
              {theme}
            </Button>
          );

        case 'a':
          return (
            <Button {...commonProps} type="a" href="#">
              {theme}
            </Button>
          );

        case 'link':
          return (
            <Button {...commonProps} type="link" to="/">
              {theme}
            </Button>
          );

        default:
          return null;
      }
    });
  }

  render() {
    return (
      <BrowserRouter>
        <section style={{ padding: '20px', backgroundColor: 'white' }}>
          <div key="buttons" style={{ width: '800px' }}>
            {this.renderButtonType(this.state.type)}
            <Button type="link" theme="link" to="/" disabled={this.state.disabled} size="large">
              Link
            </Button>
          </div>
          <div key="toggleButtons" style={{ marginTop: '20px' }}>
            <select onChange={this.toggleType}>
              <option value="button">type: button</option>
              <option value="link">type: link</option>
              <option value="a">type: a</option>
            </select>
            <button onClick={this.toggleBusy}>Busy: {this.state.busy!.toString()}</button>
            <button onClick={this.toggleDisabled}>Disabled: {this.state.disabled!.toString()}</button>
            <select onChange={this.toggleSize}>
              <option value="large">size: large</option>
              <option value="small">size: small</option>
              <option value="xsmall">size: xsmall</option>
            </select>
          </div>
        </section>
      </BrowserRouter>
    );
  }
}

storiesOf('Button Story', module).add('the story of a button', () => {
    return <ButtonStory />;
  },
  { buffet }
);
