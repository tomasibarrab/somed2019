import React from 'react';
import { render, fireEvent, cleanup } from 'react-testing-library';
import { Button, Theme } from './Button';
import { BrowserRouter } from 'react-router-dom';

function renderButtonScenario(clickHandlerSpy: any) {
  return render(
    <Button type="button" onClick={clickHandlerSpy}>
      <p className="test-class-text">Press me</p>
    </Button>
  );
}

function renderSubmitButtonScenario(clickHandlerSpy: any) {
  return render(
    <Button type="button" htmltype="submit" onClick={clickHandlerSpy}>
      <p className="test-class-text">Press me</p>
    </Button>
  );
}

describe('<Button />', () => {
  afterEach(cleanup);
  describe('defaults', () => {
    it('should render as a button with default theme', () => {
      const clickHandlerSpy = jest.fn();
      const container = renderButtonScenario(clickHandlerSpy);
      expect(container).toBeTruthy();
    });
    it('should render a submit button with default theme', () => {
      const clickHandlerSpy = jest.fn();
      const container = renderSubmitButtonScenario(clickHandlerSpy);
      expect(container).toBeTruthy();
    });
  });

  describe('busy & disabled', () => {
    it('should invoke the callback when clicked', () => {
      const clickHandlerSpy = jest.fn();
      clickHandlerSpy.mockReset();
      const { container } = renderButtonScenario(clickHandlerSpy);
      fireEvent.click(container);
    });

    it('should not invoke the onClick handler when busy', () => {
      const clickHandlerSpy = jest.fn();
      clickHandlerSpy.mockReset();
      const { container, rerender } = renderButtonScenario(clickHandlerSpy);
      rerender(<Button onClick={clickHandlerSpy} type="button" busy />);
      fireEvent.click(container);
      // expect(clickHandlerSpy).not.toHaveBeenCalled(); // TODO: investigate the problem with fireEvent.click
    });

    it('should not invoke the onClick handler when disabled', () => {
      const clickHandlerSpy = jest.fn();
      clickHandlerSpy.mockReset();
      const { container, rerender } = renderButtonScenario(clickHandlerSpy);
      rerender(<Button onClick={clickHandlerSpy} type="button" disabled />);
      fireEvent.click(container);
      // expect(clickHandlerSpy).not.toHaveBeenCalled(); // TODO: investigate the problem with fireEvent.click
    });

    it('should render a busy link', () => {
      const clickHandlerSpy = jest.fn();
      clickHandlerSpy.mockReset();
      const { container } = render(
        <BrowserRouter>
          <Button type="link" to="/" disabled />
        </BrowserRouter>
      );
      fireEvent.click(container);
      // expect(clickHandlerSpy).not.toHaveBeenCalled(); // TODO: investigate the problem with fireEvent.click
    });

    it('should render a busy link', () => {
      const clickHandlerSpy = jest.fn();
      clickHandlerSpy.mockReset();
      const { container } = render(
        <BrowserRouter>
          <Button type="link" to="/" busy />
        </BrowserRouter>
      );
      fireEvent.click(container);
      // expect(clickHandlerSpy).not.toHaveBeenCalled(); // TODO: investigate the problem with fireEvent.click
    });
  });

  describe('check theme application', () => {
    // TODO: Add tests for 'link' type.  Need to figure out how to best add Router to test page
    const themes: Theme[] = ['default', 'primary', 'publish', 'bare', 'hollow', 'link'];
    themes.forEach(theme => {
      it(`should render as type 'button' with theme '${theme}'`, () => {
        const { container } = render(
          <Button onClick={jest.fn()} type="button" theme={theme}>
            <span>Test content for type: 'button' and theme: {theme}.</span>
          </Button>
        );
        const buttonElement = container.firstChild as HTMLButtonElement;
        expect(buttonElement.className.includes(theme)).toBe(true);
      });
    });
    themes.forEach(theme => {
      it(`should render as type 'link' with theme '${theme}'`, () => {
        const { container } = render(
          <BrowserRouter>
            <Button to="/" type="link" theme={theme}>
              <span>Test content for type: 'link' and theme: {theme}.</span>
            </Button>
          </BrowserRouter>
        );
        const buttonElement = container.firstChild as HTMLButtonElement;
        expect(buttonElement.className.includes(theme)).toBe(true);
      });
      themes.forEach(theme => {
        it(`should render as type 'a' with theme '${theme}'`, () => {
          const { container } = render(
            <Button href="#" type="a" theme={theme}>
              <span>Test content for type: 'a' and theme: {theme}.</span>
            </Button>
          );
          const buttonElement = container.firstChild as HTMLButtonElement;
          expect(buttonElement.className.includes(theme)).toBe(true);
        });
      });
    });
  });
});
