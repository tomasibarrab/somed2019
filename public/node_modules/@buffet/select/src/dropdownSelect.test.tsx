import React from 'react';
import { render, fireEvent } from 'react-testing-library';
import { DropdownSelect } from './dropdownSelect';
import { components } from 'react-select';

const Option = (props: any) => {
  return (
    <components.Option {...props}>
      <div>{props.data.label}</div>
      <div>{props.data.email}</div>
    </components.Option>
  );
};

function renderDefaultScenario(
  onInputChange: any,
  options: Array<object>,
  placeHolder: string,
  selectClassName: string,
  value: object,
  option: any,
  onChange: any
) {
  const result = render(
    <DropdownSelect
      options={options}
      placeholder={placeHolder}
      onInputChange={onInputChange}
      defaultValue={value}
      onChange={onChange}
      className={selectClassName}
      components={option ? { Option: option } : undefined}
    />
  );
  return result;
}

test('Should render a select dropdown', async () => {
  const result = await renderDefaultScenario(() => {}, [], '', ' ', {}, null, null);
  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render a select dropdown with custom option component', async () => {
  const result = await renderDefaultScenario(() => {}, [], '', ' ', {}, Option, null);
  expect(result.container.firstChild).toMatchSnapshot();
});

it('should invoke the callback when clicked', () => {
  const { container } = renderDefaultScenario(() => {}, [], '', ' ', {}, null, null);
  const inputElement = container.getElementsByTagName('input').item(0);

  if (inputElement) {
    fireEvent.change(inputElement, { target: { value: 'foo' } });
  }

  expect(container).toMatchSnapshot();
});
