import React from 'react';
import Select from 'react-select';
import { Icon } from '@buffet/icon';
import classNames from 'classnames/bind';
import './dropdownSelect.vanilla.css';
import styles from './select.css';

const cx = classNames.bind(styles);

export interface DefaultOptionType {
  label: string;
  value: string;
}

// This is a trick for extracting the props out of component
type SelectProps<OptionType> = Select<OptionType> extends React.Component<infer P> ? P : never;

interface Props<OptionType> extends SelectProps<OptionType> {}

export class DropdownSelect<OptionType = DefaultOptionType> extends React.Component<Props<OptionType>> {
  state = {
    isMenuOpen: false
  };

  handleMenuOpen = /* istanbul ignore next */ () => {
    this.setState({
      isMenuOpen: true
    });
  };

  handleMenuClose = /* istanbul ignore next */ () => {
    /* istanbul ignore next */
    this.setState({
      isMenuOpen: false
    });
  };

  render() {
    const DropdownIndicator = (props: any) => {
      return props.selectProps.menuIsOpen ? (
        <Icon iconId="chevronUp" className={cx('toggle-icon')} />
      ) : (
        <Icon iconId="chevronDown" className={cx('toggle-icon')} />
      );
    };

    const components = {
      DropdownIndicator,
      IndicatorSeparator: null,
      ...this.props.components
    };

    return (
      <Select<OptionType>
        {...this.props}
        className={cx('react-select-container', this.props.className, {
          'react-select-container--disabled': this.props.isDisabled,
          'react-select-container--focused': this.state.isMenuOpen
        })}
        classNamePrefix="react-select"
        components={components}
        onMenuOpen={this.handleMenuOpen}
        onMenuClose={this.handleMenuClose}
      />
    );
  }
}
