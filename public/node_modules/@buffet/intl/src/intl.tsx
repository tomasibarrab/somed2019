import React from 'react';
import { IntlProvider as ReactIntlProvider } from 'react-intl';

export interface MessagesByLocale {
  [locale: string]: Messages;
}

interface Messages {
  [key: string]: string;
}

declare global {
  interface Window {
    hydronator?: {
      microapp?: {
        lang?: string;
      };
    };
    opentable?: {
      locale?: string;
      restaurant?: {
        locale?: string;
      };
    };
  }
}

let globalMutableMessageMap: MessagesByLocale = {};
const FALLBACK_LOCALE = 'en-US';

function normalizeLocale(locale: string) {
  const [lang, country] = locale.split('-');
  return `${lang.toLowerCase()}-${country.toUpperCase()}`;
}

function getLangLocaleFromWindow() {
  // Buffet standard, use this form if you can
  if (window.hydronator && window.hydronator.microapp && window.hydronator.microapp.lang) {
    return window.hydronator.microapp.lang;
  }

  if (window.opentable) {
    // Backwards compatibility for GuestCenter Front of House
    if (window.opentable.locale) {
      return window.opentable.locale;
    }

    // Backwards compatibility for GuestCenter Back of House
    if (window.opentable.restaurant && window.opentable.restaurant.locale) {
      return window.opentable.restaurant.locale;
    }
  }

  // Fallback
  return FALLBACK_LOCALE;
}

export function getLocaleData() {
  const requestedLocale = getLangLocaleFromWindow();
  const [language, country] = requestedLocale.toLowerCase().split('-');
  return {
    locale: normalizeLocale(requestedLocale),
    language,
    country
  };
}

/**
 * Register messages into a singleton map. This allows components to register their own messages with a top level
 * provider.
 */
export function registerMessages(messagesByLocale: MessagesByLocale): void {
  for (const locale in messagesByLocale) {
    const normalizedlocale = normalizeLocale(locale);

    globalMutableMessageMap[normalizedlocale] = {
      ...(globalMutableMessageMap[normalizedlocale] || {}),
      ...messagesByLocale[locale]
    };
  }
}

/**
 * Clear all messages from the messages singleton. Mostly used for tests, but could be useful elsewhere?
 */
export function clearMessages() {
  globalMutableMessageMap = {};
}

/**
 * Component to be used in place of `IntlProvider` from `react-intl`. Handles pulling the locale from different data
 * island shapes, and using messages from a singleton message map.
 */
export class IntlProvider extends React.Component {
  public render() {
    const requestedLocale = normalizeLocale(getLangLocaleFromWindow());

    // Check if there are available messages for a local, if not fall back
    const locale = globalMutableMessageMap[requestedLocale] ? requestedLocale : FALLBACK_LOCALE;
    const messages = globalMutableMessageMap[locale];

    return (
      <ReactIntlProvider locale={locale} messages={messages}>
        {this.props.children}
      </ReactIntlProvider>
    );
  }
}
