import React from 'react';
import { storiesOf } from '@storybook/react';
import { withReadme } from 'storybook-readme';
import { LabeledCheckbox } from './src';
import README from './README.md';

interface State {
  [key: string]: boolean;
}

class LabeledCheckboxStory extends React.Component<any, State> {
  state: State = {
    a: false,
    b: false,
    c: false
  };

  toggleChecked = (id: string) => () => {
    this.setState({
      [id]: !this.state[id]
    });
  };

  parentStatus() {
    const { a, b, c } = this.state;
    if (a && b && c) {
      return 'checked';
    } else if (a || b || c) {
      return 'indeterminate';
    } else {
      return 'unchecked';
    }
  }

  handleParentClick = () => {
    const parentStatus = this.parentStatus();

    if (parentStatus === 'unchecked') {
      this.setState({ a: true, b: true, c: true });
    } else {
      this.setState({ a: false, b: false, c: false });
    }
  };

  render() {
    const parentStatus = this.parentStatus();
    const parentLabel = `${parentStatus === 'unchecked' ? 'Check' : 'Uncheck'} All`;

    return (
      <div style={{ padding: '20px', maxWidth: '600px', backgroundColor: 'white' }}>
        <h1>Clickable</h1>
        <LabeledCheckbox
          id="clickable"
          checked={parentStatus === 'checked'}
          indeterminate={parentStatus === 'indeterminate'}
          label={parentLabel}
          onClick={this.handleParentClick}
        />
        <ul style={{ listStyle: 'none', marginTop: '0', paddingLeft: '16px' }}>
          <li>
            <LabeledCheckbox id="clickable" checked={this.state.a} label="Option A" onClick={this.toggleChecked('a')} />
          </li>
          <li>
            <LabeledCheckbox id="clickable" checked={this.state.b} label="Option B" onClick={this.toggleChecked('b')} />
          </li>
          <li>
            <LabeledCheckbox id="clickable" checked={this.state.c} label="Option C" onClick={this.toggleChecked('c')} />
          </li>
        </ul>

        <h1>Normal States (Non-interactive)</h1>
        <LabeledCheckbox id="checked" checked={true} label="Checked" onClick={() => {}} />
        <br />
        <LabeledCheckbox
          id="indeterminate"
          checked={true}
          indeterminate={true}
          label="Indeterminate"
          onClick={() => {}}
        />
        <br />
        <LabeledCheckbox id="unchcked" checked={false} label="Unchecked" onClick={() => {}} />
        <br />
        <br />
        <h1>Disabled States (Non-interactive)</h1>
        <LabeledCheckbox id="disabled-checked" disabled checked={true} label="Checked" onClick={() => {}} />
        <br />
        <LabeledCheckbox
          id="disabled-indeterminate"
          disabled
          checked={true}
          indeterminate={true}
          label="Indeterminate"
          onClick={() => {}}
        />
        <br />
        <LabeledCheckbox id="disabled-unchcked" disabled checked={false} label="Unchecked" onClick={() => {}} />
      </div>
    );
  }
}

const buffet = {
  componentName: '@buffet/checkbox'
};

storiesOf('Checkbox', module)
  .addDecorator(withReadme(README))
  .add('Labeled Checkbox', () => {
    return <LabeledCheckboxStory />;
  },
  { buffet });
