import React from 'react';
import { withReadme } from 'storybook-readme';
import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { withKnobs, number, boolean } from '@storybook/addon-knobs';

import { Button } from '../button/src';
import { AlertMessage } from '../alert-message/src';
import { Notify } from './src/index';
import README from './README.md';

const buffet = {
  componentName: '@buffet/notify'
};

interface StoryProps {
  delay: number;
  autohide: boolean;
}
const StoryComponent = ({ delay, autohide }: StoryProps) => {
  const [notify, setNotify] = React.useState(false);
  const [type, setType] = React.useState<'success' | 'error'>('success');
  const margin = '16px';

  function handleNotify() {
    setType('success');
    setNotify(true);
  }
  function handleError() {
    setType('error');
    setNotify(true);
  }
  function handleClose() {
    setNotify(false);
  }
  function handleChangeTransition(visibility: boolean) {
    console.log('Visibility changed: ', visibility);
    setNotify(visibility);
  }

  return (
    <div style={{ margin }}>
      <Button type="button" theme="default" onClick={handleNotify}>
        Show notification
      </Button>
      <span> </span>
      <Button type="button" theme="primary" onClick={handleError}>
        Show error
      </Button>
      <p>The Notification is {notify ? 'open' : 'closed'}</p>
      <Notify show={notify} autohide={autohide} delay={delay} onTransitioned={handleChangeTransition}>
        <AlertMessage
          id="notification"
          iconId="negative"
          type={type}
          message="Notified!"
          onClose={autohide ? undefined : handleClose}
        />
      </Notify>
    </div>
  );
};

storiesOf('Notify', module)
  .addDecorator(withKnobs)
  .addDecorator(withReadme(README))
  .add('Notify', () => {
    const delay = number('Delay', 5);
    const autohide = boolean('Auto Hide', true);
    return <StoryComponent delay={delay} autohide={autohide} />;
  },
  { buffet });
