import React from 'react';
import { render, act, fireEvent } from 'react-testing-library';

import { Notify } from './Notify';

describe('Notify', () => {
  const defTransEnd = jest.fn();

  function renderNotify(show: boolean, autohide = false, handleTransitionEnd?: (vis: boolean) => void) {
    return (
      <Notify show={show} autohide={autohide} delay={0} onTransitioned={handleTransitionEnd}>
        {visible => (visible ? <p>Message</p> : null)}
      </Notify>
    );
  }

  function simpleRenderNotify(show: boolean) {
    return (
      <Notify show={show} autohide={false} delay={0}>
        <p>Message</p>
      </Notify>
    );
  }

  beforeAll(() => {
    jest.useFakeTimers();
  });

  test('should render notification message using render prop', async () => {
    const result = await render(renderNotify(true));
    const msg = result.queryByText('Message');
    expect(msg).not.toBe(null);
  });

  test('should render notification message using children', async () => {
    const result = await render(simpleRenderNotify(true));
    const msg = result.queryByText('Message');
    expect(msg).not.toBe(null);
  });

  test('should NOT render notification message using render prop', async () => {
    const result = await render(renderNotify(false));
    const msg = result.queryByText('Message');
    expect(msg).toBe(null);
  });

  test('should render notification message and autohide', async () => {
    const { queryByText, container, getByRole } = await render(renderNotify(true, true, defTransEnd));
    act(() => {
      jest.runAllTimers();
      fireEvent.transitionEnd(getByRole('message'), { propertyName: 'opacity' });
    });
    const msg = queryByText('Message');
    expect(msg).toBe(null);
  });
});
