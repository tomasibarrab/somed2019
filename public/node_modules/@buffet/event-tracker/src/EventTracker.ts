/// <reference types="@types/google.analytics" />
import { Scope } from '@buffet/scope-service';
import {
  EventQueue,
  TrackerMethods,
  EventTrackerArgs,
  EventConfig,
  SendExceptionOptions,
  SendEventOptions,
  SendTimingOptions
} from '../types';

/* eslint-disable no-console */
class EventTracker {
  isEnabled = false;
  eventQueue: EventQueue = [];
  constructor() {
    this.setDimensions(window.gcScope);
  }

  isGoogleAnalyticsLoaded(): boolean {
    return Boolean(Object.hasOwnProperty.call(window, 'ga') && typeof ga.getAll === 'function');
  }

  track(method: TrackerMethods, ...trackArgs: EventTrackerArgs) {
    const trackers = ga.getAll && ga.getAll();
    const tracker: UniversalAnalytics.Tracker = trackers && trackers[0];

    if (tracker) {
      tracker[method](...trackArgs);
    } else {
      console.error(
        'Unable to track. GA tracker not defined for method: ',
        method,
        ', and tracking arguments: ',
        ...trackArgs
      );
    }
  }

  static getTime() {
    return window.performance ? window.performance.now() : Date.now();
  }

  setDimensions(scope: Scope = { type: 'none', id: undefined }) {
    const { id, type } = scope;
    const safeType = type.toLowerCase();

    if (safeType === 'group') {
      this.queue('set', 'dimension1', id);
    } else if (safeType === 'restaurant') {
      this.queue('set', 'dimension2', id);
    }
  }

  enable() {
    this.isEnabled = true;
    this.replayQueuedEvents();
  }

  disable() {
    this.isEnabled = false;
  }

  isReady() {
    return this.isEnabled && this.isGoogleAnalyticsLoaded();
  }

  queue(...args: EventConfig) {
    const { search } = window.location;
    const safeSearch = search || '';
    if (safeSearch.includes('debug=true')) {
      console.info('QUEUED EventTracker', ...args);
    }

    this.eventQueue.push(args);
    this.replayQueuedEvents();
  }

  replayQueuedEvents() {
    if (!this.isReady()) {
      return;
    }

    this.eventQueue.forEach(args => this.track(...args));
    this.eventQueue = [];
  }

  sendPageView(url: string) {
    this.queue('set', 'page', url);
    this.queue('send', 'pageview');
  }

  // @note https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions
  sendException({ description: exDescription, fatal: exFatal }: SendExceptionOptions) {
    return this.queue('send', 'exception', { exDescription, exFatal });
  }

  // @note https://developers.google.com/analytics/devguides/collection/analyticsjs/events
  sendEvent(
    { category: eventCategory, action: eventAction, label: eventLabel, value: eventValue }: SendEventOptions,
    customMetrics: { [key: string]: string } = {}
  ) {
    this.queue('send', 'event', {
      eventCategory,
      eventAction,
      eventLabel,
      eventValue,
      ...customMetrics
    });
  }

  createTimer(category: string) {
    const startTime = EventTracker.getTime();

    return (variable: string, label?: string) => {
      const now = EventTracker.getTime();
      const diff = now - startTime;
      const value = Math.round(diff);

      this.sendTiming({
        category,
        variable,
        value,
        label
      });
    };
  }

  // @note https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings
  sendTiming({
    category: timingCategory,
    variable: timingVar,
    value: timingValue,
    label: timingLabel
  }: SendTimingOptions) {
    if (Number.isNaN(timingValue)) {
      return console.error('EventTracker.sendTiming() requires a numeric "value" property');
    }

    this.queue('send', 'timing', {
      timingCategory,
      timingVar,
      timingValue,
      timingLabel
    });
  }
}

export default EventTracker;
