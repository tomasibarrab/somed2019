import React from 'react';
import { render, cleanup, fireEvent } from 'react-testing-library';
import { Input, InputProps } from './Input';

function renderScenario(props: Partial<InputProps> = {}) {
  const defaultProps = {
    onChange: jest.fn()
  };

  const mergedProps = {
    ...defaultProps,
    ...props
  };

  return render(<Input {...mergedProps} />);
}

function getInputElement(props: Partial<InputProps> = {}) {
  const ariaLabel = 'input';
  const { getByLabelText } = renderScenario({ ...props, 'aria-label': ariaLabel });
  const inputElement = getByLabelText(ariaLabel) as HTMLInputElement;

  return inputElement;
}

describe('Input', async () => {
  afterEach(() => {
    cleanup();
  });

  it('Should set placeholder on the input element', async () => {
    const inputElement = getInputElement({ placeholder: 'foo' });
    expect(inputElement.placeholder).toBe('foo');
  });

  it('Should set value on the input element', async () => {
    const inputElement = getInputElement({ value: 'foo' });
    expect(inputElement.value).toBe('foo');
  });

  it('Should set disabled on the input element', async () => {
    const inputElement = getInputElement({ disabled: true });
    expect(inputElement.disabled).toBe(true);
  });

  it('Should default type to "text"', async () => {
    const inputElement = getInputElement();
    expect(inputElement.type).toBe('text');
  });

  it('Should override default type when one is passed in', async () => {
    const inputElement = getInputElement({ type: 'email' });
    expect(inputElement.type).toBe('email');
  });

  it("Should append a passed className to the end of the input element's className list", async () => {
    const inputElement = getInputElement({ className: 'customClass' });
    const classes = inputElement.className.split(' ');
    expect(classes[classes.length - 1]).toBe('customClass');
  });

  it('Should show error text if present', async () => {
    const { getByText } = renderScenario({ errorText: 'error' });
    expect(getByText('error')).toBeDefined();
  });

  it('Should focus the element when autoFocus is true', async () => {
    const inputElement = getInputElement({ autoFocus: true });
    expect(document.activeElement).toEqual(inputElement);
  });

  // TODO: Fix this test with fireEvent once we upgrade to react-testing-library 4+
  xit('Should call change handler on input', () => {
    const onChange = jest.fn();
    const inputElement = getInputElement({ onChange });
    inputElement.value = 'foo';
    fireEvent.change(inputElement);
    expect(onChange).toHaveBeenCalledWith('foo');
  });
});
