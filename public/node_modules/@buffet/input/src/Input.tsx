import React from 'react';
import classnames from 'classnames/bind';
import styles from './Input.css';

const cx = classnames.bind(styles);

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  errorText?: string;
  valid?: boolean;

  // This is optional on the extended type, but we are overriding to make it required
  onChange(e: React.ChangeEvent<HTMLInputElement>): void;
}

export class Input extends React.Component<InputProps> {
  static defaultProps = {
    type: 'text'
  };

  /**
  * This function imitates the native input element's `autoFocus` prop. Because the element does not actually exist
  * during page render, the browser will not focus. We set this as the `ref` callback because this is called when we're
  * guaranteed to have an element.
  */
  setFocus = (el: HTMLInputElement) => {
    if (this.props.autoFocus && el) {
      el.focus();
    }
  };

  render() {
    const { className, valid, errorText, ...rest } = this.props;

    return (
      <div>
        <input
          {...rest}
          ref={this.setFocus}
          className={cx(styles.gcaInput, { invalid: !valid, disabled: this.props.disabled }, className)}
        />
        {errorText && <div className={styles.validationError}>{errorText}</div>}
      </div>
    );
  }
}
