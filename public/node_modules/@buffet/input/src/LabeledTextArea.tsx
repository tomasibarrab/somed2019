import React from 'react';
import classnames from 'classnames/bind';
import styles from './LabeledTextArea.css';

const cx = classnames.bind(styles);

export interface LabeledTextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  testId?: string;
  statusText?: string;
  id?: string;
  label: string;
  state?: 'default' | 'error' | 'success' | 'disabled';

  // This is optional on the extended type, but we are overriding to make it required
  onChange(e: React.ChangeEvent<HTMLTextAreaElement>): void;
}

export const LabeledTextArea = React.forwardRef<HTMLTextAreaElement, LabeledTextAreaProps>((props, ref) => {
  const { className, value, statusText, label, state, testId, ...rest } = props;
  const textAreaId = props.id || `buffet__labeledtextarea--${Date.now()}`;
  const showLabel = value;
  const disabled = state === 'disabled';

  const textAreaClassName = cx(showLabel ? styles.floatingLabel : styles.noLabel, state, className);

  const statusTextClassName = cx({
    statusInfo: state !== 'error' && state !== 'success',
    statusSuccess: state === 'success',
    statusError: state === 'error'
  });

  return (
    <div className={cx('inputWrapper')}>
      {showLabel && (
        <label className={cx('label')} htmlFor={textAreaId}>
          {label}
        </label>
      )}

      <textarea
        {...rest}
        className={textAreaClassName}
        data-testid={testId}
        disabled={disabled}
        id={textAreaId}
        name={textAreaId}
        placeholder={label}
        ref={ref}
        value={value}
      />

      {statusText && <div className={statusTextClassName}>{statusText}</div>}
    </div>
  );
});

LabeledTextArea.defaultProps = {
  maxLength: 500,
  rows: 5,
  state: 'default'
};
