import React from 'react';
import { render, cleanup } from 'react-testing-library';
import { LabeledTextArea, LabeledTextAreaProps } from './LabeledTextArea';

function renderScenario(props: Partial<LabeledTextAreaProps> = {}) {
  const defaultProps = {
    label: 'Label',
    onChange: jest.fn()
  };

  const mergedProps = {
    ...defaultProps,
    ...props
  };

  return render(<LabeledTextArea {...mergedProps} />);
}

function getTextAreaElement(props: Partial<LabeledTextAreaProps> = {}) {
  const id = 'test-textarea';
  const { getByTestId } = renderScenario({ ...props, testId: id });
  const inputElement = getByTestId(id) as HTMLTextAreaElement;

  return inputElement;
}

describe('LabeledTextArea', async () => {
  afterEach(() => {
    cleanup();
  });

  it('Should set value on the LabeledTextArea element', async () => {
    const textAreaElement = getTextAreaElement({ value: 'foo' });
    expect(textAreaElement.value).toBe('foo');
  });

  it('Should set disabled on the LabeledTextArea element', async () => {
    const textAreaElement = getTextAreaElement({ state: 'disabled' });
    expect(textAreaElement.disabled).toBe(true);
  });

  it("Should append a passed className to the end of the LabeledTextArea element's className list", async () => {
    const textAreaElement = getTextAreaElement({ className: 'customClass' });
    const classes = textAreaElement.className.split(' ');
    expect(classes[classes.length - 1]).toBe('customClass');
  });

  it('Should show error text if present', async () => {
    const { getByText } = renderScenario({ statusText: 'error' });
    expect(getByText('error')).toBeDefined();
  });

  it('Should focus the element when autoFocus is true', async () => {
    const textAreaElement = getTextAreaElement({ autoFocus: true });
    expect(document.activeElement).toEqual(textAreaElement);
  });
});
