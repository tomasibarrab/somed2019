import React from 'react';
import { EmptyPanel } from '../EmptyPanel/EmptyPanel';
import { ErrorPanel } from '../ErrorPanel/ErrorPanel';
import { AsyncState } from '../../service/ScopeSelector.types';
import { injectIntl, InjectedIntlProps, FormattedMessage } from 'react-intl';
import styles from './SearchResults.css';

type TitleType = 'none' | 'restaurants' | 'groups' | 'recentRestaurants';
type DisplayState = 'error' | 'empty' | 'results';

interface ViewProps {
  items: any[];
  titleType: TitleType;
  searchState?: AsyncState<any>;
}

interface Props extends ViewProps, InjectedIntlProps {}

export class SearchResultsView extends React.Component<Props> {
  render() {
    return (
      <div>
        {this.getTitle()}
        {this.getDisplayChildren()}
      </div>
    );
  }

  private getIntlKeys(titleType: TitleType): { titleKey: string; emptyKey: string } {
    let emptyKey = 'scopeSelector.noMatches';
    let titleKey = '';
    if (titleType === 'restaurants') {
      titleKey = 'scopeSelector.restaurants';
    } else if (titleType === 'groups') {
      titleKey = 'scopeSelector.groups';
    } else if (titleType === 'recentRestaurants') {
      titleKey = 'scopeSelector.recentRestaurants';
      emptyKey = 'scopeSelector.noRecentRestaurants';
    }

    return { titleKey, emptyKey };
  }

  private getDisplayState({ searchState, items }: ViewProps): DisplayState {
    if (searchState && searchState.status === 'failed') return 'error';
    if (items.length === 0) return 'empty';
    return 'results';
  }

  private getTitle(): React.ReactNode {
    const { titleType } = this.props;
    const { titleKey } = this.getIntlKeys(titleType);

    return titleType !== 'none' ? (
      <div className={styles.title}>
        <FormattedMessage id={titleKey} />
      </div>
    ) : null;
  }

  private getDisplayChildren(): React.ReactNode {
    const { titleType, children, intl } = this.props;
    const displayState = this.getDisplayState(this.props);
    const { emptyKey } = this.getIntlKeys(titleType);
    let displayChildren = null;

    if (displayState === 'error') {
      displayChildren = <ErrorPanel />;
    } else if (displayState === 'empty') {
      displayChildren = <EmptyPanel text={intl.formatMessage({ id: emptyKey })} />;
    } else {
      displayChildren = children;
    }

    return displayChildren;
  }
}

export const SearchResults = injectIntl<ViewProps>(SearchResultsView);
