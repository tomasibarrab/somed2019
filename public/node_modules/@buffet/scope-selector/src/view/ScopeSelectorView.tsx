import React from 'react';
import { ScopeSelectorInterface } from '../service/ScopeSelectorInner';
import { ScopeSelectorConsumer } from '../service/ScopeSelectorService';
import { AsyncState } from '../service/ScopeSelector.types';
import { CurrentUserConsumer, User } from '@buffet/current-user-context';
import { LoadingPanel } from './LoadingPanel/LoadingPanel';
import { SearchBox } from './SearchBox/SearchBox';
import { registerMessages } from '@buffet/intl';
import { SearchResults } from './SearchResults/SearchResults';
import styles from './ScopeSelectorView.css';
import { RidList } from './ItemList/RidList';
import { GroupList } from './ItemList/GroupList';

export const langLocales = [
  'ca-ES',
  'de-CH',
  'de-DE',
  'en-AU',
  'en-GB',
  'en-IE',
  'en-US',
  'es-ES',
  'es-MX',
  'fr-CA',
  'fr-FR',
  'it-IT',
  'ja-JP',
  'nl-NL',
  'pt-BR',
  'zh-CN'
];

const messages = langLocales.reduce((acc: any, langLocale: any) => {
  acc[langLocale] = require(`../../translations/${langLocale}/scope-selector.json`);
  return acc;
}, {});

registerMessages(messages);

interface DisplayInterface extends ScopeSelectorInterface {
  userContext: AsyncState<User>;
}

const SHOW_SEARCHBOX_THRESHOLD = 5;

export class ScopeSelectorView extends React.Component {
  render() {
    return (
      <CurrentUserConsumer>
        {userContext => (
          <ScopeSelectorConsumer>
            {scopeSelector => {
              const { currentSearch, setSearch, ridCount, groupCount } = scopeSelector;

              const showSearchbox = ridCount + groupCount > SHOW_SEARCHBOX_THRESHOLD;
              return (
                <>
                  {showSearchbox && <SearchBox value={currentSearch} onChange={setSearch} />}
                  <div className={styles.container}>
                    {this.getDisplayComponents({ ...scopeSelector, userContext: userContext })}
                  </div>
                </>
              );
            }}
          </ScopeSelectorConsumer>
        )}
      </CurrentUserConsumer>
    );
  }

  private getDisplayComponents(displayProps: DisplayInterface): JSX.Element[] {
    let elements: JSX.Element[] = [];

    if (this.isLoading(displayProps)) {
      elements.push(<LoadingPanel />);
      return elements;
    }

    this.addGroupDisplayComponent(elements, displayProps);
    this.addRestaurantDisplayComponent(elements, displayProps);

    return elements;
  }

  private isLoading({ restaurantSearchState, groupSearchState, userContext }: DisplayInterface): boolean {
    return (
      restaurantSearchState.status === 'init' ||
      restaurantSearchState.status === 'started' ||
      groupSearchState.status === 'init' ||
      groupSearchState.status === 'started' ||
      userContext.status === 'init' ||
      userContext.status === 'started'
    );
  }

  private addGroupDisplayComponent(
    elements: JSX.Element[],
    { groupSearchState, groupCount, currentGroupId, selectGroup, ridCount, restaurantSearchState }: DisplayInterface
  ): void {
    let groupSearchResults = groupSearchState.data || [];

    if ((groupSearchState.status === 'done' && groupCount > 0) || groupSearchState.status === 'failed') {
      elements.push(
        <SearchResults
          items={groupSearchResults}
          titleType={ridCount === 0 && restaurantSearchState.status !== 'failed' ? 'none' : 'groups'}
          searchState={groupSearchState}
          key="group-results"
        >
          <GroupList groups={groupSearchResults} currentGroupId={currentGroupId} onClick={selectGroup} />
        </SearchResults>
      );
    }
  }

  private addRestaurantDisplayComponent(
    elements: JSX.Element[],
    {
      restaurantSearchState,
      userHasManyRids,
      currentSearch,
      recentRestaurants,
      currentRid,
      selectRid,
      groupCount,
      groupSearchState
    }: DisplayInterface
  ): void {
    let restaurantSearchResults = restaurantSearchState.data || [];

    if (restaurantSearchState.status === 'done' && userHasManyRids && currentSearch === '') {
      elements.push(
        <SearchResults items={recentRestaurants} titleType={'recentRestaurants'} key="recent-restaurants">
          <RidList rids={recentRestaurants} currentRid={currentRid} onClick={selectRid} />
        </SearchResults>
      );
    } else if (restaurantSearchState.status === 'done' || restaurantSearchState.status === 'failed') {
      elements.push(
        <SearchResults
          items={restaurantSearchResults}
          titleType={groupCount === 0 && groupSearchState.status !== 'failed' ? 'none' : 'restaurants'}
          searchState={restaurantSearchState}
          key="restaurant-results"
        >
          <RidList rids={restaurantSearchResults} currentRid={currentRid} onClick={selectRid} />
        </SearchResults>
      );
    }
  }
}
