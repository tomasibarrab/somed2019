import { normalizeRestaurant, mapRestaurants } from './RestaurantMapper';

const defaultOutput = {
  rid: 123,
  name: 'Foo',
  city: 'Barville',
  country: 'BZ',
  isTestRestaurant: true
};

describe('RestaurantMapper', () => {
  const scenarios = [
    {
      name: 'Should map a restaurant search item',
      input: {
        rid: 123,
        name: 'Foo',
        addressResponse: { city: 'Barville', country: 'BZ' },
        productType: ['ERB', 'Private_Dining', 'iPad', 'Guest_Center'],
        testRestaurant: true
      }
    },
    {
      name: 'Should map a context item',
      input: {
        rid: 123,
        name: 'Foo',
        address: { city: 'Barville', countryCode: 'BZ' },
        productType: 'ERB',
        isTestRestaurant: true
      }
    },
    {
      name: 'Should map a switch RID item',
      input: {
        rid: 123,
        name: 'Foo',
        address: { city: 'Barville', countryCode: 'BZ' },
        productType: 'ERB',
        isTestRestaurant: true
      }
    },
    {
      name: 'Should map a stored recent RID item',
      input: {
        rid: 123,
        name: 'Foo',
        city: 'Barville',
        country: 'BZ',
        productType: 'ERB',
        isTestRestaurant: true
      }
    },
    {
      name: 'Should map a restaurant with a null address',
      input: {
        rid: 123,
        name: 'Foo',
        address: null
      },
      output: {
        rid: 123,
        name: 'Foo',
        isTestRestaurant: false
      }
    },
    {
      name: 'Should map a restaurant with a null addressResponse',
      input: {
        rid: 123,
        name: 'Foo',
        addressResponse: null
      },
      output: {
        rid: 123,
        name: 'Foo',
        isTestRestaurant: false
      }
    }
  ];

  scenarios.forEach(scenario => {
    it(scenario.name, () => {
      expect(normalizeRestaurant(scenario.input)).toEqual(scenario.output || defaultOutput);
    });
  });

  it('Should map over restaurants with no current rid', () => {
    expect(mapRestaurants([scenarios[4].input, scenarios[5].input])).toEqual([
      scenarios[4].output,
      scenarios[5].output
    ]);
  });
});
