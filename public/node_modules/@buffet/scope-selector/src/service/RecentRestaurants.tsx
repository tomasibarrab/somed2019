import React from 'react';
import { BaseRestaurant, Restaurant, RestaurantDTO } from './ScopeSelector.types';
import { CurrentUserConsumer } from '@buffet/current-user-context';
import { CurrentRestaurantConsumer } from '@buffet/current-restaurant-context';
import { normalizeRestaurant } from './RestaurantMapper';

export const LOCAL_STORAGE_KEY = 'gc.UserRecentRestaurants';
export const MAX_RECENT_RESTAURANTS = 10;

export interface RestaurantsByUserId {
  [userId: string]: RestaurantDTO[];
}

interface RecentRestaurantsRenderProps {
  restaurants: Restaurant[];
  addRestaurant(restaurant: Restaurant): void;
}

type RenderCallback = (api: RecentRestaurantsRenderProps) => JSX.Element;

interface Props {
  children: RenderCallback;
}

export class RecentRestaurants extends React.Component<Props> {
  public render() {
    return (
      <CurrentUserConsumer>
        {userContext => (
          <CurrentRestaurantConsumer>
            {restaurantContext => (
              <RecentRestaurantsInner
                userId={userContext.status === 'done' && userContext.data ? userContext.data.urn : undefined}
                currentRestaurant={
                  restaurantContext.status === 'done' && restaurantContext.data
                    ? normalizeRestaurant(restaurantContext.data)
                    : undefined
                }
                children={this.props.children}
              />
            )}
          </CurrentRestaurantConsumer>
        )}
      </CurrentUserConsumer>
    );
  }
}

interface InnerProps {
  children: RenderCallback;
  userId?: string;
  currentRestaurant?: RestaurantDTO;
}

interface InnerState {
  restaurants: Restaurant[];
}

class RecentRestaurantsInner extends React.Component<InnerProps, InnerState> {
  state: InnerState = {
    restaurants: []
  };

  static getDerivedStateFromProps(props: InnerProps, state: InnerState) {
    let restaurants: Restaurant[];
    if (props.userId === undefined) return state;

    restaurants = RecentRestaurantsInner.getRestaurantsByUserId(props.userId);

    if (props.currentRestaurant) {
      restaurants = RecentRestaurantsInner.addRestaurantToList(
        normalizeRestaurant(props.currentRestaurant),
        restaurants
      );

      RecentRestaurantsInner.setRestaurants(props.userId, restaurants);
    }

    return {
      restaurants
    };
  }

  public render() {
    return this.props.children({
      restaurants: this.state.restaurants,
      addRestaurant: this.addRestaurant
    });
  }

  public addRestaurant = (restaurant: Restaurant): void => {
    const { userId } = this.props;

    if (userId === undefined) {
      console.warn('addRestaurant() was called without a userId. Aborting.');
      return;
    }

    const restaurants = RecentRestaurantsInner.addRestaurantToList(restaurant, this.state.restaurants);

    RecentRestaurantsInner.setRestaurants(userId, restaurants);

    this.setState({
      restaurants
    });
  };

  static getRestaurantsByUserId(userId: string): Restaurant[] {
    const restaurantsByUserId = RecentRestaurantsInner.getRestaurants();
    const restaurants = restaurantsByUserId[userId] || [];
    return restaurants.map(normalizeRestaurant);
  }

  static getRestaurants(): RestaurantsByUserId {
    let restaurantsByUserId;

    try {
      restaurantsByUserId = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY) || '{}');
    } catch (e) {
      restaurantsByUserId = {};
    }

    return restaurantsByUserId;
  }

  static setRestaurants(userId: string, restaurants: Restaurant[]): void {
    const restaurantData = RecentRestaurantsInner.getRestaurants();
    restaurantData[userId] = restaurants;

    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(restaurantData));
  }

  static addRestaurantToList<T extends BaseRestaurant>(restaurant: T, list: T[]): T[] {
    return [restaurant].concat(list.filter(item => item.rid !== restaurant.rid)).slice(0, MAX_RECENT_RESTAURANTS);
  }
}
