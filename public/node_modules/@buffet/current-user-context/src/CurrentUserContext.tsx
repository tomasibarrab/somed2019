import React from 'react';
import request from 'superagent';
import { AsyncState } from './types/AsyncState';
import { enforceGlobalSingleton } from '@buffet/utils';

export interface User {
  userName: string;
  firstName: string;
  lastName: string;
  role: string;
  isInternalUser: boolean;
  otrLoginId: number;
  urn: string;
}

export type State = AsyncState<User>;

const initialState: State = {
  status: 'init',
  data: undefined
};

export const USER_CONTEXT_URL = '/gateway/proxies/gcrestaurant/api/userContext';

const { Provider, Consumer } = enforceGlobalSingleton('CurrentUserContext', () =>
  React.createContext<State>(initialState)
);

export class CurrentUserProvider extends React.Component<{}, State> {
  state = initialState;

  componentDidMount() {
    this.setState({
      status: 'started'
    });

    request
      .get(USER_CONTEXT_URL)
      .then(res => {
        this.setState({
          status: 'done',
          data: res.body
        });
        this.setSessionStorage(res.body);
      })
      .catch(res => {
        this.setState({
          status: 'failed'
        });
      });
  }

  render() {
    return <Provider value={this.state}>{this.props.children}</Provider>;
  }

  private setSessionStorage(userData: User) {
    try {
      // Write user data to session storage under key 'user'
      const sessionDataValue = JSON.stringify(userData);
      sessionStorage.setItem('user', sessionDataValue);

      // Announce to anyone listening that the data has been stored successfully
      /* istanbul ignore else */
      if (typeof Event === 'function') {
        // ES6 Setup
        const globalEvent = new Event('updateSessionStorage.user', {
          bubbles: true,
          cancelable: false
        });
        document.dispatchEvent(globalEvent);
      } else if (typeof Event === 'object') {
        // ES5 Setup
        const globalEvent = document.createEvent('Event');
        globalEvent.initEvent('updateSessionStorage.user', true, false);
        document.dispatchEvent(globalEvent);
      }
    } catch (err) {
      /* istanbul ignore next */
      console.log('CurrentUserContext: Error while writing user to SessionStorage', err);
    }
  }
}

export { Consumer as CurrentUserConsumer, Provider as TestCurrentUserProvider };
