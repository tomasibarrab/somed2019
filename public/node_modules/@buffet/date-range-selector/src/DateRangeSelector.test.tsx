import moment from 'moment';
import React from 'react';
import { render, fireEvent } from 'react-testing-library';
import { DateRangeSelector } from './DateRangeSelector';

describe('DateRangeSelector', () => {
  it('Should show DateRangeSelector', () => {
    const props = {
      startDate: moment.utc('2017-05-04T00:58:43.488Z'),
      endDate: moment.utc('2017-05-04T00:58:43.488Z'),
      locale: 'en-US',
      title: 'test title',
      updateFocusedDate: () => {},
      updateDate: () => {},
      startRange: moment.utc('2015-05-04T00:58:43.488Z'),
      endRange: moment.utc('2020-05-04T00:58:43.488Z'),
      buttons: [
        {
          id: 'test-button',
          action: () => {},
          label: 'test button'
        }
      ],
      applyButton: {
        id: 'apply',
        action: () => {},
        label: 'Apply'
      },
      radioButtons: [
        {
          value: 'test-radio-button',
          label: 'test radio button'
        }
      ],
      onRadioButtonChange: () => {},
      selectedRadioButton: 'test-radio-button'
    };

    const { container } = render(<DateRangeSelector {...props} />);
    expect(container.firstChild).toMatchSnapshot();
  });

  it('Should show DateRangeSelector without a date range', () => {
    const props = {
      startDate: moment.utc('2017-05-04T00:58:43.488Z'),
      endDate: moment.utc('2017-05-04T00:58:43.488Z'),
      locale: 'en-US',
      focusedDate: 'startDate',
      updateFocusedDate: () => {},
      updateDate: () => {}
    };

    const { container } = render(<DateRangeSelector {...props} />);
    expect(container.firstChild).toMatchSnapshot();
  });

  it('Should show DateRangeSelector with today defined', () => {
    const testBtnSpy = jest.fn();
    const updateFocusedDateSpy = jest.fn();
    const updateDateSpy = jest.fn();
    const radioBtnSpy = jest.fn();

    const props = {
      startDate: moment.utc('2017-05-04T00:58:43.488Z'),
      endDate: moment.utc('2017-05-05T00:58:43.488Z'),
      locale: 'en-US',
      focusedDate: 'endDate',
      today: moment.utc(),
      updateFocusedDate: updateFocusedDateSpy,
      updateDate: updateDateSpy,
      buttons: [
        {
          id: 'test-button',
          action: testBtnSpy,
          label: 'test button'
        }
      ],
      radioButtons: [
        {
          value: 'test-radio-button',
          label: 'test radio button'
        }
      ],
      onRadioButtonChange: radioBtnSpy,
      selectedRadioButton: 'test-radio-button'
    };

    const { container, getByText } = render(<DateRangeSelector {...props} />);

    expect(getByText('05/05/2017')).toBeTruthy();
    fireEvent.click(getByText('05/05/2017'));

    fireEvent.click(getByText('05/04/2017'));
    expect(updateFocusedDateSpy).toHaveBeenCalledTimes(2);

    fireEvent.click(getByText('15'));
    expect(updateDateSpy).toHaveBeenCalledTimes(1);

    fireEvent.click(getByText('test button'));
    expect(testBtnSpy).toHaveBeenCalledTimes(1);

    fireEvent.click(getByText('test radio button'));
    expect(radioBtnSpy).toHaveBeenCalledTimes(1);

    expect(container.firstChild).toMatchSnapshot();
  });

  it('Should show DateRangeSelector without start or end date', () => {
    const props = {
      updateFocusedDate: () => {},
      updateDate: () => {}
    };

    const { getByText } = render(<DateRangeSelector {...props} />);
    expect(
      getByText(
        moment
          .utc()
          .date()
          .toString()
      )
    ).toBeTruthy();
  });

  it('Should show DateRangeSelector with end date selection', () => {
    const updateDateSpy = jest.fn();
    const props = {
      startDate: moment.utc('2017-08-15T00:00:00.000Z'),
      endDate: moment.utc('2017-08-15T00:00:00.000Z'),
      focusedDate: 'startDate',
      updateFocusedDate: () => {},
      updateDate: updateDateSpy
    };

    const { getByText } = render(<DateRangeSelector {...props} />);

    fireEvent.click(getByText('16'));
    expect(updateDateSpy).toHaveBeenCalledTimes(1);
  });
});
