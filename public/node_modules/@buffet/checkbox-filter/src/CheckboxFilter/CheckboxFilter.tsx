import React from 'react';
import classnames from 'classnames/bind';
import { getOptionCount } from '../utils/getOptionCount';
import { getSelectedOptionCount } from '../utils/getSelectedOptionCount';
import { getSelectedOptions } from '../utils/getSelectedOptions';
import { getFilteredOptions, defaultSubstringFilter } from '../utils/getFilteredOptions';
import { FilterPanel } from '../FilterPanel/FilterPanel';
import { GlobalToggle } from '../GlobalToggle/GlobalToggle';
import { CheckboxListContainer } from '../CheckboxListContainer/CheckboxListContainer';
import { CheckboxListItemContainer } from '../CheckboxListItemContainer/CheckboxListItemContainer';
import { CheckboxItem } from '../CheckboxItem/CheckboxItem';
import { ToggleAll, CheckboxItem as CheckboxItemProps } from '../types';
import { SubmitFilterButton } from '../SubmitFilterButton/SubmitFilterButton';
import { InputWithIcon } from '@buffet/input';
import styles from './CheckboxFilter.css';

const cx = classnames.bind(styles);

export interface BaseProps {
  applyLabel: string;
  options: Array<CheckboxItemProps>;
  toggleAll?: ToggleAll;
  onApply(selectedOptions: Array<string>, options: Array<CheckboxItemProps>): void;
  onToggleClick?(id: string): void;
  width?: number;
  searchable?: boolean;
  searchPlaceholderText?: string;
  searchFilter?: (option: CheckboxItemProps, query: string) => boolean;
}

export interface Props extends BaseProps {
  searchString?: string;
  onSearchTextChange?(query: string): void;
  onClick(id: string): void;
}

export class CheckboxFilter extends React.Component<Props> {
  onApply = () => {
    const selectedOptions = getSelectedOptions(this.props.options);
    this.props.onApply(selectedOptions, this.props.options);
  };

  render() {
    const { width } = this.props;

    const filteredOptions = this.props.searchString
      ? getFilteredOptions(
          this.props.options,
          this.props.searchString,
          this.props.searchFilter ? this.props.searchFilter : defaultSubstringFilter
        )
      : this.props.options;

    return (
      <FilterPanel width={width || 280}>
        {this.props.searchable && (
          <InputWithIcon
            className={cx('inputBox')}
            onChange={e => {
              if (this.props.onSearchTextChange !== undefined) this.props.onSearchTextChange(e.target.value);
            }}
            defaultValue={this.props.searchString}
            valid
            placeholder={this.props.searchPlaceholderText}
          />
        )}
        {(!this.props.searchable || (this.props.searchable && this.props.searchString === '')) && (
          <GlobalToggle
            toggleOptions={this.props.toggleAll}
            optionCount={getOptionCount(this.props.options)}
            selectedOptionCount={getSelectedOptionCount(this.props.options)}
            onClick={this.props.onClick}
            onToggleClick={this.props.onToggleClick}
          />
        )}
        <CheckboxListContainer>
          {filteredOptions.map(option => (
            <CheckboxListItemContainer key={option.id} className={cx('checkboxListItemContainer')}>
              <CheckboxItem {...option} onClick={this.props.onClick} onToggleClick={this.props.onToggleClick} />
            </CheckboxListItemContainer>
          ))}
        </CheckboxListContainer>
        <SubmitFilterButton label={this.props.applyLabel} onApply={this.onApply} />
      </FilterPanel>
    );
  }
}
