import React from 'react';
import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { CheckboxFilter, CheckboxFilterWithState } from './src';
import styles from './stories.css';

const flatProps = {
  toggleAll: {
    isVisible: true,
    label: 'All Details',
    toggleCount: 'all',
    showGlobalExpansionToggle: false,
    state: 'unchecked'
  },
  applyLabel: 'Apply',
  onApply: action('apply'),
  options: [
    {
      id: 'guestName',
      label: 'Guest name',
      state: 'checked'
    },
    {
      id: 'phone',
      label: 'Phone',
      state: 'checked'
    },
    {
      id: 'email',
      label: 'Email',
      state: 'partial'
    },
    {
      id: 'market-opt-in',
      label: 'Marketing opt in'
    },
    {
      id: 'last-visit-date',
      label: 'Last visit date'
    },
    {
      id: 'visits',
      label: 'Visits'
    },
    {
      id: 'seated-covers',
      label: 'Seated Covers'
    },
    {
      id: 'total-spend',
      label: 'Total Spend'
    },
    {
      id: 'tip-spend',
      label: 'Tip Spend'
    },
    {
      id: 'lifetime-visits',
      label: 'Lifetime Visits'
    }
  ]
};

const nestedProps = {
  toggleAll: {
    isVisible: true,
    label: 'All Details',
    toggleCount: 'selectedOfAll',
    showGlobalExpansionToggle: true,
    state: 'unchecked'
  },
  applyLabel: 'Apply',
  onApply: action('apply'),
  options: [
    {
      id: 'guest-details',
      label: 'Guest details',
      isCollapsed: false,
      options: [
        {
          id: 'guest-name',
          label: 'Guest name',
          state: 'checked'
        },
        {
          id: 'phonetic-name',
          label: 'Phonetic name',
          state: 'checked'
        },
        {
          id: 'phone-number',
          label: 'Phone number',
          state: 'checked'
        },
        {
          id: 'email',
          label: 'Email',
          state: 'checked'
        },
        {
          id: 'marketing-opt-in',
          label: 'Marketing opt-in',
          state: 'unchecked'
        }
      ]
    },
    {
      id: 'date-time',
      label: 'Date & time',
      isCollapsed: true,
      options: [
        {
          id: 'visit-date',
          label: 'Visit date',
          state: 'unchecked'
        },
        {
          id: 'created-date',
          label: 'Created date',
          state: 'unchecked'
        },
        {
          id: 'created-lead-time',
          label: 'Created lead time',
          state: 'unchecked'
        },
        {
          id: 'last-updated',
          label: 'Last updated',
          state: 'unchecked'
        },
        {
          id: 'seated-time',
          label: 'Seated time',
          state: 'unchecked'
        }
      ]
    },
    {
      id: 'reservation-details',
      label: 'Reservation details',
      isCollapsed: false,
      options: [
        {
          id: 'size',
          label: 'Size',
          state: 'checked'
        },
        {
          id: 'status',
          label: 'Status',
          state: 'checked'
        },
        {
          id: 'table',
          label: 'Table',
          state: 'checked'
        },
        {
          id: 'table-type',
          label: 'Table type',
          state: 'checked'
        },
        {
          id: 'turn-time-setting',
          label: 'Turn time setting',
          state: 'checked'
        },
        {
          id: 'total-spend',
          label: 'Total spend',
          state: 'checked'
        },
        {
          id: 'tip-spend',
          label: 'Tip spend',
          state: 'checked'
        },
        {
          id: 'server',
          label: 'Server',
          state: 'checked'
        },
        {
          id: 'referrer-name',
          label: 'Referrer name',
          state: 'checked'
        },
        {
          id: 'referrer-business',
          label: 'Referrer business',
          state: 'checked'
        },
        {
          id: 'total-wait-time',
          label: 'Total wait time',
          state: 'checked'
        },
        {
          id: 'total-actual-duration',
          label: 'Total actual duration',
          state: 'checked'
        }
      ]
    }
  ]
};

storiesOf('Reporting/Checkbox Filter', module)
  .add('Flat checkbox: stateless', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilter {...flatProps} onClick={action('onClick')} />
      </div>
    );
  })
  .add('Flat checkbox: state-managed', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilterWithState {...flatProps} onChange={action('onChange')} />
      </div>
    );
  })
  .add('Flat checkbox with search: state-managed', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilterWithState
          searchable
          searchPlaceholderText="Search"
          {...flatProps}
          onChange={action('onChange')}
        />
      </div>
    );
  })
  .add('Flat checkbox: counted selections', () => {
    const flatPropsManipulated = {
      ...flatProps,
      toggleAll: {
        ...flatProps.toggleAll,
        toggleCount: 'selected'
      }
    };

    return (
      <div className={styles.container}>
        <CheckboxFilterWithState {...flatPropsManipulated} onChange={action('onChange')} />
      </div>
    );
  })
  .add('Nested checkbox: stateless', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilter {...nestedProps} onClick={action('onClick')} onToggleClick={action('onToggleClick')} />
      </div>
    );
  })
  .add('Nested checkbox: state-managed', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilterWithState {...nestedProps} onChange={action('onChange')} />
      </div>
    );
  })
  .add('Nested checkbox with search: state-managed', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilterWithState searchable {...nestedProps} onChange={action('onChange')} />
      </div>
    );
  })
  .add('Nested checkbox: counted selections', () => {
    const nestedPropsManipulated = {
      ...nestedProps,
      toggleAll: {
        ...nestedProps.toggleAll,
        toggleCount: 'selected'
      }
    };

    return (
      <div className={styles.container}>
        <CheckboxFilterWithState {...nestedPropsManipulated} onChange={action('onChange')} />
      </div>
    );
  })
  .add('Flat checkbox: minimum options', () => {
    return (
      <div className={styles.container}>
        <CheckboxFilterWithState
          applyLabel="Apply"
          onApply={() => {}}
          onChange={() => {}}
          options={[
            {
              id: 'option-01',
              label: 'Option 1'
            },
            {
              id: 'option-02',
              label: 'Option 2'
            }
          ]}
        />
      </div>
    );
  });
