import React from 'react';
import { render, wait } from 'react-testing-library';
import { FeatureToggle, FeatureToggleProvider, FeatureToggleChildProps } from './FeatureToggleContext';
import mock from 'xhr-mock';
import featureTogglesFixture from '../fixtures/featureToggles';

mock.setup();
const RID = 123;
const GLOBAL_TOGGLE_NAME = 'globalScopeSelectorIncludeGroups';

async function renderScenario({
  feature = 'transientAccountMyProfileComponent',
  hide = false,
  resultSuccess = true,
  waitForResponse = true,
  useRidScope = true,
  globalToggleName = GLOBAL_TOGGLE_NAME
}) {
  if (useRidScope) {
    (window as any).gcScope = {
      type: 'restaurant',
      id: RID
    };
  } else {
    (window as any).gcScope = {
      type: 'none',
      id: undefined
    };
  }

  if (resultSuccess) {
    mock.get(`/gateway/proxies/featureManager/v3/api/globalToggle/${globalToggleName}`, {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ enabled: true })
    });

    mock.get(`/gateway/proxies/featureManager/v3/api/restaurant/${RID}/toggles`, {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(featureTogglesFixture)
    });
  } else {
    mock.get(`/gateway/proxies/featureManager/v3/api/globalToggle/${globalToggleName}`, () =>
      Promise.reject(new Error())
    );
    mock.get(`/gateway/proxies/featureManager/v3/api/restaurant/${RID}/toggles`, () => Promise.reject(new Error()));
  }

  let data: FeatureToggleChildProps = undefined as any;

  render(
    <FeatureToggleProvider globalToggleName={globalToggleName}>
      <FeatureToggle feature={feature} hide={hide}>
        {featureToggles => {
          data = featureToggles;
          return null;
        }}
      </FeatureToggle>
    </FeatureToggleProvider>
  );

  if (waitForResponse) {
    await wait();
  }

  return data;
}

describe('FeatureToggleContext', () => {
  const realConsoleWarn = console.warn;

  beforeEach(() => {
    mock.reset();
    console.warn = jest.fn();
  });

  afterEach(() => {
    console.warn = realConsoleWarn;
  });

  describe('FeatureToggle rid context', async () => {
    it('Should set status to started when mounted', async () => {
      const data = await renderScenario({ waitForResponse: false });

      expect(data.status).toEqual('started');
    });

    it('Should set status to done when API call finishes', async () => {
      const data = await renderScenario({});
      expect(data.status).toEqual('done');
    });

    it('Should provide context data when API call succeeds', async () => {
      const data = await renderScenario({});

      expect(data.status).toEqual('done');
      expect(data.showFeature).toEqual(true);
    });

    it('Should hide feature when API call succeeds', async () => {
      const data = await renderScenario({ hide: true });

      expect(data.status).toEqual('done');
      expect(data.showFeature).toEqual(false);
    });

    it('Should set status to failed when API call fails', async () => {
      const realConsoleError = console.error;
      const mockConsoleError = jest.fn();
      console.error = mockConsoleError;
      const data = await renderScenario({ resultSuccess: false });

      expect(data.status).toEqual('failed');
      console.error = realConsoleError;
    });
  });

  describe('FeatureToggle non-rid context', async () => {
    it('Should set status to done when not in rid context with no global toggle', async () => {
      const data = await renderScenario({ useRidScope: false, globalToggleName: '' });

      expect(data.status).toEqual('done');
      expect(data.showFeature).toEqual(false);
    });

    it('Should provide global data and match when API call succeeds', async () => {
      const data = await renderScenario({ feature: GLOBAL_TOGGLE_NAME, useRidScope: false });

      expect(data.status).toEqual('done');
      expect(data.showFeature).toEqual(true);
    });

    it('Should provide global data and not match when feature is not a global toggle', async () => {
      const data = await renderScenario({ useRidScope: false });

      expect(data.status).toEqual('done');
      expect(data.showFeature).toEqual(false);
    });

    it('Should set status to failed when API call fails', async () => {
      const realConsoleError = console.error;
      const mockConsoleError = jest.fn();
      console.error = mockConsoleError;
      const data = await renderScenario({ resultSuccess: false, useRidScope: false });

      expect(data.status).toEqual('failed');
      console.error = realConsoleError;
    });
  });
});
