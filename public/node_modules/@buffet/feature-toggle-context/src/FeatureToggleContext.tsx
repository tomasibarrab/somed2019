import React from 'react';
import request from 'superagent';
import { getScope, Scope } from '@buffet/scope-service';
import { AsyncState } from './types/AsyncState';
import { enforceGlobalSingleton } from '@buffet/utils';

export interface FeatureToggles {
  [featureName: string]: boolean;
}

export interface FeatureToggleProviderProps {
  globalToggleName?: string;
}

export type State = AsyncState<FeatureToggles>;

const initialState: State = {
  status: 'init',
  data: undefined
};

const { Provider, Consumer } = enforceGlobalSingleton('FeatureToggleContext', () =>
  React.createContext<State>(initialState)
);

export class FeatureToggleProvider extends React.Component<FeatureToggleProviderProps, State> {
  state = initialState;
  scope = getScope();

  componentDidMount() {
    //
    // if in restaurant scope get all the enabled toggles associated with the rid. This will include all enabled global
    // toggles as well.
    //
    if (this.scope.type === 'restaurant') {
      this.setState({ status: 'started', data: undefined });

      request
        .get(`/gateway/proxies/featureManager/v3/api/restaurant/${this.scope.id}/toggles`)
        .then(res => {
          this.setState({
            status: 'done',
            data: res.body.reduce((acc: FeatureToggles, toggleName: string) => {
              acc[toggleName] = true;
              return acc;
            }, {})
          });
        })
        .catch(res => {
          this.setState({
            status: 'failed',
            data: undefined
          });
        });
    }
    //
    // only get a specific global toggle by itself if not in a rid context, since for rid-based all applicable toggles
    // including global ones will be returned in the response
    //
    else if (this.props.globalToggleName) {
      const globalToggleName: string = this.props.globalToggleName;
      this.setState({ status: 'started', data: undefined });

      request
        .get(`/gateway/proxies/featureManager/v3/api/globalToggle/${globalToggleName}`)
        .then(res => {
          this.setState({
            status: 'done',
            data: { [globalToggleName]: res.body.enabled }
          });
        })
        .catch(res => {
          this.setState({ status: 'failed', data: undefined });
        });
    }
    // not in a rid scope and no global toggle specified, resolve to 'done' with no toggles
    else {
      this.setState({ status: 'done', data: {} });
    }
  }

  render() {
    return <Provider value={this.state}>{this.props.children}</Provider>;
  }
}

export interface FeatureToggleChildProps {
  status: 'init' | 'started' | 'done' | 'failed';
  showFeature: boolean;
}

interface FeatureToggleProps {
  feature: string;
  hide?: boolean;
  children(injectedFeatureToggleProps: FeatureToggleChildProps): React.ReactNode;
}

export class FeatureToggle extends React.Component<FeatureToggleProps> {
  render() {
    return (
      <Consumer>
        {featureToggles => {
          const renderProp = {
            status: featureToggles.status,
            showFeature: false
          };

          if (featureToggles.status === 'done') {
            const togglePresent = featureToggles.data[this.props.feature] === true;
            renderProp.showFeature = this.props.hide ? !togglePresent : togglePresent;
          }

          return this.props.children(renderProp);
        }}
      </Consumer>
    );
  }
}

export { Provider as TestFeatureToggleProvider };
