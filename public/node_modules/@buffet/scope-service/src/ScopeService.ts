interface RestaurantScope {
  type: 'restaurant';
  id: number;
}

interface GroupScope {
  type: 'group';
  id: number;
}

interface NoScope {
  type: 'none';
  id: undefined;
}

export type Scope = RestaurantScope | GroupScope | NoScope;

declare global {
  interface Window {
    gcScope: Scope;
  }
}

/**
 * Resolve scope object based on a supplied context (understood to be window currently). This function should be
 * considered private to this module, but is exported to facilitate unit testing.
 *
 * @param scopeContext
 * @returns {Scope} a Scope object
 */
export function resolveScope(scopeContext: any): Scope {
  const noneScope: Scope = { type: 'none', id: undefined };

  if (!scopeContext || !scopeContext.gcScope) {
    return noneScope;
  }

  const gcScope = { ...scopeContext.gcScope };

  if (gcScope.type === 'restaurant' || gcScope.type === 'group') {
    const id = Number(gcScope.id);

    if (!isNaN(id)) {
      gcScope.id = id;
      return gcScope;
    }
  }

  console.warn(`gcScope type ${gcScope.type} is unrecognized or no id was provided. Falling back to type "none"`);
  return noneScope;
}

/**
 * Get a scope object
 */
export const getScope = () => resolveScope(window);
