/* istanbul ignore file */
import { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';

function useOpenClose(open: boolean, onOpen?: () => void, onClose?: () => void) {
  const [isOpen, setIsOpen] = useState(open);
  const [isClosing, setIsClosing] = useState(false);

  // create a DOM ref that will be attached to the overlay
  const modalRef = useRef<HTMLDivElement>(null);

  // set open/close animation start
  useLayoutEffect(() => {
    if (open && !isOpen) {
      setIsOpen(true);
    } else if (!open && isOpen) {
      setIsClosing(true);
    }
  }, [open]);

  // handle cleanup and callbacks once the open/close transition ends
  const animationEndHandler = useCallback(
    (event: AnimationEvent) => {
      if (isClosing) {
        setIsClosing(false);
        setIsOpen(false);
        if (onClose) {
          onClose();
        }
      } else {
        if (onOpen) {
          onOpen();
        }
      }
    },
    [isOpen, isClosing, onOpen, onClose]
  );

  // attach the animation end handler to the DOM element
  useEffect(() => {
    if (modalRef.current) {
      modalRef.current.addEventListener('animationend', animationEndHandler);
    }

    return () => {
      if (modalRef.current) {
        modalRef.current.removeEventListener('animationend', animationEndHandler);
      }
    };
  }, [animationEndHandler]);

  return {
    modalRef,
    isOpen,
    isClosing
  };
}

export default useOpenClose;
