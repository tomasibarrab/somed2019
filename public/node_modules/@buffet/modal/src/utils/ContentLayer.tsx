// TODO: make this a standalone Buffet component
import React, { useContext } from 'react';

import Portal from './Portal';

export enum StackingIndex {
  Tooltip = 'Tooltip',
  Chrome = 'Chrome',
  Modal = 'Modal'
}

enum StackingIndexValue {
  Tooltip = 10,
  Chrome = 100,
  Modal = 1000
}

interface ContentLayerProps {
  layerType: StackingIndex;
  global?: boolean;
  globalId?: string;
}

const globalPortalId = (id?: string) => `buffet-Content-Layer-${id || 'default'}`;


export const StackingContext = React.createContext<number>(0);

const ContentLayer = ({
  layerType,
  global = false, // todo: make this true by default?
  globalId,
  children
}: React.PropsWithChildren<ContentLayerProps>) => {
  const currentIndex = useContext<number>(StackingContext);

  const newLayerIndex = (currentIndex || 0) + StackingIndexValue[layerType];

  // create a higher zIndex content layer
  const layeredContent = (
    <div style={{ position: 'relative', zIndex: newLayerIndex }}>
      <StackingContext.Provider value={newLayerIndex}>
        {children}
      </StackingContext.Provider>
    </div>
  );

  // rendered in a Portal, works as a global ContentLayer
  if (global) {
    return (
      <Portal id={globalPortalId(globalId)}>
        {layeredContent}
      </Portal>
    );
  }

  // just render the layered content inside whatever container the component lives in
  return layeredContent;
};

export default ContentLayer;
