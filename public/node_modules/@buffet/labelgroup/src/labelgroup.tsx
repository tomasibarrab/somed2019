import React from 'react';
import classNames from 'classnames/bind';
import styles from './labelgroup.css';

const cx = classNames.bind(styles);

export interface Props extends React.HTMLAttributes<HTMLDivElement> {
  label: string;
  children: React.ReactElement<any>;
}

/**
 * Lays out a `<label>` with an input element, and correctly binds them. Combine with `<Fieldset>` for consistent styling of standard GCA forms.
 */
export class LabelGroup extends React.Component<Props> {
  render() {
    const { children, className, label, ...rest } = this.props;
    const classNames = cx('labelGroup', className);

    // Ensure a single child is passed.
    const originalInput = React.Children.only(children);

    // Get an ID using either the input's id (if it has one) or its name.
    const inputId = originalInput.props.id || originalInput.props.name;

    const clonedInput = React.cloneElement(children, { id: originalInput.props.id || inputId });

    return (
      <div className={classNames} {...rest}>
        <label className={cx('label')} htmlFor={inputId}>
          {label}
        </label>
        {clonedInput}
      </div>
    );
  }
}
