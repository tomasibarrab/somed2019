import React from 'react';
import { render, wait } from 'react-testing-library';
import {
  CurrentRestaurantConsumer,
  CurrentRestaurantProvider,
  State,
  RESTAURANT_CONTEXT_URL
} from './CurrentRestaurantContext';
import mock from 'xhr-mock';
import restaurantContextFixture from '../fixtures/restaurantContext';

const rid = 1906;

async function renderScenario({ waitForResponse = true, resultSuccess = true }) {
  mock.setup();

  if (resultSuccess) {
    mock.get(`${RESTAURANT_CONTEXT_URL}${rid}`, {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(restaurantContextFixture)
    });
  } else {
    mock.get(`${RESTAURANT_CONTEXT_URL}${rid}`, () => Promise.reject(new Error()));
  }

  let data: State = undefined as any;

  render(
    <CurrentRestaurantProvider>
      <CurrentRestaurantConsumer>
        {restaurantState => {
          data = restaurantState;
          return null;
        }}
      </CurrentRestaurantConsumer>
    </CurrentRestaurantProvider>
  );

  if (waitForResponse) {
    await wait();
  }

  return data;
}

describe('CurrentRestaurantProvider & CurrentRestaurantConsumer', async () => {
  beforeAll(() => {
    (window as any).gcScope = {
      id: rid,
      type: 'restaurant'
    };
  });

  it('Should set status to started when mounted', async () => {
    const data = await renderScenario({ waitForResponse: false });

    expect(data && data.status === 'started').toBe(true);
  });

  it('Should set status to done when API call finishes', async () => {
    const data = await renderScenario({});
    expect(data && data.status === 'done').toBe(true);
  });

  it('Should provide context data when API call succeeds', async () => {
    const data = await renderScenario({});

    expect(data && data.status === 'done' && data.data).toEqual(restaurantContextFixture);
  });

  it('Should set status to failed when API call fails', async () => {
    const realConsoleError = console.error;
    const mockConsoleError = jest.fn();
    console.error = mockConsoleError;
    const data = await renderScenario({ resultSuccess: false });

    expect(data && data.status === 'failed').toBe(true);
    console.error = realConsoleError;
  });

  it('Should copy data to session storage when API call succeeds', async () => {
    const data = await renderScenario({});
    const expected = {
      data: data.data,
      id: 1906,
      type: 'restaurant'
    };

    expect(JSON.parse(sessionStorage.getItem('gcContext') || '')).toEqual(expected);
  });

  it('Should set status to failed when gcScope is incorrect type', async () => {
    const realConsoleError = console.error;
    const mockConsoleError = jest.fn();
    console.error = mockConsoleError;
    (window as any).gcScope = {
      id: rid,
      type: 'foo'
    };
    const data = await renderScenario({});

    expect(data && data.status === 'failed').toBe(true);
    console.error = realConsoleError;
  });
});
