import { ResponseError } from 'superagent';

type AgreementState = 'Created' | 'Updated' | 'Signed' | 'Renegotiated';
export type AgreementSource = 'UAS' | 'SFDC';

export interface AgreementDetailsType {
  agreeTextId: number;
  intentTextId: number;
  name: string;
}

export interface Pricing {
  productName: string;
  productCode: string;
  currencyCode: string;
  listPrice: number;
  feeType: string;
  billingRecurrence: string;
  termLength: number;
}

export interface SigningDetails {
  signedDateUTC: string;
  ipAddress: string;
  userEmail: string;
  firstName: string;
  lastName: string;
  title: string;
}

export interface TermsAndConditions {
  version: number;
  termsId: number;
  content: string;
  title: string;
  locale: string;
}

export interface AgreementDetails {
  id: string;
  type: AgreementDetailsType;
  context: string;
  locale: string;
  assignedUser: string | null;
  legalEntity: string;
  creationDateUTC: string;
  lastUpdatedDateUTC: string;
  state: AgreementState;
  signingDetails?: SigningDetails;
  termsAndConditions: TermsAndConditions[];
  pricing?: Pricing[];
}

export interface BaseAgreementDTO {
  source: string;
  isSigned: boolean;
  agreementDetails?: AgreementDetails;
}

/**
 * Notion of a UAS Agreement, which will have defined `agreementDetails`
 */
export interface UASAgreementDTO extends BaseAgreementDTO {
  agreementDetails: AgreementDetails;
}

export type ErrorResponseBody = any;

export interface ErrorResponse {
  body: ErrorResponseBody;
}

export interface OTResponseError extends ResponseError {
  response: ErrorResponse;
}

interface InitState {
  status: 'init';
  data: undefined;
}

interface StartedState {
  status: 'started';
  data: undefined;
}

interface DoneState<T> {
  status: 'done';
  data: T;
}

interface FailedState {
  status: 'failed';
  data: undefined;
  error: OTResponseError;
}

export type AsyncState<T> = InitState | StartedState | DoneState<T> | FailedState;

export type FetchAgreementAsyncState = AsyncState<null>;
export type SubmitAgreementAsyncState = AsyncState<{}>;
