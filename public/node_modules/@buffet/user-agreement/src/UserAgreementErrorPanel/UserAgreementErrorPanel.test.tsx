import React from 'react';
import { UserAgreementErrorPanel } from './UserAgreementErrorPanel';
import { IntlProvider, registerMessages } from '@buffet/intl';
import { render } from 'react-testing-library';

const messages = require('../../translations/en-US/user-agreement.json');

describe('UserAgreementErrorPanel', () => {
  const setup = ({ errorStatus }: { errorStatus?: number }) => {
    const error = {
      status: errorStatus,
      response: {
        body: {}
      },
      text: '',
      method: '',
      path: '',
      name: '',
      message: ''
    };

    const renderResult = render(
      <IntlProvider>
        <UserAgreementErrorPanel error={error} />
      </IntlProvider>
    );

    return renderResult;
  };

  beforeAll(() => {
    registerMessages({ ['en-US']: messages });
  });

  it('should render', () => {
    const { container } = setup({});
    expect(container.firstChild).toBeDefined();
  });

  it('should render an async error for an unknown (empty) error', () => {
    const { queryByText } = setup({});
    const title = queryByText('Let’s try that again');
    expect(title).toBeTruthy();
  });

  it('should render a permission error', () => {
    const { queryByText } = setup({ errorStatus: 401 });
    const title = queryByText('Permission required');
    expect(title).toBeTruthy();
  });

  it('should render an async error for a 500 error', () => {
    const { queryByText } = setup({ errorStatus: 500 });
    const title = queryByText('Let’s try that again');
    expect(title).toBeTruthy();
  });

  it('should render an async error for a 409 error', () => {
    const { queryByText } = setup({ errorStatus: 409 });
    const title = queryByText('Let’s try that again');
    expect(title).toBeTruthy();
  });

  // I'm a teapot exercises the fallthrough case
  it('should render an async error for a 418 error', () => {
    const { queryByText } = setup({ errorStatus: 418 });
    const title = queryByText('Let’s try that again');
    expect(title).toBeTruthy();
  });

  it('should render an invalid error for a 404 error', () => {
    const { queryByText } = setup({ errorStatus: 404 });
    const title = queryByText('Sorry, something is wrong');
    expect(title).toBeTruthy();
    const linkText = queryByText('Support@getvenga.com');
    expect(linkText).toBeTruthy();
  });
});
