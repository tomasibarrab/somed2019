import React from 'react';
import styles from './TransitionableFooter.css';
import { Footer } from './Footer';
import { CSSTransition } from 'react-transition-group';

interface ViewProps {
  className?: string;
  show: boolean;
}

interface State {
  show: boolean;
}

export class TransitionableFooter extends React.Component<ViewProps, State> {
  state: State = { show: false };
  timeoutId: number = 0;

  /**
   * Add delay so that footer does not immediately render in a shown state, but rather transitions in to a shown state
   */
  componentDidMount() {
    if (this.props.show) {
      this.timeoutId = window.setTimeout(() => this.setState({ show: true }), 250);
    }
  }

  componentDidUpdate(prevProps: ViewProps) {
    if (this.props.show !== prevProps.show) {
      window.clearTimeout(this.timeoutId);
      this.setState({ show: this.props.show });
    }
  }

  render() {
    const footerEnter = styles.transitionableFooter__enter;
    const footerEnterActive = styles.transitionableFooter__enterActive;
    const footerEnterDone = styles.transitionableFooter__enterDone;
    const footerExit = styles.transitionableFooter__exit;
    const footerExitActive = styles.transitionableFooter__exitActive;
    const footerExitDone = styles.transitionableFooter__exitDone;

    return (
      <CSSTransition
        mountOnEnter={true}
        unmountOnExit={true}
        in={this.state.show}
        key="transitionableFooter"
        classNames={{
          enter: footerEnter,
          enterActive: footerEnterActive,
          enterDone: footerEnterDone,
          exit: footerExit,
          exitActive: footerExitActive,
          exitDone: footerExitDone
        }}
        timeout={750}
      >
        <div className={styles.transitionableFooter}>
          <Footer className={this.props.className}>{this.props.children}</Footer>
        </div>
      </CSSTransition>
    );
  }
}
