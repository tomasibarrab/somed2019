import React from 'react';
import classnames from 'classnames/bind';
import styles from './UserAgreementPanel.css';
import { Footer } from '../Footer/Footer';
import { Touchable } from '@buffet/icon';
import { Button } from '@buffet/button';
import { CSSTransition } from 'react-transition-group';
import { SubmitAgreementAsyncState, AgreementDetails } from '../UserAgreement.types';
import { injectIntl, InjectedIntlProps, FormattedMessage } from 'react-intl';

const cx = classnames.bind(styles);

export interface ViewProps {
  agreementDetails: AgreementDetails;
  handleHideAgreement: VoidFunction;
  handleAgreeConfirm: VoidFunction;
  submitAgreementState: SubmitAgreementAsyncState;
  show: boolean;
}

interface Props extends ViewProps, InjectedIntlProps {}

interface State {
  isTermsScrolled: boolean;
  isTermsScrolledToBottom: boolean;
}

class UserAgreementPanelView extends React.Component<Props, State> {
  private termsDiv: HTMLDivElement | null = null;

  public state: State = { isTermsScrolled: false, isTermsScrolledToBottom: false };

  /* istanbul ignore next */
  public componentWillUnmount() {
    if (this.termsDiv) {
      this.termsDiv.removeEventListener('scroll', this.handleTermsDivScrolled);
    }
  }

  public render() {
    const agreementDetails = this.props.agreementDetails;
    const {
      type: { agreeTextId, intentTextId }
    } = agreementDetails;
    const panelEnter = styles.agreementPanel__enter;
    const panelEnterActive = styles.agreementPanel__enterActive;
    const panelEnterDone = styles.agreementPanel__enterDone;
    const panelExit = styles.agreementPanel_exit;
    const panelExitActive = styles.agreementPanel__exitActive;
    const panelExitDone = styles.agreeementPanel_exitDone;
    const overlayEnter = styles.agreementOverlay__enter;
    const overlayEnterActive = styles.agreementOverlay__enterActive;
    const overlayEnterDone = styles.agreementOverlay__enterDone;
    const overlayExit = styles.agreementOverlay__exit;
    const overlayExitActive = styles.agreementOverlay__exitActive;
    const overlayExitDone = styles.agreementOverlay__exitDone;

    return (
      <>
        <CSSTransition
          mountOnEnter={true}
          unmountOnExit={true}
          in={this.props.show}
          key="userAgreementOverlay"
          classNames={{
            enter: overlayEnter,
            enterActive: overlayEnterActive,
            enterDone: overlayEnterDone,
            exit: overlayExit,
            exitActive: overlayExitActive,
            exitDone: overlayExitDone
          }}
          timeout={600}
        >
          <div className={styles.agreementOverlay} />
        </CSSTransition>
        <CSSTransition
          mountOnEnter={true}
          unmountOnExit={true}
          in={this.props.show}
          key="userAgreementPanel"
          classNames={{
            enter: panelEnter,
            enterActive: panelEnterActive,
            enterDone: panelEnterDone,
            exit: panelExit,
            exitActive: panelExitActive,
            exitDone: panelExitDone
          }}
          timeout={750}
        >
          <div className={styles.agreementPanel} data-testid="userAgreementPanel">
            <div
              className={cx('agreementPanel__header', { agreementPanel__headerScrolled: this.state.isTermsScrolled })}
              data-testid="userAgreementPanelHeader"
            >
              <Touchable
                iconId="cross"
                onClick={this.props.handleHideAgreement}
                className={styles.closeButton}
                testId="closeButton"
              />
            </div>
            <div
              className={cx('agreementPanel__content', {
                agreementPanel__contentWithFooter: agreementDetails.state !== 'Signed'
              })}
              ref={this.registerTermsDiv}
              data-testid="userAgreementPanelContent"
            >
              <div
                className={styles.agreementPanel__termsText}
                dangerouslySetInnerHTML={{ __html: agreementDetails && agreementDetails.termsAndConditions[0].content }}
              />
            </div>
            {agreementDetails.state !== 'Signed' && (
              <Footer className={styles.footer}>
                <FormattedMessage
                  id={`userAgreement.checkbox.haveReadTerms.${intentTextId}`}
                  values={{ clickableShortTitle: this.props.agreementDetails.termsAndConditions[0].title }}
                />
                <Button
                  type="button"
                  onClick={this.props.handleAgreeConfirm}
                  theme="primary"
                  busy={this.props.submitAgreementState.status === 'started'}
                  testId="panel-agreement-button"
                  className={styles.agreementButton}
                >
                  <FormattedMessage id={`userAgreement.button.agree.${agreeTextId}`} />
                </Button>
              </Footer>
            )}
          </div>
        </CSSTransition>
      </>
    );
  }

  private registerTermsDiv = (termsDiv: HTMLDivElement) => {
    this.termsDiv = termsDiv;

    if (this.termsDiv) {
      this.termsDiv.addEventListener('scroll', this.handleTermsDivScrolled);
    }
  };

  /**
   * Event handler for scrolling the terms text. Updates/sets two state properties:
   * - `isTermsScrolled`: is the text currently scrolled at all. This is used for applying a special drop-shadow css
   *   class to the header
   * - `isTermsScrolledToBottom`: has the text _ever_ been scrolled all the way to the bottom? This will be used in
   *   mandatory agreements (future functionality)
   */
  private handleTermsDivScrolled = /*istanbul ignore next */ () => {
    // having trouble generating a scroll event to test this
    if (this.termsDiv) {
      const termsDiv: HTMLDivElement = this.termsDiv;

      this.setState({
        isTermsScrolled: termsDiv.scrollTop > 0,
        isTermsScrolledToBottom:
          this.state.isTermsScrolledToBottom || termsDiv.scrollHeight - termsDiv.scrollTop === termsDiv.clientHeight
      });
    }
  };
}

export const UserAgreementPanel = injectIntl<ViewProps>(UserAgreementPanelView);
