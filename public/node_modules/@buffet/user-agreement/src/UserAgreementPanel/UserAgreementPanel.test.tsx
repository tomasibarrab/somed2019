import React from 'react';
import { UserAgreementPanel } from './UserAgreementPanel';
import { IntlProvider, registerMessages } from '@buffet/intl';
import { render, fireEvent, cleanup, wait } from 'react-testing-library';
import { SubmitAgreementAsyncState, UASAgreementDTO } from '../UserAgreement.types';
import signedUserAgreement from '../../fixtures/signedUserAgreement';
import unsignedUserAgreement from '../../fixtures/unsignedUserAgreement';

const messages = require('../../translations/en-US/user-agreement.json');
const AGREE_TEXT = 'Next';

describe('UserAgreementPanel', async () => {
  const setup = ({ show, agreement }: { show: boolean; agreement: UASAgreementDTO }) => {
    const handleHideAgreement = jest.fn();
    const handleAgreeConfirm = jest.fn();
    const submitAgreementState: SubmitAgreementAsyncState = { status: 'init', data: undefined };
    const renderResult = render(
      <IntlProvider>
        <UserAgreementPanel
          agreementDetails={agreement.agreementDetails}
          handleHideAgreement={handleHideAgreement}
          handleAgreeConfirm={handleAgreeConfirm}
          submitAgreementState={submitAgreementState}
          show={show}
        />
      </IntlProvider>
    );

    return { handleHideAgreement, handleAgreeConfirm, renderResult };
  };

  beforeAll(() => {
    registerMessages({ ['en-US']: messages });
    jest.useFakeTimers();
  });

  describe('render', async () => {
    it('should not render if show is false', async () => {
      const { renderResult } = setup({ show: false, agreement: signedUserAgreement });
      const { container } = renderResult;
      expect(container.firstChild).toBeNull();
    });

    it('should not render agree button if agreement is signed', async () => {
      const { renderResult } = setup({ show: true, agreement: signedUserAgreement });
      const { container, queryByText } = renderResult;
      expect(container.firstChild).toBeDefined();
      const button = queryByText(AGREE_TEXT);
      expect(button).toBeFalsy();
    });

    it('should render agree button if agreement is not signed', async () => {
      const { renderResult } = setup({ show: true, agreement: unsignedUserAgreement });
      const { container, queryByText } = renderResult;
      expect(container.firstChild).toBeDefined();
      const button = queryByText(AGREE_TEXT);
      expect(button).toBeTruthy();
    });
  });

  describe('property callbacks', async () => {
    it('should call handleHideAgreement when close button clicked', async () => {
      const { handleHideAgreement, renderResult } = setup({ show: true, agreement: signedUserAgreement });
      const { getByTestId } = renderResult;
      const button = getByTestId('closeButton');
      expect(button).toBeTruthy();
      fireEvent.click(button);
      expect(handleHideAgreement).toHaveBeenCalled();
    });

    it('should call handleAgreeConfirm when agree button clicked', async () => {
      const { handleAgreeConfirm, renderResult } = setup({ show: true, agreement: unsignedUserAgreement });
      const { getByText } = renderResult;
      const button = getByText(AGREE_TEXT);
      expect(button).toBeTruthy();
      fireEvent.click(button);
      expect(handleAgreeConfirm).toHaveBeenCalled();
    });
  });

  describe('scroll', async () => {
    xit('should update scroll state when scrolled', async () => {
      const { renderResult } = setup({ show: true, agreement: unsignedUserAgreement });
      const { getByTestId } = renderResult;
      const header = getByTestId('userAgreementPanelHeader');
      const content = getByTestId('userAgreementPanelContent');
      const eventData = {
        nativeEvent: {
          contentOffset: {
            y: 200
          }
        }
      };

      expect(header).toBeTruthy();
      expect(content).toBeTruthy();
      expect(header.classList.contains('agreementPanel__header__scrolled')).toBe(false);
      fireEvent.scroll(content, { y: 100 });
      expect(header.classList.contains('agreementPanel__header__scrolled')).toBe(true);
    });
  });
});
