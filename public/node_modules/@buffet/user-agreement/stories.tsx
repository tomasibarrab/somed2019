/* istanbul ignore file */

import React from 'react';
import { IntlProvider } from '@buffet/intl';
import { Button } from '@buffet/button';
import { storiesOf } from '@storybook/react';
import { UserAgreement } from './src/UserAgreement';
import { FooterUserAgreement } from './src/FooterUserAgreement';
import { Footer } from './src/Footer/Footer';
import { TransitionableFooter } from './src/Footer/TransitionableFooter';
import mock from 'xhr-mock';
import {
  mockGetAgreement,
  mockCreateAgreement,
  mockSignAgreement,
  AGREEMENT_TYPE,
  AGREEMENT_CONTEXT,
  AGREEMENT_CONTEXT_NAME
} from './fixtures/setupMocks';
import unsignedAgreementMock from './fixtures/unsignedUserAgreement';
import signedAgreementMock from './fixtures/signedUserAgreement';
import styles from './stories.css';

const buffet = {
  componentName: '@buffet/user-agreement'
};

const mockHappyPath = () => {
  mock.setup();
  mockGetAgreement(200, unsignedAgreementMock);
  mockSignAgreement(200, signedAgreementMock.agreementDetails);
};

const mockUnhappyInitializationPath = (errorCode: number) => {
  mock.setup();
  mockGetAgreement(errorCode, {});
};

const mockUnhappySignPath = (errorCode: number) => {
  mock.setup();
  mockGetAgreement(200, unsignedAgreementMock);
  mockSignAgreement(errorCode, {});
};

class FooterHarness extends React.Component {
  state = { showFooter: true };
  constructor(props: {}) {
    super(props);
    mockHappyPath();
  }

  render() {
    return (
      <div>
        <button onClick={this.handleToggleFooter}>{this.state.showFooter ? 'Hide Footer' : 'Show Footer'}</button>
        <TransitionableFooter show={this.state.showFooter} className={styles.footer}>
          My Transitionable Footer
        </TransitionableFooter>
      </div>
    );
  }

  handleToggleFooter = () => {
    this.setState({ showFooter: !this.state.showFooter });
  };
}

class FooterAgreementHarness extends React.Component<{ persistentFooter?: boolean }> {
  state = { showFooter: false };
  constructor(props: {}) {
    super(props);
    mockHappyPath();
  }

  render() {
    return (
      <div>
        <button onClick={this.handleToggleFooter}>
          {this.state.showFooter ? 'Hide Agreement' : 'Show Agreement'}
        </button>
        <FooterUserAgreement
          persistentFooter={this.props.persistentFooter}
          show={this.state.showFooter}
          agreementType={AGREEMENT_TYPE}
          context={AGREEMENT_CONTEXT}
          contextName={AGREEMENT_CONTEXT_NAME}
          onAgreeSuccess={onAgreeSuccess}
          onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
          onViewAgreement={() => console.log('View Agreement')}
          onHideAgreement={() => console.log('Hide Agreement')}
          onAgreeConfirm={() => console.log('Confirm Agreement')}
        >
          {this.props.children}
        </FooterUserAgreement>
      </div>
    );
  }

  handleToggleFooter = () => {
    this.setState({ showFooter: !this.state.showFooter });
  };
}

const onAgreeSuccess = (): void => {
  alert('Agreement Signed');
};

storiesOf('User Agreement', module).add('initialized agreement', () => {
  mockHappyPath();

  return (
    <div style={{ height: '100vh', backgroundColor: 'white' }}>
      <div className={styles.fakeChrome} />
      <div className={styles.agreementWrapper}>
        <IntlProvider>
          <UserAgreement
            agreementType={AGREEMENT_TYPE}
            context={AGREEMENT_CONTEXT}
            contextName={AGREEMENT_CONTEXT_NAME}
            onAgreeSuccess={onAgreeSuccess}
            onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
            onViewAgreement={() => console.log('View Agreement')}
            onHideAgreement={() => console.log('Hide Agreement')}
            onAgreeConfirm={() => console.log('Confirm Agreement')}
          />
        </IntlProvider>
      </div>
    </div>
  );
});

storiesOf('User Agreement', module).add('initialization failed 4xx agreement', () => {
  mockUnhappyInitializationPath(400);

  return (
    <div style={{ height: '100vh', backgroundColor: 'white' }}>
      <div className={styles.fakeChrome} />
      <div className={styles.agreementWrapper}>
        <IntlProvider>
          <UserAgreement
            agreementType={AGREEMENT_TYPE}
            context={AGREEMENT_CONTEXT}
            contextName={AGREEMENT_CONTEXT_NAME}
            onAgreeSuccess={onAgreeSuccess}
            onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
            onViewAgreement={() => console.log('View Agreement')}
            onHideAgreement={() => console.log('Hide Agreement')}
            onAgreeConfirm={() => console.log('Confirm Agreement')}
          />
        </IntlProvider>
      </div>
    </div>
  );
});

storiesOf('User Agreement', module).add('initialization failed 5xx agreement', () => {
  mockUnhappyInitializationPath(500);

  return (
    <div style={{ height: '100vh', backgroundColor: 'white' }}>
      <div className={styles.fakeChrome} />
      <div className={styles.agreementWrapper}>
        <IntlProvider>
          <UserAgreement
            agreementType={AGREEMENT_TYPE}
            context={AGREEMENT_CONTEXT}
            contextName={AGREEMENT_CONTEXT_NAME}
            onAgreeSuccess={onAgreeSuccess}
            onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
            onViewAgreement={() => console.log('View Agreement')}
            onHideAgreement={() => console.log('Hide Agreement')}
            onAgreeConfirm={() => console.log('Confirm Agreement')}
          />
        </IntlProvider>
      </div>
    </div>
  );
});

storiesOf('User Agreement', module).add('submit fails 500', () => {
  mockUnhappySignPath(500);

  return (
    <div style={{ height: '100vh', backgroundColor: 'white' }}>
      <div className={styles.fakeChrome} />
      <div className={styles.agreementWrapper}>
        <IntlProvider>
          <UserAgreement
            agreementType={AGREEMENT_TYPE}
            context={AGREEMENT_CONTEXT}
            contextName={AGREEMENT_CONTEXT_NAME}
            onAgreeSuccess={onAgreeSuccess}
            onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
            onViewAgreement={() => console.log('View Agreement')}
            onHideAgreement={() => console.log('Hide Agreement')}
            onAgreeConfirm={() => console.log('Confirm Agreement')}
          />
        </IntlProvider>
      </div>
    </div>
  );
});

storiesOf('User Agreement', module).add('submit fails 401 (permissions)', () => {
  mockUnhappySignPath(401);

  return (
    <div style={{ height: '100vh', backgroundColor: 'white' }}>
      <div className={styles.fakeChrome} />
      <div className={styles.agreementWrapper}>
        <IntlProvider>
          <UserAgreement
            agreementType={AGREEMENT_TYPE}
            context={AGREEMENT_CONTEXT}
            contextName={AGREEMENT_CONTEXT_NAME}
            onAgreeSuccess={onAgreeSuccess}
            onAgreeIntent={isChecked => console.log('Agree intent', isChecked)}
            onViewAgreement={() => console.log('View Agreement')}
            onHideAgreement={() => console.log('Hide Agreement')}
            onAgreeConfirm={() => console.log('Confirm Agreement')}
          />
        </IntlProvider>
      </div>
    </div>
  );
},
{ buffet });

storiesOf('User Agreement', module).add('footer', () => (
  <div>
    <Footer className={styles.footer}>My Footer</Footer>
  </div>
),
{ buffet });

storiesOf('User Agreement', module).add('transitionable footer', () => <FooterHarness />, { buffet });

storiesOf('User Agreement', module).add('footer agreement', () => (
  <IntlProvider>
    <FooterAgreementHarness />
  </IntlProvider>
),
{ buffet });

storiesOf('User Agreement', module).add('footer agreement with child', () => (
  <IntlProvider>
    <FooterAgreementHarness>
      <Button type="button" onClick={() => console.log('Click away!')}>
        Click Away!
      </Button>
    </FooterAgreementHarness>
  </IntlProvider>
),
{ buffet });

storiesOf('User Agreement', module).add('footer agreement with preloaded child', () => (
  <IntlProvider>
    <FooterAgreementHarness persistentFooter>
      <Button type="button" onClick={() => console.log('Click away!')}>
        Click Away!
      </Button>
    </FooterAgreementHarness>
  </IntlProvider>
),
{ buffet });
