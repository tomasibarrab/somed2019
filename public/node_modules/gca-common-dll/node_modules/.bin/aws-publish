#!/usr/bin/env node
const _ = require('lodash');
require('dotenv').config();

const { createClient: createS3Client } = require('s3');
const pkg = require(`${process.cwd()}/package.json`);
const { shellSync } = require('execa');
const { divider, header } = require('gca-logging-helpers');
const chalk = require('chalk');
const { dryExplanation } = require('gca-registry-publish/utils/dryRunLog');
const { requireTeamCity } = require('gca-registry-publish/utils/utils');

const { OTENV = 'pp', S3_BUCKET = 'gcweb-qa-cdn', TEAMCITY_VERSION } = process.env;
const LOCAL_DIR = 'dist';

const isDryRun = process.argv.includes('--dry');

const fullS3Client = createS3Client({});
const mockS3Client = {
  listObjects: fullS3Client.listObjects.bind(fullS3Client),
  uploadDir: (params) => ({
    on: (condition, callback) => {
      if (condition === 'end') {
        dryExplanation('aws-publish');
        callback();
      }
    }
  }),
}
const client = isDryRun === false ? fullS3Client : mockS3Client;

const params = {
  localDir: LOCAL_DIR,
  s3Params: {
    Bucket: S3_BUCKET,
    Prefix: `gc-microapps/${OTENV}/${pkg.name}/${pkg.version.replace(/\./g, '-')}`,
  },
};

console.log(header(`Syncing version ${pkg.version} of ${pkg.name} to S3`, { top: 1, bottom: 1 }));
console.log(`Local directory\n${divider}\n`);
console.log(`${LOCAL_DIR}\n`);
console.log(shellSync(`ls -l ${LOCAL_DIR}`).stdout);

console.log(`\nRemote directory\n${divider}\n`);
console.log(`Bucket: ${params.s3Params.Bucket}`);
console.log(`Prefix: ${params.s3Params.Prefix}\n`);

requireTeamCity('Cancelling S3 upload... can only run from TeamCity.');

// Begin upload to S3
const uploader = client.uploadDir(params);

uploader.on('error', function (err) {
  console.error(chalk.red('Sync failed\n\n'), err.stack);
  process.exit(1);
});

uploader.on('end', function () {
  console.log(chalk.green('Sync succeeded'));
});
