{"version":3,"sources":["../src/DependencyResolver.js"],"names":["DependencyError","callChain","error","errorObject","print","logger","getHighlightedName","getPath","stack","cyclic","missingDependency","exception","DependencyWarning","name","warningObject","warn","unused","DependencyResolver","container","bindAll","errors","warnings","resolvingFinished","stackFilter","configure","filters","resolveArray","deps","instances","push","resolveDependencies","resolveMap","resolveRegex","regex","keys","dependencies","filter","key","test","privateInjectorName","addInjectorDependency","$injector","addDependency","get","checkResolvingFinished","currentCallChain","getRegex","getMap","getAll","instance","message","Error","chain","add","create","dep","getDependency","hasCyclic","dependency","fn","toString","split","length","apply","cleanStack","e","join","printErrors","results","printWarnings","warning","throwError","resolve","resolver"],"mappings":"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","file":"DependencyResolver.js","sourcesContent":["import _ from 'lodash';\nimport stackFilter from 'stack-filter';\nimport CallChain from './CallChain';\n\nclass DependencyError {\n  constructor(callChain, error, errorObject) {\n    this.callChain = callChain;\n    this.error = error;\n    this.errorObject = errorObject;\n  }\n\n  print(logger) {\n    logger.error(\n      `${this.error} ${this.callChain.getHighlightedName()} in `,\n      this.callChain.getPath(true)\n    );\n    if (this.errorObject) {\n      logger.error(this.errorObject);\n      logger.error(this.errorObject.stack);\n    }\n  }\n\n  static cyclic(callChain) {\n    return new DependencyError(callChain, 'Cyclic Dependency');\n  }\n\n  static missingDependency(callChain) {\n    return new DependencyError(callChain, 'Missing Dependency');\n  }\n\n  static exception(callChain, exception) {\n    return new DependencyError(callChain, 'Exception in Dependency', exception);\n  }\n}\n\nclass DependencyWarning {\n  constructor(callChain, name, warningObject) {\n    this.callChain = callChain;\n    this.name = name;\n    this.warningObject = warningObject;\n  }\n\n  print(logger) {\n    return logger.warn(\n      `${this.name} ${this.callChain.getHighlightedName()} in `,\n      this.callChain.getPath(true)\n    );\n  }\n\n  static unused(callChain) {\n    return new DependencyWarning(callChain, 'Unused dependency');\n  }\n}\n\nclass DependencyResolver {\n  constructor(container, name, logger) {\n    _.bindAll(this, 'resolveDependencies', 'resolveRegex');\n    this.container = container;\n    this.name = name;\n    this.logger = logger;\n    this.errors = [];\n    this.warnings = [];\n    this.resolvingFinished = false;\n    this.stackFilter = stackFilter.configure({\n      filters: ['DependencyResolver.']\n    });\n  }\n\n  resolveArray(deps, callChain) {\n    let name;\n    const instances = [];\n    for (name of deps) {\n      instances.push(this.resolveDependencies(name, callChain));\n    }\n    return instances;\n  }\n\n  resolveMap(deps, callChain) {\n    let name;\n    const instances = {};\n    for (name of deps) {\n      instances[name] = this.resolveDependencies(name, callChain);\n    }\n    return instances;\n  }\n\n  resolveRegex(regex) {\n    const deps = _.keys(this.container.dependencies)\n      .filter((key) => { // eslint-disable-line\n        return regex.test(key) && key !== '$injector' && key !== this.container.privateInjectorName();\n      });\n    return this.resolveMap(deps);\n  }\n\n  addInjectorDependency() {\n    this.$injector = this.container.addDependency('$injector', {\n      get: (name) => {\n        this.checkResolvingFinished(`cannot use $injector.get('${name}') asynchronously`);\n        return this.resolveDependencies(name, this.currentCallChain);\n      },\n      getRegex: (regex) => {\n        this.checkResolvingFinished(`cannot use $injector.getRegex(${regex}) asynchronously`);\n        return this.resolveRegex(regex, this.currentCallChain);\n      },\n      getMap: (deps) => {\n        this.checkResolvingFinished('cannot use $injector.getArray() asynchronously');\n        return this.resolveMap(deps, this.currentCallChain);\n      },\n      getAll: () => {\n        this.checkResolvingFinished('cannot use $injector.getAll() asynchronously');\n        return this.resolveRegex(/.+/, this.currentCallChain);\n      }\n    }, true).instance;\n\n    return this.$injector;\n  }\n\n  checkResolvingFinished(message) {\n    if (this.resolvingFinished) {\n      throw new Error(message);\n    }\n  }\n\n  resolveDependencies(name, chain) {\n    const callChain = this.currentCallChain = chain ? chain.add(name) : CallChain.create(name);\n    const dep = this.container.getDependency(name);\n    if (dep) {\n      if (dep.instance) {\n        return dep.instance;\n      }\n\n      if (callChain.hasCyclic()) {\n        return this.errors.push(DependencyError.cyclic(callChain));\n      }\n\n      const instances = this.resolveArray(dep.dependencies, callChain);\n\n      try {\n        let dependency;\n        const dependencies = dep.dependencies;\n        for (dependency of dependencies) {\n          if (dep.fn.toString().split(dependency).length <= 2) {\n            this.warnings.push(DependencyWarning.unused(callChain.add(dependency)));\n          }\n        }\n        dep.instance = dep.fn.apply(null, instances);\n      } catch (error) {\n        this.cleanStack(error);\n        this.errors.push(DependencyError.exception(callChain, error));\n      }\n\n      return dep.instance;\n    }\n\n    this.errors.push(DependencyError.missingDependency(callChain));\n    return null;\n  }\n\n  cleanStack(e) {\n    return (e.stack = `\\t${this.stackFilter.filter(e.stack).join('\\n\\t')}`); // eslint-disable-line no-param-reassign\n  }\n\n  printErrors() {\n    let error;\n    const results = [];\n    for (error of this.errors) {\n      results.push(error.print(this.logger));\n    }\n    return results;\n  }\n\n  printWarnings() {\n    let warning;\n    const results = [];\n    for (warning of this.warnings) {\n      results.push(warning.print(this.logger));\n    }\n    return results;\n  }\n\n  throwError() {\n    throw new Error('Resolver encountered errors');\n  }\n\n  resolve() {\n    this.addInjectorDependency();\n    this.dependency = this.resolveDependencies(this.name);\n    this.printWarnings();\n    if (this.errors.length > 0) {\n      this.printErrors();\n      this.throwError();\n    }\n    this.resolvingFinished = true;\n    return this.dependency;\n  }\n\n  static resolve(container, name, logger) {\n    const resolver = new DependencyResolver(container, name, logger);\n    resolver.resolve();\n    return resolver;\n  }\n}\n\nexport default DependencyResolver;\n"]}