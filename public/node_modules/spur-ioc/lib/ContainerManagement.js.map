{"version":3,"sources":["../src/ContainerManagement.js"],"names":["rall","warnIfNeeded","name","hasDependency","logger","warn","addResolvableDependency","dependency","suppressWarning","dependencies","resolvableDependency","addDependency","addConstructedDependency","removeDependency","getDependency","merge","otherInjector","each","value","use","exposeAll","expose","exposedDeps","link","deps","resolveExposedDependencies","registerDependencies"],"mappings":"uCAAA,gC;AACA,0C;;AAEA,IAAMA,OAAO,IAAb,C;;AAEe;;AAEbC,cAFa,wBAEAC,IAFA,EAEM;AACjB,QAAI,KAAKC,aAAL,CAAmBD,IAAnB,CAAJ,EAA8B;AAC5B,WAAKE,MAAL,CAAYC,IAAZ,eAA6BH,IAA7B,4CAAwE,KAAKA,IAA7E;AACD;AACF,GANY;;AAQbI,yBARa,mCAQWJ,IARX,EAQiBK,UARjB,EAQsD,KAAzBC,eAAyB,uEAAP,KAAO;AACjE,QAAI,CAACA,eAAL,EAAsB;AACpB,WAAKP,YAAL,CAAkBC,IAAlB;AACD;AACD,SAAKO,YAAL,CAAkBP,IAAlB,IAA0B,qBAAWQ,oBAAX,CAAgCR,IAAhC,EAAsCK,UAAtC,CAA1B;AACA,WAAO,IAAP;AACD,GAdY;;AAgBbI,eAhBa,yBAgBCT,IAhBD,EAgBOK,UAhBP,EAgB4C,KAAzBC,eAAyB,uEAAP,KAAO;AACvD,QAAI,CAACA,eAAL,EAAsB;AACpB,WAAKP,YAAL,CAAkBC,IAAlB;AACD;AACD,SAAKO,YAAL,CAAkBP,IAAlB,IAA0B,qBAAWK,UAAX,CAAsBL,IAAtB,EAA4BK,UAA5B,CAA1B;AACA,WAAO,IAAP;AACD,GAtBY;;AAwBbK,0BAxBa,oCAwBYV,IAxBZ,EAwBkBK,UAxBlB,EAwBuD,KAAzBC,eAAyB,uEAAP,KAAO;AAClE,QAAI,CAACA,eAAL,EAAsB;AACpB,WAAKP,YAAL,CAAkBC,IAAlB;AACD;AACD,SAAKO,YAAL,CAAkBP,IAAlB,IAA0BK,UAA1B;AACA,WAAO,IAAP;AACD,GA9BY;;AAgCbM,kBAhCa,4BAgCIX,IAhCJ,EAgCU;AACrB,WAAO,KAAKO,YAAL,CAAkBP,IAAlB,CAAP;AACA,WAAO,IAAP;AACD,GAnCY;;AAqCbY,eArCa,yBAqCCZ,IArCD,EAqCO;AAClB,WAAO,KAAKO,YAAL,CAAkBP,IAAlB,CAAP;AACD,GAvCY;;AAyCbC,eAzCa,yBAyCCD,IAzCD,EAyCO;AAClB,WAAO,CAAC,CAAC,KAAKO,YAAL,CAAkBP,IAAlB,CAAT;AACD,GA3CY;;AA6Cba,OA7Ca,iBA6CPC,aA7CO,EA6CiC,sBAAzBR,eAAyB,uEAAP,KAAO;AAC5C,QAAMC,eAAeO,cAAcP,YAAnC;;AAEA,qBAAEQ,IAAF,CAAOR,YAAP,EAAqB,UAACS,KAAD,EAAQhB,IAAR,EAAiB;AACpC,UAAMK,aAAaE,aAAaP,IAAb,CAAnB;AACA,YAAKU,wBAAL,CAA8BV,IAA9B,EAAoCK,UAApC,EAAgDC,eAAhD;AACD,KAHD;AAIA,WAAO,IAAP;AACD,GArDY;;AAuDbW,KAvDa,eAuDTH,aAvDS,EAuD+B,KAAzBR,eAAyB,uEAAP,KAAO;AAC1C,WAAO,KAAKO,KAAL,CAAWC,aAAX,EAA0BR,eAA1B,CAAP;AACD,GAzDY;;AA2DbY,WA3Da,uBA2DD;AACV,WAAO,KAAKC,MAAL,CAAYrB,IAAZ,CAAP;AACD,GA7DY;;AA+DbqB,QA/Da,kBA+DNC,WA/DM,EA+DO;AAClB,SAAKA,WAAL,GAAmBA,WAAnB;AACA,WAAO,IAAP;AACD,GAlEY;;AAoEbC,MApEa,gBAoERP,aApEQ,EAoEO;AAClB,QAAMQ,OAAOR,cAAcS,0BAAd,EAAb;AACA,WAAO,KAAKC,oBAAL,CAA0BF,IAA1B,CAAP;AACD,GAvEY,E","file":"ContainerManagement.js","sourcesContent":["import _ from 'lodash';\nimport Dependency from './Dependency';\n\nconst rall = /.+/;\n\nexport default {\n\n  warnIfNeeded(name) {\n    if (this.hasDependency(name)) {\n      this.logger.warn(`warning: ${name} dependency is being overwritten in ${this.name} injector`);\n    }\n  },\n\n  addResolvableDependency(name, dependency, suppressWarning = false) {\n    if (!suppressWarning) {\n      this.warnIfNeeded(name);\n    }\n    this.dependencies[name] = Dependency.resolvableDependency(name, dependency);\n    return this;\n  },\n\n  addDependency(name, dependency, suppressWarning = false) {\n    if (!suppressWarning) {\n      this.warnIfNeeded(name);\n    }\n    this.dependencies[name] = Dependency.dependency(name, dependency);\n    return this;\n  },\n\n  addConstructedDependency(name, dependency, suppressWarning = false) {\n    if (!suppressWarning) {\n      this.warnIfNeeded(name);\n    }\n    this.dependencies[name] = dependency;\n    return this;\n  },\n\n  removeDependency(name) {\n    delete this.dependencies[name];\n    return this;\n  },\n\n  getDependency(name) {\n    return this.dependencies[name];\n  },\n\n  hasDependency(name) {\n    return !!this.dependencies[name];\n  },\n\n  merge(otherInjector, suppressWarning = false) {\n    const dependencies = otherInjector.dependencies;\n\n    _.each(dependencies, (value, name) => {\n      const dependency = dependencies[name];\n      this.addConstructedDependency(name, dependency, suppressWarning);\n    });\n    return this;\n  },\n\n  use(otherInjector, suppressWarning = false) {\n    return this.merge(otherInjector, suppressWarning);\n  },\n\n  exposeAll() {\n    return this.expose(rall);\n  },\n\n  expose(exposedDeps) {\n    this.exposedDeps = exposedDeps;\n    return this;\n  },\n\n  link(otherInjector) {\n    const deps = otherInjector.resolveExposedDependencies();\n    return this.registerDependencies(deps);\n  }\n};\n"]}