import { curry, equals, not, path } from 'ramda';
import React from 'react';

import { Button } from '@buffet/button';
import { Input } from '@buffet/input';

import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync';

import * as api from '../../api';
import DataDisplay from '../../common/DataDisplay/DataDisplay';
import DataKeyValueDisplay from '../../common/DataDisplay/DataKeyValueDisplay';
import { OperationalConfirm } from '../../common/OperationalConfirm/OperationalConfirm';
import strings from '../../strings';
import { RidData, RidInputState } from '../../types';
import { initialRidInputState, validateRidInput } from '../../utils';

import './MiniDashboard.scss';

interface MiniDashboardProps {
  id?: string;
  onRom?: (id: string) => void;
  onSync?: () => void;
}

const dataHas = curry((pname: string, d: RidData) =>
  not(equals(undefined, path(['data', pname], d))));

export default function MiniDashboard({ id, onSync }: MiniDashboardProps) {
  const [ prodMatch, setProdMatch ] = React.useState(true);
  const [ state, setState ] = React.useState<RidInputState>(initialRidInputState);
  const [ ridsData, setRidsData ] = React.useState<RidData[]>([]);
  const [ apiStatus, getRidData ] = useAsync(api.getAllRidData);
  const [ syncStatus, syncRid ] = useAsync(api.syncRestaurantAssetsFromSFDC);
  const [ activationStatus, activateRid ] = useAsync(api.makeRestaurantOperational);
  const [ confirmActivateRid, askToConfirmActivateRid ] = React.useState(false);

  React.useEffect(() => {
    if (id) {
      setState({ id, input: id, touched: true })
      getData(id);
    }
  }, [id]);

  function getData(val: string) {
    getRidData(val, 'rid')
      .then(data => {
        const productCheck = data.find(dataHas('primaryProductMatching'));
        const dataRomsId = data.find(dataHas('romsId'));
        if (productCheck) {
          setProdMatch(productCheck.data.primaryProductMatching);
        }
        if (dataRomsId) {
          const romId = dataRomsId.data.romsId;
          return getRidData(romId, 'roms')
            .then(moreData => ([ ...data, ...moreData ]));
        } else {
          return data;
        }
      })
      .then(setRidsData);
  }

  function handleChange({ target: { value } }: any) {
    setState({ ...state, touched: true, input: value });
  };

  function handleKeyPress(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.charCode === 13) {
      setState({ ...state, id: state.input });
      getData(state.input);
    }
  };

  function submitSearch() {
    getData(state.input);
  }

  function submitSync() {
    syncRid(id || state.input)
      .then(() => getData(state.input));
  }

  function handleActivateRid(rid: string) {
    askToConfirmActivateRid(false);
    setState({ id: rid, input: rid, touched: true });
    setTimeout( () => {
      activateRid(rid)
      .then(() => getData(rid));
    }, 0);
  }

  function handleActivateRidCancel() {
    askToConfirmActivateRid(false);
  }

  function submitActivateRid() {
    askToConfirmActivateRid(true);
  }

  const valid = validateRidInput(state);
  const operationalInProgress = activationStatus.progress === AsyncProgress.Started;
  const syncInProgress = syncStatus.progress === AsyncProgress.Started;
  const fetchInProgress = apiStatus.progress === AsyncProgress.Started;
  const actionsDisabled = !valid || fetchInProgress || syncInProgress || operationalInProgress;

  return (
    <div className={`mini-dashboard ${syncInProgress || fetchInProgress ? 'disabled' : '' }`}>
      <div className="select-rid">
        <span className="label">{strings['rid.label.check']}</span>
        <Input
          valid={valid}
          id={`id-input`}
          className="id-input"
          placeholder={`RID`}
          type="text"
          onChange={handleChange}
          onKeyPress={handleKeyPress}
          disabled={fetchInProgress || syncInProgress}
          value={state.input}
          autoFocus={true}
        />
        <Button key="ridcheck" theme="primary" type="button"
          onClick={submitSearch}
          disabled={actionsDisabled}>
          {strings['rid.diag.button.check']}
        </Button>
        <Button key="ridsync" theme="primary" type="button"
          onClick={submitSync}
          disabled={actionsDisabled}>
          {strings['rid.diag.button.sync']}
        </Button>
        <Button theme="primary"
          type="button"
          onClick={submitActivateRid}
          disabled={actionsDisabled}>
          {strings['button.operational']}
        </Button>
      </div>
      <DataDisplay status={apiStatus}>
        <div className="data-table">
          {ridsData.map((ridData, idx) => <DataKeyValueDisplay key={idx} {...ridData} />)}
        </div>
      </DataDisplay>
      <OperationalConfirm
        id={state.input}
        massages={[
          'activaterid.confirm.message.1',
          'activaterid.confirm.message.2',
        ]}
        label={'activaterid.input.label'}
        onConfirm={handleActivateRid}
        onCancel={handleActivateRidCancel}
        show={confirmActivateRid} />
    </div>
  );
}
