import { ifElse } from 'ramda';
import React from 'react';
import { Link } from 'react-router-dom';

import strings from '../strings';
import { User } from '../types';
import { idFromUrn } from '../utils';

interface UsersResultProps {
  users: User[];
  onDisable: (urn: string, name: string) => void;
  onEnable: (urn: string, name: string) => void;
  onResetPassword: (email: string) => void;
}

export function UsersResult({ users, onDisable, onEnable, onResetPassword }: UsersResultProps ) {

  function handleSwitchDisable(e: React.MouseEvent<HTMLElement>, user: User) {
    e.stopPropagation();
    e.preventDefault();
    ifElse(
      () => (user.disabled === true),
      onEnable,
      onDisable,
    )(user.userUrn, `${user.firstName} ${user.lastName}`);
  }

  function handleResetPassword(e: React.MouseEvent<HTMLElement>, user: User) {
    e.stopPropagation();
    e.preventDefault();
    onResetPassword(user.primaryEmail);
  }

  return (
    <ul className="user-result list">
      {users.map(u => (
        <li key={u.userUrn} className={u.disabled ? 'disable' : ''}>
          <span title={u.userUrn} className="id">
            {idFromUrn(u.userUrn)}
          </span>
          <span className="name">
            <p>
              {u.firstName} {u.lastName}
            </p>
            <p>{u.primaryEmail}</p>
          </span>
          <span className="action">
            {!u.disabled && !u.internal &&
              <Link to={`users/${u.userUrn}/profile`}>{strings['users.profile']}</Link>
            }
            {!u.disabled && (
              <a href={``} onClick={e => handleResetPassword(e, u)}>
                {strings['users.reset.pass']}
              </a>
            )}
            <a href={``} onClick={e => handleSwitchDisable(e, u)}>
              {strings[u.disabled ? 'users.enable' : 'users.disable']}
            </a>
          </span>
        </li>
      ))}
    </ul>
  );
}
