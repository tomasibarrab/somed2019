import { compose, propOr } from 'ramda';
import * as React from 'react';
import { RouteComponentProps } from 'react-router-dom';

import { AlertMessage } from '@buffet/alert-message';
import { Panel } from '@buffet/panel';
import { AsyncProgress, getAsyncError, useAsync } from 'shared-react-utils/useAsync';

import * as api from '../api';
import strings from '../strings';
import { Permissions, User, UserProfile } from '../types';

import './UserProfile.scss';

type Props = RouteComponentProps<any>;


const replaceTitlePrefix = (s: string) => s.replace('Guest_Center_Title_', '').replace('_', ' ');

const getTitle = compose(replaceTitlePrefix, propOr('', 'title'));

export function UserProfile({ match }: Props) {
  const [ openPanel, setOpenPanel ] = React.useState<string | undefined>();

  // fetch profiles for a user urn
  const [apiGetUserStatus, getUserInfo] = useAsync(api.getUserInfo);
  const fetchProfileInProgress = apiGetUserStatus.progress === AsyncProgress.Started;
  const [userInfo, setUserInfo] = React.useState<User | undefined>(undefined);

  // fetch permissions for a context
  const [apiStatus, getPermissionsData] = useAsync(api.getUserPermissionsForContext);
  const fetchInProgress = apiStatus.progress === AsyncProgress.Started;
  // permission state
  const [ permissionsState, setPermissionsState ] = React.useState<Permissions>({});

  // load profiles for this users urn once when load page
  React.useEffect(() => {
    const userUrn = match.params.userurn;
    getUserInfo(userUrn).then(setUserInfo);
  }, []);

  // end hooks --------------------------------------------

  // fetch permissions for userUrn for a given contextUrn
  function handleGetPermissions({ e, profile }: { e: React.MouseEvent<HTMLElement>; profile: any; }) {
    e.stopPropagation();
    e.preventDefault();
    if (openPanel !== profile.contextUrn) {
      setOpenPanel(profile.contextUrn);
    } else {
      setOpenPanel(undefined);
    }

    // don't fetch again if already loaded
    if (permissionsState[profile.contextUrn] !== undefined) {
      return;
    }

    getPermissionsData(profile.userUrn, profile.contextUrn)
      .then(data => {
        const perms: Permissions = {};
        perms[profile.contextUrn] = data.permissions.sort();
        setPermissionsState({ ...permissionsState, ...perms });
      });
  }

  // helper to render ui for permissions
  function renderPermissions(contextUrn: string, key: string) {
    const permissions = permissionsState[contextUrn];
    if (permissions === undefined) {
      return null;
    }
    if (permissions.length <= 0 && openPanel === contextUrn) {
      return <AlertMessage
        id="no-permissions"
        type="error"
        message={`No permissions found for this user in ${contextUrn}`}
        iconId="error"
      />;
    }
    return (
      <div className={`permission-list ${openPanel === contextUrn ? 'open' : 'close'}`}>
        {permissions.map(permission => (
          <span className="permission" key={contextUrn + key}>
            {permission}
          </span>
        ))}
      </div>
    );
  }

  const userName = userInfo ? `${userInfo.firstName} ${userInfo.lastName} - ${userInfo.primaryEmail}` : '';
  const profiles = propOr<UserProfile[], any, UserProfile[]>([], 'profiles', userInfo || {});

  return (
    <Panel title={`${strings['users.profile.title']} ${userName}`}>
      {!fetchProfileInProgress && (
        <ul className="user-result list">
          {profiles.map(profile => (
            <>
              <li key={profile.contextUrn + profile.phoneNumber}
                className={`${openPanel === profile.contextUrn ? 'active' : ''}`}>
                <span title={profile.contextUrn} className="urn">
                  {profile.contextUrn}
                </span>
                <span className="title">{getTitle(profile)}</span>
                <span>{profile.phoneNumber}</span>
                <span>{profile.inactive}</span>
                <span className="filler"></span>
                <span className="action">
                  <a href={``} onClick={e => handleGetPermissions({ e, profile })}>
                    {strings['users.profile.permissions']}
                  </a>
                </span>
              </li>
              {renderPermissions(profile.contextUrn, profile.userUrn)}
            </>
          ))}
        </ul>
      )}
    </Panel>
  );
}
