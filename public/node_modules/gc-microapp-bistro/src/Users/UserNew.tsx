import { propOr } from 'ramda';
import * as React from 'react';
import { Field, Form } from 'react-final-form';
import { RouteComponentProps } from 'react-router-dom';

import { AlertMessage } from '@buffet/alert-message';
import { Notify } from '@buffet/notify';

import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync/useAsync';
import * as validate from 'shared-utils/validate';

import * as api from '../api';
import { Routes } from '../common/App/App';
import strings from '../strings';
import { UserEditor } from './UserEditor/UserEditor';

// Validation regex for opentable or kayak only email address
const validInternalEmails = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@(opentable|kayak).com$/;

export function UserNew({history}: RouteComponentProps<any>) {
  const [ savingUser, saveNewUser ] = useAsync(api.saveNewUser);
  const [ error, setError ] = React.useState(undefined)

  const validateUser = React.useCallback( validate.create({
    cellPhone: validate.compose(
      validate.required(strings['users.validate.required']),
      validate.minChars(10, strings['users.validate.tooshort'])),
    firstName: validate.compose(
      validate.required(strings['users.validate.required']),
      validate.maxChars(80, strings['users.validate.toolong'])),
    lastName: validate.compose(
      validate.required(strings['users.validate.required']),
      validate.maxChars(80, strings['users.validate.toolong'])),
    primaryEmail: validate.compose(
      validate.required(strings['users.validate.required']),
      validate.email(strings['users.validate.email']),
      validate.regEx(validInternalEmails, strings['users.validate.email'])),
  }), []);


  function handleSaveUser(values: any): undefined {
    saveNewUser(values)
    .then(() =>
      history.push(`${Routes.Users}?external=false&internal=true&query=${values.primaryEmail}`) )
    .catch(err =>
      setError(err));
    return;
  }

  function handleNotifyChange(show: boolean) {
    if (!show) {
      setError(undefined)
    }
  }

  function handleCancel() {
    history.push(Routes.Users);
  }

  const inProgress = savingUser.progress === AsyncProgress.Started;
  return (
    <>
      <Form
        onSubmit={handleSaveUser}
        validate={validateUser}
        initialValues={{ }}
        render={(p) =>
          <UserEditor {...p} isSubmitting={inProgress} onSubmit={handleSaveUser} onCancel={handleCancel}/>
        }
      />
      <Notify
        show={savingUser.progress === AsyncProgress.Failed}
        autohide={true}
        delay={5}
        onTransitioned={handleNotifyChange}
      >
        <AlertMessage
          id="save-user-message"
          iconId="negative"
          message={propOr('Failed to complete operation', 'message', error)}
          type="error" />
      </Notify>
    </>
  );
}
