export interface RawConfig {
  dataSource: string;
  dataItems: Key[];
  idType: string | null;
  url: string | null;
}

interface DataItems {
  key: string;
  label: string;
}

export interface Config extends RawConfig {
  url: string;
}

export interface Key {
  key: string;
  label: string;
  optional?: boolean;
}

export interface RidData {
  title?: string;
  data?: any;
  keys?: Key[];
}

export interface SearchDTO<T> {
  items: T[];
  totalPages: number;
  pageIndex: number;
  pageSize: number;
  totalResults: number;
}

export interface BaseRestaurant {
  rid: number;
  name: string | null;
}

interface AddressResponse {
  city?: string | null;
  country?: string | null;
}

interface Address {
  city?: string | null;
  countryCode?: string | null;
}

// Calls to restaurant search return restaurants in this format
export interface RestaurantSearchItemDTO extends BaseRestaurant {
  addressResponse?: AddressResponse | null;
}

export interface Restaurant extends BaseRestaurant {
  city?: string;
  country?: string;
  isTestRestaurant: boolean;
}

// In the Angular version of the Chrome, "UserRecentRestaurants" will be primed from context.
// https://github.com/opentable/gc-rid-selector/blob/dev/src/script/GcUserRecentRestaurants.js#L72-L76
// TODO: Remove this and refactor the rest of the code that relies on it once the Angular version is retired.
export interface RestaurantDTO extends BaseRestaurant {
  testRestaurant?: boolean;
  isTestRestaurant?: boolean;
  addressResponse?: AddressResponse | null;
  address?: Address | null;
  city?: string | null;
  country?: string | null;
}

export interface Group {
  gid: number;
  name: string;
}

export interface SearchState {
  id: string | null;
  input: string;
  touched: boolean;
}

export interface RidInputState {
  id: string | null;
  input: string;
  touched: boolean;
}

export interface UserProfile {
  userUrn: string;
  phoneNumber: string | null;
  emailAddress: string;
  enabled2fa: boolean;
  title: string | null;
  contextUrn: string;
  inactive: boolean;
  gdprNotificationReceiver: boolean;
}

export interface User {
  firstName: string;
  lastName: string;
  userUrn: string;
  internal: boolean;
  primaryEmail: string;
  profiles?: UserProfile[];
  disabled?: boolean;
}

export interface QSParameters {
  [option: string]: string | string[] | undefined;
}

export interface Permissions {
  [ urn: string]: [];
}

export interface SidecarReport {
  RID: number;
  OperationalStatus: string;
  RestaurantType: string;
  Restaurant: any;
  RestaurantStatus: any;
  Jobs: any;
  Commands: any;
  Metrics: any;
  RestaurantState: {
    EnableImport: boolean;
    EnableCountRefresh: boolean;
    EnableSystemChange: boolean;
    ErrorCodes: string[];
    CurrentActivity: any;
  }
}

export interface VenueSummary {
  ReservationCount: number;
  GuestCount: number;
}

export interface RidEntitiesSummary {
  sidecarReporting: SidecarReport;
  venueSummary: VenueSummary;
}

interface GCSubsystemEventStatus {
  requestId: number | string,
  subsystem: string | string;
  status: string;
  errorMessage?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface GCEventStatus {
  id: number | string;
  rid: number | string;
  status: string;
  eventType: string;
  createdAt: Date;
  updatedAt: Date;
  createdBy: string;
  subsystemEvents: GCSubsystemEventStatus[];
}
