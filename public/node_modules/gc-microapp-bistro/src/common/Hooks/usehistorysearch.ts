import debounce from 'lodash/debounce';
import queryString from 'query-string';
import React from 'react';
import { RouteComponentProps } from 'react-router';

import { AsyncCall, AsyncStatus, useAsync } from 'shared-react-utils/useAsync';

import { noResult, SearchParameters } from '../../api';
import { SearchDTO, SearchState } from '../../types';
import { initSearchState, toQueryString } from '../../utils';

type Props = RouteComponentProps<any>;

interface SearchResult<T> {
  result: SearchDTO<T>;
  status: AsyncStatus;
  touched: boolean;
  value: SearchParameters;
}

type UseResult<T> = [ Readonly<SearchResult<T>>, (options: SearchParameters, action?: string) => void ];

/**
 * This hook manages the call to an async search function (accepting a string as parameter).
 * The search is launched by the host component using the trigger() function in the returned object.
 * This hook also manages the browser history, updating the query string with the q=<searchText>
 * every time a search is launched.
 * The search calls are debounce on 500ms delay.
 * @param asyncCall thea async search function accepting a single string argument and returning a Promise<T>
 * @param routeInfo RouteComponentProps used to manage history and location query string.
 * @param delay (optional) time in ms must elapse since the last time the search function was invoked.
 */
export function useHistorySearch<T>(
  asyncCall: AsyncCall<[SearchParameters], SearchDTO<T>>,
  defaultValue: SearchParameters,
  { history, location }: Props,
  delay = 500,
): UseResult<T>  {
  const [ state, setState ] = React.useState<SearchState>(initSearchState(defaultValue.query));
  const [ searchValue, setSearchValue ] = React.useState<SearchParameters>(defaultValue);
  const [ searchResult, setSearchResult ] = React.useState<SearchDTO<T>>();
  const [ apiStatus, searchData ] = useAsync<[SearchParameters], SearchDTO<T>>(asyncCall);

  React.useEffect(() => {
    // Trigger a search from the given query from the URL address
    function searchLocation(query: string) {
      const pageSearchQuery = queryString.parse(query) as SearchParameters;
      requestSearch({ ...searchValue, ...pageSearchQuery}, 'POP');
    }
    const unlisten = history.listen((newLocation, action) => {
      if (action === 'POP') {
        searchLocation(newLocation.search);
      }
    });
    if (location.search) {
      searchLocation(location.search);
    }
    return () => unlisten();
  }, []);

  const search = React.useRef(debounce( (options: SearchParameters, action = 'PUSH') => {
    if (action === 'PUSH') {
      history.push(toQueryString(options));
    } else {
      history.replace(toQueryString(options));
    }
    searchData(options)
      .then(setSearchResult)
      .catch(() => setSearchResult(undefined));
  }, delay));

  const requestSearch = (options: SearchParameters, action = 'PUSH') => {
    setState({ ...state, touched: true, input: options.query });
    setSearchValue(options);
    search.current(options, action);
  }

  return [{
      result: searchResult || noResult(),
      status: apiStatus,
      touched: state.touched,
      value: searchValue,
    },
    requestSearch,
  ];
}

