import * as React from 'react';
import { RouteComponentProps, withRouter } from 'react-router-dom';

import { Button } from '@buffet/button';
import { Input } from '@buffet/input';
import { Panel } from '@buffet/panel';

import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync';

import * as api from '../../api';
import strings from '../../strings';

import DataDisplay from '../DataDisplay/DataDisplay';
import DataPermissionDisplay from './DataPermissionDisplay';

interface PermissionsDashboardProps {
  idType: string;
}

interface PermissionsDashboardState {
  id: string | null;
  input: string;
  touched: boolean;
}

type Props = PermissionsDashboardProps & RouteComponentProps<any>;

export function PermissionsDashboardImpl({ idType, match }: Props) {
  const [ state, setState ] = React.useState<PermissionsDashboardState>({
      id: null,
      input: '',
      touched: false,
  });
  const [ permissions, setPermissions ] = React.useState(null);
  const [ apiStatus, getRidPermissions ] = useAsync(api.getRidPermissions);
  React.useEffect(() => {
    const id = match.params[idType];
    setState({ ...state, id, input: id });
    getRidPermissions(id)
      .then(setPermissions);
  }, []);

  const validateRid = () => {
    return !state.touched || !isNaN(parseInt(state.input, 10));
  };

  const handleSubmit = () => {
    setState(st => ({ ...st, id: state.input }));
    getRidPermissions(state.input)
      .then(setPermissions);
  };

  const handleChange = ({ target: { value } }: any) => {
    setState(st => ({ ...st, input: value, touched: true }));
  };

  const handleKeyPress: React.KeyboardEventHandler<HTMLInputElement> = e => {
    if (e.charCode === 13) {
      setState(st => ({ ...st, id: state.input }));
      handleSubmit();
    }
  };

  const handleSeedCompleted = () => {
    setState(st => ({ ...st, id: null }));
    handleSubmit();
  };

  // set state of refresh:false
  // when need to rerender, set to true
  return (
    <Panel title={strings[`${idType}.permissions.title`]}>
      <div className="mini-dashboard">
        <div className="select-rid">
          <span className="label">{strings[`${idType}.permissions.label.check`]}</span>
          <Input
            valid={validateRid()}
            id={`id-input`}
            className="id-input"
            placeholder={`Enter ${idType}`}
            value={state.input}
            type="text"
            onChange={handleChange}
            onKeyPress={handleKeyPress}
            disabled={apiStatus.progress === AsyncProgress.Started}
          />
          <Button theme="primary" type="button" onClick={handleSubmit}>
            {strings[`${idType}.permissions.button.check`]}
          </Button>
        </div>
        <DataDisplay status={apiStatus} >
          <DataPermissionDisplay
            data={permissions}
            id={state.id}
            idType={idType}
            onSeedCompleted={handleSeedCompleted}
          />
        </DataDisplay>
      </div>
    </Panel>
  );
}

export const PermissionsDashboard = withRouter(PermissionsDashboardImpl);
