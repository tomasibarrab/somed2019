import { cond, equals, pathOr, propOr } from 'ramda';
import React from 'react';

import { AsyncProgress, AsyncStatus } from 'shared-react-utils/useAsync';

import LoadingIcon from '../../common/LoadingIcon/LoadingIcon';
import { SearchDTO } from '../../types';

import './SearchInfo.scss';

export interface SearchInfoProps<T> {
  status: AsyncStatus;
  result: SearchDTO<T>
  children?: React.ReactNode;
}

const SearchError = ( search: AsyncStatus ) =>
  (<span>Error: {pathOr('unknown error', ['error', 'message'], search)}</span>);

const Searching = () =>
  (<><span>Searching</span><LoadingIcon /></>);

const Found = <T extends any>(result: SearchDTO<T>) =>
  (<span>Found {propOr(0, 'totalResults', result)} items.</span>);

/**
 * A component for displaying search result information and add
 * search options.
 */
export function SearchInfo<T>({ status, result, children }: SearchInfoProps<T>) {

  function renderStatus(progress: AsyncProgress) {
    return cond([
      [ equals(AsyncProgress.Failed), () => <SearchError {...status} />],
      [ equals(AsyncProgress.Started), () => <Searching />],
      [ () => true, () => <Found {...result} />],
    ])(progress);
  }

  const inProgress = status.progress === AsyncProgress.Started;
  return (
    <div className={`search-info `}>
      <div className={`search-options ${inProgress ? 'disabled' : ''}`}>
        {children}
      </div>
      <div className="search-result">
        {renderStatus(status.progress)}
      </div>
    </div>
  )
}
