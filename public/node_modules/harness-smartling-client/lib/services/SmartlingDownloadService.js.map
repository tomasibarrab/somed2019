{"version":3,"sources":["../../src/services/SmartlingDownloadService.js"],"names":["module","exports","SmartlingBaseService","HTTPService","HTTPLogging","SmartlingConstants","Utils","Promise","SmartlingDownloadService","fetch","options","promiseQueue","validateOptions","bind","makeRequest","resolve","reject","accessToken","projectId","fileUri","localeIds","retrievalType","get","getRequestUrl","set","plugin","parseBinary","promiseBody","baseUrl","queryString","join","fileNameMode","localeMode","zipFileName","undefined","includeOriginalStrings","host"],"mappings":"q3BAAAA,OAAOC,OAAP,GAAiB,UAAUC,oBAAV,EAAgCC,WAAhC,EAA6CC,WAA7C,EAA0DC,kBAA1D,EAA8EC,KAA9E,EAAqFC,OAArF,EAA8F;AACvGC,0BADuG;;AAGpGC,SAHoG,kBAG9FC,OAH8F,EAGrF;AACpB,aAAO,IAAIF,wBAAJ,GAA+BC,KAA/B,CAAqCC,OAArC,CAAP;AACD,KAL0G;;AAO3GD,SAP2G,kBAOrGC,OAPqG,EAO5F;AACb,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAOJ,MAAMK,YAAN,CAAmB;AACxB,WAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CADwB;AAExB,WAAKC,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAFwB,CAAnB,CAAP;;AAID,KAb0G;;AAe3GD,mBAf2G,8BAezF;AAChB,aAAO,IAAIL,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMN,UAAU,OAAKA,OAArB;AACA,YAAI,CAACA,QAAQO,WAAb,EAA0B;AACxBD,iBAAO,0DAAP;AACD;;AAED,YAAI,CAACN,QAAQQ,SAAb,EAAwB;AACtBF,iBAAO,wDAAP;AACD;;AAED,YAAI,CAACN,QAAQS,OAAb,EAAsB;AACpBH,iBAAO,sDAAP;AACD;;AAED,YAAI,CAACN,QAAQU,SAAb,EAAwB;AACtBJ,iBAAO,wDAAP;AACD;;AAED,YAAI,CAACN,QAAQW,aAAb,EAA4B;AAC1BL,iBAAO,4DAAP;AACD;;AAEDD,gBAAQL,OAAR;AACD,OAvBM,CAAP;AAwBD,KAxC0G;;AA0C3GI,eA1C2G,wBA0C/FJ,OA1C+F,EA0CtF;AACnB,aAAOP,YAAYmB,GAAZ,CAAgB,KAAKC,aAAL,CAAmBb,OAAnB,CAAhB;AACJc,SADI,CACA,cADA,EACgB,kBADhB;AAEJA,SAFI,CAEA,eAFA,cAE2Bd,QAAQO,WAFnC;AAGJQ,YAHI,CAGGrB,WAHH;AAIJsB,iBAJI;AAKJC,iBALI,EAAP;AAMD,KAjD0G;;AAmD3GJ,iBAnD2G,0BAmD7Fb,OAnD6F,EAmDpF;AACrB,UAAMkB,sCAAoClB,QAAQQ,SAA5C,eAAN;AACA,UAAIW,+BAA6BnB,QAAQS,OAArC,qBAA4DT,QAAQU,SAAR,CAAkBU,IAAlB,CAAuB,GAAvB,CAA5D,sBAAwGpB,QAAQqB,YAAhH,oBAA2IrB,QAAQsB,UAAnJ,uBAA+KtB,QAAQW,aAA3L,CAFqB,CAEuL;AAC5M,UAAIX,QAAQuB,WAAR,KAAwBC,SAA5B,EAAuC;AACrCL,yCAA+BnB,QAAQuB,WAAvC;AACD;;AAED,UAAIvB,QAAQyB,sBAAR,KAAmCD,SAAvC,EAAkD;AAChDL,oDAA0CnB,QAAQyB,sBAAlD;AACD;;AAED,kBAAU9B,mBAAmB+B,IAA7B,GAAoCR,OAApC,GAA8CC,WAA9C;AACD,KA/D0G,mCACtE3B,oBADsE;;;AAkE7G,SAAOM,wBAAP;AACD,CAnED","file":"SmartlingDownloadService.js","sourcesContent":["module.exports = function (SmartlingBaseService, HTTPService, HTTPLogging, SmartlingConstants, Utils, Promise) {\n  class SmartlingDownloadService extends SmartlingBaseService {\n\n    static fetch(options) {\n      return new SmartlingDownloadService().fetch(options);\n    }\n\n    fetch(options) {\n      this.options = options;\n      return Utils.promiseQueue([\n        this.validateOptions.bind(this),\n        this.makeRequest.bind(this)\n      ]);\n    }\n\n    validateOptions() {\n      return new Promise((resolve, reject) => {\n        const options = this.options;\n        if (!options.accessToken) {\n          reject('Invalid Smartling Download Option accessToken is missing');\n        }\n\n        if (!options.projectId) {\n          reject('Invalid Smartling Download Option projectId is missing');\n        }\n\n        if (!options.fileUri) {\n          reject('Invalid Smartling Download Option fileUri is missing');\n        }\n\n        if (!options.localeIds) {\n          reject('Invalid Smartling Download Option localeIds is missing');\n        }\n\n        if (!options.retrievalType) {\n          reject('Invalid Smartling Download Option retrievalType is missing');\n        }\n\n        resolve(options);\n      });\n    }\n\n    makeRequest(options) {\n      return HTTPService.get(this.getRequestUrl(options))\n        .set('Content-Type', 'application/json')\n        .set('Authorization', `Bearer ${options.accessToken}`)\n        .plugin(HTTPLogging)\n        .parseBinary()\n        .promiseBody();\n    }\n\n    getRequestUrl(options) {\n      const baseUrl = `/files-api/v2/projects/${options.projectId}/files/zip`;\n      let queryString = `?fileUris[]=${options.fileUri}&localeIds[]=${options.localeIds.join(',')}&fileNameMode=${options.fileNameMode}&localeMode=${options.localeMode}&retrievalType=${options.retrievalType}`; // eslint-disable-line max-len\n      if (options.zipFileName !== undefined) {\n        queryString += `&zipFileName=${options.zipFileName}`;\n      }\n\n      if (options.includeOriginalStrings !== undefined) {\n        queryString += `&includeOriginalStrings=${options.includeOriginalStrings}`;\n      }\n\n      return `${SmartlingConstants.host}${baseUrl}${queryString}`;\n    }\n  }\n\n  return SmartlingDownloadService;\n};\n"]}