'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}module.exports = function (SmartlingBaseService, HTTPService, HTTPLogging, SmartlingConstants, Utils, Promise) {var
  SmartlingUploadService = function (_SmartlingBaseService) {_inherits(SmartlingUploadService, _SmartlingBaseService);function SmartlingUploadService() {_classCallCheck(this, SmartlingUploadService);return _possibleConstructorReturn(this, _SmartlingBaseService.apply(this, arguments));}SmartlingUploadService.
    send = function send(options) {
      return new SmartlingUploadService().send(options);
    };SmartlingUploadService.prototype.

    send = function send(options) {
      this.options = options;

      return Utils.promiseQueue([
      this.validateOptions.bind(this),
      this.makeRequest.bind(this)]);

    };SmartlingUploadService.prototype.

    validateOptions = function validateOptions() {var _this2 = this;
      return new Promise(function (resolve, reject) {
        var options = _this2.options;

        if (!options.accessToken) {
          reject('Invalid Smartling Upload Option accessToken is missing');
        }

        if (!options.projectId) {
          reject('Invalid Smartling Upload Option projectId is missing');
        }

        if (!options.fileUri) {
          reject('Invalid Smartling Upload Option fileUri is missing');
        }

        if (!options.content) {
          reject('Invalid Smartling Upload Option content is missing');
        }

        if (!options.contentType) {
          reject('Invalid Smartling Upload Option contentType is missing');
        }

        resolve(options);
      });
    };SmartlingUploadService.prototype.

    makeRequest = function makeRequest(options) {
      return HTTPService.post(this.getRequestUrl(options)).
      set('Authorization', 'Bearer ' + options.accessToken).
      plugin(HTTPLogging).
      appendFile('file', new Buffer(options.content), {
        filename: options.fileUri,
        contentType: options.contentType }).

      promiseBody().
      then(this.validateResponse);
    };SmartlingUploadService.prototype.

    getRequestUrl = function getRequestUrl(options) {
      var baseUrl = '/files-api/v2/projects/' + options.projectId + '/file';
      var queryString = '?fileUri=' + options.fileUri + '&fileType=' + options.fileType;
      return '' + SmartlingConstants.host + baseUrl + queryString;
    };return SmartlingUploadService;}(SmartlingBaseService);


  return SmartlingUploadService;
};
//# sourceMappingURL=SmartlingUploadService.js.map