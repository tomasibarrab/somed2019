{"version":3,"sources":["../../src/services/SmartlingImportService.js"],"names":["module","exports","SmartlingBaseService","HTTPService","HTTPLogging","SmartlingConstants","Utils","Promise","SmartlingImportService","send","options","promiseQueue","validateOptions","bind","makeRequest","resolve","reject","accessToken","projectId","localeId","fileUri","fileType","content","contentType","post","getRequestUrl","set","plugin","appendFile","Buffer","filename","promiseBody","then","validateResponse","baseUrl","queryString","overwrite","undefined","translationState","host"],"mappings":"q3BAAAA,OAAOC,OAAP,GAAiB,UAAUC,oBAAV,EAAgCC,WAAhC,EAA6CC,WAA7C,EAA0DC,kBAA1D,EAA8EC,KAA9E,EAAqFC,OAArF,EAA8F;AACvGC,wBADuG;AAEpGC,QAFoG,iBAE/FC,OAF+F,EAEtF;AACnB,aAAO,IAAIF,sBAAJ,GAA6BC,IAA7B,CAAkCC,OAAlC,CAAP;AACD,KAJ0G;;AAM3GD,QAN2G,iBAMtGC,OANsG,EAM7F;AACZ,WAAKA,OAAL,GAAeA,OAAf;;AAEA,aAAOJ,MAAMK,YAAN,CAAmB;AACxB,WAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CADwB;AAExB,WAAKC,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAFwB,CAAnB,CAAP;;AAID,KAb0G;;AAe3GD,mBAf2G,8BAezF;AAChB,aAAO,IAAIL,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMN,UAAU,OAAKA,OAArB;;AAEA,YAAI,CAACA,QAAQO,WAAb,EAA0B;AACxBD,iBAAO,wDAAP;AACD;;AAED,YAAI,CAACN,QAAQQ,SAAb,EAAwB;AACtBF,iBAAO,sDAAP;AACD;;AAED,YAAI,CAACN,QAAQS,QAAb,EAAuB;AACrBH,iBAAO,qDAAP;AACD;;AAED,YAAI,CAACN,QAAQU,OAAb,EAAsB;AACpBJ,iBAAO,oDAAP;AACD;;AAED,YAAI,CAACN,QAAQW,QAAb,EAAuB;AACrBL,iBAAO,qDAAP;AACD;;AAED,YAAI,CAACN,QAAQY,OAAb,EAAsB;AACpBN,iBAAO,oDAAP;AACD;;AAED,YAAI,CAACN,QAAQa,WAAb,EAA0B;AACxBP,iBAAO,wDAAP;AACD;;AAEDD,gBAAQL,OAAR;AACD,OAhCM,CAAP;AAiCD,KAjD0G;;AAmD3GI,eAnD2G,wBAmD/FJ,OAnD+F,EAmDtF;AACnB,aAAOP,YAAYqB,IAAZ,CAAiB,KAAKC,aAAL,CAAmBf,OAAnB,CAAjB;AACJgB,SADI,CACA,eADA,cAC2BhB,QAAQO,WADnC;AAEJU,YAFI,CAEGvB,WAFH;AAGJwB,gBAHI,CAGO,MAHP,EAGe,IAAIC,MAAJ,CAAWnB,QAAQY,OAAnB,CAHf,EAG4C;AAC/CQ,kBAAUpB,QAAQU,OAD6B;AAE/CG,qBAAab,QAAQa,WAF0B,EAH5C;;AAOJQ,iBAPI;AAQJC,UARI,CAQC,KAAKC,gBARN,CAAP;AASD,KA7D0G;;AA+D3GR,iBA/D2G,0BA+D7Ff,OA/D6F,EA+DpF;AACrB,UAAMwB,sCAAoCxB,QAAQQ,SAA5C,iBAAiER,QAAQS,QAAzE,iBAAN;AACA,UAAIgB,4BAA0BzB,QAAQU,OAAlC,kBAAsDV,QAAQW,QAAlE;;AAEA,UAAIX,QAAQ0B,SAAR,KAAsBC,SAA1B,EAAqC;AACnCF,uCAA6BzB,QAAQ0B,SAArC;AACD;;AAED,UAAI1B,QAAQ4B,gBAAR,KAA6BD,SAAjC,EAA4C;AAC1CF,8CAAoCzB,QAAQ4B,gBAA5C;AACD;;AAED,kBAAUjC,mBAAmBkC,IAA7B,GAAoCL,OAApC,GAA8CC,WAA9C;AACD,KA5E0G,iCACxEjC,oBADwE;;;AA+E7G,SAAOM,sBAAP;AACD,CAhFD","file":"SmartlingImportService.js","sourcesContent":["module.exports = function (SmartlingBaseService, HTTPService, HTTPLogging, SmartlingConstants, Utils, Promise) {\n  class SmartlingImportService extends SmartlingBaseService {\n    static send(options) {\n      return new SmartlingImportService().send(options);\n    }\n\n    send(options) {\n      this.options = options;\n\n      return Utils.promiseQueue([\n        this.validateOptions.bind(this),\n        this.makeRequest.bind(this)\n      ]);\n    }\n\n    validateOptions() {\n      return new Promise((resolve, reject) => {\n        const options = this.options;\n\n        if (!options.accessToken) {\n          reject('Invalid Smartling Import Option accessToken is missing');\n        }\n\n        if (!options.projectId) {\n          reject('Invalid Smartling Import Option projectId is missing');\n        }\n\n        if (!options.localeId) {\n          reject('Invalid Smartling Import Option localeId is missing');\n        }\n\n        if (!options.fileUri) {\n          reject('Invalid Smartling Import Option fileUri is missing');\n        }\n\n        if (!options.fileType) {\n          reject('Invalid Smartling Import Option fileType is missing');\n        }\n\n        if (!options.content) {\n          reject('Invalid Smartling Import Option content is missing');\n        }\n\n        if (!options.contentType) {\n          reject('Invalid Smartling Import Option contentType is missing');\n        }\n\n        resolve(options);\n      });\n    }\n\n    makeRequest(options) {\n      return HTTPService.post(this.getRequestUrl(options))\n        .set('Authorization', `Bearer ${options.accessToken}`)\n        .plugin(HTTPLogging)\n        .appendFile('file', new Buffer(options.content), {\n          filename: options.fileUri,\n          contentType: options.contentType\n        })\n        .promiseBody()\n        .then(this.validateResponse);\n    }\n\n    getRequestUrl(options) {\n      const baseUrl = `/files-api/v2/projects/${options.projectId}/locales/${options.localeId}/file/import`;\n      let queryString = `?fileUri=${options.fileUri}&fileType=${options.fileType}`;\n\n      if (options.overwrite !== undefined) {\n        queryString += `&overwrite=${options.overwrite}`;\n      }\n\n      if (options.translationState !== undefined) {\n        queryString += `&translationState=${options.translationState}`;\n      }\n\n      return `${SmartlingConstants.host}${baseUrl}${queryString}`;\n    }\n  }\n\n  return SmartlingImportService;\n};\n"]}