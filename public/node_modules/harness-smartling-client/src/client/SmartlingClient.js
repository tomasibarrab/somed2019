module.exports = function (SmartlingAuthenticateService,
  SmartlingDownloadOptions, SmartlingDownloadService, SmartlingProcessDownloadResponse,
  SmartlingUploadOptions, SmartlingUploadService,
  SmartlingImportService, SmartlingImportOptions) {
  class SmartlingClient {
    constructor(userIdentifier, userSecret, projectId) {
      this.userIdentifier = userIdentifier;
      this.userSecret = userSecret;
      this.projectId = projectId;
      this.accessToken = null;
    }

    authenticate() {
      return SmartlingAuthenticateService.fetch(this.userIdentifier, this.userSecret)
        .then((response) => {
          this.accessToken = response.accessToken;
          return response;
        });
    }

    download(options) {
      const criteria = new SmartlingDownloadOptions({
        projectId: this.projectId,
        fileUri: options.fileUri,
        localeIds: options.localeIds,
        fileNameMode: options.fileNameMode,
        localeMode: options.localeMode,
        retrievalType: options.retrievalType
      });

      return this.authenticate()
        .then(this._setAccessToken.bind(this))
        .then(() => {
          criteria.accessToken = this.accessToken;

          return SmartlingDownloadService.fetch(criteria)
            .then((downloadBuffer) => { // eslint-disable-line
              return SmartlingProcessDownloadResponse.process(downloadBuffer, criteria, options.saveTo);
            });
        });
    }

    upload(options) {
      const criteria = new SmartlingUploadOptions({
        projectId: this.projectId,
        fileUri: options.fileUri,
        fileType: options.fileType,
        content: options.content,
        contentType: options.contentType
      });

      return this.authenticate()
        .then(this._setAccessToken.bind(this))
        .then(() => {
          criteria.accessToken = this.accessToken;

          return SmartlingUploadService.send(criteria);
        });
    }

    import(options) {
      const criteria = new SmartlingImportOptions({
        projectId: this.projectId,
        localeId: options.localeId,
        fileUri: options.fileUri,
        fileType: options.fileType,
        content: options.content,
        contentType: options.contentType,
        overwrite: options.overwrite,
        translationState: options.translationState
      });

      return this.authenticate()
        .then(this._setAccessToken.bind(this))
        .then(() => {
          criteria.accessToken = this.accessToken;

          return SmartlingImportService.send(criteria);
        });
    }

    _setAccessToken(authenticateResponse) {
      this.accessToken = authenticateResponse.accessToken;
    }
  }

  return SmartlingClient;
};
