module.exports = function (SmartlingBaseService, HTTPService, HTTPLogging, SmartlingConstants, Utils, Promise) {
  class SmartlingImportService extends SmartlingBaseService {
    static send(options) {
      return new SmartlingImportService().send(options);
    }

    send(options) {
      this.options = options;

      return Utils.promiseQueue([
        this.validateOptions.bind(this),
        this.makeRequest.bind(this)
      ]);
    }

    validateOptions() {
      return new Promise((resolve, reject) => {
        const options = this.options;

        if (!options.accessToken) {
          reject('Invalid Smartling Import Option accessToken is missing');
        }

        if (!options.projectId) {
          reject('Invalid Smartling Import Option projectId is missing');
        }

        if (!options.localeId) {
          reject('Invalid Smartling Import Option localeId is missing');
        }

        if (!options.fileUri) {
          reject('Invalid Smartling Import Option fileUri is missing');
        }

        if (!options.fileType) {
          reject('Invalid Smartling Import Option fileType is missing');
        }

        if (!options.content) {
          reject('Invalid Smartling Import Option content is missing');
        }

        if (!options.contentType) {
          reject('Invalid Smartling Import Option contentType is missing');
        }

        resolve(options);
      });
    }

    makeRequest(options) {
      return HTTPService.post(this.getRequestUrl(options))
        .set('Authorization', `Bearer ${options.accessToken}`)
        .plugin(HTTPLogging)
        .appendFile('file', new Buffer(options.content), {
          filename: options.fileUri,
          contentType: options.contentType
        })
        .promiseBody()
        .then(this.validateResponse);
    }

    getRequestUrl(options) {
      const baseUrl = `/files-api/v2/projects/${options.projectId}/locales/${options.localeId}/file/import`;
      let queryString = `?fileUri=${options.fileUri}&fileType=${options.fileType}`;

      if (options.overwrite !== undefined) {
        queryString += `&overwrite=${options.overwrite}`;
      }

      if (options.translationState !== undefined) {
        queryString += `&translationState=${options.translationState}`;
      }

      return `${SmartlingConstants.host}${baseUrl}${queryString}`;
    }
  }

  return SmartlingImportService;
};
