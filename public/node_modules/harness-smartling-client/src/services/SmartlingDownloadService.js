module.exports = function (SmartlingBaseService, HTTPService, HTTPLogging, SmartlingConstants, Utils, Promise) {
  class SmartlingDownloadService extends SmartlingBaseService {

    static fetch(options) {
      return new SmartlingDownloadService().fetch(options);
    }

    fetch(options) {
      this.options = options;
      return Utils.promiseQueue([
        this.validateOptions.bind(this),
        this.makeRequest.bind(this)
      ]);
    }

    validateOptions() {
      return new Promise((resolve, reject) => {
        const options = this.options;
        if (!options.accessToken) {
          reject('Invalid Smartling Download Option accessToken is missing');
        }

        if (!options.projectId) {
          reject('Invalid Smartling Download Option projectId is missing');
        }

        if (!options.fileUri) {
          reject('Invalid Smartling Download Option fileUri is missing');
        }

        if (!options.localeIds) {
          reject('Invalid Smartling Download Option localeIds is missing');
        }

        if (!options.retrievalType) {
          reject('Invalid Smartling Download Option retrievalType is missing');
        }

        resolve(options);
      });
    }

    makeRequest(options) {
      return HTTPService.get(this.getRequestUrl(options))
        .set('Content-Type', 'application/json')
        .set('Authorization', `Bearer ${options.accessToken}`)
        .plugin(HTTPLogging)
        .parseBinary()
        .promiseBody();
    }

    getRequestUrl(options) {
      const baseUrl = `/files-api/v2/projects/${options.projectId}/files/zip`;
      let queryString = `?fileUris[]=${options.fileUri}&localeIds[]=${options.localeIds.join(',')}&fileNameMode=${options.fileNameMode}&localeMode=${options.localeMode}&retrievalType=${options.retrievalType}`; // eslint-disable-line max-len
      if (options.zipFileName !== undefined) {
        queryString += `&zipFileName=${options.zipFileName}`;
      }

      if (options.includeOriginalStrings !== undefined) {
        queryString += `&includeOriginalStrings=${options.includeOriginalStrings}`;
      }

      return `${SmartlingConstants.host}${baseUrl}${queryString}`;
    }
  }

  return SmartlingDownloadService;
};
