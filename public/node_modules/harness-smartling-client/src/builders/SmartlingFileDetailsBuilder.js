module.exports = function (Utils, fsPromise, path, Promise, _) {
  class SmartlingFileDetailsBuilder {
    constructor(sourceDirectoryPath, destinationDirectoryPath, fileUri) {
      this.sourceDirectoryPath = sourceDirectoryPath;
      this.destinationDirectoryPath = destinationDirectoryPath;
      this.fileUri = fileUri;
      this.directoryNames = null;
      this.fileDetails = null;
    }

    static build(sourceDirectoryPath, destinationDirectoryPath, fileUri) {
      return new SmartlingFileDetailsBuilder(sourceDirectoryPath, destinationDirectoryPath, fileUri).build();
    }

    build() {
      return Utils.promiseQueue([
        this._setValidDirectoryNames.bind(this),
        this._setFileDetails.bind(this),
        this._getFileDetails.bind(this)
      ]);
    }

    _setValidDirectoryNames() {
      return fsPromise.readdirAsync(this.sourceDirectoryPath)
        .filter(this._filterInvalidDirectory.bind(this))
        .then((directoryNames) => {
          this.directoryNames = directoryNames;
        })
        .catch(() => false);
    }

    _filterInvalidDirectory(entry) {
      const entryPath = path.join(this.sourceDirectoryPath, entry);

      return fsPromise.statAsync(entryPath)
        .then((entryStats) => (entryStats && entryStats.isDirectory()))
        .then((isDirectory) => {
          if (!isDirectory) {
            return false;
          }

          return this._filterInvalidFile(entryPath);
        })
        .catch(() => false);
    }

    _filterInvalidFile(entryPath) {
      const filePath = path.join(entryPath, this.fileUri);
      return fsPromise.statAsync(filePath)
        .then((fileEntryStats) => (fileEntryStats && fileEntryStats.isFile()));
    }

    _setFileDetails() {
      if (_.isEmpty(this.directoryNames)) {
        return Promise.reject(`'${this.sourceDirectoryPath}' did not have any valid directories.`);
      }

      return Promise.map(this.directoryNames, this._mapFileDetail.bind(this))
        .then((fileDetails) => {
          this.fileDetails = fileDetails;
        });
    }

    _mapFileDetail(directoryName) {
      const directoryEntryPath = path.join(this.sourceDirectoryPath, directoryName);
      const localeName = directoryName.toLowerCase();

      return {
        locale: localeName,
        directory: {
          name: directoryName,
          path: directoryEntryPath
        },
        sourceFile: path.join(directoryEntryPath, this.fileUri),
        destinationFile: path.join(this.destinationDirectoryPath, `${localeName}.json`)
      };
    }

    _getFileDetails() {
      return this;
    }
  }

  return SmartlingFileDetailsBuilder;
};
