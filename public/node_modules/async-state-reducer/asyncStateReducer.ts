import { AsyncActionCreators, Failure, Success } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';


export * from './AsyncState';

/**
 * Reducer generator: takes an async action and a mapping function as arguments
 * and generates an AsyncReducer for that action.
 * The resulting state is an object with `status` and `data` (or `error` when there's an error).
 *
 * Optional dataProp parameter to customize the property name which will hold the final async data.
 *
 * @param asyncAction
 * @param dataParser
 * @param dataProp
 */
export function asyncStateReducer<PayloadType, SuccessType, ErrorType extends any, DataType>(
  asyncAction: AsyncActionCreators<PayloadType, SuccessType, ErrorType>,
  dataParser: (payload: Success<PayloadType, SuccessType>) => DataType,
  dataProp: string = 'data',
) {
  const initialStatusState = {
    status: 'init',
  };

  return reducerWithInitialState(initialStatusState)
    .case(asyncAction.started, () => ({
      status: 'started',
    }))
    .case(asyncAction.done, (state, payload) => ({
      [dataProp]: dataParser(payload),
      status: 'done',
    }))
    .case(asyncAction.failed, (state, payload: Failure<PayloadType, ErrorType>) => ({
      error: payload.error && payload.error.response || payload.error,
      status: 'failed',
    }));
}

export default asyncStateReducer;
