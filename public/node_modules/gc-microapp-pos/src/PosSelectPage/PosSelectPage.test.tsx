import { shallow } from 'enzyme';
import { AsyncContent } from 'gca-react-components';
import React from 'react';
import PosSelectionTile from './PosSelectionTile';

import { posBrandMocks } from '../store/onboarding/onboarding.mocks';
import { Props, PurePosSelectPage as PosSelectPage } from './PosSelectPage';

describe('<PosSelectPage />', () => {
  const setup = (override = {}) => {
    const { supportedPosBrands = [], supportPosStatus = 'init', selectedPos = posBrandMocks[1] } = override as Props;
    const props: Props = {
      fetchSupportedPosBrands: jest.fn(),
      intl: { formatMessage: jest.fn() } as any,
      selectPosBrand: jest.fn(),
      selectedPos,
      supportPosStatus,
      supportedPosBrands,
      updateDisplayState: jest.fn(),
    };
    const posSelectPage = shallow(<PosSelectPage {...props} />);

    return { posSelectPage, props };
  };

  describe('component will mount', () => {
    it('should fetch supported pos brands', () => {
      const { props } = setup();

      expect(props.fetchSupportedPosBrands).toHaveBeenCalled();
    });
  });

  describe('AsyncContent', () => {
    it('should set loading to true while supportedPosBrands is not done', () => {
      const { posSelectPage } = setup();

      expect(posSelectPage.find(AsyncContent).props().isLoading).toBe(true);
    });

    it('should set loading to false while supportedPosBrands is done', () => {
      const { posSelectPage } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      expect(posSelectPage.find(AsyncContent).props().isLoading).toBe(false);
    });

    it('should set isErrored to true when supportedPosBrand status is failed', () => {
      const { posSelectPage } = setup({
        supportPosStatus: 'failed',
        supportedPosBrands: [],
      });

      expect(posSelectPage.find(AsyncContent).props().isError).toBe(true);
    });
  });

  describe('selectPos', () => {
    it('should call selectPosBrand when selectPos is passed a pos brand', () => {
      const { posSelectPage, props } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      const mockPosBrand = posBrandMocks[0];

      posSelectPage.instance().selectPos(mockPosBrand);

      expect(props.selectPosBrand).toHaveBeenCalledWith(mockPosBrand);
    });

    it('should add a no-selection class to the pos-brand-selection if there is no selected pos', () => {
      const { posSelectPage } = setup({
        selectedPos: { Id: '', Name: '' },
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      expect(posSelectPage.find('.pos-brand-selection').length).toBe(1);
      expect(posSelectPage.find('.pos-brand-selection.pos-brand-selection__no-selection').length).toBe(1);
    });

    it('should not have a no-selection class on pos-brand-selection if there is selected pos', () => {
      const { posSelectPage } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      expect(posSelectPage.find('.pos-brand-selection').length).toBe(1);
      expect(posSelectPage.find('.pos-brand-selection.pos-brand-selection__no-selection').length).toBe(0);
    });
  });

  describe('Selectable POS brands', () => {
    it('should display a PosSelectionTile for each POS', () => {
      const { posSelectPage } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      expect(posSelectPage.find(PosSelectionTile).length).toBe(posBrandMocks.length);
    });

    it('should set isSelected to true if the pos is selected', () => {
      const { posSelectPage } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      expect(posSelectPage.find(PosSelectionTile).get(1).props.isSelected).toBe(true);
      expect(posSelectPage.find(PosSelectionTile).get(0).props.isSelected).toBe(false);
      expect(posSelectPage.find(PosSelectionTile).get(2).props.isSelected).toBe(false);
    });
  });

  describe('unsupported POS', () => {
    it('should have a button that goes to the "unsupported" page view', () => {
      const { posSelectPage, props } = setup({
        supportPosStatus: 'done',
        supportedPosBrands: posBrandMocks,
      });

      posSelectPage.find('.pos-select__btn__unsupported').simulate('click');

      expect(props.updateDisplayState).toHaveBeenCalledWith('unsupportedPos');
    });
  });
});
