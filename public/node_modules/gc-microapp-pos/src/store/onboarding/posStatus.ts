import {
  FETCH_CONTEXT_RID_SUCCESS,
  selectors as currentContextSelectors,
} from 'gca-react-components/src/redux-modules/currentContext';
import { Observable } from 'rxjs/Observable';
import { addNotification } from 'shared-react-smart-ui/NotificationCenter';
import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { SUPPORT_LINK, supportedPosBrandIds } from '../../constants';
import { AsyncState } from '../AsyncState';
import { Epic, PosRideData } from '../types';
import { updateDisplayState, updatePosBrand } from './onboarding';

import '../commonRxjs';


// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const fetchPosRideData = actionCreator.async<number, PosRideData, any>('FETCH_POS_RIDE_DATA');
export const cancelPosActivation = actionCreator.async<null, any, any>('CANCEL_POS_ACTIVATION');

export const actions = {
  cancelPosActivation,
  fetchPosRideData,
};


// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------

export const triggerFetchPosRideDataEpic: Epic = (action$, store) =>
  action$
    .ofType(FETCH_CONTEXT_RID_SUCCESS)
    .map(() => currentContextSelectors.rid(store.getState()))
    .map((rid: number) => fetchPosRideData.started(rid));

export const fetchPosRideDataEpic: Epic = (action$, store, { api }) =>
  action$
    .filter(fetchPosRideData.started.match)
    .mergeMap(({ payload }) =>
      Observable.forkJoin(
        // Get POS Brand from restaurant data
        api.getRestaurantData(payload),

        // Get if POS is active
        api.getPosActiveStatus(payload).catch(() => Observable.of({ pos_integration_enabled: false })),
      )
      .map(
        // Results of 2 api calls
        ([ride, PrimaryProductData]) =>
          fetchPosRideData.done({
            params: payload,
            result: {
              isPosActive: PrimaryProductData.pos_integration_enabled,
              ride,
            },
          }),
      )
      .catch(err => [fetchPosRideData.failed({ params: payload, error: err })]),
  );

export const doneFetchPosRideEpic: Epic = action$ =>
  action$
    .filter(fetchPosRideData.done.match)
    .mergeMap(({ payload }) => [
      updateDisplayState(payload.result.isPosActive ? 'active' : 'landing'),
      ...(supportedPosBrandIds.has(payload.result.ride.posBrandId)
        ? [updatePosBrand({ Id: payload.result.ride.posBrandId, Name: payload.result.ride.posBrandName })]
        : []),
    ]);

export const cancelPosActivationEpic: Epic = (action$, store, { api }) =>
  action$
    .filter(cancelPosActivation.started.match)
    .mergeMap(() => api
      .cancelPosActivation(store.getState().currentContext.restaurant.rid)
      .map((response) => cancelPosActivation.done({ params: null, result: response }))
      .catch(error => [cancelPosActivation.failed({ error, params: null })]),
    );

const cancelNotificationId = Symbol();

export const cancelPosActivationErrorEpic: Epic = (action$, store) =>
  action$
    .filter(cancelPosActivation.failed.match)
    .mergeMap(({ payload }) => {
      if (payload.error && payload.error.status === 403) {
        return [
          updateDisplayState('active'),
          addNotification({
              messageId: 'posstatus.changepos.error',
              messageValues: {
                supportLink: SUPPORT_LINK,
                yourpos: store.getState().onBoarding.selectedPos.Name,
              },
          }),
        ]
      }

      return [
        addNotification({ messageId: 'app.error.general', id: cancelNotificationId }),
      ];
    });


// ---------------------------------------------------------------------------------------------------------------------
// reducers
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: AsyncState<any> = {
  data: undefined,
  status: 'init',
};

export const fetchPosRideDataReducer = reducerWithInitialState(initialState as AsyncState<PosRideData>)
  .case(fetchPosRideData.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(fetchPosRideData.done, (state, { result }) => ({
    data: result,
    status: 'done',
  }))
  .case(fetchPosRideData.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));

export const cancelPosActivationReducer = reducerWithInitialState(initialState as AsyncState<null>)
  .case(cancelPosActivation.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(cancelPosActivation.done, (state, { result }) => ({
    data: result,
    status: 'done',
  }))
  .case(cancelPosActivation.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));
