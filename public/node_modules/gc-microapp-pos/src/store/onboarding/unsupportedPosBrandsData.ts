import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { AsyncState } from '../../store/AsyncState';
import { Epic, UnsupportedPosBrand } from '../types';

// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const fetchUnsupportedPosBrands = actionCreator.async<null, UnsupportedPosBrand[], any>(
  'FETCH_UNSUPPORTED_POS_BRANDS',
);

export const sortPosBrands = (posA: UnsupportedPosBrand, posB: UnsupportedPosBrand) =>
  posA.Name.localeCompare(posB.Name, 'en', { sensitivity: 'base' }); // list of pos brands from api is in english

// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------
export const fetchUnsupportedPosBrandsEpic: Epic = (action$, store, { api }) =>
  action$.filter(fetchUnsupportedPosBrands.started.match).mergeMap(() =>
    api
      .fetchUnqualifiedPosBrands()
      .map(result => [...result].sort(sortPosBrands))
      .map(sortedBrands => {
        return fetchUnsupportedPosBrands.done({ params: null, result: sortedBrands });
      })
      .catch(err => [fetchUnsupportedPosBrands.failed({ params: null, error: err })]),
  );

// ---------------------------------------------------------------------------------------------------------------------
// reducers
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: AsyncState<UnsupportedPosBrand[]> = {
  data: undefined,
  status: 'init',
};

export const fetchUnsupportedPosBrandsReducer = reducerWithInitialState(initialState as AsyncState<
  UnsupportedPosBrand[]
>)
  .case(fetchUnsupportedPosBrands.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(fetchUnsupportedPosBrands.done, (state, { result }) => ({
    data: result,
    status: 'done',
  }))
  .case(fetchUnsupportedPosBrands.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));
