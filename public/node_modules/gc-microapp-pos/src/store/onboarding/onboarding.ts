import { selectors as contextSelectors } from 'gca-react-components/src/redux-modules/currentContext';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { SupportedPosBrandsIds, UnsupportedPosBrand } from '../types';

import actionCreatorFactory from 'typescript-fsa';
import { OnboardingDisplayStateName, State, SupportedPosBrand } from '../types';
import { fetchUserAgreement } from './userAgreement';


// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const selectPosBrand = actionCreator<SupportedPosBrand>('SELECT_POS_BRAND');
export const updatePosBrand = actionCreator<SupportedPosBrand>('UPDATE_POS_BRAND');
export const updateDisplayState = actionCreator<OnboardingDisplayStateName>('UPDATE_DISPLAY_STATE');
export const deselectPosBrand = actionCreator('DESELECT_POS_BRAND');


// ---------------------------------------------------------------------------------------------------------------------
// selectors
// ---------------------------------------------------------------------------------------------------------------------

const getFetchOnBoardingStatus = (state: State): string => state.onBoarding.fetchPosRideDataStatus.status;

const getSupportedPosBrands = (state: State): SupportedPosBrand[] =>
  Array.isArray(state.onBoarding.fetchSupportedPosStatus.data) ? state.onBoarding.fetchSupportedPosStatus.data : [];

const getUnsupportedPosBrands = (state: State): UnsupportedPosBrand[] =>
  Array.isArray(state.onBoarding.fetchUnsupportedPosBrandsStatus.data)
    ? state.onBoarding.fetchUnsupportedPosBrandsStatus.data
    : [];

const isAppLoading = (state: State): boolean =>
  contextSelectors.isFetching(state)
  || state.onBoarding.fetchPosRideDataStatus.status === 'started'
  || state.onBoarding.fetchUserAgreementStatus.status === 'started';

const isAgreementSigned = (state: State): boolean =>
  state.onBoarding.fetchUserAgreementStatus.status === 'done' ? state.onBoarding.fetchUserAgreementStatus.data : false;

export const selectors = {
  getFetchOnBoardingStatus,
  getSupportedPosBrands,
  getUnsupportedPosBrands,
  isAgreementSigned,
  isAppLoading,
};


// ---------------------------------------------------------------------------------------------------------------------
// reducer
// ---------------------------------------------------------------------------------------------------------------------

const initialSelectedPosBrand: SupportedPosBrand = { Id: SupportedPosBrandsIds.unselected, Name: '' };

// is mapped to state.onBoarding.selectedPos (@see reducers.ts)
export const selectPosBrandReducer = reducerWithInitialState(initialSelectedPosBrand)
  .case(selectPosBrand, (state, payload) => payload)
  .case(updatePosBrand, (state, payload) => payload)
  .case(deselectPosBrand, () => ({ Id: SupportedPosBrandsIds.unselected, Name: '' }));

export const displayStateReducer = reducerWithInitialState('landing' as OnboardingDisplayStateName)
  .case(updateDisplayState, (state, payload) => payload)

  // if POS go to nextSteps, if no userAgreement go to landing, if there is no POS there is an agreement go to selectPOS
  .case(fetchUserAgreement.done, (state, { result }) => result.displayState);
