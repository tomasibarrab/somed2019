import { AjaxError } from 'rxjs/observable/dom/AjaxObservable';
import { addNotification, removeNotificationById } from 'shared-react-smart-ui/NotificationCenter';
import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { AsyncState } from '../AsyncState';
import { AlohaHaspData, AlohaHaspKeyResponse, Epic, UpserveLinkData, UpserveVerifyResponse } from '../types';
import { updateDisplayState } from './onboarding';

// actions

const actionCreator = actionCreatorFactory();

export const sendAlohaHaspKey = actionCreator.async<AlohaHaspData, null, AjaxError>('SEND_ALOHA_HASP_KEY');
export const getAlohaHaspKey = actionCreator.async<number, AlohaHaspKeyResponse, any>('GET_ALOHA_HASP_KEY');
export const verifyUpserveLink = actionCreator.async<UpserveLinkData, UpserveVerifyResponse, AjaxError>(
  'VERIFY_UPSERVE_LINK',
);
export const verifyUpserveLinkReset = actionCreator('VERIFY_UPSERVE_LINK_RESET');
export const activateUpserveLink = actionCreator.async<UpserveLinkData, undefined, AjaxError>('ACTIVATE_UPSERVE_LINK');

// epics
export const AlohaHaspKeyErrorId = Symbol();
export const sendAlohaHaspKeyEpic: Epic = (action$, store, { api }) =>
  action$.filter(sendAlohaHaspKey.started.match).mergeMap(({ payload }) =>
    api
      .postAlohaHasp(payload)
      .flatMap(() => [
        removeNotificationById(AlohaHaspKeyErrorId),
        sendAlohaHaspKey.done({ params: payload, result: null }),
      ])
      .catch(error => [
        sendAlohaHaspKey.failed({ params: payload, error }),
        addNotification({
          id: AlohaHaspKeyErrorId,
          messageId: 'app.error.general',
        }),
      ]),
  );

export const getAlohaHaspKeyEpic: Epic = (action$, store, { api }) =>
  action$.filter(getAlohaHaspKey.started.match).mergeMap(({ payload }) =>
    api
      .getAlohaHaspKey(payload)
      .map(result => getAlohaHaspKey.done({ params: payload, result }))
      .catch(error => [getAlohaHaspKey.failed({ params: payload, error })]),
  );

export const verifyUpserveLinkEpic: Epic = (action$, store, { api }) =>
  action$.filter(verifyUpserveLink.started.match).mergeMap(({ payload }) =>
    api
      .verifyUpserveLink(payload)
      .map(({ response }) => verifyUpserveLink.done({ params: payload, result: response }))
      .catch(error => [verifyUpserveLink.failed({ params: payload, error })]),
  );

export const activateUpserveLinkEpic: Epic = (action$, store, { api }) =>
  action$.filter(activateUpserveLink.started.match).mergeMap(({ payload }) =>
    api
      .activateUpserveLink(payload)
      .flatMap(() => [activateUpserveLink.done({ params: payload, result: undefined }), updateDisplayState('active')])
      .catch(error => [activateUpserveLink.failed({ params: payload, error })]),
  );

// reducer

export const initialState: AsyncState<any> = {
  data: undefined,
  status: 'init',
};

export const sendAlohaHaspKeyReducer = reducerWithInitialState(initialState as AsyncState<undefined>)
  .case(sendAlohaHaspKey.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(sendAlohaHaspKey.done, () => ({
    data: undefined,
    status: 'done',
  }))
  .case(sendAlohaHaspKey.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));

export const getAlohaHaspKeyReducer = reducerWithInitialState(initialState as AsyncState<AlohaHaspKeyResponse>)
  .case(getAlohaHaspKey.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(getAlohaHaspKey.done, (state, { result }) => ({
    data: result,
    status: 'done',
  }))
  .case(getAlohaHaspKey.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));

export const verifyUpserveLinkReducer = reducerWithInitialState(initialState as AsyncState<UpserveVerifyResponse>)
  .case(verifyUpserveLink.started, () => ({ data: undefined, status: 'started' }))
  .case(verifyUpserveLink.done, (state, payload) => ({ data: payload.result, status: 'done' }))
  .case(verifyUpserveLink.failed, (state, payload) => ({ data: payload.error, status: 'failed' }))
  .case(verifyUpserveLinkReset, () => initialState);

export const activateUpserveLinkReducer = reducerWithInitialState(initialState as AsyncState<undefined>)
  .case(activateUpserveLink.started, () => ({ data: undefined, status: 'started' }))
  .case(activateUpserveLink.done, () => ({ data: undefined, status: 'done' }))
  .case(activateUpserveLink.failed, (state, payload) => ({ data: payload.error, status: 'failed' }));
