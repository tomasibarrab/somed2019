import { AsyncContent } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { connect } from 'react-redux';
import { AsyncStatus } from '../../store/AsyncState';
import { getAlohaHaspKey } from '../../store/onboarding/nextStepsData';
import { State } from '../../store/types';
import AlohaSteps from './AlohaSteps';
import AlohaWaiting from './AlohaWaiting';

interface SP {
  rid: number;
  getHaspKeyStatus: AsyncStatus;
  sentHaspKeyStatus: AsyncStatus;
}

interface DP {
  getHaspKey: (payload: number) => void;
}

type Props = SP & DP;

class AlohaContainer extends React.Component<Props> {
  public componentDidMount() {
    this.props.getHaspKey(this.props.rid);
  }
  public render() {
    const { getHaspKeyStatus, sentHaspKeyStatus } = this.props;
    return (
      <AsyncContent isLoading={getHaspKeyStatus === 'started'}>
        {sentHaspKeyStatus === 'done' || getHaspKeyStatus === 'done' ? <AlohaWaiting /> : <AlohaSteps />}
      </AsyncContent>
    );
  }
}

const mapState = (state: State): SP => ({
  getHaspKeyStatus: state.onBoarding.fetchAlohaHaspKeyStatus.status,
  rid: selectors.rid(state),
  sentHaspKeyStatus: state.onBoarding.sendAlohaHaspKeyStatus.status,
});

const mapDispatch = {
  getHaspKey: getAlohaHaspKey.started,
};

export default connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(AlohaContainer);

export { AlohaContainer as PureAlohaContainer, Props };
