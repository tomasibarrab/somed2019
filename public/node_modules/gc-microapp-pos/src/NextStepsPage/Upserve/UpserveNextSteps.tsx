import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import { TransitionableFooter } from '@buffet/user-agreement';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { Form, FormRenderProps } from 'react-final-form';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { AjaxError } from 'rxjs/observable/dom/AjaxObservable';
import * as validate from 'shared-utils/validate';

import ChangePosBtn from '../../common/ChangePosBtn/ChangePosBtn';
import { gaTrackTypes } from '../../constants';
import { AsyncStatus } from '../../store/AsyncState';
import { activateUpserveLink, verifyUpserveLink, verifyUpserveLinkReset } from '../../store/onboarding/nextStepsData';
import { State, UpserveLinkData, UpserveVerifyResponse } from '../../store/types';
import { CompareAddresses } from './CompareAddresses';
import UpserveLinkForm from './UpserveLinkForm';

import upserveImage from '../../assets/upserve-copy-url.gif';

interface SP {
  rid: number;
  linkStatus: AsyncStatus;
  linkData: UpserveVerifyResponse | undefined;
  linkError: AjaxError | undefined;
}

interface DP {
  checkUpserveLink: (payload: UpserveLinkData) => void;
  resetUpserveLink: () => void;
  sendUpserveLink: (payload: UpserveLinkData) => void;
}

interface UpserveNextStepsState {
  link: string;
}

type Props = SP & DP;

class UpserveNextSteps extends React.Component<Props, UpserveNextStepsState> {

  private upserveLink = {
    upserveAccountLink: (
      <a href="https://hq.breadcrumb.com/" target="_blank" onClick={this.gaTrackingUpserveLinkHandler}>
        <FormattedMessage id="nextSteps.pos.upserve.accountLink" />
      </a>
    ),
  };

  private linkValidation = validate.create({
    upserveLink: validate.compose(validate.required('required')),
  });

  public render() {
    const isSendingLinkData = this.props.linkStatus === 'started';
    return (
      <div className="steps-container">
        <div className="steps-content">
          <FormattedMessage id="nextsteps.pos.header" tagName="h1" />
          <ol>
            <li>
              <FormattedMessage id="nextSteps.pos.upserve.step1" values={this.upserveLink} />
            </li>
            <li>
              <FormattedMessage id="nextSteps.pos.upserve.step2" />
              <Form
                onSubmit={this.handleUpserveCheck}
                render={this.renderUpserveLinkForm}
                validate={this.linkValidation}
              />
              {this.props.linkStatus === 'done' && (
                <CompareAddresses addresses={this.props.linkData as UpserveVerifyResponse} />
              )}
            </li>
          </ol>
          <TransitionableFooter className="onboarding__nextsteps-footer" show>
            <ChangePosBtn />
            <Button
              type="button"
              onClick={this.handleUpserveSend}
              theme="primary"
              busy={isSendingLinkData}
              disabled={this.props.linkStatus !== 'done'}
            >
              <FormattedMessage id="nextsteps.pos.upserve.activateButton" />
            </Button>
          </TransitionableFooter>
        </div>
        <div className="steps-image steps-image__upserve">
          <img src={upserveImage} />
        </div>
      </div>
    );
  }

  private renderUpserveLinkForm = (props: FormRenderProps) => {
    return (
      <UpserveLinkForm
        {...props}
        linkStatus={this.props.linkStatus}
        statusCode={(this.props.linkError && this.props.linkError.status) || 0}
        resetErrorMessaging={this.props.resetUpserveLink}
      />
    );
  };

  private handleUpserveCheck = ({ upserveLink }: { upserveLink: string }) => {
    this.setState({ link: upserveLink });
    this.props.checkUpserveLink({ rid: this.props.rid, link: upserveLink });
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.submit,
      category: gaTrackTypes.category,
      label: 'next-steps:verify-upserve-link',
    });
  };

  private handleUpserveSend = () => {
    this.props.sendUpserveLink({ rid: this.props.rid, link: this.state.link });

    eventTracker.sendEvent({
      action: gaTrackTypes.actions.submit,
      category: gaTrackTypes.category,
      label: 'next-steps:upserve-link',
    });
  };

  private gaTrackingUpserveLinkHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'next-steps:upserve-link',
    });
  }
}

const mapState = (state: State): SP => ({
  linkData: state.onBoarding.verifyUpserveLinkStatus.data,
  linkError:
    state.onBoarding.verifyUpserveLinkStatus.status === 'failed'
      ? state.onBoarding.verifyUpserveLinkStatus.data
      : undefined,
  linkStatus: state.onBoarding.verifyUpserveLinkStatus.status,
  rid: selectors.rid(state),
});

const mapDispatch = {
  checkUpserveLink: verifyUpserveLink.started,
  resetUpserveLink: verifyUpserveLinkReset,
  sendUpserveLink: activateUpserveLink.started,
};

export default connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(UpserveNextSteps);
export { Props, UpserveNextSteps as PureUpserrveNextSteps };
