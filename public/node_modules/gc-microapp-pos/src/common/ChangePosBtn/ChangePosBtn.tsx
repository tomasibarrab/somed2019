import { Button } from '@buffet/button';
import Modal, { ModalType } from '@buffet/modal';
import React, { useCallback, useState } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import BackButton from 'shared-react-atomic-ui/BackButton';

import { actions as posStatusActions } from '../../store/onboarding/posStatus';

import './ChangePosBtn.css';

interface OP {
  showConfirmation?: boolean;
}

interface DP {
  cancelPosActivation: () => void;
}

export type Props = OP & DP & InjectedIntlProps;

function ChangePosButton({
  showConfirmation,
  cancelPosActivation,
  intl,
}: Props) {
  const [isConfirmationModalVisible, setConfirmationModalVisible] = useState(false);

  const handleBackClick = useCallback(() => {
    cancelPosActivation();
  }, [cancelPosActivation]);

  const handleChangeClick = useCallback(() => {
    setConfirmationModalVisible(true);
  }, []);

  const acknowledgeConfirmationModal = useCallback(() => {
    cancelPosActivation();
    setConfirmationModalVisible(false);
  }, []);

  const dismissConfirmationModal = useCallback(() => {
    setConfirmationModalVisible(false);
  }, []);

  //
  // component can be configured to either show a confirmation modal when clicking the change button, or to simply
  // trigger the `cancelPosActivation` action directly. If configured to show a modal, the modal itself provides a
  // button which triggers `cancelPosActivation`.
  //
  // the following block will render the button to show the modal and the modal
  //
  if (showConfirmation) {
    return (
      <>
        <Button
          type="button"
          theme="bare"
          onClick={handleChangeClick}
          className="change-pos-button"
          testId="show-confirmation"
        >
          <FormattedMessage id="posstatus.changepos" />
        </Button>
        <Modal
          type={ModalType.prompt}
          title={intl.formatMessage({ id: 'posstatus.changepos.confirmation.title' })}
          open={isConfirmationModalVisible}
          onCloseRequest={dismissConfirmationModal}
          acknowledgeLabel={intl.formatMessage({ id: 'posstatus.changepos.confirmation.acknowledge' })}
          onAcknowledge={acknowledgeConfirmationModal}
          dismissLabel={intl.formatMessage({ id: 'posstatus.changepos.confirmation.dismiss' })}
          onDismiss={dismissConfirmationModal}
        >
          {intl.formatMessage({ id: 'posstatus.changepos.confirmation.body' })}
        </Modal>
      </>
    );
  }

  // if not rendering the button to display the confirmation modal, just render the direct action button
  return (
    <BackButton onClick={handleBackClick} testId="change-pos">
      <FormattedMessage id="nextSteps.back" />
    </BackButton>
  );
}

const mapDispatch = {
  cancelPosActivation: posStatusActions.cancelPosActivation.started,
};

const IntlChangeButton = injectIntl(ChangePosButton);
const ConnectedIntlChangeButton = connect<null, DP, OP>(null, mapDispatch)(IntlChangeButton);

export default ConnectedIntlChangeButton;

export {ChangePosButton as PureChangePosButton};
