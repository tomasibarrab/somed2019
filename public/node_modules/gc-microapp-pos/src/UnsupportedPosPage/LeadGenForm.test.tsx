import { Button } from '@buffet/button';
import { shallow } from 'enzyme';
import React from 'react';
import { Field } from 'react-final-form';
import { LeadGenForm, Props } from './LeadGenForm';

describe('LeadGenForm', () => {
  const setup = () => {
    const props: Props = {
      handleSubmit: jest.fn(),
      unsupportedPosBrands: [
        { Id: 'NX-74205', Name: 'POS Defiant' },
        { Id: 'NCC-1701-D', Name: 'POS Enterprise' },
        { Id: 'NCC-74656', Name: 'POS Voyager' },
      ],
    };
    const leadGenForm = shallow(<LeadGenForm {...props} />);

    return { leadGenForm, props };
  };
  it('should have a form', () => {
    const { leadGenForm, props } = setup();
    const form = leadGenForm.find('form');

    expect(form.length).toBe(1);
    expect(form.props().onSubmit).toBe(props.handleSubmit);
  });

  describe('fields', () => {
    const getFormFields = () => {
      const { leadGenForm, props } = setup();
      const formFields = leadGenForm.find(Field);
      const formLabel = leadGenForm.find('label');

      return { formFields, formLabel, props };
    };

    it('should have a first name', () => {
      const { formFields, formLabel } = getFormFields();
      const firstNameId = 'lead-gen__first-name';
      const text = 'First Name';
      const inputIndex = 0;

      const firstNameLabel = formLabel.at(inputIndex);
      expect(firstNameLabel.text()).toEqual(text);
      expect(firstNameLabel.props().htmlFor).toEqual(firstNameId);

      const firstNameInputProps = formFields.get(inputIndex).props;
      expect(firstNameInputProps.component).toEqual('input');
      expect(firstNameInputProps.type).toEqual('text');
      expect(firstNameInputProps.id).toEqual(firstNameId);
      expect(firstNameInputProps.name).toEqual('FirstName');
      expect(firstNameInputProps.placeholder).toEqual(text);
    });

    it('should have a last name', () => {
      const { formFields, formLabel } = getFormFields();
      const lastNameId = 'lead-gen__last-name';
      const text = 'Last Name';
      const inputIndex = 1;

      const lastNameLabel = formLabel.at(inputIndex);
      expect(lastNameLabel.text()).toEqual(text);
      expect(lastNameLabel.props().htmlFor).toEqual(lastNameId);

      const lastNameInputProps = formFields.get(inputIndex).props;
      expect(lastNameInputProps.component).toEqual('input');
      expect(lastNameInputProps.type).toEqual('text');
      expect(lastNameInputProps.id).toEqual(lastNameId);
      expect(lastNameInputProps.name).toEqual('LastName');
      expect(lastNameInputProps.placeholder).toEqual(text);
    });

    it('should have an email', () => {
      const { formFields, formLabel } = getFormFields();
      const emailId = 'lead-gen__email';
      const text = 'Email Address';
      const inputIndex = 2;

      const emailLabel = formLabel.at(inputIndex);
      expect(emailLabel.text()).toEqual(text);
      expect(emailLabel.props().htmlFor).toEqual(emailId);

      const emailInputProps = formFields.get(inputIndex).props;
      expect(emailInputProps.component).toEqual('input');
      expect(emailInputProps.type).toEqual('text');
      expect(emailInputProps.id).toEqual(emailId);
      expect(emailInputProps.name).toEqual('Email');
      expect(emailInputProps.placeholder).toEqual(text);
    });

    it('should have a phone number', () => {
      const { formFields, formLabel } = getFormFields();
      const phoneId = 'lead-gen__phone';
      const text = 'Phone';
      const inputIndex = 3;

      const phoneLabel = formLabel.at(inputIndex);
      expect(phoneLabel.text()).toEqual(text);
      expect(phoneLabel.props().htmlFor).toEqual(phoneId);

      const phoneInputProps = formFields.get(inputIndex).props;
      expect(phoneInputProps.component).toEqual('input');
      expect(phoneInputProps.type).toEqual('text');
      expect(phoneInputProps.id).toEqual(phoneId);
      expect(phoneInputProps.name).toEqual('Phone');
      expect(phoneInputProps.placeholder).toEqual(text);
    });

    it('should have a company name', () => {
      const { formFields, formLabel } = getFormFields();
      const companyId = 'lead-gen__company';
      const text = 'Company Name';
      const inputIndex = 4;

      const companyLabel = formLabel.at(inputIndex);
      expect(companyLabel.text()).toEqual(text);
      expect(companyLabel.props().htmlFor).toEqual(companyId);

      const companyInputProps = formFields.get(inputIndex).props;
      expect(companyInputProps.component).toEqual('input');
      expect(companyInputProps.type).toEqual('text');
      expect(companyInputProps.id).toEqual(companyId);
      expect(companyInputProps.name).toEqual('Company');
      expect(companyInputProps.placeholder).toEqual(text);
    });

    it('should have an unsupported POS select', () => {
      const { formFields, formLabel, props } = getFormFields();
      const unsupportedPosId = 'lead-gen__unsupported-pos';
      const text = 'Which POS do you use?';
      const inputIndex = 5;

      const unsupportedPosLabel = formLabel.at(inputIndex);
      expect(unsupportedPosLabel.text()).toEqual(text);
      expect(unsupportedPosLabel.props().htmlFor).toEqual(unsupportedPosId);

      const unsupportedPosInputProps = formFields.get(inputIndex).props;
      expect(unsupportedPosInputProps.component).toEqual('select');
      expect(unsupportedPosInputProps.id).toEqual(unsupportedPosId);
      expect(unsupportedPosInputProps.name).toEqual('POS_Brand__c');

      const options = formFields.find('option');

      expect(options.length).toBe(props.unsupportedPosBrands.length);

      options.forEach((option, index) => {
        expect(option.text()).toEqual(props.unsupportedPosBrands[index].Name);
        expect(option.props().value).toEqual(props.unsupportedPosBrands[index].Id);
      });
    });
  });

  it('should have a submit button', () => {
    const { leadGenForm } = setup();

    expect(leadGenForm.find(Button).length).toBe(1);
  });
});
