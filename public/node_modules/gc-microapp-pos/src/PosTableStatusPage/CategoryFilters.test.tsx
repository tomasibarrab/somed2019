import React from 'react';

import { shallow } from 'enzyme';

import { RadioButton, SimpleRadioButtonGroup } from '@buffet/radio-button';
import { Props, PureCategoryFilters as CategoryFilters } from './CategoryFilters';

describe('<CategoryFilters />', () => {
  const setup = () => {
    const props: Props = {
      countsPerFilter: {
        1: 1,
        2: 2,
        all: -2,
        unassigned: -1,
      },
      intl: {
        formatMessage: jest
          .fn()
          .mockReturnValueOnce('unassigned')
          .mockReturnValueOnce('One')
          .mockReturnValueOnce('Three')
          .mockReturnValueOnce('Show All'),
      } as any,
      selectStatusBucket: jest.fn(),
      selectedCategoryBucket: 'all',
      selectedStatus: 0,
      statusList: [
        {
          id: 1,
          rank: 1,
          status: 'One',
        },
        {
          id: 3,
          rank: 3,
          status: 'three',
        },
      ],
    };

    const categoryFilters = shallow(<CategoryFilters {...props} />);
    return { props, categoryFilters };
  };
  it('should exist', () => {
    const { categoryFilters } = setup();
    expect(categoryFilters).toBeDefined();
  });

  it('radio buttons should work', () => {
    const { categoryFilters, props } = setup();

    // testing radio button group
    const radioButtonGroup = categoryFilters.find(SimpleRadioButtonGroup);
    expect(radioButtonGroup.length).toBe(1);
    expect(radioButtonGroup.props().onChange).toBe(props.selectStatusBucket);
    expect(radioButtonGroup.props().selectedValue).toBe(props.selectedCategoryBucket);

    // testing radio buttons
    const radioButtons = categoryFilters.find(RadioButton);
    expect(radioButtons.length).toBe(4);
    expect(radioButtons.get(0).props).toEqual({
      className: 'filter-button ',
      label: 'unassigned (-1)',
      value: 'unassigned',
    });
    expect(radioButtons.get(1).props).toEqual({
      className: 'filter-button ',
      label: 'One (1)',
      value: 'One',
    });
    expect(radioButtons.get(2).props).toEqual({
      className: 'filter-button ',
      label: 'Three (0)',
      value: 'three',
    });
    expect(radioButtons.get(3).props).toEqual({
      className: 'filter-button selected-filter-button',
      label: 'Show All (-2)',
      value: 'all',
    });
  });
});
