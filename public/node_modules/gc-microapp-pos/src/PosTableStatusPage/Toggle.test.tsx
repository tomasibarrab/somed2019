import { shallow } from 'enzyme';
import React from 'react';

import { Props, Toggle } from './Toggle';

describe('<Toggle />', () => {
  const setup = (enabled = false) => {
    const props: Props = {
      enabled,
      offText: 'Off',
      onClick: jest.fn(),
      onText: 'On',
    };

    const toggleComponent = shallow(<Toggle {...props} />);

    return { toggleComponent, props };
  };

  it('should fire the onClick prop when clicked', () => {
    const { toggleComponent, props } = setup();

    toggleComponent.simulate('click');

    expect(props.onClick).toHaveBeenCalled();
  });

  it('should show On Text on toggle-left and Off Text on toggle-right', () => {
    const { toggleComponent, props } = setup();

    expect(toggleComponent.find('.toggle-left').text()).toBe(props.onText);
    expect(toggleComponent.find('.toggle-right').text()).toBe(props.offText);
  });

  describe('enabled', () => {
    it('should have toggle-left be active and toggle-right be inactive while true', () => {
      const { toggleComponent } = setup(true);

      expect(toggleComponent.find('.toggle-left').props().className).toContain('toggle-active');
      expect(toggleComponent.find('.toggle-right').props().className).toContain('toggle-inactive');
    });

    it('should have toggle-left be inactive and toggle-right be active while false', () => {
      const { toggleComponent } = setup(false);

      expect(toggleComponent.find('.toggle-left').props().className).toContain('toggle-inactive');
      expect(toggleComponent.find('.toggle-right').props().className).toContain('toggle-active');
    });
  });
});
