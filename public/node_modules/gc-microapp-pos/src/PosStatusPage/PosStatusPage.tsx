import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import Modal, { ModalType } from '@buffet/modal';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { UICard, UICardProps } from 'shared-react-atomic-ui/UICard';
import BookingsRevenueIcon from '../assets/BookingsRevenueIcon';
import KnowGuestsIcon from '../assets/KnowGuestsIcon';
import TableStatusIcon from '../assets/TableStatusIcon';
import { State } from '../store/types';

import { gaTrackTypes, SUPPORT_LINK } from '../constants';
import './PosStatusPage.scss';

interface SP {
  posName: string;
  rid: number;
}

interface PosStatusPageState {
  isConfirmationModalVisible: boolean;
}

type Props = SP & InjectedIntlProps;

// UI will show 3 cards with details as follows
const cards: UICardProps[] = [
  {
    clickCallback: () =>
      eventTracker.sendEvent({
        action: gaTrackTypes.actions.clickLink,
        category: gaTrackTypes.category,
        label: 'active-status:track-booking',
      }),
    cta: 'posstatus.card.bookings.cta',
    ctaOpenTab: false,
    ctaUrl: '/restaurant/{rid}/reporting/reservations',
    description: 'posstatus.card.bookings.description',
    imageComponent: <BookingsRevenueIcon />,
    linkable: true,
    title: 'posstatus.card.bookings.title',
  },
  {
    clickCallback: () =>
      eventTracker.sendEvent({
        action: gaTrackTypes.actions.clickLink,
        category: gaTrackTypes.category,
        label: 'active-status:automate-table-statuses',
      }),
    cta: 'posstatus.card.status.cta',
    ctaOpenTab: true,
    ctaUrl:
      'https://support.opentable.com/s/article/GuestCenter-POS-Integration-Automatic-Course-Status?language=en_US',
    description: 'posstatus.card.status.description',
    imageComponent: <TableStatusIcon />,
    linkable: true,
    title: 'posstatus.card.status.title',
  },
  {
    clickCallback: () =>
      eventTracker.sendEvent({
        action: gaTrackTypes.actions.clickLink,
        category: gaTrackTypes.category,
        label: 'active-status:know-your-guests',
      }),
    cta: 'posstatus.card.guests.cta',
    ctaOpenTab: false,
    ctaUrl: '/restaurant/{rid}/reporting/guest-frequency',
    description: 'posstatus.card.guests.description',
    imageComponent: <KnowGuestsIcon />,
    linkable: true,
    title: 'posstatus.card.guests.title',
  },
];

export const APP_STORE_LINK = 'https://itunes.apple.com/us/app/guestcenter/id766049754?mt=8';

class PosStatusPage extends React.Component<Props, PosStatusPageState> {

  public state = { isConfirmationModalVisible: false };

  public constructor(props: Props) {
    super(props);
  }

  public render() {
    const {
      posName,
      rid,
      intl: { formatMessage },
    } = this.props;

    // build the list of UICards
    const cardsToRender = cards.map((card: UICardProps) => {
      const urlWithRid = card.ctaUrl.replace('{rid}', '' + rid); // replace rid if needs replacing
      return (
        <UICard
          cta={formatMessage({ id: card.cta })}
          ctaOpenTab={card.ctaOpenTab}
          ctaUrl={urlWithRid}
          linkable={card.linkable}
          key={card.title}
          description={formatMessage({ id: card.description })}
          title={formatMessage({ id: card.title })}
          imageComponent={card.imageComponent}
          clickCallback={card.clickCallback}
        />
      );
    });

    const supportLink = (
      <a href={`mailto:${SUPPORT_LINK}`} target="_blank" onClick={this.gaMailHelpHandler}>
        {SUPPORT_LINK}
      </a>
    );

    return (
      <>
        <main className="posstatus-page">
          <div className="posstatus-content posstatus-content__upper">
            <h1 className="posstatus-content__upper__header">
              <FormattedMessage id="posstatus.header" values={{ yourpos: posName }} />
            </h1>
            <Button
              type="button"
              theme="bare"
              onClick={this.handleChangePosClick}
              className="change-pos-button"
            >
              <FormattedMessage id="posstatus.changeorcancelpos" />
            </Button>
          </div>
          <div className="uicard-list posstatus-content__mid">
            {cardsToRender}
            <hr className="uicard-break" />
          </div>
          <div className="posstatus-content posstatus-content__lower">
            <h2>
              <FormattedMessage id="posstatus.mobile.title" />
            </h2>
            <p>
              <FormattedMessage id="posstatus.mobile.text" />
            </p>
            <Button type="a" target="_blank" href={APP_STORE_LINK} theme="bare">
              <FormattedMessage id="posstatus.mobile.cta" />
            </Button>
          </div>
        </main>
        <Modal
          type={ModalType.prompt}
          open={this.state.isConfirmationModalVisible}
          onCloseRequest={this.handleDismissConfirmationModal}
        >
          <FormattedMessage
            id="posstatus.changepos.message"
            values={{ supportLink }}
          />
        </Modal>
      </>
    );
  }

  private handleChangePosClick = () => {
    this.setState({ isConfirmationModalVisible: true });
  }

  private handleDismissConfirmationModal = () => {
    this.setState({ isConfirmationModalVisible: false });
  }

  private gaMailHelpHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'posstatus:mail-help',
    });
  }

}

const mapState = (state: State): SP => ({
  posName: state.onBoarding.selectedPos.Name,
  rid: selectors.rid(state),
});

const IntlPosStatusPage = injectIntl(PosStatusPage);

export default connect<SP, {}, {}>(
  mapState,
)(IntlPosStatusPage);

export { Props, PosStatusPage as PurePosStatusPage };
