import { cleanup, fireEvent, render, wait } from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { mockImageFile } from '../common/testHelpers';
import { keys } from '../translations/bundles/gallery-photos.json';
import Upload from './Upload';

const handleUploadPhoto = jest.fn();

afterEach(cleanup);
beforeEach(() => {
  (fetch as any).resetMocks();
});

describe('Upload', () => {
  it('renders upload interface for restaurants that do not have photos', () => {
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <Upload photos={[]} handleUploadPhoto={handleUploadPhoto} />
      </IntlProvider>
    );
    const { container } = render(component);
    expect(container).toMatchSnapshot();
  });

  it('simulates a button click, where nothing should happen', () => {
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <Upload photos={[]} handleUploadPhoto={handleUploadPhoto} />
      </IntlProvider>
    );
    const { container, getByText } = render(component);
    fireEvent.click(getByText('Select photos').parentElement.parentElement);
    expect(container).toMatchSnapshot();
  });

  it('invokes the handleUploadPhoto callback function', async () => {
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <Upload photos={[]} handleUploadPhoto={handleUploadPhoto} />
      </IntlProvider>
    );

    const { getByTestId, rerender } = render(component);
    rerender(component);

    fireEvent.change(getByTestId('select-image-file'), mockImageFile);

    expect(handleUploadPhoto).toBeCalled();
  });
});
