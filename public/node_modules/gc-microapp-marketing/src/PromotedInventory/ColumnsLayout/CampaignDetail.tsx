import './CampaignDetail.scss';

import classNames from 'classnames';
import { Button } from 'gca-react-components';
import {
    selectors as featureToggleSelectors,
} from 'gca-react-components/src/redux-modules/featureToggles';
import { get, kebabCase } from 'lodash';
import moment from 'moment';
import React, { Component, SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { actions } from '../../store/campaigns/campaigns';
import {
    CampaignState, CampaignType, CampaignTypes, ModalType, OpenModalPayload, Pages,
    PatchActionPayload,
} from '../../store/campaigns/campaigns.types';
import { State } from '../../store/types';
import campaignActions from '../CampaignsList/campaign-actions';
import DetailLine from '../CampaignsList/DetailLines/DetailLine';
import SuppressionDates from '../CampaignsList/DetailLines/SuppressionDates';
import { formatCurrency } from '../CampaignsList/helpers/format-number-locale';
import makeDaysAndTimes from '../CampaignsList/helpers/make-days-and-times';
import { EDIT_BUDGET_FEATURE_NAME, scheduleDateFormat } from '../constants';
import isOpenTableEmail from '../isOpenTableEmail';
import CampaignDetailHeader from './CampaignDetailHeader';

interface SP {
  hasEditBudgetFeature: boolean;
  isTestRid: boolean;
}

interface DP {
  openEditBudgetModal: (payload: CampaignType) => void;
  hideNotifyPopup: () => void;
}

interface OP {
  campaign: CampaignType;
  currentUserEmail: string;
  getCredits: (payload: any) => void;
  handleClick: (ev: React.MouseEvent<HTMLDivElement>) => void;
  handleCopyLink: (ev: React.MouseEvent<HTMLButtonElement>) => void;
  hasJustCopied: boolean;
  isOpen: boolean;
  openModal: (payload: OpenModalPayload) => void;
  patchCampaignRequest: (payload: PatchActionPayload) => void;
  titleId: string;
  pageType: Pages;
}

type Props = SP & DP & OP & InjectedIntlProps;

interface ActionLinkProps {
  linkText: string;
  onClick: () => void;
}

const ActionLink: SFC<ActionLinkProps> = ({ linkText, onClick }) => (
  <Button className="link" onClick={onClick} data-testid="btnActionLink">
    {linkText}
  </Button>
);

/* Campaign row */
class CampaignDetail extends Component<Props, {}> {
  public state = {
    hasJustCopied: false,
    isOpen: false,
  };

  public render() {
    const {
      campaign,
      currentUserEmail,
      handleClick,
      handleCopyLink,
      hasEditBudgetFeature,
      hasJustCopied,
      hideNotifyPopup,
      intl,
      isOpen,
      openEditBudgetModal,
      openModal,
      pageType,
      patchCampaignRequest,
      isTestRid,
    } = this.props;

    const {
      approvedByEmail,
      campaignId,
      changedByUser,
      createdByEmail,
      endDate,
      flexiblePricingVisibility,
      incentives,
      isShortTerm,
      liveTimestamp,
      monthlyBudget,
      pauseUntil,
      pricingTier,
      schedule,
      startDate,
      state,
      suppressionDates,
      type,
    } = campaign;

    let currencyCode: any;
    let price: any;
    if (pricingTier) {
      currencyCode = pricingTier.currencyCode;
      price = pricingTier.price;
    }

    const { handleEditBudget, handleEnd, handlePause, handleResume } = campaignActions;

    const notDone = state !== CampaignState.Ended && state !== CampaignState.Discarded;
    const canPause = state !== CampaignState.Draft && notDone;
    const isPaused = state === CampaignState.Paused;

    const classNamesObj: any = {
      active: isOpen,
      'pi-rec--campaign-detail': true,
    };
    classNamesObj[kebabCase(pageType)] = true;

    let incentiveName;
    let incentiveDescription;
    let incentiveNoteToDiners;
    if (type === CampaignTypes.Special) {
      incentiveName = incentives[0].name;
      incentiveDescription = incentives[0].description;
      if (incentives[0].noteToDiners) {
        incentiveNoteToDiners = incentives[0].noteToDiners;
      }
    }

    const isEditMonthlyBudgetEnabled =
      (isTestRid || !isOpenTableEmail(currentUserEmail)) &&
      hasEditBudgetFeature &&
      monthlyBudget > 0 &&
      pricingTier &&
      [CampaignState.Live, CampaignState.Draft, CampaignState.Paused].includes(state);

    return (
      <article id={campaignId} className={classNames(classNamesObj)}>
        <header onClick={handleClick} data-testid="btnExpandCollapseRow">
          <CampaignDetailHeader
            startDate={startDate}
            endDate={endDate}
            incentives={incentives}
            isShortTerm={isShortTerm}
            pauseUntil={pauseUntil}
            state={state}
            type={type}
            isOpen={isOpen}
            pageType={pageType}
            flexiblePricingVisibility={flexiblePricingVisibility}
          />
        </header>
        <div className="details">
          {/* column 1 */}
          <div className="details__info">
            <FormattedMessage id="guestcampaigns.list.campaigndates" tagName="h4" />
            <ul>{makeDaysAndTimes(schedule, type, isShortTerm, startDate, endDate)}</ul>
          </div>
          {/* column 2 */}
          <div className="details__info">
            {type === CampaignTypes.Special ? (
              <>
                {incentiveName && (
                  <>
                    <FormattedMessage id="guestcampaigns.list.incentive.title" tagName="h4" />
                    <p>{incentiveName}</p>
                  </>
                )}
                {incentiveDescription && (
                  <>
                    <FormattedMessage id="guestcampaigns.list.incentive.description" tagName="h4" />
                    <p>{incentiveDescription}</p>
                  </>
                )}
                {incentiveNoteToDiners && (
                  <>
                    <FormattedMessage id="guestcampaigns.list.incentive.terms" tagName="h4" />
                    <p>{incentiveNoteToDiners}</p>
                  </>
                )}
              </>
            ) : (
              <>
                {pricingTier && (
                  <>
                    <FormattedMessage id="guestcampaigns.list.cover_price" tagName="h4" />
                    <FormattedMessage
                      id="guestcampaigns.terms.cost_per_seated_cover"
                      tagName="p"
                      values={{
                        price: formatCurrency(price, currencyCode),
                      }}
                    />
                  </>
                )}
                {pricingTier && monthlyBudget > 0 && (
                  <>
                    <FormattedMessage id="guestcampaigns.list.monthly_budget" tagName="h4" />
                    <p>{formatCurrency(monthlyBudget, currencyCode, true)}</p>
                  </>
                )}
              </>
            )}
          </div>
          {/* column 3 */}
          <div
            className={classNames({
              details__info: true,
              paused: isPaused,
            })}
          >
            {liveTimestamp && (
              <>
                <FormattedMessage id="guestcampaigns.list.start_date" tagName="h4" />
                <p>{intl.formatDate(moment(liveTimestamp).toDate(), scheduleDateFormat)}</p>
              </>
            )}
            {type === CampaignTypes.CustomPromotions && (
              <>
                <FormattedMessage
                  id="guestcampaigns.list.date.with_first"
                  tagName="h4"
                  values={{
                    label: intl.formatMessage({
                      id: 'guestcampaigns.list.date.label.custom_promotion',
                    }),
                  }}
                />
                <p>{intl.formatDate(moment(startDate).toDate(), scheduleDateFormat)}</p>
              </>
            )}
            <FormattedMessage id="guestcampaigns.list.date.end" tagName="h4" />
            {endDate ? (
              <p>{intl.formatDate(moment(endDate).toDate(), scheduleDateFormat)}</p>
            ) : (
              <FormattedMessage id="guestcampaigns.list.noenddate" tagName="p" />
            )}
            {state !== CampaignState.Draft && !isOpenTableEmail(approvedByEmail) && (
              <DetailLine messageIdSuffix="approver" value={approvedByEmail ? approvedByEmail : 'â€”'} />
            )}

            {createdByEmail && <DetailLine messageIdSuffix="created_by" value={createdByEmail} />}

            {state === CampaignState.Ended && createdByEmail && (
              <DetailLine messageIdSuffix="ended_by" value={changedByUser} />
            )}
          </div>
          {/* column 4 */}
          <div className="details__info">
            <SuppressionDates
              messageIdSuffix="blockeddates"
              intl={intl}
              suppressionDates={suppressionDates}
              editListItem={null}
            />
          </div>

          {/* bottom: */}
          {/* column 1 */}
          <div className="details__actions">
            {type === CampaignTypes.Special ? (
              <>
                {state === CampaignState.Live && (
                  <ActionLink
                    linkText={intl.formatMessage({ id: 'guestcampaigns.list.end_campaign' })}
                    onClick={() => handleEnd(campaign, openModal)}
                  />
                )}
              </>
            ) : (
              <>
                {pageType !== Pages.FlexiblePricing && (
                  <>
                    {canPause &&
                      (isPaused ? (
                        <ActionLink
                          linkText={intl.formatMessage({ id: 'guestcampaigns.list.resume_campaign' })}
                          onClick={() => handleResume(campaignId, patchCampaignRequest)}
                        />
                      ) : (
                        <ActionLink
                          linkText={intl.formatMessage({ id: 'guestcampaigns.list.pause_campaign' })}
                          onClick={() => handlePause(campaign, openModal)}
                        />
                      ))}
                  </>
                )}
              </>
            )}
          </div>
          {/* column 2 */}
          <div className="details__actions">
            {isEditMonthlyBudgetEnabled && (
              <ActionLink
                data-testid="btnEditBudgetLink"
                linkText={intl.formatMessage({ id: 'guestcampaigns.list.edit_budget' })}
                onClick={() => {
                  hideNotifyPopup();
                  handleEditBudget(campaign, openEditBudgetModal);
                }}
              />
            )}
          </div>
          {/* column 3 */}
          <div className="details__actions">
            {hasJustCopied ? (
              <span className="link">{intl.formatMessage({ id: 'guestcampaigns.list.copied' })}</span>
            ) : (
              <Button className="link" onClick={handleCopyLink} type="button" data-testid="btnCopyPromotionLink">
                {intl.formatMessage({ id: 'guestcampaigns.list.copy_promotion_link' })}
              </Button>
            )}
          </div>
          {/* column 4 */}
          <div className="details__actions">
            {notDone && (
              <Button
                className="link"
                type="button"
                onClick={() => {
                  openModal({
                    campaign,
                    type: ModalType.EditBlockedDays,
                  });
                }}
              >
                {intl.formatMessage({ id: 'guestcampaigns.list.edit_blocked_days' })}
              </Button>
            )}
          </div>
        </div>
        <div className="ellipsis">
          <span>&#8230;</span>
          <span>&#8230;</span>
          <span>&#8230;</span>
          <span>&#8230;</span>
        </div>
      </article>
    );
  }
}
const mapDispatch = () => {
  const { hideNotifyPopup, openEditBudgetModal } = actions;
  return {
    hideNotifyPopup,
    openEditBudgetModal: openEditBudgetModal.started,
  };
};

const mapState = (state: State) => ({
  hasEditBudgetFeature: featureToggleSelectors.featureToggle(state, EDIT_BUDGET_FEATURE_NAME),
  isTestRid: get(state, 'restaurantPIProperties.data.isTestRid'),
});

export default connect<SP, DP, OP>(
  mapState,
  mapDispatch(),
)(injectIntl(CampaignDetail));
export { CampaignDetail };
