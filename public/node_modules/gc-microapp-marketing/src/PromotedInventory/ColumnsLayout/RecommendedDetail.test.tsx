import { mount } from 'enzyme';
import { get } from 'lodash';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';

import {
    CampaignState, CampaignTypes, ModalType, Pages,
} from '../../store/campaigns/campaigns.types';
import { VisibilityType } from '../../store/flexiblepricing/flexiblepricing.types';
import { keys } from '../../translations/bundles/marketing.json';
import RecommendedDetail from './RecommendedDetail';

const campaign = {
  campaignId: 'string',
  ccEmails: [],
  endDate: moment().add(1, 'day'),
  incentives: [],
  isShortTerm: false,
  monthlyBudget: 300,
  pauseUntil: moment().toDate(),
  pricingTier: { currencyCode: 'USD', price: 100 },
  restaurantContactEmail: 'restaurant_user@example.com',
  schedule: [],
  startDate: moment(),
  state: CampaignState.Live,
  suppressionDates: {
    custom: [
      {
        endDate: moment()
          .add(1, 'day')
          .toDate(),
        label: 'test label',
        startDate: moment().toDate(),
      },
    ],
    default: ['thanksgiving_day_us'],
  },
  type: CampaignTypes.PromotedResults,
};

const recommendation = {
  messageToRestaurant: 'Hello restaurant.',
  recommendedBy: 'Jean-Luc',
};

describe('<RecommendedDetail />', () => {
  describe('render', () => {
    test(`With a monthly budget it matches the snapshot`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={campaign}
              recommendation={recommendation}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.PromotedResults}
            />
          </MemoryRouter>
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test(`Without a monthly budget it matches the snapshot`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={Object.assign({}, campaign, { monthlyBudget: undefined })}
              recommendation={recommendation}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.PromotedResults}
            />
          </MemoryRouter>
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test(`Without an endDate it shows "No end date"`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={Object.assign({}, campaign, { endDate: undefined })}
              recommendation={recommendation}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.PromotedResults}
            />
          </MemoryRouter>
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test(`With "Exposure" type when Flexible Pricing`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={Object.assign({}, campaign, {
                flexiblePricingVisibility: VisibilityType.Increase,
              })}
              recommendation={recommendation}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.FlexiblePricing}
            />
          </MemoryRouter>
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });

    test(`Clicking on the "change/remove" button opens the RequestChange modal`, () => {
      const modalOpener = jest.fn();
      const clickCallToAction = jest.fn() as any;
      const localCampaign = Object.assign({}, campaign, { monthlyBudget: undefined });
      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={localCampaign}
              recommendation={recommendation}
              openModal={modalOpener}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.PromotedResults}
              clickCallToAction={clickCallToAction}
            />
          </MemoryRouter>
        </IntlProvider>,
      );

      const button = wrapper.find(`[data-testid="btnChangeOrRemoveCampaign"]`).first();
      button.simulate('click');

      expect(modalOpener.mock.calls[0]).toEqual([{ campaign: localCampaign, type: ModalType.RequestChange }]);
      expect(clickCallToAction).toBeCalledTimes(1);
    });

    test(`Clicking on the "approve" button opens the Approve modal when currentUserEmail is
      restaurantContactEmail and not OpenTable user`, () => {
      const modalOpener = jest.fn();
      const localCampaign = Object.assign({}, campaign, { monthlyBudget: undefined });
      const clickCallToAction = jest.fn() as any;
      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={localCampaign}
              recommendation={recommendation}
              openModal={modalOpener}
              currentUserEmail="restaurant_user@example.com"
              pageType={Pages.PromotedResults}
              clickCallToAction={clickCallToAction}
            />
          </MemoryRouter>
        </IntlProvider>,
      );

      const button = wrapper.find(`button[data-testid="btnApproveCampaign"]`);
      button.simulate('click');

      const message = wrapper.find('.details__actions--approve-button-message');
      expect(message.length).toBe(0);

      expect(modalOpener.mock.calls[0]).toEqual([{ campaign: localCampaign, type: ModalType.Approve }]);
      expect(clickCallToAction).toBeCalledTimes(1);
    });

    test('Approve button disabled when current user is not restaurantContactEmail', () => {
      const modalOpener = jest.fn();
      const localCampaign = Object.assign({}, campaign, {
        ccEmails: ['email1@example.com', 'test@example.com'],
        monthlyBudget: undefined,
      });

      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={localCampaign}
              recommendation={recommendation}
              openModal={modalOpener}
              currentUserEmail="cant_approve@example.com"
              pageType={Pages.PromotedResults}
            />
          </MemoryRouter>
        </IntlProvider>,
      );

      const button = wrapper.find(`button[data-testid="btnApproveCampaign"]`);
      expect(button.length).toEqual(0);

      const message = wrapper.find('.details__actions--approve-button-message').text();
      expect(message).toBe('Please log in as restaurant_user@example.com to approve.');
    });

    test('Approve button not visible when current user isOpenTableEmail', () => {
      const modalOpener = jest.fn();
      const localCampaign = Object.assign({}, campaign, {
        monthlyBudget: undefined,
        restaurantContactEmail: 'isr@opentable.com',
      });

      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <RecommendedDetail
              campaign={localCampaign}
              recommendation={recommendation}
              openModal={modalOpener}
              currentUserEmail="isr@opentable.com"
              pageType={Pages.PromotedResults}
            />
          </MemoryRouter>
        </IntlProvider>,
      );

      const buttonEnabled = wrapper.find(`button[data-testid="btnApproveCampaign"]`);
      expect(buttonEnabled.length).toBe(0);

      const buttonDisabled = wrapper.find(`button[data-testid="btnApproveCampaignDisabled"]`);
      expect(buttonDisabled.length).toBe(0);
    });
  });
});
