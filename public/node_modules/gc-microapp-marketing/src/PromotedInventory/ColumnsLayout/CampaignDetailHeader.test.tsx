import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import { CampaignState, CampaignTypes, ModalType, Pages } from '../../store/campaigns/campaigns.types';
import { VisibilityType } from '../../store/flexiblepricing/flexiblepricing.types';
import { keys } from '../../translations/bundles/marketing.json';
import CampaignDetailHeader from './CampaignDetailHeader';

const mockCampaign = {
  campaignId: 'string',
  endDate: undefined,
  flexiblePricingVisibility: undefined,
  incentives: [],
  isShortTerm: false,
  liveTimestamp: undefined,
  monthlyBudget: undefined,
  pauseUntil: moment().toDate(),
  pricingTier: { currencyCode: 'USD', price: 100 },
  schedule: [],
  startDate: moment(),
  state: CampaignState.Live,
  suppressionDates: {
    custom: [
      {
        endDate: moment()
          .add(1, 'day')
          .toDate(),
        label: 'test label',
        startDate: moment().toDate(),
      },
    ],
    default: ['thanksgiving_day_us'],
  },
  type: CampaignTypes.CustomPromotions,
};

describe('<CampaignDetailHeader/>', () => {
  const scenarios = [
    {
      campaign: mockCampaign,
      description: 'should display "up" svg when detail is expanded',
      isOpen: true,
      pageType: Pages.CustomPromotions,
    },
    {
      campaign: mockCampaign,
      description: 'should display title "Custom Promotions" when page type is Custom Promotions',
      isOpen: false,
      pageType: Pages.CustomPromotions,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        flexiblePricingVisibility: VisibilityType.Standard,
        type: CampaignTypes.CustomPromotions,
      }),
      description: 'should display title "Standard Exposure" when page type is Flexible Pricing',
      isOpen: false,
      pageType: Pages.FlexiblePricing,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        flexiblePricingVisibility: VisibilityType.Increase,
        type: CampaignTypes.CustomPromotions,
      }),
      description: 'should display title "Increase Exposure" when page type is Flexible Pricing',
      isOpen: false,
      pageType: Pages.FlexiblePricing,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        type: CampaignTypes.CustomPromotions,
      }),
      description: 'should display title "Flexible Pricing" when page type is Flexible Pricing without visibility',
      isOpen: false,
      pageType: Pages.FlexiblePricing,
    },
    {
      campaign: Object.assign({}, mockCampaign, { type: CampaignTypes.PromotedResults }),
      description: 'should display title "Promoted Results" when page type is Promoted Results',
      isOpen: false,
      pageType: Pages.PromotedResults,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        incentives: [
          {
            description: 'Happy hour all the time',
            name: 'Happy Hour!',
            noteToDiners: 'noteToDiners aka Terms',
            offerTypeName: 'Complimentary item',
          },
        ],
        type: CampaignTypes.Special,
      }),
      description: 'should display title as offerTypeName when page type is Specials',
      isOpen: false,
      pageType: Pages.Specials,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        pauseUntil: moment()
          .add(2, 'day')
          .toISOString(),
        state: CampaignState.Paused,
        type: CampaignTypes.PromotedResults,
      }),
      description: 'should display "Resumes in 2 days" when campaign is paused',
      isOpen: false,
      pageType: Pages.PromotedResults,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        endDate: moment()
          .add(1, 'day')
          .toDate(),
        state: CampaignState.Live,
        type: CampaignTypes.PromotedResults,
      }),
      description: 'should display the number of days until campaign will end when the end date is set',
      isOpen: false,
      pageType: Pages.PromotedResults,
    },
    {
      campaign: Object.assign({}, mockCampaign, {
        isShortTerm: true,
        type: CampaignTypes.PromotedResults,
      }),
      description: 'should display title "Short Term Promoted Results" when isShortTerm is true',
      isOpen: false,
      pageType: Pages.PromotedResults,
    },
  ];

  scenarios.forEach(({ description, pageType, campaign, isOpen }) => {
    it(description, () => {
      const {
        startDate,
        endDate,
        flexiblePricingVisibility,
        incentives,
        isShortTerm,
        pauseUntil,
        state,
        type,
      } = campaign;
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <CampaignDetailHeader
              startDate={startDate}
              endDate={endDate}
              incentives={incentives}
              isShortTerm={isShortTerm}
              pauseUntil={pauseUntil}
              state={state}
              type={type}
              isOpen={isOpen}
              pageType={pageType}
              flexiblePricingVisibility={flexiblePricingVisibility}
            />
          </MemoryRouter>
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });
});
