import { mount } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';

import { CampaignState, CampaignTypes, Pages } from '../../store/campaigns/campaigns.types';
import { VisibilityType } from '../../store/flexiblepricing/flexiblepricing.types';
import { keys } from '../../translations/bundles/marketing.json';
import { EDIT_BUDGET_FEATURE_NAME } from '../constants';
import CampaignDetail from './CampaignDetail';

const mockCampaign = {
  campaignId: 'string',
  endDate: undefined,
  flexiblePricingVisibility: undefined,
  incentives: [],
  isShortTerm: false,
  liveTimestamp: undefined,
  monthlyBudget: undefined,
  pauseUntil: moment().toDate(),
  pricingTier: { currencyCode: 'USD', price: 100 },
  schedule: [],
  startDate: moment(),
  state: CampaignState.Live,
  suppressionDates: {
    custom: [
      {
        endDate: moment()
          .add(1, 'day')
          .toDate(),
        label: 'test label',
        startDate: moment().toDate(),
      },
    ],
    default: ['thanksgiving_day_us'],
  },
  type: CampaignTypes.CustomPromotions,
};

const mockProps = {
  currentUserEmail: 'jdoe@email.com',
  getCredits: () => ({}),
  handleClick: () => ({}),
  handleCopyLink: () => ({}),
  hasJustCopied: false,
  isOpen: false,
  openModal: undefined,
  pageType: Pages.CustomPromotions,
  patchCampaignRequest: undefined,
  titleId: 'guestcampaigns.list.custom_promotions',
};

const mockState = {
  featureToggles: {
    features: {
      [EDIT_BUDGET_FEATURE_NAME]: true,
    },
  },
};

describe('<CampaignDetail />', () => {
  describe('render', () => {
    const scenarios = [
      {
        description: 'should not have an .active class when closed',
      },
      {
        description: 'should have an .active class when open',
        props: { ...mockProps, isOpen: true },
      },
      {
        campaign: { ...mockCampaign, monthlyBudget: 300 },
        description: 'should show Monthly Budget amount when provided',
      },
      {
        campaign: { ...mockCampaign, monthlyBudget: 0 },
        description: 'should hide Monthly Budget amount and button when none',
      },
      {
        campaign: { ...mockCampaign, monthlyBudget: 300 },
        description: 'should hide Edit Budget button when OpenTable user',
        props: { ...mockProps, currentUserEmail: 'isr.user@opentable.com' },
      },
      {
        campaign: { ...mockCampaign, monthlyBudget: 300 },
        description: 'should show Edit Budget button when test restaurant',
        props: { ...mockProps, currentUserEmail: 'isr.user@opentable.com' },
        state: {
          ...mockState,
          restaurantPIProperties: {
            data: {
              isTestRid: true,
            },
          },
        },
      },
      {
        campaign: { ...mockCampaign, state: CampaignState.Discarded },
        description: 'should not show pause status when the campaign cannot be paused',
      },
      {
        campaign: { ...mockCampaign, state: CampaignState.Paused },
        description: 'should show resume link and info when the campaign is paused',
      },
      {
        campaign: { ...mockCampaign, liveTimestamp: moment().toDate() },
        description: 'should show liveTimestamp when provided',
      },
      {
        campaign: { ...mockCampaign, endDate: moment().add(1, 'day') },
        description: 'should show end date when provided',
      },
      {
        description: 'should show "Copied" when hasJustCopied is true',
        props: { ...mockProps, hasJustCopied: true },
      },
      {
        campaign: { ...mockCampaign, state: CampaignState.Ended },
        description: 'should not show "Edit Blocked Days" when campaign is done',
      },
      {
        campaign: {
          ...mockCampaign,
          approvedByEmail: 'approved.by@email.com',
          changedByUser: 'PI System',
          createdByEmail: 'created.by@email.com',
          state: 'ended',
        },
        description: 'should show approver, created by, ended by when campaign state has ended',
      },
      {
        campaign: {
          ...mockCampaign,
          incentives: [
            {
              description: 'Happy hour all the time',
              name: 'Happy Hour!',
              noteToDiners: 'noteToDiners aka Terms',
              offerTypeName: 'Complimentary item',
            },
          ],
          type: CampaignTypes.Special,
        },
        description: 'should show description, name, and terms when provided for Special',
      },
      {
        campaign: {
          ...mockCampaign,
          flexiblePricingVisibility: VisibilityType.Standard,
          pricingTier: {
            currencyCode: 'USD',
            price: 1.5,
            tier: 'Medium',
          },
          type: CampaignTypes.PromotedResults,
        },
        description: 'should always hide edit blocked days and pause campaign buttons when Flexible Pricing',
        props: { ...mockProps, hasJustCopied: true, isOpen: true, pageType: Pages.FlexiblePricing },
      },
    ];

    scenarios.forEach(({ campaign, description, props, state }) => {
      it(description, () => {
        const {
          currentUserEmail,
          isOpen,
          hasJustCopied,
          titleId,
          getCredits,
          handleClick,
          handleCopyLink,
          openModal,
          patchCampaignRequest,
          pageType,
        } = props || { ...mockProps };
        const store = configureMockStore([])(state || { ...mockState });
        const component = create(
          <Provider store={store}>
            <IntlProvider locale="en-US" messages={keys}>
              <MemoryRouter>
                <CampaignDetail
                  campaign={campaign || { ...mockCampaign }}
                  currentUserEmail={currentUserEmail}
                  getCredits={getCredits}
                  isOpen={isOpen}
                  hasJustCopied={hasJustCopied}
                  titleId={titleId}
                  handleClick={handleClick}
                  handleCopyLink={handleCopyLink}
                  openModal={openModal}
                  patchCampaignRequest={patchCampaignRequest}
                  pageType={pageType}
                />
              </MemoryRouter>
            </IntlProvider>
          </Provider>,
        );
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
      });
    });
  });
});

describe('click', () => {
  const scenarios = [
    {
      campaign: { ...mockCampaign, approvedByEmail: 'approved.by@email.com' },
      description: 'should fire handleClick callback when chevron is clicked',
      elementSelector: '[data-testid="btnExpandCollapseRow"]',
    },
    {
      campaign: {
        ...mockCampaign,
        incentives: [
          {
            description: 'Happy hour all the time',
            name: 'Happy Hour!',
            noteToDiners: 'noteToDiners aka Terms',
            offerTypeName: 'Complimentary item',
          },
        ],
        type: CampaignTypes.Special,
      },
      description: 'should fire handleEnd callback when "End Campaign" is clicked',
      elementSelector: '[data-testid="btnActionLink"]',
      props: { ...mockProps, isOpen: true, pageType: Pages.Specials, titleId: 'guestcampaigns.list.specials' },
    },
    {
      campaign: { ...mockCampaign, approvedByEmail: 'approved.by@email.com' },
      description: 'should fire handleCopyLink callback when "Copy promotion link" is clicked',
      elementSelector: '[data-testid="btnCopyPromotionLink"]',
      props: { ...mockProps, isOpen: true },
    },
  ];

  scenarios.forEach(({ campaign, description, props, elementSelector }) => {
    it(description, () => {
      const clickTracker = jest.fn();
      const { currentUserEmail, isOpen, hasJustCopied, titleId, patchCampaignRequest, pageType } = props || {
        ...mockProps,
      };
      const state = {
        campaigns: {
          list: campaign || { ...mockCampaign },
          pageType,
        },
        featureToggles: {
          features: {
            featureGcaPiCreateCustomPromotion: true,
          },
        },
      };
      const store = configureMockStore([])(state);
      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <MemoryRouter>
              <CampaignDetail
                campaign={campaign}
                currentUserEmail={currentUserEmail}
                isOpen={isOpen}
                hasJustCopied={hasJustCopied}
                titleId={titleId}
                handleClick={clickTracker}
                handleCopyLink={clickTracker}
                openModal={clickTracker}
                patchCampaignRequest={patchCampaignRequest}
                pageType={pageType}
              />
            </MemoryRouter>
          </IntlProvider>
        </Provider>,
      );
      const button = wrapper.find(elementSelector).first();
      button.simulate('click');

      expect(clickTracker.mock.calls.length).toEqual(1);
    });
  });
});
