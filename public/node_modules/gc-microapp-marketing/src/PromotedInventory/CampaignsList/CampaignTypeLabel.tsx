import { PromotedResultsIcon } from 'gca-react-components';
import moment from 'moment';
import React, { SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { BadgeType, CampaignState, CampaignTypes } from '../../store/campaigns/campaigns.types';
import { endingSoonDaysCount } from '../constants';
import CustomPromotionsIcon from '../CustomPromotions/CustomPromotionsIcon';
import { SpecialsListItemIcon } from './images/SpecialsListItemIcon';
import RelativeTimeBadge from './RelativeTimeBadge';

interface CampaignTypeLabelProps {
  incentives: any[];
  isShortTerm: boolean;
  state: CampaignState;
  type: CampaignTypes;
  startDate: string;
  endDate?: string;
  pauseUntil?: string;
}

const isSpecialOrOffer = (type: CampaignTypes): boolean =>
  type === CampaignTypes.Special || type === CampaignTypes.LegacyPromotedOffer;

const CampaignTypeLabel: SFC<CampaignTypeLabelProps> = ({
  incentives,
  isShortTerm,
  state,
  type,
  startDate,
  endDate,
  pauseUntil,
}) => {
  const color = state === CampaignState.Ended || state === CampaignState.Discarded ? '#ccc' : undefined;
  let badgeType;
  let date;
  if (state === CampaignState.Paused && pauseUntil) {
    badgeType = BadgeType.Resuming;
    date = moment(pauseUntil);
  }
  if (state === CampaignState.Live && endDate && startDate !== endDate) {
    date = moment(endDate).add(1, 'day');
    /* The campaign end date is inclusive. To get the correct
    relative measurement, we use the start of the next day. */
    /* Should not have to worry about now being after
     end since the campaign will auto-terminate */
    if (
      moment()
        .add(endingSoonDaysCount, 'days')
        .isAfter(date)
    ) {
      badgeType = BadgeType.Ending;
    }
  }

  if (isSpecialOrOffer(type)) {
    const name = incentives[0].offerTypeName;
    return (
      <td>
        <SpecialsListItemIcon color={color} />
        <h3>{name}</h3>
        {badgeType && date && <RelativeTimeBadge badgeType={badgeType} time={date.toDate()} />}
      </td>
    );
  }
  if (type === CampaignTypes.CustomPromotions) {
    return (
      <td>
        <CustomPromotionsIcon color={color} />
        <FormattedMessage
          tagName="h3"
          id={`guestcampaigns.list.${isShortTerm ? 'short_term_custom_promotions' : 'custom_promotions'}`}
        />
        {badgeType && date && <RelativeTimeBadge badgeType={badgeType} time={date.toDate()} />}
      </td>
    );
  }
  return (
    <td>
      <PromotedResultsIcon color={color} />
      <FormattedMessage
        tagName="h3"
        id={`guestcampaigns.list.${isShortTerm ? 'short_term_promoted_results' : 'promoted_results'}`}
      />
      {badgeType && date && <RelativeTimeBadge badgeType={badgeType} time={date.toDate()} />}
    </td>
  );
};

export default CampaignTypeLabel;
