import { Button } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { CampaignType, EndDateType, ModalType, OpenModalPayload } from '../../store/campaigns/campaigns.types';
import CoverPrice from './DetailLines/CoverPrice';
import DateRange from './DetailLines/DateRange';
import DetailLine from './DetailLines/DetailLine';
import MonthlyBudget from './DetailLines/MonthlyBudget';
import SuppressionDates from './DetailLines/SuppressionDates';
import makeDaysAndTimes from './helpers/make-days-and-times';

import CustomPromotionsIcon from '../CustomPromotions/CustomPromotionsIcon';
import './DraftCampaign.scss';

interface OP {
  /* Own props */
  campaign: CampaignType;
  openModal: (payload: OpenModalPayload) => void;
}

type Props = OP & InjectedIntlProps;

/* React.Component<P, S> ------ P is type/interface of props, S is type/interface of state */
class DraftCampaign extends React.Component<Props> {
  public render() {
    const { campaign, intl, openModal } = this.props;
    const {
      endDate,
      isShortTerm,
      schedule,
      startDate,
      type,
      suppressionDates,
      pricingTier,
      maxBid,
      monthlyBudget,
    } = campaign;

    const lineItems = [];

    lineItems.push(
      <DetailLine
        messageIdSuffix="days_and_times"
        value={makeDaysAndTimes(schedule, type, isShortTerm, startDate, endDate)}
        valueContainer="ul"
        valueClass="days-and-times-detail-line"
      />,
    );

    lineItems.push(<CoverPrice messageIdSuffix="cover_price" maxBid={maxBid} pricingTier={pricingTier} />);

    if (monthlyBudget) {
      lineItems.push(
        <MonthlyBudget messageIdSuffix="monthly_budget" budget={monthlyBudget} pricingTier={pricingTier} />,
      );
    }

    lineItems.push(
      <DateRange
        messageIdSuffix="seatingwindow"
        start={startDate}
        end={endDate}
        endDateType={EndDateType.Reservation}
      />,
    );

    lineItems.push(
      <SuppressionDates
        messageIdSuffix="blockeddates"
        intl={intl}
        suppressionDates={suppressionDates}
        editListItem={null}
      />,
    );

    return (
      <div className="draft-campaign">
        <h3>
          <CustomPromotionsIcon />
          <FormattedMessage id="guestcampaigns.list.custom_promotions" />
        </h3>
        <ul className="draft-campaign">
          {lineItems.map(lineItem => <li key={lineItem.props.messageIdSuffix}>{lineItem}</li>)}
        </ul>
        <Button
          data-testid="btnApproveCampaign"
          onClick={() => {
            openModal({ type: ModalType.Approve, campaign });
          }}
          theme="primary"
          type="button"
        >
          <FormattedMessage id="guestcampaigns.list.draft.approve_campaign" />
        </Button>
        <Button
          data-testid="btnChangeOrRemoveCampaign"
          onClick={() => {
            openModal({ type: ModalType.RequestChange, campaign });
          }}
          type="button"
        >
          <FormattedMessage id="guestcampaigns.list.draft.change_or_remove" />
        </Button>
      </div>
    );
  }
}

export default injectIntl(DraftCampaign);
export { DraftCampaign };
