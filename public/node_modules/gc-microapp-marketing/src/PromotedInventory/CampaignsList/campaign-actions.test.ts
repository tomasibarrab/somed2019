import clipboard from 'clipboard-polyfill';
import {
  CampaignType,
  CampaignTypes,
  ModalType,
  OpenModalPayload,
  PatchActionPayload,
} from '../../store/campaigns/campaigns.types';

import campaignActions from './campaign-actions';

jest.mock('clipboard-polyfill');

describe('Campaign actions', () => {
  const campaignId = 'ee15add5-aced-c0a1-5a55-d0dd1e5fade5';
  const campaign = { campaignId, type: CampaignTypes.PromotedResults, schedule: [] };

  const callback = jest.fn();
  Object.keys(campaignActions).map(key => {
    it(`should execute ${key}`, () => {
      switch (key) {
        case 'handleCopyLink':
          const { origin, pathname } = window.location;
          campaignActions[key](campaignId); // DO IT
          expect(clipboard.writeText).toHaveBeenLastCalledWith(`${origin}${pathname}#${campaignId}`);
          break;
        case 'handleEnd':
          campaignActions[key](campaign as CampaignType, callback); // DO IT
          expect(callback).toHaveBeenLastCalledWith({
            campaign,
            type: ModalType.End,
          });
          break;
        case 'handlePause':
          campaignActions[key](campaign as CampaignType, callback); // DO IT
          expect(callback).toHaveBeenLastCalledWith({
            campaign,
            type: ModalType.Pause,
          });
          break;
        case 'handleResume':
          campaignActions[key](campaignId, callback); // DO IT
          expect(callback).toHaveBeenLastCalledWith({
            campaignId,
            refetchCampaigns: true,
            state: 'live',
          });
          break;
        default:
      }
    });
  });
});
