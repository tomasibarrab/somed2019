import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { ModalType } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import DraftCampaign from './DraftCampaign';

describe('<DraftCampaign />', () => {
  const openModal = jest.fn();

  const props = {
    campaign: { monthlyBudget: 20, pricingTier: { price: 10 }, schedule: [] },
    openModal,
  };

  test('to match snapshot', () => {
    const component = create(
      <IntlProvider locale="en-US" messages={keys}>
        <DraftCampaign {...props} />
      </IntlProvider>,
    );
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  const scenarios = [
    {
      dataTestId: 'btnApproveCampaign',
      description: 'click Approve Campaign button',
      type: ModalType.Approve,
    },
    {
      dataTestId: 'btnChangeOrRemoveCampaign',
      description: 'click Change or Remove Campaign button',
      type: ModalType.RequestChange,
    },
  ];

  scenarios.forEach(({ dataTestId, description, type }) => {
    test(description, () => {
      openModal.mockReset();

      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <DraftCampaign {...props} />
        </IntlProvider>,
      );

      const button = wrapper.find(`[data-testid="${dataTestId}"]`).first();
      button.simulate('click');

      expect(openModal.mock.calls[0][0].type).toEqual(type);
    });
  });
});
