import classNames from 'classnames';
import { Button, Modal, ModalHeader, ModalMain, TextAreaField } from 'gca-react-components';
import React, { Component, SFC } from 'react';
import { FormattedMessage, InjectedIntl, InjectedIntlProps, injectIntl, intlShape } from 'react-intl';
import { InjectedFormProps, reduxForm } from 'redux-form';
import {
  CampaignState,
  CampaignType,
  DiscardActionTypes,
  PatchActionPayload,
} from '../../../store/campaigns/campaigns.types';
import { CHANGE_OR_REMOVE_FORM_NAME } from '../../constants';
import validate from './validate-change-or-remove-form';

import BigMailIcon from '../images/BigMailIcon';
import BigXIcon from '../images/BigXIcon';

interface OP {
  campaign: CampaignType;
  close: (success: boolean) => void;
  confirm: (payload: PatchActionPayload) => void;
}

type Props = OP & InjectedIntlProps;

interface State {
  successfulAction: DiscardActionTypes | null;
}

export class ChangeOrRemoveModal extends Component<Props, State> {
  public constructor(props: Props) {
    super(props);

    this.state = { successfulAction: null };
    this.finishAction = this.finishAction.bind(this);
  }

  public render() {
    const { close, intl, campaign, confirm } = this.props;
    const { successfulAction } = this.state;

    let modalContent;
    let modalHeader;

    switch (successfulAction) {
      case DiscardActionTypes.Remove:
        modalHeader = intl.formatMessage({ id: 'guestcampaigns.list.draft.remove_campaign' });
        modalContent = (
          <>
            <BigXIcon />
            <FormattedMessage
              id="guestcampaigns.list.draft.your_campaign_removed"
              values={{ 'campaign-type': intl.formatMessage({ id: 'guestcampaigns.list.custom_promotions' }) }}
              tagName="p"
            />
            <Button
              theme="primary"
              onClick={() => {
                close(!!successfulAction);
              }}
              data-testid="got_it_removed"
            >
              <FormattedMessage id="guestcampaigns.list.button.got_it" />
            </Button>
          </>
        );
        break;
      case DiscardActionTypes.RequestChange:
        modalHeader = intl.formatMessage({ id: 'guestcampaigns.list.draft.change_request_sent' });
        modalContent = (
          <>
            <BigMailIcon />
            <FormattedMessage id="guestcampaigns.list.draft.request_has_been_sent" tagName="p" />
            <FormattedMessage id="guestcampaigns.list.draft.current_draft_will_be" tagName="p" />
            <Button
              theme="primary"
              onClick={() => {
                close(!!successfulAction);
              }}
              data-testid="got_it_changed"
            >
              <FormattedMessage id="guestcampaigns.list.button.got_it" />
            </Button>
          </>
        );
        break;
      default:
        modalHeader = intl.formatMessage({ id: 'guestcampaigns.list.draft.change_or_remove' });
        modalContent = (
          <DecoratedForm
            finishAction={this.finishAction}
            confirm={confirm}
            campaignId={campaign.campaignId}
            intl={intl}
          />
        );
        break;
    }

    const closeWithSuccess = () => {
      close(!!successfulAction);
    };

    return (
      <Modal onClose={closeWithSuccess} modalClass="request-changes-modal">
        <ModalHeader onClose={closeWithSuccess} title={modalHeader} />
        <ModalMain
          // tslint:disable-next-line:object-literal-key-quotes
          className={classNames({ 'request-changes-modal-main': true, finished: !!successfulAction })}
          data-testid="request_change_modal_main"
        >
          {modalContent}
        </ModalMain>
      </Modal>
    );
  }

  private finishAction(action: DiscardActionTypes) {
    this.setState({ successfulAction: action });
  }
}

interface FormProps {
  finishAction: (action: DiscardActionTypes) => void;
  confirm: (payload: PatchActionPayload) => void;
  campaignId: string;
  intl: InjectedIntl;
}

export interface FormValues {
  action: DiscardActionTypes;
  description?: string;
}

const ChangeOrRemoveForm: SFC<InjectedFormProps<FormValues, FormProps> & { intl: InjectedIntl }> = ({
  handleSubmit,
  change,
  intl,
  invalid,
}) => {
  return (
    <form onSubmit={handleSubmit} className="change-or-remove-form">
      <FormattedMessage tagName="p" id="guestcampaigns.list.draft.if_you_want_to_change" />
      <TextAreaField
        name="description"
        max={2000}
        placeholder={intl.formatMessage({ id: 'guestcampaigns.list.draft.tell_us_why.placeholder' })}
      />
      <Button
        theme="primary"
        htmlType="submit"
        onClick={() => {
          // Seems like kind of a hack but is probably the cleanest way to do this in redux-form
          change('action', DiscardActionTypes.RequestChange);
        }}
        disabled={invalid}
        data-testid="send_change_request_btn"
      >
        <FormattedMessage id="guestcampaigns.list.draft.send_change_request" />
      </Button>
      <Button
        htmlType="submit"
        onClick={() => {
          change('action', DiscardActionTypes.Remove);
        }}
        data-testid="remove_btn"
      >
        <FormattedMessage id="guestcampaigns.list.draft.remove_campaign" />
      </Button>
    </form>
  );
};

const DecoratedForm = reduxForm<FormValues, FormProps>({
  form: CHANGE_OR_REMOVE_FORM_NAME,
  initialValues: { action: DiscardActionTypes.RequestChange },
  onSubmit: ({ action, description }, dispatch, props) => {
    const { finishAction, confirm, campaignId } = props;

    const campaignDiscardInfo = {
      action: action!,
      description,
    };

    finishAction(action!);
    confirm({
      campaignDiscardInfo,
      campaignId,
      refetchCampaigns: false,
      state: CampaignState.Discarded,
    });
  },
  validate,
})(ChangeOrRemoveForm);

export default injectIntl(ChangeOrRemoveModal);
