import { mount, shallow } from 'enzyme';
import { Button } from 'gca-react-components';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import ConfirmDefaultChange from './ConfirmDefaultChange';

describe('<ConfirmDefaultChange />', () => {
  const day = moment();
  const handleConfirm = jest.fn();

  const messages = {
    'guestcampaigns.list.blockdays.confirm.addheader':
      'Do you want to block the campaign from promoting {label} every year, or just {intlDate}?',
    'guestcampaigns.list.blockdays.confirm.button.addcustom': 'Add only this {label}',
    'guestcampaigns.list.blockdays.confirm.button.adddefault': 'Add for all future years',
    'guestcampaigns.list.blockdays.confirm.button.cancel': 'Cancel',
    'guestcampaigns.list.blockdays.confirm.button.removedefault': 'Remove {label} block',
    'guestcampaigns.list.blockdays.confirm.removeheader': 'Removing this {label} block will remove it for future years',
  };

  describe('rendering', () => {
    const scenarios = [
      {
        description: 'confirm remove',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: true,
        },
      },
      {
        description: 'confirm add',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: false,
        },
      },
    ];
    scenarios.map(({ description, props }) => {
      it(`should match ${description} snapshot`, () => {
        const component = create(
          <IntlProvider locale="en-US" messages={messages}>
            <ConfirmDefaultChange {...props} />
          </IntlProvider>,
        );
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
      });
    });
  });

  describe('handleConfirm', () => {
    const scenarios = [
      {
        buttonIndex: 0,
        description: 'day and id',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: true,
        },
      },
      {
        buttonIndex: 1,
        description: 'no args (cancel)',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: true,
        },
      },
      {
        buttonIndex: 0,
        description: 'day and id',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: false,
        },
      },
      {
        buttonIndex: 1,
        description: 'day, id, isCustom === true',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: false,
        },
      },
      {
        buttonIndex: 2,
        description: 'no args (cancel)',
        props: {
          day,
          handleConfirm,
          id: 'valentines_day',
          intlDate: day.toISOString(),
          isBlocked: false,
        },
      },
    ];

    scenarios.map(({ description, props, buttonIndex }) => {
      it(`button ${buttonIndex + 1} should have ${description} when isBlocked: ${props.isBlocked}`, () => {
        props.handleConfirm = jest.fn();
        const wrapper = mount(
          <IntlProvider locale="en-US" messages={messages}>
            <ConfirmDefaultChange {...props} />
          </IntlProvider>,
        );
        const button = wrapper.find(Button).at(buttonIndex);
        expect(props.handleConfirm).not.toHaveBeenCalled();
        button.simulate('click');
        expect(props.handleConfirm.mock.calls).toMatchSnapshot();
      });
    });
  });
});
