import { mount, shallow } from 'enzyme';
import { Button } from 'gca-react-components';
import moment from 'moment';
import React from 'react';
import DayPicker from 'react-dates/lib/components/DayPickerSingleDateController.js';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { CampaignState } from '../../../../store/campaigns/campaigns.types';
import { keys } from '../../../../translations/bundles/marketing.json';
import BlockedDatesPicker, { DateAttributes } from './BlockedDatesPicker';

jest.mock('react-dates/lib/components/DayPickerSingleDateController.js');

jest.mock('./ConfirmDefaultChange', () => {
  return 'mock-confirm-default-change';
});

describe('<BlockedDatesPicker />', () => {
  const store = configureMockStore([])({});

  const scenarios = [
    {
      description: 'render (add 1) button',
      props: {
        blocked: new Map<string, DateAttributes>([['2018-02-01', { isBlocked: true, isNew: true, isDefault: false }]]),
        setSuppressionDates: jest.fn(),
      },
    },
    {
      description: 'render (add 1, remove 1) button',
      props: {
        blocked: new Map<string, DateAttributes>([
          ['2018-02-01', { isBlocked: true, isNew: true, isDefault: false }],
          ['2018-02-14', { isBlocked: false, isNew: false, isDefault: true }],
        ]),
        setSuppressionDates: jest.fn(),
      },
    },
  ];

  scenarios.map(({ description, props }) => {
    it(`should ${description}`, () => {
      const component = create(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <BlockedDatesPicker {...props} />
          </IntlProvider>
        </Provider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  it('should setSuppresson on button click', () => {
    const props = scenarios[0].props;
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <BlockedDatesPicker {...props} />
        </IntlProvider>
      </Provider>,
    );
    const button = wrapper.find(Button);
    expect(props.setSuppressionDates).not.toHaveBeenCalled();
    button.simulate('click');
    expect(props.setSuppressionDates).toHaveBeenCalledWith(props.blocked);
  });

  it('should render confirm default change when confirmation needed', () => {
    const props = {
      blocked: new Map(),
      setSuppressionDates: jest.fn(),
    };
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <BlockedDatesPicker {...props} />
        </IntlProvider>
      </Provider>,
    );
    const blockedDatesPicker = shallow(wrapper.find('BlockedDatesPicker').get(0));
    blockedDatesPicker.setState({
      defaultConfirm: { day: moment(), id: 'test', isBlocked: true },
    });
    expect(blockedDatesPicker).toMatchSnapshot();
  });

  it('should update state when confirming or cancelling', () => {
    const props = {
      blocked: new Map<string, DateAttributes>([
        ['2017-11-27', { isBlocked: true, id: 'mock_default_id', isDefault: true }],
      ]),
      setSuppressionDates: jest.fn(),
    };
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <BlockedDatesPicker {...props} />
        </IntlProvider>
      </Provider>,
    );
    const blockedDatesPicker = shallow(wrapper.find('BlockedDatesPicker').get(0));
    const { handleConfirm } = blockedDatesPicker.instance();
    [
      { day: undefined, isCustom: undefined },
      { day: '2017-11-27', isCustom: undefined },
      { day: '2017-11-27', isCustom: true },
    ].map(({ day, isCustom }) => {
      handleConfirm(day, isCustom);
      expect(blockedDatesPicker.state()).toMatchSnapshot();
    });
  });

  describe('<DayPicker />', () => {
    const props = {
      blocked: new Map<string, DateAttributes>([
        ['2017-11-25', { isBlocked: true, isDefault: true }],
        ['2017-11-26', { isBlocked: false, isDefault: true, id: 'mock_holiday' }],
        ['2017-11-27', { isBlocked: true, isDefault: false }],
        ['2017-11-28', { isBlocked: false, isDefault: false }],
      ]),
      setSuppressionDates: jest.fn(),
    };

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <BlockedDatesPicker {...props} />
        </IntlProvider>
      </Provider>,
    );

    const blockedDatesPicker = shallow(wrapper.find('BlockedDatesPicker').get(0));

    const {
      isDayBlocked,
      isDayHighlighted,
      onDateChange,
      renderCalendarDay,
      renderDayContents,
    } = DayPicker.mock.instances[0].props;

    it('should attach styles to default days', () => {
      [{ day: null }, { day: moment().add(1, 'day') }, { day: moment().subtract(1, 'day') }].map(({ day }) => {
        expect(renderCalendarDay({ day })).toMatchSnapshot();
      });
    });

    it('should highlight blocked days', () => {
      [
        { day: null, expected: false },
        { day: moment(), expected: true },
        { day: moment().add(1, 'day'), expected: false },
      ].map(({ day, expected }) => {
        expect(isDayHighlighted(day)).toBe(expected);
      });
    });

    it('should render a strikethrough span if blocked', () => {
      [
        { day: moment().subtract(2, 'days') },
        { day: moment().subtract(1, 'day') },
        { day: moment() },
        { day: moment().add(1, 'day') },
        { day: moment().add(10, 'days') },
      ].map(({ day }) => {
        expect(renderDayContents(day)).toMatchSnapshot();
      });
    });

    it('should block days in the past', () => {
      [
        { day: moment().subtract(1, 'week'), expected: true },
        { day: moment(), expected: false },
        { day: moment().add(1, 'week'), expected: false },
      ].map(({ day, expected }) => {
        expect(isDayBlocked(day)).toEqual(expected);
      });
    });

    it('should update state.blocked onDateChange', () => {
      [
        { day: null },
        { day: moment() },
        { day: moment().subtract(1, 'day') },
        { day: moment().subtract(2, 'days') },
        { day: moment().add(10, 'days') },
      ].map(({ day }) => {
        onDateChange(day);
        expect(blockedDatesPicker.state()).toMatchSnapshot();
      });
    });
  });
});
