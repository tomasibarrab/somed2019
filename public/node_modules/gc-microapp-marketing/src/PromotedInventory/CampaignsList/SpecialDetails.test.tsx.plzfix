import { mount } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { CampaignType } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import SpecialDetails from './SpecialDetails';

// force UTC so tests run the same way on all environments
Intl.DateTimeFormat = jest.fn(() => ({
  format: (date: any) => date.toUTCString(),
}));

jest.mock('moment', () => {
  const momentTz = require.requireActual('moment-timezone');
  momentTz.tz.setDefault('UTC');
  return momentTz;
});

describe('<SpecialDetails />', () => {
  const yesterday = '2017-11-26T12:00:00Z';
  const today = '2017-11-27T12:00:00Z';
  const tomorrow = '2017-11-28T12:00:00Z';
  const dayAfterTomorrow = '2017-11-29T12:00:00Z';

  const suppressionDates = {
    custom: [
      {
        endDate: tomorrow,
        label: 'test label',
        startDate: yesterday,
      },
    ],
    default: ['thanksgiving_day_us'],
  };

  const state = {
    campaigns: {
      error: undefined,
      failed: false,
      list: [],
      loading: true,
      success: false,
    },
  };

  const scenarios = [
    {
      campaign: {
        approvedByEmail: 'isr@opentable.com',
        campaignId: 'campaign-id',
        changedByUser: 'jest@example.com',
        createdByEmail: 'jest@example.com',
        endDate: today,
        incentives: [
          {
            description: 'the description',
            name: 'the name',
            noteToDiners: '',
          },
        ],
        schedule: [
          {
            dayOfWeek: 'FRIDAY',
            endTime: '10:30:00',
            startTime: '08:00:00',
          },
        ],
        startDate: today,
        state: 'live',
        suppressionDates,
      },
      description: 'live campaign',
    },
    {
      campaign: {
        approvedByEmail: 'isr@example.com',
        campaignId: 'campaign-id',
        changedByUser: 'jest@example.com',
        createdByEmail: 'jest@example.com',
        endDate: today,
        incentives: [
          {
            description: 'the description',
            name: 'the name',
            noteToDiners: '',
          },
        ],
        schedule: [
          {
            dayOfWeek: 'FRIDAY',
            endTime: '10:30:00',
            startTime: '08:00:00',
          },
        ],
        startDate: yesterday,
        state: 'ended',
        suppressionDates,
      },
      description: 'ended campaign',
    },
  ];

  scenarios.map(({ description, campaign }) => {
    test(`${description} to match snapshot`, () => {
      const store = configureMockStore([])(state);
      const component = create(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <tr>
              <SpecialDetails campaign={campaign as CampaignType} />
            </tr>
          </IntlProvider>
        </Provider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  test('clicking Edit Blocked Days will fire openModal', () => {
    const store = configureMockStore([])(state);
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <table>
            <tbody>
              <tr>
                <SpecialDetails campaign={scenarios[0].campaign as CampaignType} />
              </tr>
            </tbody>
          </table>
        </IntlProvider>
      </Provider>,
    );
    const editButton = wrapper.find('.edit-blocked-days-li');
    editButton.simulate('click');
    expect(store.getActions()[0].type).toEqual('CAMPAIGNS/OPEN_MODAL');
  });
});
