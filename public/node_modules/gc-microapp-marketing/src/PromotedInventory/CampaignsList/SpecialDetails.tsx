import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { actions } from '../../store/campaigns/campaigns';
import {
  CampaignState,
  CampaignType,
  EndDateType,
  ModalType,
  OpenModalPayload,
  PatchActionPayload,
} from '../../store/campaigns/campaigns.types';
import CampaignDetailsMenu from './CampaignDetailsMenu';
import DateRange from './DetailLines/DateRange';
import DetailLine from './DetailLines/DetailLine';
import SuppressionDates from './DetailLines/SuppressionDates';
import renderIncentiveDetails from './helpers/render-incentive-details';

interface OP {
  campaign: CampaignType;
}

interface DP {
  openModal: (payload: OpenModalPayload) => void;
  patchCampaignRequest: (payload: PatchActionPayload) => void;
}

type Props = OP & DP & InjectedIntlProps;

/* React.Component<P, S> ------ P is type/interface of props, S is type/interface of state */
class SpecialDetails extends React.Component<Props, {}> {
  public render() {
    const { campaign, intl } = this.props;
    const { changedByUser, createdByEmail, endDate, incentives, state, startDate, suppressionDates } = campaign;

    const lineItems: JSX.Element[] = [
      ...renderIncentiveDetails(incentives[0]),
      <DateRange
        messageIdSuffix="seatingwindow"
        start={startDate}
        end={endDate}
        endDateType={EndDateType.Reservation}
      />,
      <SuppressionDates
        messageIdSuffix="blockeddates"
        intl={intl}
        suppressionDates={suppressionDates}
        editListItem={
          state !== CampaignState.Ended && state !== CampaignState.Discarded ? (
            <li
              className="edit-blocked-days-li"
              key="edit-blocked-days-li"
              onClick={() => {
                this.props.openModal({ type: ModalType.EditBlockedDays, campaign });
              }}
            >
              {intl.formatMessage({ id: 'guestcampaigns.list.edit_blocked_days' })}
            </li>
          ) : null
        }
      />,
      <DetailLine messageIdSuffix="created_by" value={createdByEmail} />,
    ];

    if (state === CampaignState.Ended && changedByUser) {
      lineItems.push(<DetailLine messageIdSuffix="ended_by" value={changedByUser} />);
    }

    return (
      <>
        <td colSpan={2}>
          <ul>
            {lineItems.map((lineItem, index) => <li key={lineItem.props.messageIdSuffix || `${index}`}>{lineItem}</li>)}
          </ul>
        </td>
        <td>
          <CampaignDetailsMenu
            campaign={campaign}
            openModal={this.props.openModal}
            patchCampaignRequest={this.props.patchCampaignRequest}
          />
        </td>
      </>
    );
  }
}

const mapDispatch = {
  openModal: actions.openModal,
  patchCampaignRequest: actions.patchCampaign.started,
};

export default connect<{}, DP, OP>(undefined, mapDispatch)(injectIntl(SpecialDetails));
