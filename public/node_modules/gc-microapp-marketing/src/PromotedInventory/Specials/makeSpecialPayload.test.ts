import {
  CampaignState,
  CampaignTypes,
  CustomSuppressionDate,
  DisplaySpecialTypes,
  Schedule,
  SuppressionDates,
} from '../../store/campaigns/campaigns.types';

import { makeSpecialPayload } from './makeSpecialPayload';
/* tslint:disable:object-literal-key-quotes */

describe('makeSpecialPayload', () => {
  const formValues = {
    'blocked-days': {
      custom: {
        '2018-04-25': {
          endDate: '2018-04-25',
          id: '2018-04-25',
          label: '4/25',
          startDate: '2018-04-25',
        },
        '2018-04-26': {
          endDate: '2018-04-26',
          id: '2018-04-26',
          label: '4/26',
          startDate: '2018-04-26',
        },
        '2018-04-27': false,
      },
      default: {
        christmas_day: true,
        christmas_eve: true,
        mothers_day_us: true,
        new_years_day: false,
        new_years_eve: false,
        thanksgiving_day_us: true,
        valentines_day: true,
      },
    },
    daysAndTimes: [
      {
        days: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY'],
        times: {
          end: '18:00',
          start: '16:00',
        },
      },
    ],
    description: 'bbb',
    endDate: '2018-03-30',
    name: 'aaa',
    startDate: '2018-03-22',
    type: 'happy_hour',
  };

  const user = {
    firstName: 'OpenTable',
    lastName: 'User',
    userName: 'jest-opentable@example.com',
  };

  const campaignApprovalInfo = {
    browserInfo: '{ os: "The Operating System" }',
    email: 'jest-opentable@example.com',
    linkToTerms: 'http://example.com/terms-v1',
    name: 'First Last',
  };

  it('should transform a set of form values', () => {
    const result = makeSpecialPayload(formValues, user, 268852, campaignApprovalInfo);
    expect(result).toMatchSnapshot();
  });

  it('should transform a set of form values w/o "endDate"', () => {
    const result = makeSpecialPayload(
      Object.assign({}, formValues, { endDate: null }),
      user,
      268852,
      campaignApprovalInfo,
    );
    expect(result).toMatchSnapshot();
  });

  it('should transform a set of form values without user, rid, or approval info', () => {
    const result = makeSpecialPayload(formValues);
    expect(result).toMatchSnapshot();
  });
});
