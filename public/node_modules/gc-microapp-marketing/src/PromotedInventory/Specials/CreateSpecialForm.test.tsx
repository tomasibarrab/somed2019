import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { DisplaySpecialTypes } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import CreateSpecialForm from './CreateSpecialForm';
import { ValidationErrors } from './validate-create-specials-form';

const makeWrapper = store =>
  mount(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={keys}>
        <CreateSpecialForm />
      </IntlProvider>
    </Provider>,
  );

describe('CreateSpecialForm', () => {
  const daysAndTimes = [
    {
      days: ['TUESDAY'],
      times: {
        end: '15:00',
        start: '17:00',
      },
    },
  ];
  const typeSelectedFormState = {
    form: {
      createSpecial: {
        values: {
          daysAndTimes,
          type: DisplaySpecialTypes.ComplimentaryAppetizer,
        },
      },
    },
  };
  const submitFailedState = {
    form: {
      createSpecial: {
        submitFailed: true,
        syncErrors: {
          description: ValidationErrors.Required,
          name: ValidationErrors.Required,
        },
        values: {
          daysAndTimes,
        },
      },
    },
  };

  it('should render form with special type selected, and pick a placeholder for title, desc fields', () => {
    const store = configureMockStore([])(typeSelectedFormState);
    const wrapper = makeWrapper(store);

    const titleField = wrapper.find('Field[name="name"]');
    expect(titleField.length).toEqual(1);

    const titleInput = titleField.find('Input');
    expect(titleInput.length).toEqual(1);

    expect(titleInput.first().props().placeholder).toMatchSnapshot();
  });

  it('should render form with invalid (empty) inputs when submitFailed, and errors present for those fields', () => {
    const store = configureMockStore([])(submitFailedState);
    const wrapper = makeWrapper(store);

    const invalidInputs = wrapper.find('.invalid');
    expect(invalidInputs.length).toEqual(2);
  });

  it('should dispatch CAMPAIGNS/OPEN_CREATION_TERMS_MODAL action when submitted', () => {
    const store = configureMockStore([])(typeSelectedFormState);
    const wrapper = makeWrapper(store);

    const form = wrapper.find('form').first();
    form.simulate('submit');
    const actions = store.getActions();
    expect(actions.find(action => action.type === 'CAMPAIGNS/OPEN_CREATION_TERMS_MODAL')).not.toBeUndefined();
  });
});
