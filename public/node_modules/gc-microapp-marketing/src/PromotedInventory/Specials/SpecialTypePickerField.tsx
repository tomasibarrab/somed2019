import classNames from 'classnames';
import React from 'react';
import { FormattedMessage } from 'react-intl';
import { Field } from 'redux-form';
import { DisplaySpecialTypes } from '../../store/campaigns/campaigns.types';
import './SpecialTypePickerField.scss';

/* Images */
import { SelectedCompAppetizer } from './images/Form/Selected/SelectedCompAppetizer';
import { SelectedCompDrink } from './images/Form/Selected/SelectedCompDrink';
import { SelectedHappyHour } from './images/Form/Selected/SelectedHappyHour';

import { CompAppetizer } from './images/Form/Deselected/CompAppetizer';
import { CompDrink } from './images/Form/Deselected/CompDrink';
import { HappyHour } from './images/Form/Deselected/HappyHour';

/* Since typeId varies by country, future internationalization
probably needs to fetch these for the specific RID */
const specialTypes = [
  {
    id: DisplaySpecialTypes.HappyHour, // 8
    images: {
      deselected: <HappyHour />,
      selected: <SelectedHappyHour />,
    },
  },
  {
    id: DisplaySpecialTypes.ComplimentaryDrink, // 4
    images: {
      deselected: <CompDrink />,
      selected: <SelectedCompDrink />,
    },
  },
  {
    id: DisplaySpecialTypes.ComplimentaryAppetizer, // 4
    images: {
      deselected: <CompAppetizer />,
      selected: <SelectedCompAppetizer />,
    },
  },
];

interface Props {
  name: string;
  clickCallToAction: (data: any) => void;
}

class ReduxFormSpecialTypePickerField extends React.Component<Props, {}> {
  public render() {
    const { name } = this.props;
    return <Field name={name} component={this.renderItems} />;
  }

  private renderItems = (props: any) => {
    const { input: { value, onChange }, meta: { submitFailed, error } } = props;
    return (
      <>
        <ul className="special-type-picker">
          {specialTypes.map(({ id, images: { selected, deselected } }: any) => (
            <li
              className={classNames({ selected: value === id })}
              onClick={() => {
                onChange(id);
                this.props.clickCallToAction({ name: `Type ${id}`, page: 'Create Special' });
              }}
              key={id}
            >
              {value === id ? selected : deselected}
              <FormattedMessage id={`guestcampaigns.specials.form.type.${id}`} />
            </li>
          ))}
        </ul>
        {submitFailed && error && <FormattedMessage id="guestcampaigns.specials.form.validation.type" />}
      </>
    );
  };
}

export default ReduxFormSpecialTypePickerField;
