import { Button, ModalWrapper, Panel } from 'gca-react-components';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { submit as reduxFormSubmit } from 'redux-form';

import { actions } from '../../store/campaigns/campaigns';
import { CreateActionPayload, CreationTermsModalState } from '../../store/campaigns/campaigns.types';
import { State } from '../../store/types';
import { CREATE_SPECIAL_FORM_NAME } from '../constants';
import './CreateSpecial.scss';
import { CreateSpecialCompleted } from './CreateSpecialCompleted';
import CreateSpecialForm from './CreateSpecialForm';
import initialValues from './initialValues';
import SpecialCreationTermsModal from './SpecialCreationTermsModal';

/*

This component usually will contain the form, and after the user creates
a special, it shows the completion page.

Other things contained in this page are the submit and cancel buttons, which
take the user back to the list/landing page, and submit the form, respectively

We trigger a 'remote submit' by using the redux-form submit action with the
name of the form.

*/

interface DP {
  closeModal: () => void;
  createCampaignStart: (payload: CreateActionPayload) => void;
  submit: () => void;
  clickCallToAction: (data: any) => void;
}

interface SP {
  create: {
    pending: boolean;
    success?: boolean;
    modal?: CreationTermsModalState;
  };
}

interface ComponentState {
  exit: boolean;
}

type Props = SP & DP & InjectedIntlProps;
export class CreateSpecial extends React.Component<Props, ComponentState> {
  private ModalWithRouter = withRouter(({ history }) => (
    /* TODO: the "cancel" action of this modal should be to not exit the form.
      If you click out of the modal, I would think that would keep you in
      the creation form. Though that means we would need to switch the buttons
      */
    <ModalWrapper
      cancelButtonText={this.props.intl.formatMessage({ id: 'guestcampaigns.specials.form.leavemodal.leave' })}
      confirmButtonText={this.props.intl.formatMessage({ id: 'guestcampaigns.specials.form.leavemodal.stay' })}
      includeCancelButton={true}
      onCancel={() => {
        history.push('/specials/list');
        this.props.clickCallToAction({ name: 'Leave and Discard', page: 'Create Special' });
      }}
      onConfirm={() => {
        this.setState({ exit: false });
      }}
      title={this.props.intl.formatMessage({ id: 'guestcampaigns.specials.form.leavemodal.title' })}
    >
      {this.props.intl.formatMessage({ id: 'guestcampaigns.specials.form.leavemodal.description' })}
    </ModalWrapper>
  ));

  constructor(props: Props) {
    super(props);
    this.state = { exit: false };
  }

  public render() {
    const {
      createCampaignStart,
      clickCallToAction,
      closeModal,
      submit,
      intl: { formatMessage },
      create: { pending, success, modal },
    } = this.props;
    const createdSuccessfully = !pending && success;

    const { exit } = this.state;

    const headerContent = createdSuccessfully ? (
      undefined
    ) : (
      <div className="specials-form-buttons-container">
        <Button
          onClick={() => {
            this.setState({ exit: true });
          }}
        >
          {formatMessage({ id: 'guestcampaigns.specials.form.header.cancelbutton' })}
        </Button>
        <Button onClick={submit} theme="publish" busy={pending}>
          {formatMessage({ id: 'guestcampaigns.specials.form.header.publishbutton' })}
        </Button>
      </div>
    );

    return (
      <Panel headerContent={headerContent} title={formatMessage({ id: 'guestcampaigns.specials.form.header.title' })}>
        {createdSuccessfully ? (
          <CreateSpecialCompleted />
        ) : (
          <CreateSpecialForm initialValues={initialValues} clickCallToAction={clickCallToAction} />
        )}

        {exit && <this.ModalWithRouter />}
        {modal && (
          <SpecialCreationTermsModal
            formValuesSnapshot={modal.formValuesSnapshot}
            close={closeModal}
            confirm={createCampaignStart}
          />
        )}
      </Panel>
    );
  }
}

const mapDispatch = {
  clickCallToAction: actions.clickCallToAction,
  closeModal: actions.closeCreationTermsModal,
  createCampaignStart: actions.createCampaign.started,
  submit: () => reduxFormSubmit(CREATE_SPECIAL_FORM_NAME),
};

const mapState = (state: State) => ({
  create: state.campaigns.create,
});

export default connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl(CreateSpecial));
