import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { keys } from '../../translations/bundles/marketing.json';
import { CREATE_SPECIAL_FORM_NAME } from '../constants';
import BlockedDays from './BlockedDays';

describe('<BlockedDays />', () => {
  test('to match snapshot', () => {
    const store = configureMockStore()();

    const Decorated = reduxForm<any, any>({
      form: CREATE_SPECIAL_FORM_NAME,
    })(BlockedDays);

    const change = jest.fn();

    const component = create(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <Decorated change={change} />
        </IntlProvider>
      </Provider>,
    );
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  function makeWrapper() {
    const store = configureMockStore()();

    const Decorated = reduxForm<any, any>({
      form: CREATE_SPECIAL_FORM_NAME,
    })(BlockedDays);

    const change = jest.fn();

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <Decorated change={change} />
        </IntlProvider>
      </Provider>,
    );

    return wrapper;
  }

  test('unblock default day', () => {
    const wrapper = makeWrapper();

    const listItem = wrapper.find('li').first();
    listItem.simulate('click');
    wrapper.update();

    expect(wrapper.debug()).toMatchSnapshot();
  });

  test('show/hide modal', () => {
    const wrapper = makeWrapper();

    const listItem = wrapper.find('li.action').first();
    listItem.simulate('click');
    wrapper.update();

    expect(wrapper.debug()).toMatchSnapshot('show modal');

    const button = wrapper.find('Button').first();
    button.simulate('click');
    wrapper.update();

    expect(wrapper.debug()).toMatchSnapshot('hide modal');
  });

  test('add custom day', () => {
    const wrapper = makeWrapper();

    // open modal
    const action = wrapper.find('li.action').first();
    action.simulate('click');
    wrapper.update();

    const calendarDays = wrapper.find('td.CalendarDay');

    // select a day
    const calendarDay = calendarDays.last();
    calendarDay.simulate('click');
    wrapper.update();

    // confirm
    const button = wrapper.find('Button').last();
    button.simulate('click');
    wrapper.update();

    // open modal
    action.simulate('click');
    wrapper.update();

    // select another day
    let anotherCalendarDay = null;
    calendarDays.forEach(e => {
      if (e.props().className.includes('CalendarDay__blocked_calendar') === false) {
        if (anotherCalendarDay === null) {
          anotherCalendarDay = e;
        }
      }
    });
    anotherCalendarDay.simulate('click');
    wrapper.update();

    // confirm
    button.simulate('click');
    wrapper.update();

    // remove first custom
    const listItem = wrapper.find('li.custom').first();
    listItem.simulate('click');
    wrapper.update();

    expect(wrapper.debug()).toMatchSnapshot();
  });
});
