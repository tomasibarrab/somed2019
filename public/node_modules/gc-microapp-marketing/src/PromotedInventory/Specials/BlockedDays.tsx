import classNames from 'classnames';
import moment, { Moment } from 'moment';
import React, { Component } from 'react';
import { FormattedDate, FormattedMessage } from 'react-intl';
import { Field, FormSection } from 'redux-form';
import {
  CampaignType,
  DefaultSuppressionDateDescription,
  PutSuppressionDatesPayload,
  SuppressionDates,
} from '../../store/campaigns/campaigns.types';
import BlockedDatesPickerModal from '../CampaignsList/Modals/BlockedDates/BlockedDatesPickerModal';
import { dateFormat } from '../constants';
import defaultSuppressionDates from '../default-suppression-dates.json';
import './BlockedDays.scss';

// info: used in the UI
interface BlockedDay {
  checked: boolean;
  default: boolean;
  endDate: Moment;
  id: string;
  label: string;
  startDate: Moment;
}

interface Props {
  change: any;
}

interface State {
  blockedDays: BlockedDay[];
  showModal: boolean;
}

const nullState = {
  blockedDays: [],
  showModal: false,
};

const DAY = 'M/D';

class BlockedDays extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = Object.assign({}, nullState, { blockedDays: this.makeBlockedDays() });
  }

  public render() {
    const { blockedDays, showModal } = this.state;

    const blocked: JSX.Element[] = blockedDays
      .filter((blockedDay: BlockedDay) => blockedDay.checked === true)
      .map((blockedDay: BlockedDay) => this.makeItem(blockedDay));

    blocked.push(this.makeAddCustomDay());

    const unblocked: JSX.Element[] = blockedDays
      .filter((blockedDay: BlockedDay) => blockedDay.checked === false)
      .map((blockedDay: BlockedDay) => this.makeItem(blockedDay));

    return (
      <FormSection name="blocked-days.default">
        <div className={classNames('blocked-days')}>
          <ul>{blocked}</ul>
          {unblocked.length > 0 && (
            <>
              <h3>Unblocked Days</h3>
              <ul>{unblocked}</ul>
            </>
          )}
        </div>
        {showModal === true && this.makeBlockedDatesPickerModal()}
      </FormSection>
    );
  }

  private handleOnclick = (blockedDay: BlockedDay) => {
    const { change } = this.props;
    const { blockedDays } = this.state;
    const copy = blockedDays.slice();

    const index = copy.findIndex((item: BlockedDay) => item.default === false && item.id === blockedDay.id);
    if (index >= 0) {
      copy.splice(index, 1);
      change(`blocked-days.custom.${blockedDay.id}`, false);
    }

    copy.map((item: BlockedDay) => {
      if (item.id === blockedDay.id) {
        const checked = !item.checked;
        item.checked = checked;
        // info: only default will reach this part as we splice the array above
        change(`blocked-days.default.${blockedDay.id}`, checked);
      }
      return item;
    });
    this.setState({ blockedDays: copy });
  };

  private makeAddCustomDay = (): JSX.Element => {
    return (
      <li
        className="action"
        key="add-a-custom-day"
        onClick={() => {
          this.setState({ showModal: true });
        }}
      >
        + <FormattedMessage id="guestcampaigns.specials.form.blockeddays.add" />
      </li>
    );
  };

  private makeBlockedDatesPickerModal = (): JSX.Element => {
    const { change } = this.props;
    const { blockedDays } = this.state;
    const suppressionDates = this.makeSuppressionDates(blockedDays);
    const campaign = { suppressionDates } as CampaignType;

    return (
      <BlockedDatesPickerModal
        campaign={campaign}
        close={() => {
          this.setState({ showModal: false });
        }}
        confirm={(data: PutSuppressionDatesPayload) => {
          const custom = data.custom.map((element: any) => {
            const date = moment(element.startDate);
            const label = date.format(DAY);
            const id = date.format(dateFormat.MOMENT);
            const blockedDay = {
              checked: true,
              default: false,
              endDate: date,
              id,
              label,
              startDate: date,
            };

            return blockedDay;
          });

          const copy = blockedDays.filter((e: any) => e.default === true);
          custom.forEach((blockedDay: BlockedDay) => {
            copy.push(blockedDay);
          });
          this.setState(Object.assign({}, nullState, { blockedDays: copy }));

          const newCustom = {} as any;
          custom.forEach((blockedDay: any) => {
            newCustom[blockedDay.id] = {
              endDate: blockedDay.endDate.format(dateFormat.MOMENT),
              id: blockedDay.id,
              label: blockedDay.label,
              startDate: blockedDay.startDate.format(dateFormat.MOMENT),
            };
          });
          change('blocked-days.custom', newCustom);
        }}
      />
    );
  };

  private makeBlockedDays = (): BlockedDays[] => {
    return defaultSuppressionDates.map((defaultSuppressionDate: DefaultSuppressionDateDescription) =>
      Object.assign({}, defaultSuppressionDate, {
        checked: true,
        default: true,
        endDate: moment(defaultSuppressionDate.endDate),
        startDate: moment(defaultSuppressionDate.startDate),
      }),
    );
  };

  private makeItem = (blockedDay: BlockedDay): JSX.Element => {
    return (
      <li
        className={classNames({
          custom: blockedDay.default === false,
          default: blockedDay.default === true,
          unselected: blockedDay.checked === false,
        })}
        key={blockedDay.id}
        onClick={() => {
          this.handleOnclick(blockedDay);
        }}
      >
        <label>
          {blockedDay.default && (
            <time>
              <FormattedDate value={blockedDay.startDate.toDate()} month="numeric" day="numeric" />
            </time>
          )}
          <Field checked={blockedDay.checked} component="input" name={blockedDay.id} type="checkbox" />
          {blockedDay.default ? (
            <span>{blockedDay.label}</span>
          ) : (
            <FormattedDate value={blockedDay.startDate.toDate()} month="numeric" day="numeric" year="numeric" />
          )}
          {blockedDay.checked === true && <span>&times;</span>}
          {blockedDay.checked === false && <span className="primary-blue">+</span>}
        </label>
      </li>
    );
  };

  private makeSuppressionDates = (blockedDays: BlockedDay[]) => {
    return blockedDays.reduce(
      (accumulator: SuppressionDates, currentValue: BlockedDay) => {
        if (currentValue.default === true && currentValue.checked === true) {
          accumulator.default.push(currentValue.id);
        }
        if (currentValue.default === false && currentValue.checked === true) {
          accumulator.custom.push({
            endDate: currentValue.endDate.format(dateFormat.MOMENT),
            label: currentValue.label,
            startDate: currentValue.startDate.format(dateFormat.MOMENT),
          });
        }
        return accumulator;
      },
      { custom: [], default: [] },
    );
  };
}

export default BlockedDays;
