import { Button, Fieldset, PencilIcon } from 'gca-react-components';
import moment, { Moment } from 'moment';
import React, { Component } from 'react';
import { FormattedMessage } from 'react-intl';
import { formValues } from 'redux-form';
import DatePickerField from './DatePickerField';
import './ReservationDates.scss';

interface Props {
  change: any;
  description: any;
  legend: any;
  startDate?: Moment;
}

interface State {
  edit: boolean;
  showEndDate: boolean;
}

const nullState = {
  edit: false,
  showEndDate: false,
};

const START_DATE = 'startdate';

class ReservationDates extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = Object.assign({}, nullState);
  }

  public render() {
    const { description, legend, startDate } = this.props;
    const { edit, showEndDate } = this.state;
    return (
      <>
        <Fieldset className="reservation-dates" description={description.startDate} legend={legend.startDate}>
          {edit ? <DatePickerField name="startDate" /> : this.makeReadOnly()}
          {edit && !showEndDate && this.makeButton(START_DATE)}
        </Fieldset>
        {showEndDate && (
          <Fieldset className="reservation-dates" description={description.endDate} legend={legend.endDate}>
            <DatePickerField name="endDate" disableBefore={startDate} />
            {this.makeButton('enddate')}
          </Fieldset>
        )}
      </>
    );
  }

  private makeButton = (type: string) => {
    const { change } = this.props;
    const showEndDate = type === START_DATE ? true : false;
    const suffix = type === START_DATE ? 'addoptionalenddate' : 'removeoptionalenddate';

    return (
      <Button
        onClick={() => {
          this.setState({ showEndDate });
          if (!showEndDate) {
            change('endDate', null);
          }
        }}
        theme="link"
      >
        <FormattedMessage id={`guestcampaigns.specials.form.${type}.${suffix}`} />
      </Button>
    );
  };

  private makeReadOnly = () => {
    const startDate = moment()
      .add(1, 'week')
      .format('dddd, MMM DD, YYYY');

    return (
      <div className="read-only">
        <label>{startDate}</label>
        <Button
          onClick={() => {
            this.setState({ edit: true });
          }}
          theme="link"
        >
          <PencilIcon />
        </Button>
      </div>
    );
  };
}

export default formValues<'startDate', any>('startDate')(ReservationDates);
