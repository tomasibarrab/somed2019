import { Button } from 'gca-react-components';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntl, injectIntl } from 'react-intl';
import { FieldArray, formValues } from 'redux-form';
import { DisplaySpecialTypes } from '../../store/campaigns/campaigns.types';
import DayAndTimesField from './DayAndTimesField';
import './DaysAndTimesFieldArray.scss';
import TipsBox from './TipsBox';

/* Note: I would have named this DaysAndTimes, and used FieldArray
  directly in the form, which would render DaysAndTimes given to it through
  the component prop, but doing that leads to the issue described here:
  https://github.com/DefinitelyTyped/DefinitelyTyped/issues/23592

  So instead, we put the FieldArray in it as well, and call it a DaysAndTimesFieldArray.
  The other custom inputs are called xyzField for this reason as well.
*/

interface Props {
  name: string;
}

interface RenderDaysAndTimesProps {
  fields: any;
  meta: any;
  intl: InjectedIntl;
}

export const DaysAndTimesFieldArray: SFC<Props> = ({ name }) => {
  return <FieldArray name={name} component={renderDaysAndTimes as any} />;
};

const renderDaysAndTimes = injectIntl(({ fields, intl }: RenderDaysAndTimesProps) => {
  const removeEnabled = fields.length > 1;
  return (
    <>
      <ul className="days-and-times">
        {fields.map((dayAndTimes: string, index: number) => {
          return (
            <li key={dayAndTimes}>
              <DayAndTimesField name={dayAndTimes} />
              {removeEnabled && (
                <Button
                  type="button"
                  theme="link"
                  className="remove-shift"
                  onClick={() => {
                    fields.remove(index);
                  }}
                >
                  {intl.formatMessage({ id: 'guestcampaigns.specials.form.daysandtimes.remove' })}
                </Button>
              )}
            </li>
          );
        })}
      </ul>
      <TipsBox>
        <FormattedMessage id="guestcampaigns.specials.form.daysandtimes.tips.1" />
        <span>
          <AskSecondShift />{' '}
          <Button
            type="button"
            theme="link"
            onClick={() => fields.push({ days: [], times: { start: '15:00', end: '17:00' } })}
          >
            {intl.formatMessage({ id: 'guestcampaigns.specials.form.daysandtimes.tips.2.add' })}
          </Button>
        </span>
      </TipsBox>
    </>
  );
});

const AskSecondShift = formValues<'type', any>('type')(
  ({ type }: { type: DisplaySpecialTypes }) =>
    type === DisplaySpecialTypes.HappyHour ? (
      <FormattedMessage id="guestcampaigns.specials.form.daysandtimes.tips.2.happy_hour" />
    ) : (
      <FormattedMessage id="guestcampaigns.specials.form.daysandtimes.tips.2.generic" />
    ),
);

export default DaysAndTimesFieldArray;
