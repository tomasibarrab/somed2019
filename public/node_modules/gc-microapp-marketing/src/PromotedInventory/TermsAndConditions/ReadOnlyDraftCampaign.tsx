import moment from 'moment';
import React, { SFC } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';

import {
  CampaignPricingInformation,
  CampaignTypes,
  EndDateType,
  Incentive,
  UserFacingCampaignInformation,
} from '../../store/campaigns/campaigns.types';
import CoverPrice from '../CampaignsList/DetailLines/CoverPrice';
import DateRange from '../CampaignsList/DetailLines/DateRange';
import DetailLine from '../CampaignsList/DetailLines/DetailLine';
import MonthlyBudget from '../CampaignsList/DetailLines/MonthlyBudget';
import SuppressionDates from '../CampaignsList/DetailLines/SuppressionDates';
import makeDaysAndTimes from '../CampaignsList/helpers/make-days-and-times';
import renderIncentiveDetails from '../CampaignsList/helpers/render-incentive-details';
import { dateFormat } from '../constants';

interface OP {
  campaign: UserFacingCampaignInformation & CampaignPricingInformation;
  incentive?: Incentive;
}

type Props = OP & InjectedIntlProps;

const ReadOnlyDraftCampaign: SFC<Props> = ({ campaign, incentive, intl }) => {
  const { schedule, type, startDate, endDate, suppressionDates, pricingTier, maxBid, monthlyBudget } = campaign;

  let lineItems: JSX.Element[] = [];

  if (incentive) {
    lineItems = lineItems.concat([
      <DetailLine messageIdSuffix="type" value={incentive.offerTypeName} />,
      ...renderIncentiveDetails(incentive),
    ]);
  }

  lineItems = lineItems.concat([
    <DetailLine
      messageIdSuffix="days_and_times"
      value={makeDaysAndTimes(schedule, type)}
      valueContainer="ul"
      valueClass="days-and-times-detail-line"
    />,
    <DateRange
      messageIdSuffix="bookingwindow"
      start={moment().format(dateFormat.MOMENT)}
      end={endDate}
      endDateType={EndDateType.Reservation}
    />,
    <DateRange messageIdSuffix="seatingwindow" start={startDate} end={endDate} endDateType={EndDateType.Reservation} />,
    <SuppressionDates
      messageIdSuffix="blockeddates"
      suppressionDates={suppressionDates}
      editListItem={null}
      intl={intl}
    />,
  ]);

  if (type === CampaignTypes.CustomPromotions) {
    lineItems.push(<CoverPrice pricingTier={pricingTier} maxBid={maxBid} messageIdSuffix="cover_price" />);

    if (monthlyBudget) {
      lineItems.push(
        <MonthlyBudget messageIdSuffix="monthly_budget" budget={monthlyBudget} pricingTier={pricingTier} />,
      );
    }
  } else {
    lineItems.push(
      <DetailLine
        messageIdSuffix="price"
        value={intl.formatMessage({ id: 'guestcampaigns.terms.no_additional_fee' })}
      />,
    );
  }

  return (
    <ul className="readonly-draft-campaign">
      {lineItems.map((lineItem, index) => <li key={lineItem.props.messageIdSuffix || `${index}`}>{lineItem}</li>)}
    </ul>
  );
};

export default injectIntl(ReadOnlyDraftCampaign);
