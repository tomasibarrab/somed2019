import { AsyncContent, Panel } from 'gca-react-components';
import { camelCase } from 'lodash';
import moment from 'moment';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';

import { Routes } from '../../common/App/App';
import OTKitIcon from '../../PromotedInventory/FlexiblePricing/Shared/OTKitIcon';
import {
    fetchCoverTrends, setDateRange as setDateRangeUnbound,
} from '../../store/insights/insights';
import { ComparativePeriod, CoverTrends } from '../../store/insights/insights.types';
import { State } from '../../store/types';
import { formatCurrency } from '../CampaignsList/helpers/format-number-locale';
import { defaultCurrency } from '../constants';
import DateRange from './common/DateRange/DateRange';
import styles from './Insights.module.css';
import InsightsCoversOverTimeGraph from './InsightsCoversOverTimeGraph';
import { InsightsFilter } from './InsightsFilter';
import InsightsSummary from './InsightsSummary';
import InsightsTable from './InsightsTable';

interface SP {
  campaignTableCompareToKey: ComparativePeriod;
  campaignTableLoading: boolean;
  campaignTableFailed?: boolean;
  loading: boolean;
  failed: boolean;
  data?: CoverTrends;
}

interface DP {
  setDateRange: typeof setDateRangeUnbound;
  fetchCoverTrendsStarted: typeof fetchCoverTrends.started;
}

type Props = SP & DP & InjectedIntlProps;

class Insights extends Component<Props> {
  public componentDidMount() {
    this.causeRefetchOfAll();
  }

  public render() {
    const isSourcesChartEnabled = false;
    const isTopCoversChartEnabled = false;

    const {
      campaignTableCompareToKey,
      intl: { formatMessage },
      loading,
      failed,
    } = this.props;
    const {
      hr,
      insightsChart,
      insightsTable,
      infoMessage,
      keyCovers,
      keyPreviousYear,
      keyCampaigns,
      keyOtDiscovery,
      keyOtDirect,
      keySourcesOther,
      keyTopOther,
      keyStandardExposure,
      keyCustomPromotions,
      keyBonusPoints,
    } = styles;

    return (
      <Panel headerContent={<InsightsFilter />} title={formatMessage({ id: 'insights.title' })}>
        {/* there is never an empty component state, so we pass some strange props here :)  */}
        <AsyncContent isLoading={loading} isError={failed} isEmpty={false} emptyComponent={null}>
          <>
            <InsightsSummary />
            <hr className={hr} />
            <article className={insightsChart}>
              <FormattedMessage id="insights.dashboard.title.covers_over_time" tagName="h3" />
              <DateRange includeComparative />
              <figure>
                <div>
                  <InsightsCoversOverTimeGraph />
                </div>
              </figure>
              <ul>
                <li className={this.legendKeyClassNames(keyCovers)}>
                  <FormattedMessage id="insights.dashboard.covers" />
                </li>
                <li className={this.legendKeyClassNames(keyPreviousYear)}>
                  <FormattedMessage id={`insights.filters.${camelCase(campaignTableCompareToKey)}`} />
                </li>
                <li className={this.legendKeyClassNames(keyCampaigns)}>
                  <FormattedMessage id="insights.dashboard.campaigns" />
                </li>
              </ul>
            </article>
            {isSourcesChartEnabled && (
              <>
                <hr className={hr} />
                <article className={insightsChart}>
                  <h3>
                    <FormattedMessage id="insights.dashboard.title.ot_network_vs_other_sources" />
                    {this.toolTip(formatMessage({ id: 'insights.dashboard.tooltip.ot_network_vs_other_sources' }))}
                  </h3>
                  <DateRange />
                  <figure>
                    <div>(chart)</div>
                    <figcaption className={infoMessage}>
                      <OTKitIcon name="icLightbulb" />
                      <FormattedMessage
                        id="insights.dashboard.description.reach_new_diners"
                        values={{
                          customPromotions: (
                            <Link to={Routes.CustomPromotions}>
                              <strong>
                                {formatMessage({
                                  id: 'insights.dashboard.description.reach_new_diners.custom_promotions',
                                })}
                              </strong>
                            </Link>
                          ),
                          enhanceYourExposure: (
                            <strong>
                              {formatMessage({
                                id: 'insights.dashboard.description.reach_new_diners.enhance_your_exposure',
                              })}
                            </strong>
                          ),
                        }}
                      />
                    </figcaption>
                  </figure>
                  <ul>
                    <li className={this.legendKeyClassNames(keyOtDiscovery)}>
                      OpenTable discovery
                      <p>Diners who discover you on OpenTable through search results, etc.</p>
                    </li>
                    <li className={this.legendKeyClassNames(keyOtDirect)}>
                      OpenTable direct
                      <p>Diners who search for your restaurant on OpenTable</p>
                    </li>
                    <li className={this.legendKeyClassNames(keySourcesOther)}>
                      Other
                      <p>Your Network, Walk-ins, Phone/In-house</p>
                    </li>
                  </ul>
                </article>
              </>
            )}
            {isTopCoversChartEnabled && (
              <>
                <hr className={hr} />
                <article className={insightsChart}>
                  <h3>
                    <FormattedMessage id="insights.dashboard.title.top_ot_discovery_covers" />
                    {this.toolTip(formatMessage({ id: 'insights.dashboard.tooltip.top_ot_discovery_covers' }))}
                  </h3>
                  <DateRange />
                  <figure>
                    <div>(chart)</div>
                  </figure>
                  <ul>
                    <li className={this.legendKeyClassNames(keyStandardExposure)}>
                      Standard exposure <span>— {formatCurrency(1.5, defaultCurrency, true)}</span>
                    </li>
                    <li className={this.legendKeyClassNames(keyCustomPromotions)}>
                      Custom Promotions <span>— {formatCurrency(2, defaultCurrency, true)}</span>
                    </li>
                    <li className={this.legendKeyClassNames(keyCustomPromotions)}>
                      Custom Promotions <span>— {formatCurrency(1.5, defaultCurrency, true)}</span>
                    </li>
                    <li className={this.legendKeyClassNames(keyBonusPoints)}>
                      Bonus Points <span>— {formatCurrency(1.5, defaultCurrency, true)}</span>
                    </li>
                    <li className={this.legendKeyClassNames(keyTopOther)}>Other</li>
                  </ul>
                </article>
              </>
            )}
            <hr className={hr} />
            <article className={insightsTable}>
              <InsightsTable />
            </article>
          </>
        </AsyncContent>
      </Panel>
    );
  }

  private legendKeyClassNames(addClass: string) {
    const { key } = styles;
    return [key, addClass].join(' ');
  }

  private causeRefetchOfAll() {
    /*
      These actions shouldn't be used here in the final version,
      This is only here because it will cause a refetch (via the filters
      change epic which then composes fetch requests from filter values)
      so that we can have an example in the state of the data we are
      getting back from the various reporting endpoints we will be calling.
    */
    this.props.setDateRange({
      endDate: moment().format('YYYY-MM-DD'),
      startDate: moment()
        .subtract(28, 'days')
        .format('YYYY-MM-DD'),
    });
  }

  private toolTip(tooltipText: string) {
    const { insightsTooltip, insightsTooltipArrow, insightsTooltipTooltip } = styles;
    return (
      <a className={insightsTooltip}>
        <OTKitIcon name="icInformation" />
        <span className={insightsTooltipArrow}>
          <span className={insightsTooltipTooltip}>{tooltipText}</span>
        </span>
      </a>
    );
  }
}

const mapStateToProps = (state: State): SP => ({
  campaignTableCompareToKey: state.insights.filters.compareTo,
  campaignTableFailed: state.insights.campaigns.error,
  campaignTableLoading: state.insights.campaigns.loading,
  data: state.insights.coverTrends.data,
  failed: state.insights.coverTrends.error as boolean,
  loading: state.insights.coverTrends.loading,
});

const mapDispatchToProps = {
  fetchCoverTrendsStarted: fetchCoverTrends.started,
  setDateRange: setDateRangeUnbound,
};

export default connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatchToProps,
)(injectIntl(Insights));
