import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';

import { keys } from '../../translations/bundles/marketing.json';
import InsightsSummary from './InsightsSummary';
import mockCampaigns from './mockCampaigns';

jest.mock('../../common/App/App', () => ({
  Routes: {
    PrivateDining: '/private-dining',
  },
}));

jest.mock('../../store/insights/selectors', () => ({
  getCampaignDetails: () => mockCampaigns,
}));

describe('<InsightsSummary />', () => {
  const scenarios = [
    {
      filters: {
        compareTo: 'last-year',
      },
      should: 'show loading state values when no data',
      summaryCurrent: {
        data: undefined,
        loading: false,
      },
      summaryPrevious: {
        data: undefined,
        loading: false,
      },
    },
    {
      filters: {
        compareTo: 'last-year',
      },
      should: 'show no increment when no change',
      summaryCurrent: {
        data: [
          {
            channel_direct_covers: 120,
            channel_discovery_covers: 100,
            total_seated_covers: 800,
          },
        ],
        loading: false,
      },
      summaryPrevious: {
        data: [
          {
            channel_direct_covers: 120,
            channel_discovery_covers: 100,
            total_seated_covers: 800,
          },
        ],
        loading: false,
      },
    },
    {
      filters: {
        compareTo: 'last-year',
      },
      should: 'show positive increment when increased change',
      summaryCurrent: {
        data: [
          {
            channel_direct_covers: 1200,
            channel_discovery_covers: 12000,
            total_seated_covers: 120000,
          },
        ],
        loading: false,
      },
      summaryPrevious: {
        data: [
          {
            channel_direct_covers: 1000,
            channel_discovery_covers: 1000,
            total_seated_covers: 1000,
          },
        ],
        loading: false,
      },
    },
    {
      filters: {
        compareTo: 'last-year',
      },
      should: 'show negative increment when decreased change',
      summaryCurrent: {
        data: [
          {
            channel_direct_covers: 9,
            channel_discovery_covers: 90,
            total_seated_covers: 900,
          },
        ],
        loading: false,
      },
      summaryPrevious: {
        data: [
          {
            channel_direct_covers: 1000,
            channel_discovery_covers: 1000,
            total_seated_covers: 1000,
          },
        ],
        loading: false,
      },
    },
    {
      filters: {
        compareTo: 'previous-period',
      },
      should: 'show decimal when increment/decrement is less than 1%',
      summaryCurrent: {
        data: [
          {
            channel_direct_covers: 998,
            channel_discovery_covers: 999,
            total_seated_covers: 1001,
          },
        ],
        loading: false,
      },
      summaryPrevious: {
        data: [
          {
            channel_direct_covers: 1000,
            channel_discovery_covers: 1000,
            total_seated_covers: 1000,
          },
        ],
        loading: false,
      },
    },
    {
      filters: {
        compareTo: 'last-year-to-date',
      },
      should: 'show commas after every third digit',
      summaryCurrent: {
        data: [
          {
            channel_direct_covers: 1000,
            channel_discovery_covers: 10000,
            total_seated_covers: 1,
          },
        ],
        loading: false,
      },
      summaryPrevious: {
        data: [
          {
            channel_direct_covers: 1,
            channel_discovery_covers: 1,
            total_seated_covers: 1000000,
          },
        ],
        loading: false,
      },
    },
  ];

  scenarios.forEach(({ should, summaryCurrent, summaryPrevious, filters }) => {
    it(should, () => {
      const store = configureMockStore([])({
        insights: {
          coverTrends: {
            error: false,
            loading: false,
          },
          filters,
          summaryCurrent,
          summaryPrevious,
        },
      });

      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en" messages={keys}>
            <InsightsSummary />
          </IntlProvider>
        </Provider>,
      );

      expect(wrapper.debug()).toMatchSnapshot();
    });
  });
});
