import classnames from 'classnames/bind';
// Shared
import { camelCase } from 'lodash';
import moment, { Moment } from 'moment';
import React, { Component, MouseEvent } from 'react';
import enhanceWithClickOutside from 'react-click-outside';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

// Buffet
import { Button } from '@buffet/button';
import { CheckboxFilterWithState } from '@buffet/checkbox-filter';
import { DateRangeSelector } from '@buffet/date-range-selector';
import { DropDown } from '@buffet/dropdown';
import { Icon } from '@buffet/icon';

// Insights
import { FilterActions, filterActions as actions } from '../../store/insights/insights';
import { ComparativePeriod, DateRangeName, Filters } from '../../store/insights/insights.types';
import { getInsights } from '../../store/insights/selectors';
import { Dispatch, State } from '../../store/types';
import styles from './InsightsFilter.module.css';
import predefinedDateRangeOptions from './predefined-date-range-options';

const getClassName = classnames.bind(styles);

interface SP {
  filters: Filters;
}

type DP = FilterActions;

interface BaseProps extends SP, DP {}

interface Props extends BaseProps, InjectedIntlProps {}

interface FilterState {
  active: boolean;
}

interface DateRangeFilterState {
  active: boolean;
  endDate: Moment;
  focusedDate: DateRangeName;
  label?: string;
  startDate: Moment;
}

interface DisplayLabel {
  dateRange: string;
}

interface FilterPanelsState {
  readonly [index: string]: DateRangeFilterState | FilterState;
  dateRange: DateRangeFilterState;
  day: FilterState;
  trend: FilterState;
}

interface ComponentState {
  filterPanels: FilterPanelsState;
  displayLabel: DisplayLabel;
}

const { PreviousPeriod, PreviousYear } = ComparativePeriod;

const DATE_FORMAT = 'YYYY-MM-DD';
const DISPLAY_DATE_FORMAT = 'M/D/YY';

class IFilter extends Component<Props, ComponentState> {
  public state: ComponentState = {
    displayLabel: {
      dateRange: this.props.intl.formatMessage({
        id: 'insights.filters.last30Days',
      }),
    },
    filterPanels: {
      dateRange: {
        active: false,
        endDate: moment(this.props.filters.dateRange.endDate),
        focusedDate: DateRangeName.Start,
        startDate: moment(this.props.filters.dateRange.startDate),
      },
      day: {
        active: false,
      },

      trend: {
        active: false,
      },
    },
  };

  public handleClickOutside = (): void => {
    this.closeAllPanels();
  };

  public render() {
    const {
      createDateRangePresetOption,
      createOption,
      handleClickTrend,
      handleDateRangeApply,
      handleDateRangeChange,
      handleDaysChange,
      handleUpdateFocusedDate,
      props: {
        filters: { compareTo, daysOfWeek },
      },
      togglePanel,
      translateKey,
      state: {
        displayLabel,
        filterPanels: {
          dateRange: { startDate, endDate, focusedDate },
          day,
          trend,
        },
      },
    } = this;

    // PI-3706: Remove "Previous year" - previous-period is the default so hiding the "Compare to" dropdown
    const isComparedToFilterEnabled = false;

    return (
      <aside className={getClassName('insightsFilters')}>
        <DropDown
          label={
            <div>
              <Icon iconId="calendar" />
              <span>{displayLabel.dateRange}</span>
            </div>
          }
          open={this.state.filterPanels.dateRange.active}
          onLabelClick={() => togglePanel('dateRange')}
        >
          <div className={getClassName('dateRangePanel')}>
            <DateRangeSelector
              title={translateKey('commonDateRanges')}
              updateDate={(start: Moment, end: Moment) => handleDateRangeChange(start, end)}
              updateFocusedDate={(focusedDateStr: string) => handleUpdateFocusedDate(focusedDateStr as DateRangeName)}
              startDate={startDate}
              endDate={endDate}
              endRange={moment()}
              focusedDate={focusedDate}
              buttons={predefinedDateRangeOptions.map((option: any) => {
                const id = Object.keys(option)[0];
                return createDateRangePresetOption(id, option[id]);
              })}
            />
            <Button type="button" theme="bare" onClick={() => handleDateRangeApply()}>
              {translateKey('apply')}
            </Button>
          </div>
        </DropDown>
        <DropDown label={translateKey('dayOfWeek')} open={day.active} onLabelClick={() => togglePanel('day')}>
          <CheckboxFilterWithState
            applyLabel={translateKey('apply')}
            onApply={handleDaysChange}
            onChange={() => true}
            options={Object.keys(daysOfWeek).map((dayName: string) =>
              createOption(`${dayName[0]}${dayName.substring(1).toLowerCase()}`, daysOfWeek[dayName]),
            )}
          />
        </DropDown>
        {isComparedToFilterEnabled && (
          <div className={getClassName('trend')}>
            <p>{translateKey('comparedTo')}</p>
            <DropDown
              label={translateKey(camelCase(compareTo))}
              open={trend.active}
              onLabelClick={() => togglePanel('trend')}
            >
              <Button type="button" theme="bare" onClick={() => handleClickTrend(PreviousPeriod)}>
                {translateKey(camelCase(PreviousPeriod))}
              </Button>
              <Button type="button" theme="bare" onClick={() => handleClickTrend(PreviousYear)}>
                {translateKey(camelCase(PreviousYear))}
              </Button>
            </DropDown>
          </div>
        )}
      </aside>
    );
  }

  private translateKey = (key: string) =>
    this.props.intl.formatMessage({
      id: `insights.filters.${key}`,
    });

  private togglePanel = (key: string) => {
    this.closeAllPanels();
    this.setState((previousState: ComponentState) => ({
      filterPanels: {
        ...previousState.filterPanels,
        [key]: {
          ...previousState.filterPanels[key],
          active: !previousState.filterPanels[key].active,
        },
      },
    }));
  };

  private createOption = (label: string, checked?: boolean) => ({
    id: label.toLowerCase(),
    label,
    state: checked ? 'checked' : null,
  });

  private closeAllPanels = () => {
    const filterPanels = {};
    for (const key in this.state.filterPanels) {
      if (Object.keys(this.state.filterPanels).includes(key)) {
        filterPanels[key] = {
          ...this.state.filterPanels[key],
          active: false,
        };
      }
    }
    this.setState({
      filterPanels: filterPanels as FilterPanelsState,
    });
  };

  private handleDateRangeChange = (startDate: Moment, endDate: Moment, label?: string) => {
    this.setState((previousState: ComponentState) => ({
      filterPanels: {
        ...previousState.filterPanels,
        dateRange: {
          ...previousState.filterPanels.dateRange,
          endDate,
          label,
          startDate,
        },
      },
    }));
  };

  private handleDateRangeApply = () => {
    this.togglePanel('dateRange');
    const { startDate, endDate, label } = this.state.filterPanels.dateRange;
    this.setState({
      displayLabel: {
        dateRange: label || `${startDate.format(DISPLAY_DATE_FORMAT)} - ${endDate.format(DISPLAY_DATE_FORMAT)}`,
      },
    });
    this.props.setDateRange({
      endDate: endDate.format(DATE_FORMAT),
      startDate: startDate.format(DATE_FORMAT),
    });
    this.closeAllPanels();
  };

  private handleDaysChange = (selectedOptions: string[], options: any[]) => {
    this.togglePanel('day');
    const selectedDays = options.reduce(
      (week: any, day: any) => ({ ...week, [day.id.toUpperCase()]: day.state === 'checked' }),
      {},
    );
    this.props.setDaysOfWeek(selectedDays);
  };

  private handleUpdateFocusedDate = (focusedDate: DateRangeName) => {
    this.setState((previousState: ComponentState) => ({
      filterPanels: {
        ...previousState.filterPanels,
        dateRange: {
          ...previousState.filterPanels.dateRange,
          focusedDate: focusedDate === DateRangeName.Start ? DateRangeName.Start : DateRangeName.End,
        },
      },
    }));
  };

  private handleClickTrend = (selectedPeriod: ComparativePeriod) => {
    this.togglePanel('trend');
    if (selectedPeriod && selectedPeriod !== this.props.filters.compareTo) {
      this.props.setCompareTo(selectedPeriod);
    }
  };

  private createDateRangePresetOption = (id: string, range: Moment[]) => ({
    action: () => this.setPredefinedDateRange(this.translateKey(id), range[0], range[1]),
    id,
    label: this.translateKey(id),
  });

  private setPredefinedDateRange = (label: string, startDate: Moment, endDate?: Moment) => {
    this.setState({
      filterPanels: {
        ...this.state.filterPanels,
        dateRange: {
          ...this.state.filterPanels.dateRange,
          endDate: endDate || moment(),
          label,
          startDate,
        },
      },
    });
  };
}

const mapStateToProps = (state: State) => ({
  filters: getInsights(state).filters,
});

const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(actions, dispatch);

export const InsightsFilter = connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatchToProps,
)(injectIntl<BaseProps>(enhanceWithClickOutside(IFilter)));

export default InsightsFilter;
