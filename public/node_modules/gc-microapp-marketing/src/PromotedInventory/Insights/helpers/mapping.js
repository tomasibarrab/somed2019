/*
  Mapping on status and types of reservations, subscriptions etc
 */

import * as CONSTANT from './constants';
import color from 'otkit-colors/token.common';
import moment from 'moment';

/**
 * Maps subscription types to intl IDs
 * @param {string | undefined} [label]
 * @return {import('./mapping.d').MapSubscriptionsOutput}
 */
/*
export const mapSubscriptions = (label) => {
  const name = (typeof (label) !== 'undefined') ? label.toUpperCase().replace(/\s/g, '') : 'UNKNOWN';
  switch (name) {
    // Reports
    case CONSTANT.REPORT_COVERSBYMONTH_ERB:
      return {
        title: 'subscriptions.report.coversbymonth.erb.title',
        description: 'subscriptions.report.coversbymonth.erb.description',
        url: 'subscriptions.report.coversbymonth.erb.url',
      };

    case CONSTANT.REPORT_COVERSBYMONTH_GCOTC:
      return {
        title: 'subscriptions.report.coversbymonth.gcotc.title',
        description: 'subscriptions.report.coversbymonth.gcotc.description',
        url: 'subscriptions.report.coversbymonth.gcotc.url',
      };

    // Default or unassigned
    default: return {};
  }
};
*/

/**
 * Maps product labels to colors
 * @param {string | undefined} label
 * @param {boolean} [caseSensitive=false]
 * @return {string}
 */
/*
export const mapColor = (label, caseSensitive = false) => {
  let name = (typeof (label) !== 'undefined') ? label.replace(/\s/g, '') : 'UNKNOWN';
  name = (caseSensitive) ? name : name.toUpperCase();
  switch (name) {

    // Grouped Covers
    case CONSTANT.POP_COVERS: return '#56B372';
    case CONSTANT.YOUR_NETWORK_COVERS: return '#69C0DD';
    case CONSTANT.BOOKED_COVERS: return '#5AA2E0';
    case CONSTANT.CANCELLED_COVERS: return '#F5A61D';
    case CONSTANT.OPENTABLE_NETWORK_COVERS: return '#5890FB';
    case CONSTANT.OPENTABLE_COVERS: return '#5890FB';
    case CONSTANT.ONLINE_COVERS: return '#8FCCC0';
    case CONSTANT.NO_SHOW_COVERS: return '#F55949';
    case CONSTANT.FINISHED_COVERS: return '#9ACC54';
    case CONSTANT.SEATED_COVERS: return '#9ACC54';
    case CONSTANT.ASSUMED_FINISHED_COVERS: return '#5FC782';
    case CONSTANT.WALKIN_COVERS: return '#FCAD03';
    case CONSTANT.OPENTABLE_PARTNER_COVERS: return '#9EB8ED';
    case CONSTANT.PHONE_COVERS: return '#4AA194';
    case CONSTANT.ONLINE_PENDING_COVERS: return '#41B7CC';
    case CONSTANT.NODATA: return color.ashLighter;
    case CONSTANT.CHANNEL_DISCOVERY_COVERS: return '#5890FB';
    case CONSTANT.CHANNEL_DIRECT_COVERS: return '#9EB8ED';

    // Turn time
    case CONSTANT.TURNTIMES_TYPE_AVG_TURN_TIME: return '#7B808C';
    case CONSTANT.TURNTIMES_TYPE_WALKIN: return '#FCAD03';
    case CONSTANT.TURNTIMES_TYPE_PHONE: return '#4AA194';
    case CONSTANT.TURNTIMES_TYPE_OTNETWORK: return '#5890FB';
    case CONSTANT.TURNTIMES_TYPE_RESTREF: return '#69C0DD';
    case CONSTANT.TURNTIMES_TYPE_WEB: return '#808080';

    // Cover Trends
    case CONSTANT.SHIFT_OCCUPANCY_RESERVED_COVERS: return '#9983E1';
    case CONSTANT.SHIFT_OCCUPANCY_WALKINS: return '#7AC9EB';
    case CONSTANT.SHIFT_OCCUPANCY_PROMOTIONS: return '#E55AAF';

    // Guests
    case CONSTANT.GUESTS_FIRST_TIME: return color.violetLight;
    case CONSTANT.GUESTS_REPEAT: return color.tealLighter;
    case CONSTANT.GUESTS_LOCAL_GUESTS: return '#3471FA';
    case CONSTANT.GUESTS_OUTOFTOWN_GUESTS: return '#E35AAC';
    case CONSTANT.GUESTS_EMPTY: return color.ashLightest;

    // Campaign covers
    case CONSTANT.CAMPAIGN_BONUS_POINTS: return color.violetLight;
    case CONSTANT.CAMPAIGN_PROMOTED_RESULTS_TARGETED: return color.orangeLight;
    case CONSTANT.CAMPAIGN_PROMOTED_RESULTS: return color.orangeLighter;
    case CONSTANT.CAMPAIGN_OFFERS: return color.purpleLighter;
    case CONSTANT.CAMPAIGN_CUSTOM_PROMOTIONS: return color.fuchsiaLight;
    case CONSTANT.CAMPAIGN_LOW_EXPOSURE: return color.fuchsiaLightest;
    case CONSTANT.CAMPAIGN_STANDARD_EXPOSURE: return color.fuchsiaLighter

    // Common
    case CONSTANT.COMMON_OPENTABLE_NETWORK: return color.blueLight;
    case CONSTANT.COMMON_WALKIN: return color.yellowLighter;
    case CONSTANT.COMMON_YOUR_NETWORK: return color.tealLighter;
    case CONSTANT.COMMON_PHONE: return color.greenLight;

    // Default or unassigned
    default: return 'grey';
  }
};
*/

/**
 * Maps intl text to translation IDs
 * @param {string | undefined} label
 * @param {boolean} [caseSensitive=false]
 * @return {string}
 */
export const mapIntlText = (label, caseSensitive = false) => {
  let name = (typeof label === 'string') ? label.replace(/\s/g, '') : 'UNKNOWN';
  name = (caseSensitive) ? name : name.toUpperCase();
  switch (name) {
    /*
    // Status
    case CONSTANT.CANCELLED: return 'reservations.type.status.cancelled';
    case CONSTANT.CANCELLEDWEB: return 'reservations.type.status.cancelledweb';
    case CONSTANT.CANCELLEDRESTAURANT: return 'reservations.type.status.cancelledrestaurant';
    case CONSTANT.CANCELLEDDISPUTED: return 'reservations.type.status.cancelleddisputed';
    case CONSTANT.NOSHOW: return 'reservations.type.status.noshow';
    case CONSTANT.NOSHOW2: return 'reservations.type.status.noshow';
    case CONSTANT.NOSHOWEXCUSED: return 'reservations.type.status.noshowexcused';
    case CONSTANT.DONE: return 'reservations.type.status.done';
    case CONSTANT.ASSUMEDSEATED: return 'reservations.type.status.assumedseated';
    case CONSTANT.ARRIVED: return 'reservations.type.status.arrived';
    case CONSTANT.BOOKED: return 'reservations.type.status.booked';
    case CONSTANT.SEATED: return 'reservations.type.status.seated';
    case CONSTANT.SEATEDDISPUTED: return 'reservations.type.status.seateddisputed';
    case CONSTANT.NOTCONFIRMED: return 'reservations.type.status.notconfirmed';
    case CONSTANT.ASSUMEDDONE: return 'reservations.type.status.assumeddone';
    case CONSTANT.CLEARED: return 'reservations.type.status.cleared';
    case CONSTANT.CONFIRMED: return 'reservations.type.status.confirmed';
    case CONSTANT.PARTIALLYSEATED: return 'reservations.type.status.partiallyseated';
    case CONSTANT.PARTIALLYARRIVED: return 'reservations.type.status.partiallyarrived';
    case CONSTANT.ALLARRIVED: return 'reservations.type.status.allarrived';
    case CONSTANT.PENDING: return 'reservations.type.status.pending';
    case CONSTANT.DISPUTED: return 'reservations.type.status.disputed';
    case CONSTANT.TABLEASSIGNED: return 'reservations.type.status.tableassigned';
    case CONSTANT.ONLINEPENDING: return 'reservations.type.status.onlinepending';
    */

    /*
    case CONSTANT.CAMPAIGN_BONUS_POINTS: return 'general.campaign.bonuspoints';
    case CONSTANT.CAMPAIGN_PROMOTED_RESULTS_TARGETED: return 'general.campaign.promotedresults_targeting';
    case CONSTANT.CAMPAIGN_PROMOTED_RESULTS: return 'general.campaign.promotedresults';
    case CONSTANT.COMMON_OFFER.toUpperCase():
    */
    case CONSTANT.CAMPAIGN_OFFERS: return 'insights.common.offers';
    case CONSTANT.CAMPAIGN_SPECIALS: return 'insights.common.specials';
    /*
    case CONSTANT.CAMPAIGN_CUSTOM_PROMOTIONS: return 'general.campaign.custompromotions';
    case CONSTANT.CAMPAIGN_LOW_EXPOSURE: return 'general.campaign.lowexposure';
    case CONSTANT.CAMPAIGN_STANDARD_EXPOSURE: return 'general.campaign.standardexposure';
    case CONSTANT.CAMPAIGN_HIGH_EXPOSURE: return 'general.campaign.highexposure';

    // Source
    case CONSTANT.PHONE: return 'reservations.type.source.phone';
    case CONSTANT.WALKIN: return 'reservations.type.source.walkin';
    case CONSTANT.YOURWEBSITE: return 'reservations.type.source.yourwebsite';
    case CONSTANT.OTNETWORK: return 'reservations.type.source.otnetwork';
    case CONSTANT.OTPARTNERS: return 'reservations.type.source.otpartners';
    case CONSTANT.WAITLIST: return 'reservations.type.source.waitlist';
    case CONSTANT.PROMOTEDINVENTORY: return 'reservations.type.source.promotedinventory';

    case CONSTANT.DINNER: return 'reservations.type.status.dinner';
    case CONSTANT.BREAKFAST: return 'reservations.type.status.breakfast';
    case CONSTANT.LUNCH: return 'reservations.type.status.lunch';
    case CONSTANT.LATENIGHT: return 'reservations.type.status.latenight';
    case CONSTANT.NOANSWER: return 'reservations.type.status.noanswer';
    case CONSTANT.PAGED1: return 'reservations.type.status.paged1';
    case CONSTANT.PAGED2: return 'reservations.type.status.paged2';
    case CONSTANT.PAGED3: return 'reservations.type.status.paged3';
    case CONSTANT.BUSTABLE: return 'reservations.type.status.bustable';
    case CONSTANT.ENTREE: return 'reservations.type.status.entree';
    case CONSTANT.DESSERT: return 'reservations.type.status.dessert';
    case CONSTANT.APPETIZER: return 'reservations.type.status.appetizer';
    case CONSTANT.LATE: return 'reservations.type.status.late';
    case CONSTANT.PAID: return 'reservations.type.status.paid';
    case CONSTANT.CHECKDROPPED: return 'reservations.type.status.checkdropped';
    case CONSTANT.LEFTMESSAGE: return 'reservations.type.status.leftmessage';

    */
    // Grouped Covers
    case CONSTANT.POP_COVERS: return 'reservations.type.group.pop_covers';
    case CONSTANT.YOUR_NETWORK_COVERS: return 'reservations.type.group.your_network_covers';
    case CONSTANT.BOOKED_COVERS: return 'reservations.type.group.booked_covers';
    case CONSTANT.CANCELLED_COVERS: return 'reservations.type.group.cancelled_covers';
    case CONSTANT.CHANNEL_DIRECT_COVERS: return 'reservations.type.group.ot_direct_covers';
    case CONSTANT.CHANNEL_DISCOVERY_COVERS: return 'reservations.type.group.ot_discovery_covers';
    case CONSTANT.OPENTABLE_PLATFORMS_COVERS: return 'reservations.type.group.ot_platforms_covers';
    case CONSTANT.OPENTABLE_NETWORK_COVERS: return 'reservations.type.group.ot_direct_covers';
    case CONSTANT.OPENTABLE_COVERS: return 'reservations.type.group.ot_network_covers';
    case CONSTANT.ONLINE_COVERS: return 'reservations.type.group.online_covers';
    case CONSTANT.NO_SHOW_COVERS: return 'reservations.type.group.no_show_covers';
    case CONSTANT.FINISHED_COVERS: return 'reservations.type.group.finished_covers';
    case CONSTANT.ASSUMED_FINISHED_COVERS: return 'reservations.type.group.assumed_finished_covers';
    case CONSTANT.SEATED_COVERS: return 'reservations.type.group.seated_covers';
    case CONSTANT.WALKIN_COVERS: return 'reservations.type.group.walkin_covers';
    case CONSTANT.OPENTABLE_PARTNER_COVERS: return 'reservations.type.group.ot_partners_covers';
    case CONSTANT.PHONE_COVERS: return 'reservations.type.group.phone_covers';
    case CONSTANT.ONLINE_PENDING_COVERS: return 'reservations.type.group.online_pending_covers';
    /*

    // Turn times
    case CONSTANT.TURNTIMES_TYPE_AVG_TURN_TIME: return 'turntimes.type.totalaverage';
    case CONSTANT.TURNTIMES_TYPE_WALKIN: return 'turntimes.type.walkin';
    case CONSTANT.TURNTIMES_TYPE_PHONE: return 'turntimes.type.phone';
    case CONSTANT.TURNTIMES_TYPE_WEB: return 'turntimes.type.web';
    case CONSTANT.TURNTIMES_TYPE_OTNETWORK: return 'turntimes.type.ot_network';
    case CONSTANT.TURNTIMES_TYPE_RESTREF: return 'turntimes.type.restref';

    case CONSTANT.TURNTIMES_TYPE_TYPE: return 'turntimes.type.type';
    case CONSTANT.TURNTIMES_TYPE_1_2:
    case CONSTANT.TURNTIMES_PARTYSIZE_1_2: return 'turntimes.type.type1_2';
    case CONSTANT.TURNTIMES_TYPE_3_4:
    case CONSTANT.TURNTIMES_PARTYSIZE_3_4: return 'turntimes.type.type3_4';
    case CONSTANT.TURNTIMES_TYPE_5_6:
    case CONSTANT.TURNTIMES_PARTYSIZE_5_6: return 'turntimes.type.type5_6';
    case CONSTANT.TURNTIMES_TYPE_7_8:
    case CONSTANT.TURNTIMES_PARTYSIZE_7_8: return 'turntimes.type.type7_8';
    case CONSTANT.TURNTIMES_TYPE_9_10:
    case CONSTANT.TURNTIMES_PARTYSIZE_9_10: return 'turntimes.type.type9_10';
    case CONSTANT.TURNTIMES_TYPE_11:
    case CONSTANT.TURNTIMES_PARTYSIZE_11: return 'turntimes.type.type11';

    // Referral
    case CONSTANT.REFERRAL_SUMMARY_TOTAL_COVERS: return 'referral.summary.total.finishedcovers';
    case CONSTANT.REFERRAL_SUMMARY_TOTAL_REFERRERS: return 'referral.summary.total.referrers';
    case CONSTANT.REFERRAL_SUMMARY_TOP_REFERRERS: return 'referral.summary.header.topreferrers';
    case CONSTANT.REFERRAL_SUMMARY_TOP_COMPANIES: return 'referral.summary.header.tophotelcompanies';
    case CONSTANT.REFERRAL_ID: return 'referral.table.columnTitles.referrer_id';
    case CONSTANT.REFERRAL_REFERRER: return 'referral.table.columnTitles.referrer';
    case CONSTANT.REFERRAL_FIRST_NAME : return 'referral.table.columnTitles.firstname';
    case CONSTANT.REFERRAL_LAST_NAME : return 'referral.table.columnTitles.lastname';
    case CONSTANT.REFERRAL_COMPANY : return 'referral.table.columnTitles.company';
    case CONSTANT.REFERRAL_PHONE : return 'referral.table.columnTitles.phone';
    case CONSTANT.REFERRAL_EMAIL : return 'referral.table.columnTitles.email';
    case CONSTANT.REFERRAL_LOCATION : return 'referral.table.columnTitles.location';
    case CONSTANT.REFERRAL_TOTAL_RESERVATIONS : return 'referral.table.columnTitles.totalreservations';
    case CONSTANT.REFERRAL_TOTAL_COVERS : return 'referral.table.columnTitles.totalcovers';
    case CONSTANT.REFERRAL_FIRST_TIME_COVERS : return 'referral.table.columnTitles.firsttimecovers';
    case CONSTANT.REFERRAL_TRAVELER_COVERS : return 'referral.table.columnTitles.travelercovers';
    case CONSTANT.REFERRAL_CANCELLED : return 'referral.table.columnTitles.cancelled';
    case CONSTANT.REFERRAL_NOSHOWS : return 'referral.table.columnTitles.noshows';
    case CONSTANT.REFERRAL_UNGROUPED : return 'referral.table.columnCells.ungrouped';
    case CONSTANT.REFERRAL_UNDEFINED : return 'referral.table.columnCells.undefined';

    // Shift Occupancy
    case CONSTANT.SHIFT_OCCUPANCY_RESERVED_COVERS: return 'covertrends.source.reservedcovers';
    case CONSTANT.SHIFT_OCCUPANCY_WALKINS: return 'covertrends.source.walkins';
    case CONSTANT.SHIFT_OCCUPANCY_COVER_OTNETWORK: return 'covertrends.source.otnetwork';
    case CONSTANT.SHIFT_OCCUPANCY_COVER_WEBSITE: return 'covertrends.source.yourwebsite';
    case CONSTANT.SHIFT_OCCUPANCY_COVER_PHONE: return 'covertrends.source.phone';
    case CONSTANT.SHIFT_OCCUPANCY_VIEW_DAY: return 'covertrends.view.day';
    case CONSTANT.SHIFT_OCCUPANCY_VIEW_WEEK: return 'covertrends.view.week';
    case CONSTANT.SHIFT_OCCUPANCY_VIEW_SHIFT: return 'covertrends.view.shift';
    case CONSTANT.SHIFT_OCCUPANCY_SUMMARY_TITLE_DAY: return 'covertrends.section.title.summary.day';
    case CONSTANT.SHIFT_OCCUPANCY_SUMMARY_TITLE_WEEK: return 'covertrends.section.title.summary.week';
    case CONSTANT.SHIFT_OCCUPANCY_SUMMARY_TITLE_SHIFT: return 'covertrends.section.title.summary.shift';
    */

    // Common
    case CONSTANT.COMMON_BONUS_POINTS: return 'general.campaign.bonuspoints';
    case CONSTANT.COMMON_CUSTOM_PROMOTIONS: return 'general.campaign.custompromotions';
    case CONSTANT.COMMON_OFFER: return 'general.campaign.offers';
    case CONSTANT.COMMON_SPECIALS: return 'general.campaign.specials';
    case CONSTANT.COMMON_PROMOTED_RESULTS: return 'general.campaign.promotedresults';
    case CONSTANT.COMMON_PROMOTED_RESULTS_WITH_TARGETING: return 'general.campaign.promotedresults_targeting';
    case CONSTANT.COMMON_STANDARD_EXPOSURE: return 'general.campaign.standardexposure';
    case CONSTANT.COMMON_LOW_EXPOSURE: return 'general.campaign.lowexposure';

    // Default or unassigned
    default: return 'reservations.type.unknown';
  }
};

/**
 * Maps intl text to a grouped translation ID
 * @param {string | undefined} label
 * @return {string}
 */
/*
export const mapIntGroupText = (label) => {
  const name = (typeof (label) !== 'undefined') ? label.toUpperCase().replace(/\s/g, '') : 'UNKNOWN';
  switch (name) {
    // Booked
    case CONSTANT.CONFIRMED:
    case CONSTANT.LATE:
    case CONSTANT.LEFTMESSAGE:
    case CONSTANT.NOANSWER:
    case CONSTANT.NOTCONFIRMED:
    case CONSTANT.PAGED1:
    case CONSTANT.PAGED2:
    case CONSTANT.PAGED3:
    case CONSTANT.WRONGNUMBER:
    case CONSTANT.PENDING: return 'reservations.type.group.booked_covers';

    // Assumed Finished
    case CONSTANT.ALLARRIVED:
    case CONSTANT.APPETIZER:
    case CONSTANT.ASSUMEDSEATED:
    case CONSTANT.CHECKDROPPED:
    case CONSTANT.CLEARED:
    case CONSTANT.DESSERT:
    case CONSTANT.ENTREE:
    case CONSTANT.PAID:
    case CONSTANT.PARTIALLYARRIVED:
    case CONSTANT.PARTIALLYSEATED:
    case CONSTANT.TABLEASSIGNED:
    case CONSTANT.SEATED:
    case CONSTANT.CANCELLEDDISPUTED: return 'reservations.type.group.assumed_finished_covers';

    // Finished
    case CONSTANT.ASSUMEDDONE:
    case CONSTANT.BUSTABLE:
    case CONSTANT.DONE: return 'reservations.type.group.finished_covers';

    // No Show
    case CONSTANT.NOSHOW:
    case CONSTANT.NOSHOW2: return 'reservations.type.group.no_show_covers';

    // Cancelled
    case CONSTANT.CANCELLED:
    case CONSTANT.CANCELLEDWEB:
    case CONSTANT.CANCELLEDRESTAURANT:
    case CONSTANT.DISPUTED:
    case CONSTANT.SEATEDDISPUTED:
    case CONSTANT.NOSHOWEXCUSED: return 'reservations.type.group.cancelled_covers';


     // Default or unassigned
    default: return 'reservations.type.unknown';
  }
};
*/

/**
 * Maps long english day names to shortened day names
 * @param {import('./mapping.d').mapLongDaysToIdsInput} days
 * @return {import('./mapping.d').mapLongDaysToIdsOutput}
 */
export const mapLongDaysToIds = (days) => {
  /**
   * @type {import('./mapping.d').mapLongDaysToIdsOutput}
   */
  let mappedDays = [];

  if (days && Array.isArray(days)) {
    /**
     * Maps long english day names to shortened day names
     * @param {import('./mapping.d').mapLongDaysToIdsInputType} day
     * @return {import('./mapping.d').mapLongDaysToIdsOutputType}
     */
    const longDayToShortDay = (day) => {
      if (!day || !day.toLowerCase) return null;
      switch (day.toLowerCase()) {
        case 'monday': {
          return 'mon';
        }
        case 'tuesday': {
          return 'tues';
        }
        case 'wednesday': {
          return 'wed';
        }
        case 'thursday': {
          return 'thur';
        }
        case 'friday': {
          return 'fri';
        }
        case 'saturday': {
          return 'sat';
        }
        case 'sunday': {
          return 'sun';
        }
        default: return null;
      }
    };

    mappedDays = days.map(longDayToShortDay)
      .filter((d) => typeof d === 'string');
  }

  return mappedDays;
};

/**
 * Maps a single day name to an intl ID
 * @param {import('./mapping.d').mapDayToi18nDayInputType} day
 * @param {import('./mapping.d').mapDayToi18nLengthInputType} length
 * @return {import('./mapping.d').mapDayToi18nLengthOutputType}
 */
/*
export const mapDayToi18n = (day, length = 'long') => {
  switch (day) {
    case 'Sunday':
    case 'sun':
      return `general.week.${length}.sunday`;
    case 'Monday':
    case 'mon':
      return `general.week.${length}.monday`;
    case 'Tuesday':
    case 'tue':
    case 'tues':
      return `general.week.${length}.tuesday`;
    case 'Wednesday':
    case 'wed':
      return `general.week.${length}.wednesday`;
    case 'Thursday':
    case 'thur':
    case 'thu':
      return `general.week.${length}.thursday`;
    case 'Friday':
    case 'fri':
      return `general.week.${length}.friday`;
    case 'Saturday':
    case 'sat':
      return `general.week.${length}.saturday`;
    default: return '';
  }
};
*/

/**
 * Maps a single day name to an intl ID
 * @param {import('./mapping.d').mapDaysToi18nDayInputType} days
 * @param {import('./mapping.d').mapDayToi18nLengthInputType} length
 * @return {import('./mapping.d').mapDaysToi18nLengthOutputType}
 */
/*
export const mapDaysToi18n = (days, length = 'long') => days.map((day) => mapDayToi18n(day, length));
*/

/**
 * Maps a single guest tag to an english translation
 * @param {import('./mapping.d').mapGuestTagsInputType} str
 * @return {import('./mapping.d').mapGuestTagsOutputType}
 */
/*
export const mapGuestTags = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();

  if (val.indexOf(CONSTANT.DIETARY_NEEDS) >= 0) {
    return 'Dietary Needs:';
  } else if (val.indexOf(CONSTANT.SEATING_REQUESTS) >= 0) {
    return 'Seating Requests:';
  } else if (val.indexOf(CONSTANT.SPECIAL_GUESTS) >= 0) {
    return 'Special Guests:';
  } else if (val.indexOf(CONSTANT.SPECIAL_EVENTS_AND_PROMOS) >= 0) {
    return 'Special Events and Promos:';
  }

  return '';
};
*/

/**
 * Maps a single guest tag to an english translation
 * @param {string | undefined} str
 * @return {string | undefined}
 */
/*
export const mapReservationGuestTag = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();
  switch (val) {
    case CONSTANT.TAG_PROFILE_VIP: return 'reservations.tag.profile.vip';
    case CONSTANT.TAG_DIET_VEGETARIAN: return 'reservations.tag.diet.vegetarian';
    case CONSTANT.TAG_DIET_VEGAN: return 'reservations.tag.diet.vegan';
    case CONSTANT.TAG_DIET_PESCATARIAN: return 'reservations.tag.diet.pescatarian';
    case CONSTANT.TAG_DIET_NO_RED_MEAT: return 'reservations.tag.diet.no_red_meat';
    case CONSTANT.TAG_SEATING_SMOKING: return 'reservations.tag.seating.smoking';
    case CONSTANT.TAG_SEATING_SMOKING_AREA: return 'reservations.tag.seating.smoking_area';
    case CONSTANT.TAG_PROFILE_EMPLOYEE: return 'reservations.tag.profile.employee';
    case CONSTANT.TAG_PROFILE_FRIEND_OF_OWNER: return 'reservations.tag.profile.friend_of_owner';
    case CONSTANT.TAG_PROFILE_FRIEND_OF_EMPLOYEE: return 'reservations.tag.profile.friend_of_employee';
    case CONSTANT.TAG_PROFILE_INVESTOR: return 'reservations.tag.profile.investor';
    case CONSTANT.TAG_DIET_ALLERGY: return 'reservations.tag.diet.allergy';
    case CONSTANT.TAG_DIET_GLUTEN_FREE: return 'reservations.tag.diet.gluten_free';
    case CONSTANT.TAG_SERVICE_ALERT_CHEF: return 'reservations.tag.service.alert_chef';
    case CONSTANT.TAG_SERVICE_ALERT_MANAGER: return 'reservations.tag.service.alert_manager';
    case CONSTANT.TAG_PROFILE_REGULAR: return 'reservations.tag.profile.regular';
    case CONSTANT.TAG_PROFILE_BLOGGER: return 'reservations.tag.profile.blogger';
    case CONSTANT.TAG_PROFILE_CRITIC: return 'reservations.tag.profile.critic';
    case CONSTANT.TAG_SERVICE_BIRTHDAY: return 'reservations.tag.service.birthday';
    case CONSTANT.TAG_SERVICE_ANNIVERSARY: return 'reservations.tag.service.anniversary';
    case CONSTANT.TAG_SERVICE_BUSINESS_MEAL: return 'reservations.tag.service.business_meal';
    case CONSTANT.TAG_SERVICE_DATE: return 'reservations.tag.service.date';
    case CONSTANT.TAG_SERVICE_SPECIAL_OCCASION: return 'reservations.tag.service.special_occasion';
    case CONSTANT.TAG_SERVICE_GRADUATION: return 'reservations.tag.service.graduation';
    case CONSTANT.TAG_SEATING_VIEW: return 'reservations.tag.seating.view';
    case CONSTANT.TAG_SEATING_QUIET_TABLE: return 'reservations.tag.seating.quiet_table';
    case CONSTANT.TAG_SEATING_HIGHCHAIR: return 'reservations.tag.seating.highchair';
    case CONSTANT.TAG_SEATING_WHEELCHAIR: return 'reservations.tag.seating.wheelchair';
    case CONSTANT.TAG_SEATING_WINDOW: return 'reservations.tag.seating.window';
    case CONSTANT.TAG_SEATING_BOOTH: return 'reservations.tag.seating.booth';
    case CONSTANT.TAG_SEATING_PATIO: return 'reservations.tag.seating.patio';
    case CONSTANT.TAG_SERVICE_PRE_THEATRE: return 'reservations.tag.service.pre_theatre';
    default: return str;
  }
};
*/

/**
 * Returns a predefined date range start and end date
 * @param {import('./mapping.d').getDatesFromFiltersActiveIdType} activeId
 * @param {string | undefined} startRange
 * @param {moment.Moment | string} momentObj
 * @return {import('./mapping.d').getDatesFromFiltersOutputType}
 */
/*
export const getDatesFromFilters = (activeId, startRange, momentObj = moment()) => {
  const today = moment.isMoment(momentObj) ? momentObj : moment.utc(momentObj, moment.ISO_8601);

  /
   * Limits a date a date to a startRange if it
   * spans before the startRange
   * @param {moment.Moment} comparisonDate
   * @return {moment.Moment}
   /
  const limitToStartRange = (comparisonDate) => {
    if (startRange) {
      const startR = moment.utc(startRange, moment.ISO_8601).startOf('date');
      if (comparisonDate.isBefore(startR)) {
        return startR;
      }
      return comparisonDate;
    }
    return comparisonDate;
  };

  switch (activeId) {
    case 'yesterday': {
      return {
        startDate: today.clone().subtract(1, 'days').startOf('day'),
        endDate: today.clone().subtract(1, 'days').endOf('day'),
      };
    }
    case 'thisWeek': {
      const thisWeek = today.clone().startOf('isoWeek');
      return {
        startDate: limitToStartRange(thisWeek),
        endDate: today.clone().endOf('isoWeek'),
      };
    }
    case 'lastWeek': {
      const lastWeek = today.clone().subtract(1, 'weeks').startOf('isoWeek');
      return {
        startDate: limitToStartRange(lastWeek),
        endDate: today.clone().subtract(1, 'weeks').endOf('isoWeek'),
      };
    }
    case 'thisMonth': {
      const thisMonth = today.clone().startOf('month');
      return {
        startDate: limitToStartRange(thisMonth),
        endDate: today.clone().endOf('month'),
      };
    }
    case 'lastMonth': {
      const lastMonth = today.clone().subtract(1, 'months').startOf('month');
      return {
        startDate: limitToStartRange(lastMonth),
        endDate: today.clone().subtract(1, 'months').endOf('month'),
      };
    }
    case 'last7Days': {
      const last7Days = today.clone().subtract(7, 'days');
      const yesterday = today.clone().subtract(1, 'day');
      return {
        startDate: limitToStartRange(last7Days),
        endDate: yesterday,
      };
    }
    case 'last30Days': {
      const last30 = today.clone().subtract(30, 'days');
      const yesterday = today.clone().subtract(1, 'day');
      return {
        startDate: limitToStartRange(last30),
        endDate: yesterday,
      };
    }
    case 'last3Months': {
      const last3Months = today.clone().subtract(3, 'months').startOf('month');
      const lastMonth = today.clone().subtract(1, 'months').endOf('month');
      return {
        startDate: limitToStartRange(last3Months),
        endDate: lastMonth,
      };
    }
    case 'yearToDate': {
      const yearToDate = today.clone().startOf('year');
      return {
        startDate: limitToStartRange(yearToDate),
        endDate: today,
      };
    }
    case 'thisYear': {
      const startOfYear = today.clone().startOf('year');
      const endOfYear = today.clone().endOf('year');
      return {
        startDate: limitToStartRange(startOfYear),
        endDate: endOfYear,
      };
    }
    case 'lastYear': {
      const startOfYear = today.clone().subtract(1, 'year').startOf('year');
      const endOfYear = today.clone().subtract(1, 'year').endOf('year');
      return {
        startDate: limitToStartRange(startOfYear),
        endDate: endOfYear,
      };
    }
    default: {
      // Default is today
      return {
        startDate: today,
        endDate: today,
      };
    }
  }
};
*/

/**
 * Returns a predefined date range start and end date
 * @param {import('./mapping.d').mapUndefinedColumnDataParam} data
 * @param {import('./mapping.d').mapUndefinedColumnKeysToMapParam} keysToMap
 * @param {import('./mapping.d').mapUndefinedColumnIntlParam} intl
 * @param {string} keyword
 * @param {string} translation
 * @return {import('./mapping.d').mapUndefinedColumnOutputType}
 */
/*
export const mapUndefinedColumn = (data, keysToMap, intl, keyword, translation) => data.map((v) => {
  const keys = Object.keys(v);

  /
   * Returns a predefined date range start and end date
   * @param {object} prev
   * @param {string} item
   * @return {object}
   /
  const mapKeys = (prev, item) => {
    if (keysToMap.some((k) => k === item) && (v[item] === keyword || v[item] === '' || typeof (v[item]) === 'undefined' || v[item] === null)) {
      return Object.assign(prev, {
        [item]: intl.formatMessage({ id: translation }),
      });
    }
    return Object.assign(prev, {
      [item]: v[item],
    });
  };

  return keys.reduce(mapKeys, {});
});
*/1

/**
 * Returns an array of campaigns based on the passed locales
 * @param {import('./mapping.d').mapCampaignTypesLocaleParam} locale
 * @returns {string[]}
 */
/*
export const mapCampaignTypes = (locale = 'UNKNOWN') => {
  const val = locale.match(/(.{2})$/);
  const str = (val && val[1]) ? val[1].toUpperCase() : 'UNKNOWN';
  switch (str) {
    case 'US': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_CUSTOM_PROMOTIONS,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS_TARGETED,
      CONSTANT.CAMPAIGN_BONUS_POINTS,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    case 'CA': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS_TARGETED,
      CONSTANT.CAMPAIGN_BONUS_POINTS,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    case 'MX': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS_TARGETED,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    case 'GB': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS,
      CONSTANT.CAMPAIGN_BONUS_POINTS,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    case 'IE':
    case 'DE': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_PROMOTED_RESULTS,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    case 'AU':
    case 'ES':
    case 'ZH':
    case 'JA':
    case 'NL':
    case 'IT':
    case 'FR': return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
    default: return [
      CONSTANT.CAMPAIGN_STANDARD_EXPOSURE,
      CONSTANT.CAMPAIGN_LOW_EXPOSURE,
      CONSTANT.CAMPAIGN_OFFERS,
    ];
  }
};
*/

/**
 * Returns a correct labels for specific locale
 * @param {string | undefined} str
 * @param {import('./mapping.d').remapLabelsTypesLocaleParam} locale
 * @returns {string}
 */
export const remapLabels = (str, locale = 'UNKNOWN') => {
  const val = locale.match(/(.{2})$/);
  const strippedLocale = (val && val[1]) ? val[1].toUpperCase() : 'UNKNOWN';

  if (strippedLocale === 'US' && str === CONSTANT.CAMPAIGN_OFFERS) {
    return CONSTANT.CAMPAIGN_SPECIALS;
  }

  if (strippedLocale === 'US' && str === CONSTANT.COMMON_OFFER) {
    return CONSTANT.CAMPAIGN_SPECIALS;
  }

  if (strippedLocale === 'US' && str === CONSTANT.OPENTABLE_NETWORK_COVERS) {
    return CONSTANT.OPENTABLE_PLATFORMS_COVERS;
  }
  return str;
};

/**
 * Maps online channels / OpenTable Type to intl ids
 * @param {string | undefined} str
 * @returns {string | undefined}
 */
/*
export const mapOnlineChannel = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();
  switch (val) {
    case CONSTANT.ONLINE_CHANNEL_OT: return 'reservations.type.group.ot_direct_covers';
    case CONSTANT.ONLINE_CHANNEL_OT_PARRTNERS: return 'reservations.type.group.ot_partners_covers';
    case CONSTANT.OPENTABLE_DISCOVERY: return 'reservations.type.group.ot_discovery_covers';
    case CONSTANT.OPENTABLE_DIRECT: return 'reservations.type.group.ot_direct_covers';
    default: return str;
  }
};
*/

/**
 * Maps table types to intl IDs
 * @param {string | undefined} str
 * @returns {string | undefined}
 */
/*
export const mapTableType = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();
  switch (val) {
    case CONSTANT.TABLE_TYPE_BAR: return 'reservations.tabletype.bar';
    case CONSTANT.TABLE_TYPE_COUNTER: return 'reservations.tabletype.counter';
    case CONSTANT.TABLE_TYPE_HIGHTOP: return 'reservations.tabletype.highTop';
    case CONSTANT.TABLE_TYPE_OUTDOOR: return 'reservations.tabletype.outdoor';
    case CONSTANT.TABLE_TYPE_REGULAR: return 'reservations.tabletype.regular';
    default: return str;
  }
};
*/

/**
 * Maps sources to intl IDs
 * @param {string | undefined} str
 * @returns {string | undefined}
 */
/*
export const mapSource = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();
  switch (val) {
    case CONSTANT.SOURCE_OT_DIRECT: return 'reservations.type.source.otdirect';
    case CONSTANT.SOURCE_OT_DISCOVERY: return 'reservations.type.source.otdiscovery';
    case CONSTANT.SOURCE_OT_NETWORK: return 'reservations.type.source.otnetwork';
    case CONSTANT.SOURCE_OT_PARTNERS: return 'reservations.type.source.otpartners';
    case CONSTANT.SOURCE_PHONE: return 'reservations.type.source.phone';
    case CONSTANT.SOURCE_PROMOTED_INVENTORY: return 'reservations.type.source.promotedinventory';
    case CONSTANT.SOURCE_WAITLIST: return 'reservations.type.source.waitlist';
    case CONSTANT.SOURCE_WALKIN: return 'reservations.type.source.walkin';
    case CONSTANT.SOURCE_YOUR_WEBSITE: return 'reservations.type.source.yourwebsite';
    default: return str;
  }
};
*/

/**
 * Maps discovery channel to intl ids
 * @param {string | undefined} str
 * @returns {string | undefined}
 */
/*
export const mapDiscoveryChannel = (str) => {
  const val = (typeof (str) === 'undefined') ? '' : str.toUpperCase();
  switch (val) {
    case CONSTANT.CHANNEL_DISCOVERY: return 'reservations.type.channel.discovery';
    case CONSTANT.CHANNEL_DIRECT: return 'reservations.type.channel.direct';
    default: return str;
  }
};
*/
