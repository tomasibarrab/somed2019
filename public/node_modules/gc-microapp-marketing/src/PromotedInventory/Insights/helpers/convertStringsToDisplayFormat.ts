import moment from 'moment';
import { InjectedIntl } from 'react-intl';

import { Routes } from '../../../common/App/App';
import { AugmentedCampaignType } from '../../../store/insights/insights.types';
import { formatCurrency, formatNumber } from '../../CampaignsList/helpers/format-number-locale';
import { defaultCurrency } from '../../constants';
import styles from '../InsightsTable.module.css';
import makeDaysAndTimes from './makeDaysAndTimes';

interface AccumulatedSums {
  sumCovers: number;
  sumFirstTimeGuests: number;
  sumOutOfTownGuests: number;
  sumTotalSpend: number;
}

interface AccumulatedCampaigns {
  className: string;
  covers: number;
  daysAndTimes: string;
  displayValues: {};
  endDate: string;
  firstTimeGuests: number;
  link: string;
  outOfTownGuests: number;
  price: number;
  startDate: string;
  totalSpend: number;
  type: string;
}
interface Accumulated {
  campaigns: AccumulatedCampaigns[];
  sums: AccumulatedSums;
}

const makeLink = (route: string, uuidCampaignId: string) =>
  route && uuidCampaignId ? `${route}#${uuidCampaignId}` : undefined;

const campaignTypeMapping = (campaign: AugmentedCampaignType, intl: InjectedIntl) => {
  const { cellCustomPromotions, cellPromotedResults, cellStandardExposure } = styles;
  const { type, flexiblePricingVisibility, uuidCampaignId } = campaign;

  if (type === 'promoted_results') {
    return {
      className: cellPromotedResults,
      label: intl.formatMessage({ id: 'insights.common.promoted_results' }),
      link: makeLink(Routes.GuestCampaigns, uuidCampaignId),
    };
  }
  if (type === 'paid_search' && flexiblePricingVisibility === 'standard') {
    return {
      className: cellStandardExposure,
      label: intl.formatMessage({ id: 'insights.common.standard_exposure' }),
      link: makeLink(`${Routes.FlexiblePricing}/settings`, uuidCampaignId),
    };
  }
  return {
    className: cellCustomPromotions,
    label: intl.formatMessage({ id: 'insights.common.custom_promotions' }),
    link: makeLink(Routes.CustomPromotions, uuidCampaignId),
  };
};

const convertStringsToDisplayFormat = (campaigns: AugmentedCampaignType[], intl: InjectedIntl) => {
  const formatted = campaigns.reduce(
    (accumulated: Accumulated, campaign: AugmentedCampaignType) => {
      const { endDate, pricingTier, startDate, type, schedule } = campaign;
      let { covers, firstTimeGuests, outOfTownGuests, totalSpend } = campaign;

      const isFiltered = ['promoted_results', 'paid_search'].indexOf(type) === -1;
      if (isFiltered) {
        return accumulated;
      }

      const mappingProperties = campaignTypeMapping(campaign, intl);
      const { price } = pricingTier;
      const daysAndTimes = makeDaysAndTimes(schedule, intl);

      covers = (!isNaN(covers) && covers) || 0;
      firstTimeGuests = (!isNaN(firstTimeGuests) && firstTimeGuests) || 0;
      outOfTownGuests = (!isNaN(outOfTownGuests) && outOfTownGuests) || 0;
      totalSpend = (!isNaN(totalSpend) && totalSpend) || 0;

      accumulated.sums.sumCovers += covers;
      accumulated.sums.sumFirstTimeGuests += firstTimeGuests;
      accumulated.sums.sumOutOfTownGuests += outOfTownGuests;
      accumulated.sums.sumTotalSpend += totalSpend;

      const dateFormat = 'MMM D, YYYY';

      const displayValues = {
        covers: formatNumber(covers),
        daysAndTimes,
        endDate: endDate
          ? moment(endDate).format(dateFormat)
          : intl.formatMessage({ id: 'insights.table.no_end_date' }),
        firstTimeGuests: formatNumber(firstTimeGuests),
        outOfTownGuests: formatNumber(outOfTownGuests),
        price: formatCurrency(price, defaultCurrency),
        startDate: moment(startDate).format(dateFormat),
        totalSpend: formatCurrency(totalSpend, defaultCurrency),
        type: mappingProperties.label,
      };

      // values used for sorting:
      accumulated.campaigns.push({
        className: mappingProperties.className,
        covers,
        daysAndTimes,
        displayValues,
        endDate: endDate ? endDate : '',
        firstTimeGuests,
        link: mappingProperties.link,
        outOfTownGuests,
        price,
        startDate,
        totalSpend,
        type,
      });

      return accumulated;
    },
    {
      campaigns: [],
      sums: {
        sumCovers: 0,
        sumFirstTimeGuests: 0,
        sumOutOfTownGuests: 0,
        sumTotalSpend: 0,
      },
    },
  );

  const { campaigns: formattedCampaigns, sums: formattedTotals } = formatted;

  Object.keys(formattedTotals).map(key => {
    formattedTotals[key] =
      key === 'sumTotalSpend'
        ? formatCurrency(formattedTotals[key], defaultCurrency)
        : formatNumber(formattedTotals[key]);
    return formattedTotals[key];
  });

  return { formattedCampaigns, formattedTotals };
};

export default convertStringsToDisplayFormat;
