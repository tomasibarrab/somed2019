import convertToCsvEncodedString, { convertedToCsv } from './convertToCsvEncodedString';

describe('convertToCsvEncodedString()', () => {
  it('should generate csv encodedURI string when provided a 2-dimensional array', () => {
    const csvArray = [
      ['Row 1', 'Remove\nNew line', 'Remove\rReturn line'],
      ['Row 2', 'a,b,"Escape double quotes",d,e', "Valentine's Day"],
    ];
    const convertedString = convertToCsvEncodedString(csvArray as []);
    expect(decodeURI(convertedString)).toBe(
      `data:text/csv;charset=utf-8,` +
        `"Row 1","RemoveNew line","RemoveReturn line"\n` +
        `"Row 2","a,b,""Escape double quotes"",d,e","Valentine's Day"`,
    );
    expect(convertedString).toBe(
      `data:text/csv;charset=utf-8,` +
        `%22Row%201%22,%22RemoveNew%20line%22,%22RemoveReturn%20line%22%0A` +
        `%22Row%202%22,%22a,b,%22%22Escape%20double%20quotes%22%22,d,e%22,%22Valentine's%20Day%22`,
    );
  });
});

describe('convertedToCsv()', () => {
  it('should generate csv encodedURI string when provided a 2-dimensional array', () => {
    const csvArray = [
      ['Row 1', 'Remove\nNew line', 'Remove\rReturn line'],
      ['Row 2', 'a,b,"Escape double quotes",d,e', "Valentine's Day"],
    ];
    const convertedString = convertedToCsv(csvArray as []);
    expect(convertedString).toBe(
      `"Row 1","RemoveNew line","RemoveReturn line"\n"Row 2","a,b,""Escape double quotes"",d,e","Valentine's Day"`,
    );
  });
});
