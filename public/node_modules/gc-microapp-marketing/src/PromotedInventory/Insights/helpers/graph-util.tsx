import moment from 'moment';
import React from 'react';
import { dateGranularity } from '../../../store/insights/utils';
// import PropTypes from 'prop-types';
import DateTime from '../common/DateTime/DateTime';

export const getHoverBarLocation = ({
  layout,
  groupLocation,
  location,
  tooltip,
}) => {
  const getLocationAndDirection = () => {
    const { height, width, columnOffsets } = layout;
    const { dimensions, offsetFromMouse } = tooltip;
    const dimensionsHeight = isNaN(dimensions.height) ? 0 : dimensions.height;
    const y = (height / 2) - (dimensionsHeight / 2);
    let x = (groupLocation.x + location.x + location.width + offsetFromMouse) - columnOffsets.left;
    let direction = 'left';
    const tooltipLocX = x + dimensions.width;
    if (tooltipLocX > width) {
      x = (groupLocation.x + location.x + columnOffsets.right) - (dimensions.width + offsetFromMouse);
      direction = 'right';
    }

    return {
      direction,
      location: {
        x,
        y,
      },
    };
  };

  const nextTooltip = {
    isVisible: true,
    ...getLocationAndDirection(),
  };

  return nextTooltip;
};

export const getHoverAreaLocation = ({
  layout,
  location,
  tooltip,
  locKey = {
    x: 'colX',
    y: 'colY',
  },
}) => {
  const getLocationAndDirection = () => {
    const { height, width, columnOffsets } = layout;
    const { dimensions, offsetFromMouse } = tooltip;
    const dimensionsHeight = isNaN(dimensions.height) ? 0 : dimensions.height;
    const y = (height / 2) - (dimensionsHeight / 2);
    let x = (location[locKey.x] + offsetFromMouse) - columnOffsets.left;
    let direction = 'left';
    const tooltipLocX = x + dimensions.width;
    if (tooltipLocX > width) {
      x = (location[locKey.x] + columnOffsets.right) - (dimensions.width + offsetFromMouse);
      direction = 'right';
    }
    return {
      direction,
      location: {
        x,
        y,
      },
    };
  };

  const nextTooltip = {
    isVisible: true,
    ...getLocationAndDirection(),
  };

  return nextTooltip;
};

export const getGranularityDate = (currentDate, datePeriod, locale = 'en-US') => {
  switch (dateGranularity(datePeriod)) {
    case 'YEAR': return (
      <DateTime dateTime={currentDate} locale={locale} format="Y" />
    );
    case 'MONTH': return (
      <React.Fragment>
        <DateTime dateTime={currentDate} locale={locale} format="MMM" />
        , &nbsp;
        <DateTime dateTime={currentDate} locale={locale} format="Y" />
      </React.Fragment>
    );
    case 'WEEK': return (
      <React.Fragment>
        <DateTime dateTime={currentDate} locale={locale} format="shortDate" />
        &nbsp; - &nbsp;
        <DateTime
          dateTime={
            moment(currentDate, 'YYYY-MM-DD').endOf('week').format('YYYY-MM-DD')
          }
          locale={locale}
          format="shortDate" />
        , &nbsp;
        <DateTime dateTime={currentDate} locale={locale} format="Y" />
      </React.Fragment>
    );
    default: return (
      <React.Fragment>
        <DateTime dateTime={currentDate} locale={locale} format="dddd" />
        &nbsp;
        <DateTime dateTime={currentDate} locale={locale} format="ll" />
      </React.Fragment>
    );
  }
};

export const getDynamicBarWidth = (barCount, maxBarWidth = 985) => {
  if (barCount === 1) {
    return maxBarWidth;
  }

  if (barCount > 1 && barCount <= 7) {
    return 90;
  }

  if (barCount > 7 && barCount <= 14) {
    return 60;
  }

  if (barCount > 13 && barCount <= 21) {
    return 40;
  }

  if (barCount > 21 && barCount <= 28) {
    return 30;
  }

  if (barCount >= 29) {
    return 20;
  }

  return 60;
};

export const getDynamicBarColumnOffsets = (barCount) => {
  if (barCount === 1 || barCount > 4) {
    return 0;
  }

  if (barCount === 4) {
    return 80;
  }

  if (barCount === 3) {
    return 160;
  }

  if (barCount === 2) {
    return 320;
  }

  return 0;
};
