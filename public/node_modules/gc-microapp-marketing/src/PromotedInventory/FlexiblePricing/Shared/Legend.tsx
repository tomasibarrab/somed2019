import './Legend.scss';

import isNil from 'lodash/isNil';
import isNumber from 'lodash/isNumber';
import isString from 'lodash/isString';
import React, { SFC } from 'react';
import { FormattedMessage } from 'react-intl';

import { ActiveContractPrices, Price } from '../../../store/flexiblepricing/flexiblepricing.types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';

export enum LegendType {
  Summary = 'summary',
  TermsAndConditions = 'terms-and-conditions',
  VisibilitySettings = 'visibility-settings',
  Unknown = 'unknown',
}

export interface PriceRange {
  minPrice: number;
  maxPrice: number;
}

interface Props {
  prices: ActiveContractPrices;
  inUseDiscoveryRange: PriceRange;
  type: LegendType;
}

const Legend: SFC<Props> = ({ prices, inUseDiscoveryRange, type }) => {
  // If one of these is missing, they should all be missing
  const { currencyCode, otreso, systemFee } = prices;
  const { maxPrice, minPrice } = inUseDiscoveryRange;

  // prices will be an empty object if it is updating, so currencyCode
  // defined above will be null in that case.

  const showSingleDiscoveryPrice = isNil(maxPrice) || isNil(minPrice) || maxPrice === minPrice;
  const showDiscoveryPrices = isNumber(maxPrice) || isNumber(minPrice);

  let discoveryMsgIdSuffix = showSingleDiscoveryPrice ? 'standard_exposure' : 'discovery_bookings';
  if (type === LegendType.TermsAndConditions) {
    discoveryMsgIdSuffix = 'discovery_covers';
  }

  return (
    <ul className="legend">
      <li>
        <FormattedMessage
          id={`flexiblepricing.visibilitysettings.${
            type === LegendType.TermsAndConditions
              ? 'reservations_made_through_your_website'
              : 'bookings_from_your_website'
          }`}
        />
        {' — '}
        <FormattedMessage id="flexiblepricing.visibilitysettings.free" />
      </li>
      <li>
        <FormattedMessage
          id={`flexiblepricing.visibilitysettings.${
            type === LegendType.TermsAndConditions ? 'direct_covers' : 'direct_bookings'
          }`}
        />
        {' — '}
        {isString(currencyCode) && isNumber(otreso) ? (
          <FormattedMessage
            id="flexiblepricing.educationpage.common.price_per_cover"
            values={{ price: formatCurrency(otreso, currencyCode) }}
          />
        ) : (
          <FormattedMessage id="flexiblepricing.visibilitysettings.updating" />
        )}
      </li>
      <li>
        <FormattedMessage id={`flexiblepricing.visibilitysettings.${discoveryMsgIdSuffix}`} />
        {' — '}
        {isString(currencyCode) && showDiscoveryPrices ? (
          showSingleDiscoveryPrice ? (
            <FormattedMessage
              id="flexiblepricing.educationpage.common.price_per_cover"
              values={{ price: formatCurrency(minPrice || maxPrice, currencyCode) }}
            />
          ) : (
            <FormattedMessage
              id="flexiblepricing.visibilitysettings.range_per_cover"
              values={{
                maxPrice: formatCurrency(maxPrice, currencyCode),
                minPrice: formatCurrency(minPrice, currencyCode),
              }}
            />
          )
        ) : (
          <FormattedMessage id="flexiblepricing.visibilitysettings.updating" />
        )}
      </li>
      <li>
        <FormattedMessage id="flexiblepricing.visibilitysettings.opentable_system" />
        {' — '}
        {isString(currencyCode) && isNumber(systemFee) ? (
          <FormattedMessage
            id="flexiblepricing.educationpage.common.price_per_month"
            values={{ price: formatCurrency(systemFee, currencyCode) }}
          />
        ) : (
          <FormattedMessage id="flexiblepricing.visibilitysettings.updating" />
        )}
      </li>
    </ul>
  );
};

export default Legend;
