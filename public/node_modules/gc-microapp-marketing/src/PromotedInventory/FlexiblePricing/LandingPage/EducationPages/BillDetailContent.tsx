import { Restaurant, selectors } from 'gca-react-components/src/redux-modules/currentContext';
import moment from 'moment';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import {
    FromType, PlanType, Price, PricingInfo,
} from '../../../../store/flexiblepricing/flexiblepricing.types';
import {
    getCurrencyCode, getExpectedFlatFee, getExpectedPricingInfo, getTotals,
} from '../../../../store/flexiblepricing/selectors';
import { State } from '../../../../store/types';
import { formatCurrency } from '../../../CampaignsList/helpers/format-number-locale';

interface SP {
  currencyCode: string;
  flatFee: boolean;
  pricingInfo: PricingInfo;
  restaurant: Restaurant;
  totals: { currentPrice: Price; flexPrice: Price }; // info: aka PlanType.CurrentPrice & PlanType.FlexiblePricing
}

type Props = InjectedIntlProps & SP;

const makeSystemFeeRow = (pricingInfo: PricingInfo, currencyCode: string) => {
  const { [PlanType.CurrentPrice]: current, [PlanType.FlexiblePricing]: flex } = pricingInfo.system;
  return (
    <tr>
      <td>
        <FormattedMessage id="flexiblepricing.educationpage.billdetail.otsystem" />
      </td>
      <td>
        <FormattedMessage
          id="flexiblepricing.educationpage.common.price_per_month"
          values={{
            price: formatCurrency(current.amount, currencyCode),
          }}
        />
      </td>
      <td>
        <FormattedMessage
          id="flexiblepricing.educationpage.common.price_per_month"
          values={{
            price: formatCurrency(flex.amount, currencyCode),
          }}
        />
      </td>
    </tr>
  );
};

const makeRow = (pricingInfo: PricingInfo, currencyCode: string, flatFee: boolean, type: FromType) => {
  const { covers, [PlanType.CurrentPrice]: current, [PlanType.FlexiblePricing]: flex } = pricingInfo[type];
  return (
    <tr>
      <td>
        <FormattedMessage id={`flexiblepricing.educationpage.billdetail.${type.toLowerCase()}`} />
        <FormattedMessage id="flexiblepricing.educationpage.common.number_of_covers" values={{ numberOf: covers }} />
      </td>
      {flatFee ? (
        <td>
          <FormattedMessage
            id="flexiblepricing.educationpage.common.price_per_month"
            values={{
              price: formatCurrency(current.amount, currencyCode),
            }}
          />
        </td>
      ) : (
        <td>
          <span>{formatCurrency(covers * current.amount, currencyCode)}</span>
          <FormattedMessage
            id="flexiblepricing.educationpage.common.price_per_cover"
            values={{
              price: formatCurrency(current.amount, currencyCode),
            }}
          />
        </td>
      )}
      <td>
        <span>{formatCurrency(covers * flex.amount, currencyCode)}</span>
        <FormattedMessage
          id={
            type === FromType.Discovery
              ? 'flexiblepricing.educationpage.common.price_per_cover_at_standard_visibility'
              : 'flexiblepricing.educationpage.common.price_per_cover'
          }
          values={{
            price: formatCurrency(flex.amount, currencyCode),
          }}
        />
      </td>
    </tr>
  );
};

const BillDetailContent: SFC<Props> = ({ currencyCode, flatFee, pricingInfo, restaurant, totals }) => {
  return (
    <article className="bill-detail content no-border">
      <table>
        <thead>
          <tr>
            <th style={{ flexGrow: 2 }}>
              <FormattedMessage
                id="flexiblepricing.educationpage.billdetail.restaurant_name_month_bill"
                values={{
                  month: moment(pricingInfo.month).format('MMMM'),
                  restaurantName: restaurant.name,
                }}
              />
            </th>
            <th style={{ flexGrow: 0 }} />
            <th style={{ flexGrow: 1 }} />
          </tr>
          <tr>
            <th />
            <th>
              <FormattedMessage id="flexiblepricing.educationpage.billdetail.current_price_plan" />
            </th>
            <th>
              <FormattedMessage id="flexiblepricing.educationpage.billdetail.flexible_pricing" />
            </th>
          </tr>
        </thead>
        <tbody>
          {makeRow(pricingInfo, currencyCode, flatFee, FromType.RestRef)}
          {makeRow(pricingInfo, currencyCode, false, FromType.Direct)}
          {makeRow(pricingInfo, currencyCode, false, FromType.Discovery)}
          {pricingInfo.system && makeSystemFeeRow(pricingInfo, currencyCode)}
        </tbody>
        <tfoot>
          <tr>
            <td>
              <FormattedMessage id="flexiblepricing.educationpage.billdetail.total_cost" />
            </td>
            <td>
              <span>{formatCurrency(totals[PlanType.CurrentPrice].amount, currencyCode)}</span>
            </td>
            <td>
              <span>{formatCurrency(totals[PlanType.FlexiblePricing].amount, currencyCode)}</span>
            </td>
          </tr>
        </tfoot>
      </table>
      <FormattedMessage id="flexiblepricing.educationpage.billdetail.this_does_not" tagName="p" />
    </article>
  );
};

const mapState = (state: State) => ({
  currencyCode: getCurrencyCode(state),
  flatFee: getExpectedFlatFee(state),
  pricingInfo: getExpectedPricingInfo(state)!,
  restaurant: selectors.restaurant(state),
  totals: getTotals(state),
});

export default connect<SP, {}, {}>(mapState)(injectIntl(BillDetailContent));
