import './MonthlyBudget.scss';

import classNames from 'classnames';
import { Checkbox, Input } from 'gca-react-components';
import React, { Component } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';

import {
    setMonthlyBudgetAmount as setMonthlyBudgetAmountAction,
    setMonthlyBudgetEnabled as setMonthlyBudgetEnabledAction,
} from '../../../store/flexiblepricing/flexiblepricing';
import {
    Price, VisibilityType, VisibilityTypePrices,
} from '../../../store/flexiblepricing/flexiblepricing.types';
import {
    getCurrencyCode, getDifference, getExpectedDiscoveryPrices, getFormMonthlyBudget,
    getFormMonthlyBudgetEnabled,
} from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';
import { currencySymbolMap, defaultCurrency, MAX_FLEX_PRICING_BUDGET } from '../../constants';

interface SP {
  monthlyBudget: Price;
  monthlyBudgetEnabled: boolean;
  currencyCode: string;
  difference: Price;
  discoveryPrices: VisibilityTypePrices;
}

interface DP {
  setMonthlyBudgetAmount: typeof setMonthlyBudgetAmountAction;
  setMonthlyBudgetEnabled: typeof setMonthlyBudgetEnabledAction;
}

type Props = SP & DP;

interface ComponentState {
  monthlyBudgetString: string;
}

class MonthlyBudget extends Component<Props, ComponentState> {
  constructor(props: Props) {
    super(props);

    this.state = {
      monthlyBudgetString: props.monthlyBudget.amount.toFixed(2),
    };
  }

  public render() {
    const {
      currencyCode,
      difference,
      discoveryPrices,
      monthlyBudget,
      monthlyBudgetEnabled,
      setMonthlyBudgetAmount,
      setMonthlyBudgetEnabled,
    } = this.props;
    const { amount } = monthlyBudget;
    const { monthlyBudgetString } = this.state;
    return (
      <section className="monthly-budget">
        <FormattedMessage id="flexiblepricing.visibilitysettings.monthly_budget.title" tagName="h4" />
        {difference.amount > 0 && (
          <FormattedMessage
            id="flexiblepricing.visibilitysettings.monthly_budget.description"
            tagName="p"
            values={{
              'price-with-parentheses': <strong>({formatCurrency(difference.amount, currencyCode)})</strong>,
            }}
          />
        )}
        <div className={classNames('symbol-input-info-help', { 'is-active': monthlyBudgetEnabled })}>
          <div className="symbol-input-info">
            <div className="symbol-input">
              <div>{currencySymbolMap[currencyCode || defaultCurrency]}</div>
              <Input
                name="budget"
                onChange={e => {
                  if (monthlyBudgetEnabled) {
                    const newString = e.target.value;
                    if (/^\d*\.?\d?\d?$/.test(newString)) {
                      const newValue = newString === '' ? 0 : parseFloat(newString);
                      if (isNaN(newValue)) {
                        setMonthlyBudgetAmount(0);
                        this.setState({ monthlyBudgetString: newString });
                      } else {
                        if (newValue < MAX_FLEX_PRICING_BUDGET) {
                          setMonthlyBudgetAmount(newValue);
                          this.setState({ monthlyBudgetString: newString });
                        }
                      }
                    }
                  }
                }}
                disabled={!monthlyBudgetEnabled}
                pattern="[0-9]"
                value={monthlyBudgetString}
                valid={parseFloat(monthlyBudgetString) >= 0}
              />
            </div>
            {amount > 0 && (
              <FormattedMessage
                id="flexiblepricing.visibilitysettings.monthly_budget.info"
                values={{
                  numberOfCovers: this.getNumberOfCovers(amount),
                  price: formatCurrency(discoveryPrices[VisibilityType.Increase].amount, currencyCode),
                }}
              />
            )}
          </div>
          <FormattedMessage
            id="flexiblepricing.visibilitysettings.monthly_budget.help.1"
            tagName="span"
            values={{
              price: formatCurrency(discoveryPrices[VisibilityType.Standard].amount, currencyCode),
            }}
          />
          <FormattedMessage id="flexiblepricing.visibilitysettings.monthly_budget.help.2" tagName="span" />
        </div>
        <Checkbox
          className="no-budget-cap"
          label="No budget cap â€” keep bringing me guests!"
          onClick={() => setMonthlyBudgetEnabled(!monthlyBudgetEnabled)}
          checked={!monthlyBudgetEnabled}
        />
      </section>
    );
  }

  private getNumberOfCovers(budget: number): string {
    const { discoveryPrices } = this.props;
    return (budget / discoveryPrices[VisibilityType.Increase].amount).toFixed(0);
  }
}

const mapStateToProps = (state: State) => ({
  currencyCode: getCurrencyCode(state),
  difference: getDifference(state),
  discoveryPrices: getExpectedDiscoveryPrices(state),
  monthlyBudget: getFormMonthlyBudget(state),
  monthlyBudgetEnabled: getFormMonthlyBudgetEnabled(state),
});

const mapDispatch = {
  setMonthlyBudgetAmount: setMonthlyBudgetAmountAction,
  setMonthlyBudgetEnabled: setMonthlyBudgetEnabledAction,
};

export default connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatch,
)(MonthlyBudget);
