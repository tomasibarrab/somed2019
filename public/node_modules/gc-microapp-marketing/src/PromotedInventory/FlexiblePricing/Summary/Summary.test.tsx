import Summary from './Summary';

import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import {
  createEmptyFormSettings,
  createEmptyIncreaseSettings,
  createFullSchedule,
} from '../../../store/flexiblepricing/createEmptyFormSettings';
import { Days, Times, VisibilityType } from '../../../store/flexiblepricing/flexiblepricing.types';
import makeMockState, { mockDiscoveryPrices } from '../../../store/flexiblepricing/makeMockState';
import { keys } from '../../../translations/bundles/marketing.json';

jest.mock('../../ColumnsLayout/CampaignsList', () => 'mocked-campaigns-list');

const renderComponent = (state: any) => {
  const store = configureMockStore([])(state);

  return {
    store,
    wrapper: mount(
      <Provider store={store}>
        <IntlProvider messages={keys} locale="en-US">
          <Summary />
        </IntlProvider>
      </Provider>,
    ),
  };
};

describe('Summary', () => {
  it.skip(
    'matches snapshot when settings exist w/ revert, reduce feature on. Has edit, revert btns, no header btns', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: true,
        featureGcaPiFlexiblePricingRevert: true,
      },
    };

    const state = makeMockState({
      featureToggles,
    });
    // Set the standard schedule so that the edit button appears
    state.flexiblePricing.visibilitySettings.data.standard.schedule = createFullSchedule();

    const { wrapper } = renderComponent(state);
    expect(wrapper.debug()).toMatchSnapshot();

    expect(wrapper.find('Button.edit-button').length).toEqual(1);
    expect(wrapper.find('Button.revert-button').length).toEqual(1);

    expect(
      wrapper
        .find('section.summary ul')
        .childAt(2)
        .text()
        .slice(0, 7),
    ).toEqual('Reduced');

    expect(wrapper.find('aside.summary.header-buttons').length).toEqual(0);
  });

  it('matches snapshot when settings exist w/o revert, reduce feature, with updating prices', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: false,
        featureGcaPiFlexiblePricingRevert: false,
      },
    };

    const state = makeMockState({
      campaigns: {
        list: [
          {
            createdByEmail: 'isr@opentable.com',
            flexiblePricingVisibility: VisibilityType.Standard,
          },
        ],
      },
      featureToggles,
    });
    state.flexiblePricing.visibilitySettings.data.standard.schedule = createFullSchedule();
    state.flexiblePricing.activeContract.data = {};

    const { wrapper } = renderComponent(state);
    expect(wrapper.debug()).toMatchSnapshot();

    expect(wrapper.find('Button.edit-button').length).toEqual(1);
    expect(wrapper.find('Button.revert-button').length).toEqual(0);

    expect(wrapper.find('aside.summary.header-buttons').length).toEqual(0);
  });

  it('matches snapshot when partial discovery settings exist w/o revert, reduce feature.', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: false,
        featureGcaPiFlexiblePricingRevert: false,
      },
    };

    const state = makeMockState({
      campaigns: {
        list: [
          {
            createdByEmail: 'isr@opentable.com',
            flexiblePricingVisibility: VisibilityType.Standard,
          },
        ],
      },
      featureToggles,
    });
    state.flexiblePricing.visibilitySettings.data.standard.schedule = createFullSchedule();
    state.flexiblePricing.visibilitySettings.data.standard.schedule[Days.Monday][Times.Midday] = false;

    const { wrapper } = renderComponent(state);
    expect(wrapper.debug()).toMatchSnapshot();

    expect(wrapper.find('Button.edit-button').length).toEqual(0);
    expect(wrapper.find('Button.revert-button').length).toEqual(0);

    expect(wrapper.find('aside.summary.header-buttons').length).toEqual(0);
  });

  it('has header buttons and top content matching snapshot when state is pre-commit-first-run', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: true,
      },
    };

    const state = makeMockState({
      existingSettings: undefined,
      featureToggles,
      formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
    });

    const { store, wrapper } = renderComponent(state);
    const headerButtons = wrapper.find('aside.summary.header-buttons').first();
    expect(headerButtons.debug()).toMatchSnapshot('header buttons w/ Back and Switch to');

    const topContent = wrapper.find('header.summary');
    expect(topContent.debug()).toMatchSnapshot('top content has start date and other info');

    const backButton = headerButtons.childAt(0);
    expect(store.getActions().length).toEqual(0);
    backButton.simulate('click');
    const actionsAfterBackClick = store.getActions();
    expect(actionsAfterBackClick).toMatchSnapshot('set page type to vis. settings');

    const switchButton = headerButtons.childAt(1);
    expect(wrapper.find('ModalTermsAndConditions').length).toEqual(0);

    switchButton.simulate('click');
    expect(wrapper.find('ModalTermsAndConditions').length).toEqual(1);
  });

  it('has header buttons and top content matching snapshot for pre-commit-edit', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: true,
      },
    };

    const state = makeMockState({
      featureToggles,
      formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
    });

    const { store, wrapper } = renderComponent(state);
    const headerButtons = wrapper.find('aside.summary.header-buttons').first();
    expect(headerButtons.debug()).toMatchSnapshot('header buttons w/ Back and Make Changes');

    const topContent = wrapper.find('header.summary');
    expect(topContent.debug()).toMatchSnapshot('top content has Changes Effective date');
  });

  it('w/ existing settings, clicking edit inits form and sets page to vis. settings. revert opens modal', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: true,
        featureGcaPiFlexiblePricingRevert: true,
      },
    };

    const state = makeMockState({
      featureToggles,
    });
    // Set the standard schedule so that the edit button appears
    state.flexiblePricing.visibilitySettings.data.standard.schedule = createFullSchedule();

    const { store, wrapper } = renderComponent(state);

    const editButton = wrapper.find('Button.edit-button');

    expect(store.getActions().length).toEqual(0);
    editButton.simulate('click');

    expect(store.getActions()).toMatchSnapshot('init form and set page to vis. settings');

    const revertButton = wrapper.find('Button.revert-button');
    expect(wrapper.find('RevertModal').length).toEqual(0);

    revertButton.simulate('click');
    expect(wrapper.find('RevertModal').length).toEqual(1);
  });

  it('w/ existing settings, clicking revert opens modal, clicking revert in modal fires revert action', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingReduceVisibility: true,
        featureGcaPiFlexiblePricingRevert: true,
      },
    };

    const state = makeMockState({
      featureToggles,
    });
    const { store, wrapper } = renderComponent(state);

    const revertButton = wrapper.find('Button.revert-button');
    expect(wrapper.find('RevertModal').length).toEqual(0);

    revertButton.simulate('click');
    const revertModal = wrapper.find('RevertModal');
    expect(revertModal.length).toEqual(1);

    expect(revertModal.first().debug()).toMatchSnapshot('revert modal');

    const confirmRevertButton = revertModal.find('Button[data-testid="revert-button"]');
    confirmRevertButton.simulate('click');

    expect(
      store
        .getActions()
        .pop()
        .type.endsWith('REVERT_TO_ORIGINAL_PRICING_STARTED'),
    ).toBeTruthy();
  });

  it('summary and grid matches snapshot w/ increase schedule of sunday: all, mon: morning-midday, tue: morning', () => {
    const featureToggles = {
      features: {
        featureGcaPiFlexiblePricingRevert: false,
        featureGcaPiReduceVisibility: false,
      },
    };

    const increasedSettings = createEmptyIncreaseSettings({
      amount: 2.75,
      currencyCode: 'USD',
    });

    increasedSettings.schedule.sunday = {
      evening: true,
      midDay: true,
      morning: true,
    };

    increasedSettings.schedule.monday = {
      evening: false,
      midDay: true,
      morning: true,
    };

    increasedSettings.schedule.tuesday = {
      evening: false,
      midDay: false,
      morning: true,
    };

    const formSettings = createEmptyFormSettings(mockDiscoveryPrices);
    formSettings.increase = increasedSettings;
    formSettings.enable.increase = true;
    formSettings.enable.monthlyBudget = true;

    const state = makeMockState({
      featureToggles,
      formVisibilitySettings: formSettings,
      hasReducePrices: false,
    });

    state.flexiblePricing.pricingInfo.data.discovery.decreasePrice = undefined;

    const { wrapper } = renderComponent(state);

    expect(wrapper.debug()).toMatchSnapshot();
  });
});
