import './RevertModal.scss';

import { Button, Modal, ModalMain } from 'gca-react-components';
import { ashDark } from 'otkit-colors/token.common.js';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { OldFromTypes, OldPrices } from '../../../store/flexiblepricing/flexiblepricing.types';
import {
    getCurrencyCode, getExpectedFlatFee, getOldPrices,
} from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';
import OTKitIcon from '../Shared/OTKitIcon';

interface OP {
  onConfirm: () => void;
  onCancel: () => void;
}

interface SP {
  currencyCode: string;
  hasFlatFee: boolean;
  oldPrices: OldPrices;
  sendingSettings: boolean;
}

type Props = OP & SP & InjectedIntlProps;

const RevertModal: SFC<Props> = ({
  currencyCode,
  intl: { formatMessage },
  hasFlatFee,
  onConfirm,
  onCancel,
  oldPrices,
  sendingSettings,
}) => (
  <Modal onClose={onCancel} modalClass="revert-modal">
    {/* When we do design updates for all the modals we should make our own
        "FlexPricingModal" that contains the styling we want for the text and buttons,
        as well as the close button in the upper right so we can reuse it for the others. */}
    <header>
      <div onClick={onCancel}>
        <OTKitIcon name="icClose" fill={ashDark} />
      </div>
      <FormattedMessage id="flexiblepricing.summary.revert_modal.title" tagName="h1" />
    </header>
    <ModalMain className="revert-modal">
      <FormattedMessage id="flexiblepricing.summary.revert_modal.description" tagName="p" />
      <FormattedMessage id="flexiblepricing.summary.revert_modal.standard_pricing" tagName="h2" />
      <FormattedMessage id="flexiblepricing.summary.revert_modal.all_opentable_covers" tagName="h3" />
      <FormattedMessage
        id="flexiblepricing.educationpage.common.price_per_cover"
        values={{
          price: formatCurrency(oldPrices[OldFromTypes.OpenTable].amount, currencyCode),
        }}
        tagName="p"
      />
      <FormattedMessage id="flexiblepricing.educationpage.billdetail.restref" tagName="h3" />
      <FormattedMessage
        id={`flexiblepricing.educationpage.common.${hasFlatFee ? 'price_per_month' : 'price_per_cover'}`}
        values={{
          price: formatCurrency(oldPrices[OldFromTypes.RestRef].amount, currencyCode),
        }}
        tagName="p"
      />
      {oldPrices.system && (
        <>
          <FormattedMessage id="flexiblepricing.educationpage.billdetail.otsystem" tagName="h3" />
          <FormattedMessage
            id="flexiblepricing.educationpage.common.price_per_month"
            values={{
              price: formatCurrency(oldPrices.system.amount, currencyCode),
            }}
            tagName="p"
          />
        </>
      )}
      <footer>
        <Button
          theme="primary"
          onClick={onConfirm}
          busy={sendingSettings}
          className="revert-button"
          data-testid="revert-button"
        >
          <FormattedMessage id="flexiblepricing.summary.revert_modal.revert" />
        </Button>
      </footer>
    </ModalMain>
  </Modal>
);

const mapStateToProps = (state: State) => ({
  currencyCode: getCurrencyCode(state),
  hasFlatFee: getExpectedFlatFee(state),
  oldPrices: getOldPrices(state),
  sendingSettings: state.flexiblePricing.sendingSettings,
});

export default connect<SP, {}, OP>(mapStateToProps)(injectIntl(RevertModal));
