import classNames from 'classnames';
import { Modal, ModalHeader, ModalMain } from 'gca-react-components';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { ApprovalInfo } from '../../../store/campaigns/campaigns.types';
import {
  ActiveContractPrices,
  TermsType,
  VisibilitySettings,
} from '../../../store/flexiblepricing/flexiblepricing.types';
import {
  getFormVisibilitySettingsWithDisables,
  getInUseDiscoveryPriceRange,
  getShownFlexPrices,
} from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import { LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1 } from '../../constants';
import Legend, { LegendType, PriceRange } from '../Shared/Legend';
import './ModalTermsAndConditions.scss';
import TermsAndConditions, { TermsFVWithBrowserInfo } from './TermsAndConditions';

interface SP {
  prices: ActiveContractPrices;
  inUseDiscoveryRange: PriceRange;
  newSettings: VisibilitySettings;
}

interface OP {
  termsType: TermsType;
  confirm: (payload: any) => void;
  onClose: () => void;
}

type NonIntlProps = SP & OP;
type Props = NonIntlProps & InjectedIntlProps;

const ModalTermsAndConditions: SFC<Props> = ({
  confirm,
  intl: { formatMessage },
  onClose,
  newSettings,
  prices,
  inUseDiscoveryRange,
  termsType,
}) => {
  const addLinkToTermsAndConfirm = (termsFVWithBrowserInfo: TermsFVWithBrowserInfo): void => {
    const approvalInfo = { ...termsFVWithBrowserInfo, linkToTerms: LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1 };
    confirm({ approvalInfo, data: newSettings, isEdit: termsType === TermsType.Edit });
  };

  return (
    <Modal onClose={onClose}>
      <ModalHeader onClose={onClose} title={formatMessage({ id: 'guestcampaigns.terms.terms_and_conditions' })} />
      <ModalMain className={classNames('terms-modal', 'has-legend')}>
        <FormattedMessage
          id="flexiblepricing.summary.terms_and_conditions.description"
          tagName="p"
          values={{
            'client-agreement-link': (
              <a href={LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1} target="_blank">
                <FormattedMessage id="guestcampaigns.terms.opentable_client_agreement" />
              </a>
            ),
          }}
        />
        <Legend
          prices={prices}
          inUseDiscoveryRange={inUseDiscoveryRange}
          type={LegendType.TermsAndConditions}
        />
        <TermsAndConditions confirm={addLinkToTermsAndConfirm} termsType={termsType} />
      </ModalMain>
    </Modal>
  );
};

const mapStateToProps = (state: State) => ({
  inUseDiscoveryRange: getInUseDiscoveryPriceRange(state),
  newSettings: getFormVisibilitySettingsWithDisables(state)!,
  prices: getShownFlexPrices(state),
});

export default connect<SP, {}, OP>(mapStateToProps)(injectIntl<NonIntlProps>(ModalTermsAndConditions));
