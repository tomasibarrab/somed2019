import { Button, Panel } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import queryString from 'query-string';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';
import { Routes } from '../../../PromotedInventory/FlexiblePricing/FlexiblePricing';
import { actions as campaignActions } from '../../../store/campaigns/campaigns';
import { Pages } from '../../../store/campaigns/campaigns.types';
import { fetchActiveContractPrices, fetchVisibilitySettings } from '../../../store/flexiblepricing/flexiblepricing';
import { ButtonType, FlexiblePricingPageType } from '../../../store/flexiblepricing/flexiblepricing.types';
import { getPageType } from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import DoneIcon from './DoneIcon';
import './Success.scss';

interface SP {
  email: string;
  type: SuccessType;
}

interface DP {
  fetchVisibilitySettingsStarted: typeof fetchVisibilitySettings.started;
  fetchCampaigns: typeof campaignActions.fetchCampaigns.started;
  fetchActiveContractPricesStarted: typeof fetchActiveContractPrices.started;
}

type Props = SP & DP & InjectedIntlProps;

export enum SuccessType {
  FlexiblePricing = 'flexiblepricing',
  PostEdit = 'postedit',
  OriginalPricing = 'originalpricing',
}

const FLEXIBLEPRICING_EMAIL = 'flexiblepricing@opentable.com';
const FAQ_LINK = 'https://link.to.faq';

const Success: SFC<Props> = ({
  intl: { formatMessage },
  type,
  email,
  fetchActiveContractPricesStarted,
  fetchVisibilitySettingsStarted,
  fetchCampaigns,
}) => {
  const finishButton = (
    <Button
      onClick={() => {
        fetchVisibilitySettingsStarted({ firstFetch: false });
        fetchCampaigns({
          pageType: Pages.FlexiblePricing,
        });
        fetchActiveContractPricesStarted({});
      }}
      theme="primary"
      value={ButtonType.Finish}
    >
      <FormattedMessage
        id={`flexiblepricing.success.${type === SuccessType.OriginalPricing ? 'finish' : 'view_your_settings'}`}
      />
    </Button>
  );
  return (
    <Panel title="">
      <article className="success">
        <DoneIcon />
        <FormattedMessage id={`flexiblepricing.success.${type}.nice_work`} tagName="h1" />
        {type === SuccessType.FlexiblePricing && (
          <FormattedMessage id="flexiblepricing.success.we_will_let" tagName="p" values={{ email }} />
        )}
        <FormattedMessage
          id={`flexiblepricing.success.${type}.got_questions_or`}
          tagName="p"
          values={{
            'email-link': <a href={`mailto:${FLEXIBLEPRICING_EMAIL}`}>{FLEXIBLEPRICING_EMAIL}</a>,
            'faq-link': (
              <a href={FAQ_LINK} target="_blank">
                {formatMessage({ id: 'flexiblepricing.success.faq' })}
              </a>
            ),
          }}
        />
        {type === SuccessType.OriginalPricing ? <Link to={Routes.LandingPage}>{finishButton}</Link> : finishButton}
      </article>
    </Panel>
  );
};

const pageTypeMap: any = {
  [FlexiblePricingPageType.SuccessSignup]: SuccessType.FlexiblePricing,
  [FlexiblePricingPageType.SuccessRevert]: SuccessType.OriginalPricing,
  [FlexiblePricingPageType.SuccessEdit]: SuccessType.PostEdit,
};

const mapStateToProps = (state: State) => ({
  email: selectors.user(state).userName,
  type: pageTypeMap[getPageType(state)],
});

const mapDispatch = {
  fetchActiveContractPricesStarted: fetchActiveContractPrices.started,
  fetchCampaigns: campaignActions.fetchCampaigns.started,
  fetchVisibilitySettingsStarted: fetchVisibilitySettings.started,
};

export default connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatch,
)(injectIntl<SP & DP>(Success));
