import { mount } from 'enzyme';
import { Form } from 'react-final-form';

import React from 'react';

import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { CampaignTypes, Pages } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import { LINK_TO_GIFTS_TERMS_V1 } from '../constants';
import TermsAndConditions from './TermsAndConditions';

jest.mock('platform', () => ({
  name: '<Browser name>',
  os: '<Operating system>',
}));

const createComponent = (state, confirm) => {
  const store = configureMockStore()(state);
  const wrapper = mount(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={keys}>
        <TermsAndConditions confirm={confirm} />
      </IntlProvider>
    </Provider>,
  );
  return { wrapper, store };
};

describe('<TermsAndConditions />', () => {
  const state = {
    currentContext: {
      user: {
        firstName: 'John',
        lastName: 'Doe',
        userName: 'john.doe@example.com',
      },
    },
    gifts: {
      patchPending: false,
    },
  };

  it('should toggle checkbox when clicked', () => {
    const { wrapper } = createComponent(state, jest.fn());
    const formApi = wrapper
      .find(Form)
      .first()
      .instance().form;
    const toggle = wrapper.find('input').last();

    expect(formApi.getState().values.agreed).toEqual(false);

    toggle.simulate('click');
    expect(formApi.getState().values.agreed).toEqual(true);

    toggle.simulate('click');
    expect(formApi.getState().values.agreed).toEqual(false);
  });

  it('should have invalid form fields when touched && error', () => {
    const { wrapper } = createComponent(state, jest.fn());
    const input = wrapper.find('input').at(1);
    const formApi = wrapper
      .find(Form)
      .first()
      .instance().form;
    const value = 'Ye Olde Test Restaurant';

    expect(formApi.getState().pristine).toEqual(true);
    expect(formApi.getState().errors).toMatchSnapshot();

    wrapper
      .find('input')
      .last()
      .simulate('click'); // agree

    expect(formApi.getState().pristine).toEqual(false);
    expect(formApi.getState().invalid).toEqual(true);

    input.instance().value = value;
    input.simulate('change');

    expect(formApi.getState().valid).toEqual(true);
    expect(formApi.getState().errors).toMatchSnapshot();

    input.instance().value = '';
    input.simulate('change');

    expect(formApi.getState().invalid).toEqual(true);
    expect(formApi.getState().errors).toMatchSnapshot();
  });

  it('should be invalid when name is removed', () => {
    const { wrapper } = createComponent(state, jest.fn());
    const input = wrapper.find('input').first();
    const formApi = wrapper
      .find(Form)
      .first()
      .instance().form;

    expect(formApi.getState().pristine).toEqual(true);
    expect(formApi.getState().errors).toMatchSnapshot();

    input.instance().value = '';
    input.simulate('change');

    expect(formApi.getState().invalid).toEqual(true);
    expect(formApi.getState().errors).toMatchSnapshot();
  });

  it('should fire GIFTS/CLICK_CALL_TO_ACTION when clicking agree and sign up', () => {
    const { wrapper, store } = createComponent(state, jest.fn());
    const button = wrapper.find('button');
    button.simulate('click');
    expect(store.getActions()).toMatchSnapshot();
  });

  it('should fire props.confirm with browser info when clicking agree and publish', () => {
    const confirm = jest.fn();
    const { wrapper } = createComponent(state, confirm);
    const form = wrapper.find('form').first();
    const inputs = wrapper.find('input');

    inputs.at(1).instance().value = 'Ye Olde Fake Restauant Name, LLC';
    inputs.at(1).simulate('change');
    inputs.last().simulate('click'); // agree

    form.simulate('submit');

    expect(confirm).toHaveBeenCalled();
    expect(confirm.mock.calls[0][0].browserInfo).not.toBeUndefined();
  });
});
