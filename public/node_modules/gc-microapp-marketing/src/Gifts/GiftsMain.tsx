import { Button, Fieldset, Panel } from 'gca-react-components';
import { InputFinalField } from 'gca-react-components/src/finalform-fields';
import { green } from 'otkit-colors/token.common';
import React, { Component, ReactNode } from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import OTKitIcon from '../PromotedInventory/FlexiblePricing/Shared/OTKitIcon';
import { actions } from '../store/gifts/gifts';
import {
  ClickOrInteractPayload,
  GiftsPageType,
  GiftsState,
  OpenTermsModalPayload,
  PatchGiftsUrlPayload,
  ShowPagePayload,
} from '../store/gifts/gifts.types';
import { State } from '../store/types';
import FinalFieldFocusTracker from './FinalFieldFocusTracker';
import GiftsTermsModal from './TermsAndConditions/GiftsTermsModal';
import validateUrl from './validateUrl';

interface OP {
  test?: string;
}

interface SP {
  modal?: GiftsState['modal'];
  patchPending: boolean;
  url?: string;
}

interface DP {
  openTermsModal: (payload: OpenTermsModalPayload) => void;
  closeTermsModal: () => void;
  clickOrInteract: (payload: ClickOrInteractPayload) => void;
  patchGiftsUrl: (payload: PatchGiftsUrlPayload) => void;
  showPage: (payload: ShowPagePayload) => void;
}

interface ComponentState {
  shouldShowToast: boolean;
}

type Props = SP & DP & OP & InjectedIntlProps;

class GiftsMain extends Component<Props, ComponentState> {
  private form: ReactNode;
  private submit: any;
  constructor(props: Props) {
    super(props);
    this.state = {
      shouldShowToast: false,
    };

    this.form = (
      <Form
        onSubmit={(values: any) => {
          if (this.props.url) {
            this.setState({ shouldShowToast: true });
            props.patchGiftsUrl({ url: values.url, isEdit: true });
          } else {
            props.openTermsModal({ url: values.url });
          }
        }}
        validate={validateUrl}
        initialValues={{
          url: props.url,
        }}
        render={({ handleSubmit, active }) => {
          this.submit = handleSubmit;
          return (
            <form onSubmit={handleSubmit}>
              <InputFinalField name="url" />
              <FinalFieldFocusTracker
                trackFocus={true}
                trackBlur={true}
                fieldName="url"
                formattedFieldName="URL"
                active={active}
                clickOrInteract={props.clickOrInteract}
                pageName="Main/URL Entry page"
              />
            </form>
          );
        }}
      />
    );
  }

  public render() {
    const { modal, closeTermsModal, patchGiftsUrl, intl, url, patchPending, clickOrInteract, showPage } = this.props;
    const { shouldShowToast } = this.state;

    const headerButtons = url ? (
      <div className="save gifts-header-buttons">
        <Button
          onClick={(event: any) => {
            clickOrInteract({ action: 'Click', props: { name: 'Save', page: 'Main/URL Entry page' } });
            this.setState({ shouldShowToast: false });
            this.submit(event);
          }}
          theme="primary"
          className="form-save-button"
          data-testid="save-btn"
          name="gifts-save"
          busy={patchPending}
        >
          {intl.formatMessage({ id: 'gifts.main.header.save' })}
        </Button>
      </div>
    ) : (
      <div className="cancel-and-publish gifts-header-buttons">
        <Button
          onClick={(event: any) => {
            clickOrInteract({ action: 'Click', props: { name: 'Cancel', page: 'Main/URL Entry page' } });
            showPage({ pageType: GiftsPageType.LandingPage });
          }}
          className="form-cancel-button"
          data-testid="cancel-from-main"
          name="gifts-cancel-from-main"
        >
          {intl.formatMessage({ id: 'gifts.main.header.cancel' })}
        </Button>
        <Button
          onClick={(event: any) => {
            clickOrInteract({ action: 'Click', props: { name: 'Publish', page: 'Main/URL Entry page' } });
            this.submit(event);
          }}
          theme="publish"
          className="form-publish-button"
          data-testid="publish-from-main"
          name="gifts-publish-from-main"
        >
          {intl.formatMessage({ id: 'gifts.main.header.publish' })}
        </Button>
      </div>
    );

    const showToast = shouldShowToast === true && patchPending === false;

    return (
      <Panel title={intl.formatMessage({ id: 'gifts.title' })} headerContent={headerButtons}>
        {showToast && (
          <div className="gifts-url-toast" data-testid="gifts-url-toast">
            <div className="gifts-url-toast__checkmark">
              <OTKitIcon fill={green} name="icSuccess" />
            </div>
            <FormattedMessage id="gifts.main.toast.success" tagName="div" />
            <div
              className="gifts-url-toast__close"
              data-testid="gifts-url-toast__close"
              onClick={() => {
                this.setState({ shouldShowToast: false });
              }}
            >
              <OTKitIcon fill={green} name="icClose" />
            </div>
          </div>
        )}
        <Fieldset
          legend={intl.formatMessage({ id: 'gifts.main.gift_card_website.title' })}
          description={intl.formatMessage({ id: 'gifts.main.gift_card_website.description' })}
          className="url-entry-fieldset"
        >
          {this.form}
        </Fieldset>
        {modal && <GiftsTermsModal url={modal.proposedUrl} close={closeTermsModal} confirm={patchGiftsUrl} />}
      </Panel>
    );
  }
}

const mapState = (state: State) => ({
  modal: state.gifts.modal,
  patchPending: state.gifts.patchPending,
  url: state.gifts.url,
});

const mapDispatch = {
  clickOrInteract: actions.clickOrInteract,
  closeTermsModal: actions.closeTermsModal,
  openTermsModal: actions.openTermsModal,
  patchGiftsUrl: actions.patchGiftsUrl.started,
  showPage: actions.showPage,
};

export default connect<SP, DP, OP>(
  mapState,
  mapDispatch,
)(injectIntl(GiftsMain));
