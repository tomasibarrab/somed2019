import { mount } from 'enzyme';
import React from 'react';
import FinalFieldFocusTracker from './FinalFieldFocusTracker';

describe('FinalFieldFocusTracker', () => {
  const pageName = 'Main/URL entry page';
  it(
    'calls clickOrInteract with action: "Focus", formattedFieldName, and' +
      'pageName when active changes to formattedFieldName',
    () => {
      const clickOrInteract = jest.fn();
      const wrapper = mount(
        <FinalFieldFocusTracker
          trackFocus={true}
          trackBlur={false}
          fieldName="tracked"
          active={undefined}
          clickOrInteract={clickOrInteract}
          pageName={pageName}
          formattedFieldName="Tracked"
        />,
      );

      expect(clickOrInteract).not.toHaveBeenCalled();

      wrapper.setProps({ active: 'tracked' });

      expect(clickOrInteract).toHaveBeenCalledWith({
        action: 'Focus',
        props: { name: 'Tracked Field', page: pageName },
      });

      wrapper.setProps({ active: undefined });

      // trackBlur was false, don't call anything for Blur
      expect(clickOrInteract).toHaveBeenCalledTimes(1);
    },
  );

  it(
    'calls clickOrInteract with action: "Blur", formattedFieldName, and' +
      'pageName when active changes from formattedFieldName to something else',
    () => {
      const clickOrInteract = jest.fn();
      const wrapper = mount(
        <FinalFieldFocusTracker
          trackFocus={false}
          trackBlur={true}
          fieldName="tracked"
          active="tracked"
          clickOrInteract={clickOrInteract}
          pageName={pageName}
          formattedFieldName="Tracked"
        />,
      );

      expect(clickOrInteract).not.toHaveBeenCalled();

      wrapper.setProps({ active: 'somethingElse' });

      expect(clickOrInteract).toHaveBeenCalledWith({
        action: 'Blur',
        props: { name: 'Tracked Field', page: pageName },
      });

      wrapper.setProps({ active: 'tracked' });

      // trackFocus was false, don't call anything for Focus
      expect(clickOrInteract).toHaveBeenCalledTimes(1);
    },
  );
});
