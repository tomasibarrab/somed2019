import { AlertMessage, Button, StorefrontIcon } from 'gca-react-components';
import Dropzone, {
  ErrorCode,
  errorCodes,
  ImageFile,
} from 'gca-react-components/src/components/ImageDropzone/ImageDropzone';
import React, { Component } from 'react';
import { FormattedMessage } from 'react-intl';

import './Select.scss';

interface Props {
  minHeight?: number;
  minWidth?: number;
  onSelect(file: File): void;
}

interface State {
  errorCodes: ErrorCode[];
}

class Select extends Component<Props, State> {
  constructor(props: Props) {
    super(props);

    this.state = {
      errorCodes: [],
    };
  }

  public render() {
    return (
      <div>
        <AlertMessage display="block" type="warn" active={this.state.errorCodes.length > 0}>
          <FormattedMessage id={this.getErrorKey()} />
        </AlertMessage>

        <Dropzone
          className="photo-select"
          onDropAccepted={this.onDropAccepted}
          onDropRejected={this.onDropRejected}
          multiple={false}
          minHeight={this.props.minHeight}
          minWidth={this.props.minWidth}
        >
          <div className="photo-placeholder-container">
            <StorefrontIcon />
          </div>

          <div className="upload-message-container">
            <p className="upload-message">
              <FormattedMessage id="privatedining.enabled.v2.photo.modal.instructions" />
            </p>

            <Button
              theme="primary"
              onClick={() => {
                /* noop. Will bubble to Dropzone. */
              }}
            >
              <FormattedMessage id="privatedining.enabled.v2.photo.modal.select" />
            </Button>

            <p className="standards-text">
              <FormattedMessage id="privatedining.enabled.v2.photo.modal.standards" />
            </p>
          </div>
        </Dropzone>
      </div>
    );
  }

  private onDropAccepted = (acceptedFiles: ImageFile[]) => {
    this.props.onSelect(acceptedFiles[0]);
  };

  private onDropRejected = (rejectedFiles: ImageFile[]) => {
    this.setState({ errorCodes: rejectedFiles[0].errorCodes });
  };

  private getErrorKey(): string {
    if (
      this.state.errorCodes.includes(errorCodes.ImageHeightTooSmall) ||
      this.state.errorCodes.includes(errorCodes.ImageWidthTooSmall)
    ) {
      return 'privatedining.enabled.v2.photo.modal.errors.toosmall';
    }

    return 'privatedining.enabled.v2.photo.modal.errors.wrongtype';
  }
}

export default Select;
