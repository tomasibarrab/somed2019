import { AlertMessage } from 'gca-react-components';
import * as React from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { FlashMessage, resetFlashMessage } from '../store/promos/promos';
import { Dispatch, State } from '../store/types';

interface SP {
  flashMessage: FlashMessage | null;
}

interface DP {
  resetFlashMessage: () => void;
}

type Props = SP & DP;

const stringMap: { [key: string]: string } = {
  [FlashMessage.Published]: 'promos.flash.published',
  [FlashMessage.Removed]: 'promos.flash.removed',
  [FlashMessage.Saved]: 'promos.flash.saved',
};

class Flash extends React.Component<Props, {}> {
  public render() {
    const active = this.props.flashMessage !== null;
    const messageId = this.props.flashMessage || FlashMessage.Saved;

    return (
      <AlertMessage type="success" display="inline" active={active} onClose={this.props.resetFlashMessage} fadeOut>
        <FormattedMessage id={stringMap[messageId]} />
      </AlertMessage>
    );
  }
}

const mapState = (state: State) => ({
  flashMessage: state.promos.flashMessage,
});

const mapDispatch = {
  resetFlashMessage,
};

export default connect<SP, DP, {}>(mapState, mapDispatch)(Flash);

export { Flash as PureFlash };
