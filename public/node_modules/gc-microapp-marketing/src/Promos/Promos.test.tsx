import { shallow } from 'enzyme';
import * as React from 'react';
import promosFixture from '../../internals/fixtures/promosFixture';
import {
  isFeatured,
  isJoined,
  isSeasonal,
  isUnjoined,
  PROMO_FEATURED,
  PROMO_SEASONAL,
  PromoType,
} from '../store/promos/promos';

import { PurePromos } from './Promos';

/* eslint-disable comma-dangle */

describe('<Promos />', () => {
  // mock props to pass to component
  const props = {
    currentPromoId: 21,
    editPromo: () => ({}),
    intl: {
      formatMessage: ({ id }) => id,
    },
    joinedPromos: [] as any,
    promoType: PROMO_FEATURED as PromoType,
    unjoinedPromos: [] as any,
  };

  describe(' featured', () => {
    it('should display promos page with no promos', () => {
      props.promoType = PROMO_FEATURED;
      props.unjoinedPromos = [];
      props.joinedPromos = [];

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with only unjoined promos', () => {
      // get mock promos fixture data and filter to get only unjoined featured
      props.promoType = PROMO_FEATURED;
      const promos = promosFixture.promos;

      props.unjoinedPromos = promos.filter(promo => isFeatured(promo) && isUnjoined(promo));

      props.joinedPromos = [];

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with only joined promos', () => {
      props.promoType = PROMO_FEATURED;
      const promos = promosFixture.promos;

      props.unjoinedPromos = [];

      props.joinedPromos = promos.filter(promo => isFeatured(promo) && isJoined(promo));

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with both joined and unjoined promos', () => {
      props.promoType = PROMO_FEATURED;
      const promos = promosFixture.promos;

      props.unjoinedPromos = promos.filter(promo => isFeatured(promo) && isUnjoined(promo));

      props.joinedPromos = promos.filter(promo => isFeatured(promo) && isJoined(promo));

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });
  });

  describe(' seasonal', () => {
    it('should display promos page with no promos', () => {
      props.promoType = PROMO_SEASONAL;
      props.unjoinedPromos = [];
      props.joinedPromos = [];

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with only unjoined promos', () => {
      props.promoType = PROMO_SEASONAL;

      const promos = promosFixture.promos;

      props.unjoinedPromos = promos.filter(promo => isSeasonal(promo) && isUnjoined(promo));

      props.joinedPromos = [];

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with only joined promos', () => {
      props.promoType = PROMO_SEASONAL;
      const promos = promosFixture.promos;

      props.unjoinedPromos = [];

      props.joinedPromos = promos.filter(promo => isSeasonal(promo) && isJoined(promo));

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('should display promos page with both joined and unjoined promos', () => {
      props.promoType = PROMO_SEASONAL;
      const promos = promosFixture.promos;

      props.unjoinedPromos = promos.filter(promo => isSeasonal(promo) && isUnjoined(promo));

      props.joinedPromos = promos.filter(promo => isSeasonal(promo) && isJoined(promo));

      const wrapper = shallow(<PurePromos {...props} />);

      expect(wrapper).toMatchSnapshot();
    });
  });
});
