/* TODO: Add selectors for the dashboard app here */
import { get } from 'lodash';
import { createSelector } from 'reselect';

import { CampaignType } from '../../store/campaigns/campaigns.types';
import { State } from '../types';
import {
    AugmentedCampaignType, CampaignTotal, CoverTrends, CoverTypes, InsightsState, ISODateKey,
} from './insights.types';

export const getInsights = (state: State) => state.insights;

export const getCoverTrends = createSelector(
  getInsights,
  (insightsState: InsightsState) => get(insightsState, 'coverTrends.data', {}),
);

export const getCoversOverTime = createSelector(
  getCoverTrends,
  (coverTrends: CoverTrends) => {
    return get(coverTrends, 'covers_over_time', []);
  },
);

export const getCoverTrendsParams = createSelector(
  getInsights,
  (insightsState: InsightsState) => get(insightsState, 'coverTrends.params', {}),
);

export const getCoverTypes = createSelector(
  getInsights,
  (insightsState: InsightsState) =>
    get(insightsState, 'coverTypes.data', {
      domain: [],
      range: {},
    }),
);

export const getCampaigns = createSelector(
  getInsights,
  (insightsState: InsightsState): CampaignType[] => get(insightsState, 'campaigns.data', []),
);

export const getCampaignTotals = createSelector(
  getCoverTypes,
  (coverTypes: CoverTypes): CampaignTotal[] => {
    const { domain: coverTypeCampaignIdKeys, range: coversForCampaignTimeSeries } = coverTypes;

    return coverTypeCampaignIdKeys.reduce(
      (accumulator, coverTypeCIDKey) => {
        const { domain: dates, range: coverTypeSeries } = coversForCampaignTimeSeries[coverTypeCIDKey];

        if (dates.length === 0) {
          return accumulator;
        }

        const finalCampaignTotal = dates.reduce(
          (campaignTotal: CampaignTotal, date: ISODateKey, index: number) => {
            const singleDataPoint = coverTypeSeries[date];

            // API seems to contain redundant campaginIds and coverTypes in each CoverTypeSeriesDataPoint
            // We only need to set it once from one of them
            if (index === 0) {
              campaignTotal.campaignId = singleDataPoint.campaign_id;
            }

            // TODO: Add first time guests and out of town guests when ready
            campaignTotal.covers += singleDataPoint.covers;

            return campaignTotal;
          },
          {
            covers: 0,
          } as CampaignTotal,
        );

        if (finalCampaignTotal.campaignId) {
          accumulator.push(finalCampaignTotal);
        }
        return accumulator;
      },
      [] as CampaignTotal[],
    );
  },
);

export const getCampaignDetails = createSelector(
  getCampaigns,
  getCampaignTotals,
  (campaigns: CampaignType[], campaignTotals: CampaignTotal[]) => {
    if (campaigns.length !== campaignTotals.length) {
      return [];
    }
    /*
      For each campaign, match it up with the
      campaignTotal that has the same campaignId
    */

    const campaignsById: {
      [index: string]: AugmentedCampaignType;
    } = {};

    campaigns.forEach(campaign => {
      // Not a full AugmentedCampaign yet
      campaignsById[campaign.campaignId] = campaign as any;
    });

    campaignTotals.forEach(campaignTotal => {
      const { campaignId } = campaignTotal;
      campaignsById[campaignId] = {
        ...campaignsById[campaignId],
        ...campaignTotal,
        totalSpend: campaignTotal.covers * campaignsById[campaignId].pricingTier.price,
      };
    });

    return Object.values(campaignsById);
  },
);
