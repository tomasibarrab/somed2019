import 'rxjs/add/observable/of';

import moment from 'moment';
import qs from 'query-string';
import { Observable } from 'rxjs/Observable';
import { ajaxGetJSON, ajaxPatch, ajaxPost, ajaxPut } from 'rxjs/observable/dom/AjaxObservable';

import {
    CampaignType, CampaignTypes, PatchBudgetPayload, PatchCampaignDTO, PutSuppressionDatesDTO,
} from './campaigns/campaigns.types';
import {
    PostFlexiblePricingDataPayload, RevertToOriginalPricingPayload,
} from './flexiblepricing/flexiblepricing.types';
import { PatchGiftsUrlPayload } from './gifts/gifts.types';
import {
    BasicFetchOptions, FetchCoverTrendsOptions, FetchSummaryOptions,
} from './insights/insights.types';
import { SalesForceLead } from './leadgen/leadgen.types';
import { UpdatePromoBody } from './promos/promos.types';

export function postSalesForceLead({ rid, body }: { rid: number; body: SalesForceLead }) {
  return ajaxPost(`/admin/api/restaurant/${rid}/leads`, body, { 'Content-Type': 'application/json' });
}

export function fetchUser({ rid, email }: { rid: number; email: string }) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/users/${email}`);
}

export function fetchPrivateDiningEnabled({ rid }: { rid: number }) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/private-dining/enabled`);
}

export function fetchPrivateDiningDTO({ rid }: { rid: number }) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/private-dining`);
}

export function postPrivateDiningDTO({ rid, body }: { rid: number; body: any }) {
  return ajaxPost(`/admin/api/restaurant/${rid}/private-dining`, body, { 'Content-Type': 'application/json' });
}

export function fetchPhoto(url: string) {
  return Observable.create((observer: any) => {
    const img = new Image();
    img.src = url;

    img.onload = () => {
      observer.next(img);
      observer.complete();
    };

    img.onerror = err => {
      observer.error(err);
    };
  });
}

function getBlobFromObjectUrl(url: string, onload: (blob: Blob) => void, onerror: () => void) {
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  xhr.responseType = 'blob';

  xhr.onload = () => {
    if (xhr.status === 200) {
      onload(xhr.response);
    } else {
      onerror();
    }
  };

  xhr.onerror = onerror;

  xhr.send();
}

function postPhotoObservable(blobUrl: string, postUrl: string) {
  return Observable.create((observer: any) => {
    getBlobFromObjectUrl(
      blobUrl,
      (blob: Blob) => {
        const xhr = new XMLHttpRequest();
        xhr.open('POST', postUrl, true);
        xhr.setRequestHeader('Content-Type', 'application/octet-stream');
        xhr.send(blob);

        xhr.onload = e => {
          observer.next(e);
          observer.complete();
        };

        xhr.onerror = err => {
          observer.error(err);
        };
      },
      (err?) => {
        observer.error(err);
      },
    );
  });
}

export function postPhoto(rid: number, roomId: number, blobUrl: string) {
  return postPhotoObservable(blobUrl, `/admin/api/restaurant/${rid}/private-dining/room/${roomId}/photo`);
}

export function postThumbnail(rid: number, requestId: number, blobUrl: string) {
  return postPhotoObservable(blobUrl, `/admin/api/restaurant/${rid}/private-dining/thumbnail/${requestId}`);
}

export function fetchPromos({ rid }: { rid: number }) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/promos`);
}

interface UpdatePromoParams {
  rid: number;
  pid: number;
  body: UpdatePromoBody;
}

export function updatePromo({ rid, pid, body }: UpdatePromoParams) {
  return ajaxPut(`/admin/api/restaurant/${rid}/promos/${pid}`, body, { 'Content-Type': 'application/json' });
}

/*
let mockFetchIndex = 0;
const mockCampaignLength = mockCampaigns.length;
*/
// TODO: Remove mock data
export function fetchCampaign(rid: number, campaignId: number | string): Observable<CampaignType> {
  /*
  return Observable.of({
    ...mockCampaigns[mockFetchIndex++ % mockCampaignLength],
    campaignId: `${campaignId} - string version mock`,
    covers: undefined,
    daysAndTimes: undefined,
    firstTimeGuests: undefined,
    outOfTownGuests: undefined,
    rid,
    totalSpend: undefined,
  });
  */
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/campaign/${campaignId}`);
}

export function fetchCampaigns({
  rid,
  types,
  includeDetails,
}: {
  rid: number;
  types: CampaignTypes[];
  includeDetails?: boolean;
}) {
  let url = `/admin/api/restaurant/${rid}/campaigns?types=${types}`;
  if (includeDetails) {
    url = `${url}&includeDetails=true`;
  }
  return ajaxGetJSON(url);
}

export function createCampaign(rid: number, body: any) {
  return ajaxPost(`/admin/api/restaurant/${rid}/campaigns`, body, {
    'Content-Type': 'application/json',
  });
}

export function patchCampaign(rid: number, campaignId: string, body: PatchCampaignDTO) {
  return ajaxPatch(`/admin/api/restaurant/${rid}/campaign/${campaignId}`, body, { 'Content-Type': 'application/json' });
}

export function fetchGiftsUrl(rid: number) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/gifts`);
}

export function patchGiftsUrl(rid: number, body: PatchGiftsUrlPayload) {
  return ajaxPatch(`/admin/api/restaurant/${rid}/gifts`, body, { 'Content-Type': 'application/json' });
}

export function putSuppressionDates(rid: number, campaignId: string, body: PutSuppressionDatesDTO) {
  return ajaxPut(`/admin/api/restaurant/${rid}/campaign/${campaignId}/suppression-dates`, body, {
    'Content-Type': 'application/json',
  });
}

export function fetchPricingInfo(rid: number) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/pricing/info`);
}

export function fetchActiveContractPrices(rid: number) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/pricing/active-info`);
}

export function fetchVisibilitySettings(rid: number) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/pricing/settings`);
}

export function postVisibilitySettings(rid: number, payload: PostFlexiblePricingDataPayload) {
  return ajaxPost(`/admin/api/restaurant/${rid}/pricing/settings`, payload, { 'Content-Type': 'application/json' });
}

export function revertToOriginalPricing(rid: number, payload: RevertToOriginalPricingPayload) {
  const url = `/admin/api/restaurant/${rid}/pricing/settings`;
  const headers = { 'Content-Type': 'application/json' };

  /* No ajaxDelete function is available that accepts a body, even though the specification
     says that you may supply a body with a DELETE */
  return Observable.from(
    fetch(url, {
      body: JSON.stringify(payload),
      headers,
      method: 'DELETE',
    }),
  );
}

function transformOptionsWithDaysOfWeek(options) {
  return {
    ...options,
    daysOfWeek: (options.daysOfWeek || []).join(','),
  };
}

export function fetchCoverTrends(options: FetchCoverTrendsOptions & { rid: number }) {
  return ajaxGetJSON(
    `/gateway/long-proxies/reportingBiDatasources/api/v1/cover-trends-report/range/?${qs.stringify(
      transformOptionsWithDaysOfWeek(options),
    )}`,
  );
}

export function fetchReservationSummary(options: FetchSummaryOptions & { rid: number }) {
  return ajaxGetJSON(
    `/gateway/long-proxies/reportingBiDatasources/api/v3/reservations/summary/?${qs.stringify(
      transformOptionsWithDaysOfWeek(options),
    )}`,
  );
}

export function fetchCoverTypes(options: BasicFetchOptions & { rid: number }) {
  return ajaxGetJSON(
    `/gateway/proxies/reportingBiDatasources/api/v1/cover-types-covers/range/?${qs.stringify(options)}`,
  );
}

export function patchBudget(campaignId: string, rid: number, body: PatchBudgetPayload) {
  return ajaxPatch(`/admin/api/restaurant/${rid}/campaigns/${campaignId}/budget`, body, {
    'Content-Type': 'application/json',
  });
}

export function fetchCredits(rid: number) {
  const month = moment().format('YYYY-MM');
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/credits?month=${month}`);
}

export function fetchSpend(rid: number, campaignId: string) {
  return ajaxGetJSON(`/admin/api/restaurant/${rid}/campaigns/${campaignId}/monthly-spend`);
}
