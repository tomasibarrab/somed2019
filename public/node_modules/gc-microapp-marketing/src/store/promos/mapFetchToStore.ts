import merge from 'gca-react-components/src/utils/merge';
import { cleanString } from 'gca-react-components/src/utils/string';
import keyBy from 'lodash/keyBy';
import { PromoType } from './promos';
import {
  Promo,
  PromoRestaurant,
  Promos,
  RawPromo,
  RawPromos,
  RawRestaurantPromo,
  RestaurantPromo,
} from './promos.types';

// Promo dates come in as full datetime strings, but we only want the day, so that we use the browser timezone
// e.g. 2017-12-21T00:00:00 => 2017-12-21
const trimUTCtoDay = (date: string) => date.substr(0, 10);

export const promoIsLiveNow = (promo: RawRestaurantPromo): boolean => {
  const now = new Date();
  if (promo.promo.type === PromoType.Featured) {
    return true;
  } else {
    return (
      now >= new Date(trimUTCtoDay(promo.promo.displayLinkDates.start)) &&
      now <= new Date(trimUTCtoDay(promo.promo.eventDates.start))
    );
  }
};

export const transformPromoRestaurant = (promoRestaurant: PromoRestaurant, promo: RawPromo): PromoRestaurant =>
  merge(promoRestaurant, {
    // ALERT: Promo Admin Service does not yet reset these flags after promo expires.
    isActive: promoRestaurant.isActive && promo.eventDates.end > new Date().toISOString().substr(0, 10),
    message: cleanString(promoRestaurant.message),
  });

export const transformRawRestaurantPromo = (promo: RawRestaurantPromo): RestaurantPromo =>
  merge(promo, {
    promo: {
      displayLinkDates: {
        end: trimUTCtoDay(promo.promo.displayLinkDates.end),
        start: trimUTCtoDay(promo.promo.displayLinkDates.start),
      },
      eventDates: {
        end: trimUTCtoDay(promo.promo.eventDates.end),
        start: trimUTCtoDay(promo.promo.eventDates.start),
      },
      liveNow: promoIsLiveNow(promo),
    },
    promoRestaurant: promo.promoRestaurant ? transformPromoRestaurant(promo.promoRestaurant, promo.promo) : null,
  });

export const mapFetchToStore = (response: RawPromos): Promos =>
  merge(response, {
    promos: keyBy(response.promos.map(transformRawRestaurantPromo), 'id'),
  });

export default mapFetchToStore;
