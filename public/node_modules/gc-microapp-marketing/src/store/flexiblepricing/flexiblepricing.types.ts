import { ApprovalInfo, SuppressionDates } from '../campaigns/campaigns.types';
import { AsyncData } from '../types';

export const USD = 'USD';

///////////
// ENUMS //
///////////

export enum ButtonType {
  Back = 'Back',
  Finish = 'Finish',
  LearnMore = 'LearnMore',
  Skip = 'Skip',
  Summary = 'Summary',
  Switch = 'Switch',
  WhyLessDiners = 'WhyLessDiners',
}

export enum VisibilityType {
  Increase = 'increase',
  Reduce = 'reduce',
  Standard = 'standard',
}

export enum FlexiblePricingPageType {
  Summary = 'summary',
  VisibilitySettings = 'visibilitySettings',
  SuccessRevert = 'successRevert',
  SuccessSignup = 'successSignup',
  SuccessEdit = 'successEdit',
}

export enum Days {
  Sunday = 'sunday',
  Monday = 'monday',
  Tuesday = 'tuesday',
  Wednesday = 'wednesday',
  Thursday = 'thursday',
  Friday = 'friday',
  Saturday = 'saturday',
}

export enum Times {
  Morning = 'morning',
  Midday = 'midDay',
  Evening = 'evening',
}

export enum PricingLevels {
  Increase = 'increasePrice',
  Reduce = 'decreasePrice',
}

export enum FromType {
  Direct = 'otreso',
  Discovery = 'discovery',
  RestRef = 'restRef',
}

export enum PlanType {
  CurrentPrice = 'currentPrice',
  FlexiblePricing = 'flexPrice',
}

export enum OldFromTypes {
  OpenTable = 'otreso',
  RestRef = 'restRef',
}

export enum SummaryType {
  PreCommitFirstRun,
  PreCommitEdit,
  ShowExisting,
}

export enum VisibilitySettingsBackButtonType {
  ToEducationPage,
  ToSummaryPage,
}

export enum TermsType {
  FirstRun,
  Edit,
}

//////////////////
// PRICING INFO //
//////////////////

export type VisibilityTypePrices = { [type in VisibilityType]: Price };

export interface Price {
  amount: number;
  currencyCode: string;
}

/* Typescript 3 could clean this up, same problem w/ Enum as above. */
export interface PricingInfo {
  currencyCode: string;
  otreso: Covers;
  discovery: Covers & {
    increasePrice: Price;
    decreasePrice?: Price;
  };
  month: string;
  restRef: Covers & { flatFee: boolean };
  system?: PriceByPlan;
}

/* This first line forms the index signature that allows us to index into
  PricingInfoResponse with any of the values of the ResponseFromType enum.

  We also get the ability make cleaner transformers by storing the mapping between
  property names from external to internal types in one place. */
export type PriceByPlan = { [planType in PlanType]: Price };

export type OldPrices = { [oldFromType in OldFromTypes]: Price } & { system?: Price };

export type Covers = PriceByPlan & {
  covers: number;
};

/////////////////////////
// VISIBILITY SETTINGS //
/////////////////////////

export type DaySchedule = { [time in Times]?: boolean };

export type VisibilitySchedule = { [day in Days]: DaySchedule };

export interface VisibilityTypeSettings {
  price: Price;
  schedule: VisibilitySchedule;
}

export interface IncreaseVisibilityTypeSettings extends VisibilityTypeSettings {
  monthlyBudget?: Price;
  suppressionDates: SuppressionDates;
}

export interface VisibilitySettings {
  increase?: IncreaseVisibilityTypeSettings;
  standard: VisibilityTypeSettings;
  reduce?: VisibilityTypeSettings;
  /* This works in TypeScript 3 but not ours, 2.6.2
  [VisibilityType.Increase]: IncreaseVisibilityTypeSettings;
  [VisibilityType.Standard]: VisibilityTypeSettings;
  [VisibilityType.Reduce]: VisibilityTypeSettings;
  */
}

export interface VisibilitySettingsMetadata {
  rid: number;
  startDate: string;
  changedByUser: string;
  restaurantContactName: string;
  restaurantContactEmail: string;
  currentVersion?: number;
}

export type FormVisibilitySettings = VisibilitySettings & {
  enable: {
    increase: boolean;
    monthlyBudget: boolean;
    reduce: boolean;
  };
};

///////////
// STATE //
///////////

export interface FlexiblePricingState {
  appInitialized: boolean;
  pricingInfo: AsyncData<PricingInfo>;
  activeContract: AsyncData<ActiveContractPrices>;
  visibilitySettings: AsyncData<VisibilitySettingsResponse>;
  sendingSettings: boolean;
  formVisibilitySettings?: FormVisibilitySettings;
  pageType: FlexiblePricingPageType;
}

///////////////
// RESPONSES //
///////////////

export type PricingInfoResponse = PricingInfo & {
  rid: number;
  month: string;
};

export type VisibilitySettingsResponse = VisibilitySettingsMetadata & VisibilitySettings;

export interface ActiveContractPrices {
  currencyCode?: string;
  restref?: number;
  otreso?: number;
  discoveryReduced?: number;
  discoveryStandard?: number;
  discoveryIncreased?: number;
  systemFee?: number;
}

/////////////////////
// ACTION PAYLOADS //
/////////////////////

export interface PostFlexiblePricingDataPayload {
  approvalInfo: ApprovalInfo;
  data: FormVisibilitySettings | VisibilitySettingsResponse;
  isEdit?: boolean;
}

export interface FetchPricingInfoPayload {
  firstFetch?: boolean;
}

export interface SetFormVisibilityLevelEnabledPayload {
  visibilityType: VisibilityType.Increase | VisibilityType.Reduce;
  value: boolean;
}

export interface SetDayAndTimeForVisibilityTypePayload {
  visibilityType: VisibilityType;
  day: Days;
  time: Times;
  value: boolean;
}

export interface RevertToOriginalPricingPayload {
  changedByUser: string;
  currentVersion: number;
  campaignApprovalInfo: ApprovalInfo;
}

//////////////////////////////
// USER DEFINED TYPE GUARDS //
//////////////////////////////

export const isVisibilitySettingsResponse = (
  arg: FormVisibilitySettings | VisibilitySettingsResponse,
): arg is VisibilitySettingsResponse => {
  if ('restaurantContactName' in arg) {
    return true;
  }
  return false;
};

export const isFormVisibilitySettings = (
  arg: FormVisibilitySettings | VisibilitySettingsResponse,
): arg is FormVisibilitySettings => {
  if ('enable' in arg) {
    return true;
  }
  return false;
};
