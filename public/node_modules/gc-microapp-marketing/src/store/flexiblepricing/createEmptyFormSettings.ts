import {
  Days,
  DaySchedule,
  FormVisibilitySettings,
  Price,
  Times,
  VisibilitySchedule,
  VisibilitySettings,
  VisibilityType,
  VisibilityTypePrices,
} from './flexiblepricing.types';

export const createEmptySchedule = () => {
  return {
    [Days.Sunday]: {},
    [Days.Monday]: {},
    [Days.Tuesday]: {},
    [Days.Wednesday]: {},
    [Days.Thursday]: {},
    [Days.Friday]: {},
    [Days.Saturday]: {},
  };
};

export const createFullSchedule = () => {
  const schedule: VisibilitySchedule = {} as VisibilitySchedule;
  Object.values(Days).forEach((day: Days) => {
    schedule[day] = {} as DaySchedule;
    Object.values(Times).forEach((time: Times) => {
      schedule[day][time] = true;
    });
  });

  return schedule;
};

export const createEmptyIncreaseSettings = (increasePrice: Price) => {
  return {
    monthlyBudget: {
      amount: 0,
      currencyCode: increasePrice.currencyCode,
    },
    price: increasePrice,
    schedule: createEmptySchedule(),
    suppressionDates: {
      custom: [] as any[],
      default: [
        'thanksgiving_day_us',
        'christmas_eve',
        'christmas_day',
        'new_years_eve',
        'new_years_day',
        'valentines_day',
        'mothers_day_us',
      ],
    },
  };
};

export const createEmptyVisibilitySettings = (price: Price) => {
  return {
    price,
    schedule: createEmptySchedule(),
  };
};

export const createEmptyFormSettings = (discoveryPrices: VisibilityTypePrices) => {
  return {
    [VisibilityType.Increase]: createEmptyIncreaseSettings(discoveryPrices[VisibilityType.Increase]),
    [VisibilityType.Standard]: createEmptyVisibilitySettings(discoveryPrices[VisibilityType.Standard]),
    [VisibilityType.Reduce]: createEmptyVisibilitySettings(discoveryPrices[VisibilityType.Reduce]),
    enable: {
      increase: false,
      monthlyBudget: false,
      reduce: false,
    },
  };
};
