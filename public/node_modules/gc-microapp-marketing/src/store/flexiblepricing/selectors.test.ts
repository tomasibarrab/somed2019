import makeMockState from './makeMockState';
import selectors from './selectors';

describe('selectors', () => {
  const state: any = makeMockState();

  [
    'getCurrencyCode',
    'getDifference',
    'getExpectedDiscoveryPrices',
    'getExpectedFlatFee',
    'getExpectedDirectPricePerCover',
    'getNewIncreasedVisibilityPricePerCover',
    'getExpectedPricingInfo',
    'getTotals',
    'getVisibilitySettings',
    'getShownFlexPrices',
    'getIsUpdatingPricing',
    'getInUseDiscoveryPriceRange',
  ].forEach(selector => {
    test(selector, () => {
      expect(selectors[selector](state)).toMatchSnapshot();
    });
  });

  test('getFlatFee returns true', () => {
    expect(selectors.getExpectedFlatFee(makeMockState({ hasFlatFee: true }))).toMatchSnapshot();
  });

  describe('getShownFlexPrices', () => {
    it('returns prices made from pricingInfo from state if hasSettings is false', () => {
      const stateWithSettings = makeMockState();

      stateWithSettings.flexiblePricing.visibilitySettings.data = undefined;

      expect(selectors.getShownFlexPrices(stateWithSettings)).toMatchSnapshot();
    });
  });

  describe('getIsUpdatingPricing', () => {
    it('returns true when any value of [currencyCode, otreso, minPrice, maxPrice] is missing', () => {
      const stateWithSettingsAndMissingPrices = makeMockState();

      stateWithSettingsAndMissingPrices.flexiblePricing.activeContract.data = {};

      expect(selectors.getIsUpdatingPricing(stateWithSettingsAndMissingPrices)).toMatchSnapshot();
    });
  });
});
