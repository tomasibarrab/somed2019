/* From PI Service, like a single checkbox. */
export interface ShiftAndDay {
  startTime: string;
  endTime: string;
  dayOfWeek: string;
}

/* A 'Row', consisting of one time range, and one or more days. */
export interface ShiftAndDays {
  daysOfWeek: string[];
  endTime: string;
  startTime: string;
}

export enum BadgeType {
  Resuming = 'resuming',
  Ending = 'ending',
}

export enum EndDateType {
  Campaign,
  Reservation,
}

export enum CampaignState {
  Discarded = 'discarded',
  Draft = 'draft',
  Ended = 'ended',
  Live = 'live',
  Paused = 'paused',
}

export enum CampaignGroup {
  Active = 'active',
  Inactive = 'inactive',
  Paused = 'paused',
  Pending = 'pending',
  Recommended = 'recommended',
}

export interface ModalState {
  type: ModalType;
  campaign: CampaignType;
}

export interface CampaignsType {
  create: {
    modal?: CreationTermsModalState;
    pending: boolean;
    success?: boolean;
  };
  error: boolean;
  list: CampaignType[];
  loading: boolean;
  modal?: ModalState;
  pageType: Pages;
  showNotifyPopup?: boolean;
  success: boolean;
}

export interface Schedule {
  startTime: string;
  endTime: string;
  dayOfWeek: string;
}

export interface CustomSuppressionDate {
  startDate: string;
  endDate: string;
  label?: string;
}

export interface DefaultSuppressionDateDescription {
  endDate: string;
  id: string;
  label: string;
  startDate: string;
}

export interface SuppressionDates {
  default: string[];
  custom: CustomSuppressionDate[];
}

export interface PatchActionPayload {
  state: string;
  campaignId: string;
  approvalInfo?: ApprovalInfo;
  campaignDiscardInfo?: DiscardInfo;
  refetchCampaigns?: boolean;
}

export interface PatchBudgetPayload {
  campaignId?: string;
  monthlyBudget: number;
  changedByUser: string;
}

export interface CreditsResponse {
  coverPrice: number;
  creditAmount: number;
  currencyCode: string;
  rid: number;
  activeCustomPromotion: boolean;
}

export interface CreditsModel {
  coverPrice: number;
  creditAmount: number;
}

export interface SpendModel {
  yearMonth: string;
  spend: number;
  covers: number;
}

export interface DiscardInfo {
  description?: string;
  action: DiscardActionTypes;
}

export enum DiscardActionTypes {
  RequestChange = 'request_change',
  Remove = 'remove',
}

export interface OpenCreationTermsModalPayload {
  formValuesSnapshot: any;
}

export type CreationTermsModalState = OpenCreationTermsModalPayload;

export interface TermsAndConditionsLink {
  id: string;
  link: string;
}

export interface ApprovalInfo {
  name: string;
  email: string;
  restaurantLegalName: string;
  browserInfo: string;
  linkToTerms: string;
}

export interface CreateActionPayload {
  approvalInfo: ApprovalInfo;
  formValues: any;
  refetchCampaigns?: Pages;
}

export interface FetchCampaignsOptions {
  pageType?: Pages;
}

export interface PutSuppressionDatesPayload extends SuppressionDates {
  campaignId: string;
}

export interface PatchCampaignDTO {
  state: string;
  changedByUser: string;
  campaignApprovalInfo?: ApprovalInfo;
  campaignDiscardInfo?: DiscardInfo;
}

export interface PutSuppressionDatesDTO extends SuppressionDates {
  changedByUser: string;
}

export const enum Pages {
  CustomPromotions = 'CustomPromotions',
  FlexiblePricing = 'FlexiblePricing',
  PromotedResults = 'PromotedResults',
  Specials = 'Specials',
}

export const enum CampaignTypes {
  CustomPromotions = 'paid_search',
  PromotedResults = 'promoted_results',
  LegacyPromotedOffer = 'legacy_promoted_offer',
  Special = 'display_offer',
}

export const enum DisplaySpecialTypes {
  HappyHour = 'happy_hour',
  ComplimentaryDrink = 'complimentary_drink',
  ComplimentaryAppetizer = 'complimentary_appetizer',
}

export enum ModalType {
  Pause,
  End,
  EditBlockedDays,
  EditBudget,
  RequestChange,
  Approve,
  Restart,
}

export interface CurrentBudgetType {
  cap: number;
  covers: number;
  credits: number;
  price: number;
  spend: number;
}

export interface OpenModalPayload {
  type: ModalType;
  campaign: CampaignType;
  currentBudget?: CurrentBudgetType;
}

export interface Incentive {
  name: string;
  description: string;
  offerTypeName?: string;
  noteToDiners?: string;
  typeId?: any;
}

export interface UserFacingCampaignInformation {
  type: CampaignTypes;
  startDate: string; // String representation of a date
  endDate: string;
  suppressionDates: SuppressionDates; // SuppressionDates;
  schedule: Schedule[];
  recommendation?: Recommendation;
}

export interface CampaignPricingInformation {
  monthlyBudget?: number;
  maxBid?: number;
  pricingTier: PricingTier;
}

export interface PricingTier {
  tier: string;
  currencyCode: string;
  price: number;
}

export interface Recommendation {
  messageToRestaurant: string;
  recommendedBy: string;
}

export interface CampaignMetadata {
  ccEmails: string[];
  campaignId: string;
  rid: number;
  currentVersion: string;
  state: CampaignState;
  createdTimestamp: string; // String representation of a timestamp
  changedTimestamp: string;
  changedByUser: string;
  restaurantContactName: string;
  restaurantContactEmail: string;
  createdByEmail: string;
  createdChannel: string;
  draftTimestamp: string;
  isShortTerm: boolean;
  approvedByEmail: string;
  endTimestamp: string;
  liveTimestamp: string;
  pauseUntil: string;
  targets: string[];
  incentives: Incentive[];
  needsDecisionMakerApproval: boolean;
  flexiblePricingVisibility?: string;
}

export type CampaignType = UserFacingCampaignInformation & CampaignPricingInformation & CampaignMetadata;
