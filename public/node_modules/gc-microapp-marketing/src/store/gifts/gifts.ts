import { selectors, User } from 'gca-react-components/src/redux-modules/currentContext';
import { combineEpics } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import { Action, actionCreatorFactory } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import '../commonRxjs';
import { Epic, State } from '../types';
import {
  ClickOrInteractPayload,
  FetchGiftsUrlResult,
  GiftsPageType,
  GiftsState,
  OpenTermsModalPayload,
  PatchGiftsUrlPayload,
  ShowPagePayload,
} from './gifts.types';

// --------------------------------- //
// Actions
// --------------------------------- //

const actionCreator = actionCreatorFactory('GIFTS');

const fetchGiftsUrl = actionCreator.async<undefined, FetchGiftsUrlResult, boolean>('FETCH');
const patchGiftsUrl = actionCreator.async<PatchGiftsUrlPayload, boolean, boolean>('PATCH');
const openTermsModal = actionCreator<OpenTermsModalPayload>('OPEN_TERMS_MODAL');
const closeTermsModal = actionCreator('CLOSE_TERMS_MODAL');
const showPage = actionCreator<ShowPagePayload>('SHOW_PAGE');

const clickOrInteract = actionCreator<ClickOrInteractPayload>('CLICK_CALL_TO_ACTION');

export const actions = {
  clickOrInteract,
  closeTermsModal,
  fetchGiftsUrl,
  openTermsModal,
  patchGiftsUrl,
  showPage,
};

// --------------------------------- //
// Reducer
// --------------------------------- //

export const initialState: GiftsState = {
  error: false,
  loading: false,
  pageType: GiftsPageType.UrlEntryPage,
  patchPending: false,
  success: false,
};

export const reducer = reducerWithInitialState(initialState)
  .case(fetchGiftsUrl.started, state => ({
    ...state,
    loading: true,
  }))
  .case(fetchGiftsUrl.done, (state, { result: { url } }) => {
    return {
      ...state,
      loading: false,
      pageType: url === false ? GiftsPageType.LandingPage : GiftsPageType.UrlEntryPage,
      success: true,
      url: url === false ? undefined : url,
    };
  })
  .case(fetchGiftsUrl.failed, state => ({
    ...state,
    error: true,
    loading: false,
  }))
  .case(patchGiftsUrl.started, state => ({
    ...state,
    patchPending: true,
  }))
  .case(patchGiftsUrl.done, (state, { params: { url } }) => ({
    ...state,
    modal: undefined,
    patchPending: false,
    url,
  }))
  .case(patchGiftsUrl.failed, state => ({
    ...state,
    error: true,
  }))
  .case(showPage, (state, { pageType }) => ({
    ...state,
    pageType,
  }))
  .case(openTermsModal, (state, { url }) => ({
    ...state,
    modal: {
      proposedUrl: url,
    },
  }))
  .case(closeTermsModal, state => ({
    ...state,
    modal: undefined,
  }));

// --------------------------------- //
// Epics
// --------------------------------- //

export const fetchGiftsUrlEpic: Epic = (action$, store, { api }) =>
  action$.ofType(fetchGiftsUrl.started.type).switchMap(() => {
    const state: State = store.getState();
    const rid: number = selectors.rid(state);
    return api
      .fetchGiftsUrl(rid)
      .map((response: { url: string | false }) => fetchGiftsUrl.done({ params: undefined, result: response }))
      .catch(() => [fetchGiftsUrl.failed({ params: undefined, error: true })]);
  });

export const patchGiftsUrlEpic: Epic = (action$, store, { api }) =>
  action$.ofType(patchGiftsUrl.started.type).switchMap(({ payload }) => {
    const state: State = store.getState();
    const rid: number = selectors.rid(state);
    const params: any = {
      ...payload,
      restaurantName: selectors.restaurant(state).name,
    };
    return api
      .patchGiftsUrl(rid, params)
      .mergeMap(() => {
        const tasks: Array<Action<any>> = [patchGiftsUrl.done({ params, result: true })];
        if (!payload.isEdit) {
          tasks.push(showPage({ pageType: GiftsPageType.FinishedPage }));
        }
        return Observable.from(tasks);
      })
      .catch(() => [patchGiftsUrl.failed({ params, error: true })]);
  });

export const giftsEpic = combineEpics(fetchGiftsUrlEpic, patchGiftsUrlEpic);
