/* tslint:disable */
import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';
import { of } from 'rxjs/observable/of';

import { fetchUser, fetchUserEpic, initialState, reducer } from './user';

describe('user info reducer', () => {
  it('fetch user info request ', () => {
    const action = { type: fetchUser.started.type };
    const mockState = initialState;
    const expectedResult = { ...mockState, loading: true };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch user info success', () => {
    const expectedPayload = { phone: '1234567890', firstName: 'B.B.', lastName: 'Wolf', email: 'foo@bar.com' };
    const action = { type: fetchUser.done.type, payload: { params: {}, result: expectedPayload } };
    const mockState = initialState;
    const expectedResult = { ...mockState, ...expectedPayload, success: true };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch user info error', () => {
    const action = { type: fetchUser.failed.type };
    const mockState = initialState;
    const expectedResult = { ...mockState, error: true };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });
});

describe('fetchUserEpic', () => {
  const state = {
    currentContext: {
      restaurant: {
        rid: 123,
      },
      user: {
        userName: 'bigbad@wolf.com',
      },
    },
  };

  const mockUserInfo = {
    firstName: 'B.B.',
    lastName: 'Wolf',
    phone: '1234567890',
  };

  const dependencies = { api: { fetchUser: () => of(mockUserInfo) } };
  const rootEpic = (action$, store) => fetchUserEpic(action$, store, dependencies);
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let fakeStore;
  afterEach(() => {
    epicMiddleware.replaceEpic(rootEpic);
  });

  it('should fetch user info', () => {
    // setup store with default empty private dining state
    fakeStore = mockStore({
      ...state,
      user: mockUserInfo,
    });

    fakeStore.dispatch(fetchUser.started({}));
    expect(fakeStore.getActions()).toEqual([
      fetchUser.started({}),
      fetchUser.done({ params: {}, result: mockUserInfo }),
    ]);
  });
});
