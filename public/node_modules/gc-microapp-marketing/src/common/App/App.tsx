import './App.scss';

import { AsyncContent, Layout } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { initializeGcScope } from 'gca-react-components/src/redux-modules/initializeApp';
/**
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 */
import get from 'lodash/get';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Redirect, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';
import { getGcScope } from 'shared-utils/gcScope';
// tslint:disable-next-line:max-line-length
import { fetchRestaurantPIProperties } from '../../../../../shared_modules/shared-pi-properties-store/restaurantPIProperties';

import Gifts from '../../Gifts/Gifts';
import renderGuestCampaigns from '../../GuestCampaigns/render-guest-campaigns';
import PrivateDining from '../../PrivateDining/PrivateDining';
import Featured from '../../Promos/Featured';
import Seasonal from '../../Promos/Seasonal';
import CustomPromotions from '../../PromotedInventory/CustomPromotions';
import FlexiblePricing from '../../PromotedInventory/FlexiblePricing/FlexiblePricing';
import Insights from '../../PromotedInventory/Insights/Insights';
import isOpenTableEmail from '../../PromotedInventory/isOpenTableEmail';
import Specials from '../../PromotedInventory/Specials';
import { State } from '../../store/types';
import MainNav from '../MainNav/MainNav';

export const enum Routes {
  CustomPromotions = '/custom-promotions',
  Featured = '/featured',
  FlexiblePricing = '/flexible-pricing',
  GuestCampaigns = '/guest-campaigns',
  Insights = '/insights',
  PrivateDining = '/private-dining',
  Seasonal = '/seasonal',
  Specials = '/specials',
  Gifts = '/gifts',
}

interface SP {
  loading: boolean;
  error: boolean;
  featureToggles: FeatureToggles;
  shouldShowInsightsTab: boolean;
}
interface DP {
  fetchRestaurantPIPropertiesStarted: typeof fetchRestaurantPIProperties.started;
  initializeGcScope: (payload: any) => void;
}
type OP = RouteComponentProps<{}>;
type Props = SP & DP & OP & InjectedIntlProps;

class App extends React.Component<Props, { shouldShowInsightsTab: boolean }> {
  public render() {
    const { formatMessage } = this.props.intl;
    const { shouldShowInsightsTab } = this.props;

    return (
      <Layout title={formatMessage({ id: 'app.title' })}>
        <MainNav />

        <AsyncContent
          isLoading={this.props.loading}
          isError={this.props.error}
          errorTitle={formatMessage({ id: 'app.errorTitle' })}
          errorMessage={formatMessage({ id: 'app.errorMessage' })}
        >
          <Switch>
            {shouldShowInsightsTab && <Route path={Routes.Insights} component={Insights} />}
            <Route path={Routes.FlexiblePricing} component={FlexiblePricing} />
            <Route path={Routes.CustomPromotions} component={CustomPromotions} />
            <Route path={Routes.GuestCampaigns} render={renderGuestCampaigns} />
            <Route path={Routes.Specials} component={Specials} />
            <Route path={Routes.Seasonal} component={Seasonal} />
            <Route path={Routes.Featured} component={Featured} />
            <Route path={Routes.PrivateDining} component={PrivateDining} />
            <Route path={Routes.Gifts} component={Gifts} />
            <Redirect to={this.setDefaultRoute()} />
          </Switch>
        </AsyncContent>
      </Layout>
    );
  }

  public componentDidMount() {
    const gcScope = getGcScope(window);

    const rid = parseInt(gcScope.id as any, 10);
    this.props.initializeGcScope(getGcScope(window));
    this.props.fetchRestaurantPIPropertiesStarted(rid);
  }

  private setDefaultRoute() {
    const { shouldShowInsightsTab } = this.props;
    const {
      featureGcaPiCustomPromotions,
      featureGcaPiFlexiblePricing,
    } = this.props.featureToggles.features;

    if (featureGcaPiFlexiblePricing) {
      if (shouldShowInsightsTab) {
        return Routes.Insights;
      }
      return Routes.FlexiblePricing;
    }
    if (featureGcaPiCustomPromotions) {
      return Routes.CustomPromotions;
    }

    return Routes.GuestCampaigns;
  }
}

const mapState = (state: State): SP => {
  const {
    features: { featureGcaPiFlexiblePricing, featureGcaPiInsights, featureGcaPiInsightsInternalTesting },
  } = state.featureToggles;
  const email = get(selectors.user(state), 'userName', '');
  const isInternal = isOpenTableEmail(email);

  return {
    error: selectors.currentContext(state).fetchFailed,
    featureToggles: state.featureToggles,
    loading:
      selectors.currentContext(state).isFetching ||
      state.featureToggles.isFetching ||
      state.restaurantPIProperties.loading,
    shouldShowInsightsTab:
      (featureGcaPiFlexiblePricing && featureGcaPiInsights) || (isInternal && featureGcaPiInsightsInternalTesting),
  };
};

const mapDispatch = {
  fetchRestaurantPIPropertiesStarted: fetchRestaurantPIProperties.started,
  initializeGcScope,
};

const WithIntl = injectIntl<Props>(App);
const Connected = connect<SP, DP, OP>(
  mapState,
  mapDispatch,
)(WithIntl);
const WithRouter = withRouter(Connected);

export default WithRouter;
export { App as PureApp };
