import { AsyncContent } from 'gca-react-components';
import { Button, Panel } from 'gca-react-components';
import * as React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
import { Dispatch, State } from '../../store/types';

import { LeadGenType, Status } from '../../store/leadgen/leadgen.types';
import { LeadGenForm } from '../../store/leadgen/leadgenForm';
import { fetchUser } from '../../store/user/user';
import EditLeadGenForm from '../LeadGen/EditLeadGenForm';
import LeadGenRequested from './LeadGenRequested';

import './LeadGen.scss';

interface SP {
  done: boolean;
  failed: boolean;
  loading: boolean;
  requested: boolean;
}

interface DP {
  fetchUserRequest: () => void;
}

interface OP {
  type: LeadGenType;
  children: React.ReactElement<any>;
}

type Props = SP & DP & OP & InjectedIntlProps;

class LeadGen extends React.Component<Props, {}> {
  public constructor(props: Props) {
    super(props);
  }

  public componentDidMount() {
    if (!this.props.done) {
      this.props.fetchUserRequest();
    }
  }

  public render() {
    return (
      <AsyncContent
        isLoading={this.props.loading}
        isError={this.props.failed}
        errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
        errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
      >
        <section className="leadgen-container">
          {React.Children.only(this.props.children)}
          <div className="leadgen-actions-container">
            {this.props.requested ? (
              <LeadGenRequested type={this.props.type} />
            ) : (
              <EditLeadGenForm type={this.props.type} />
            )}
          </div>
        </section>
      </AsyncContent>
    );
  }
}

const mapState = (state: State, ownProps: OP) => ({
  done: state.user.success || state.user.error,
  failed: state.leadGen.status === Status.Failed,
  loading: state.user.loading,
  requested: state.leadGen.requested[ownProps.type],
});

const mapDispatch = {
  fetchUserRequest: fetchUser.started,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl(LeadGen));
export { LeadGen as PureLeadGen };
