import { Button, InputField, LabelGroup, orderNamesByLocale } from 'gca-react-components';
import { selectors as localeSelector } from 'gca-react-components/src/redux-modules/languageProvider';
import get from 'lodash/get';
import reduce from 'lodash/reduce';
import * as React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { FormErrors, InjectedFormProps, reduxForm } from 'redux-form';

import { createSalesForceLead } from '../../store/leadgen/leadgen';
import { LeadGenType, Status } from '../../store/leadgen/leadgen.types';
import { LeadGenForm, leadGenFormDefaults } from '../../store/leadgen/leadgenForm';
import { State } from '../../store/types';
import { userSelector } from '../../store/user/user';
import { User } from '../../store/user/user.types';
import testEmail from '../testEmail';

import './EditLeadGenForm.scss';

export const LEADGEN_FORM = 'leadgen';

interface FieldProperty {
  fieldName: string;
  labelId: string;
}

interface FieldPropertiesMap {
  EmailAddress: FieldProperty;
  FirstName: FieldProperty;
  LastName: FieldProperty;
  PhoneNumber: FieldProperty;
}

const Form: FieldPropertiesMap = {
  EmailAddress: {
    fieldName: 'email',
    labelId: 'label.emailAddress',
  },
  FirstName: {
    fieldName: 'firstName',
    labelId: 'label.firstName',
  },
  LastName: {
    fieldName: 'lastName',
    labelId: 'label.lastName',
  },
  PhoneNumber: {
    fieldName: 'phone',
    labelId: 'label.phoneNumber',
  },
};

interface OP {
  type: LeadGenType;
}

interface SP {
  initialValues: Partial<User>;
  locale: string;
  updating: boolean;
}

type BaseProps = OP & SP & InjectedIntlProps;
type FormProps = InjectedFormProps<LeadGenForm, BaseProps>;
type Props = BaseProps & FormProps;

class EditLeadGenForm extends React.Component<Props, {}> {
  public render() {
    const [localeFirstName, localeSecondName] = orderNamesByLocale(
      {
        firstName: Form.FirstName,
        lastName: Form.LastName,
      },
      this.props.locale,
    );

    return (
      <form onSubmit={this.props.handleSubmit} className="leadgen-form">
        <p className="leadgen-form-description">
          {this.props.type === LeadGenType.GuestCampaign ? (
            <FormattedMessage id="leadgen.form.description_24" />
          ) : (
            <FormattedMessage id="leadgen.form.description" />
          )}
        </p>
        <div className="form-fields">
          <LabelGroup label={this.props.intl.formatMessage({ id: localeFirstName.labelId })} className="form-field">
            <InputField name={localeFirstName.fieldName} maxLength={40} />
          </LabelGroup>
          <LabelGroup label={this.props.intl.formatMessage({ id: localeSecondName.labelId })} className="form-field">
            <InputField name={localeSecondName.fieldName} maxLength={60} />
          </LabelGroup>
          <LabelGroup label={this.props.intl.formatMessage({ id: Form.EmailAddress.labelId })} className="form-field">
            <InputField name={Form.EmailAddress.fieldName} maxLength={60} />
          </LabelGroup>
          <LabelGroup label={this.props.intl.formatMessage({ id: Form.PhoneNumber.labelId })} className="form-field">
            <InputField name={Form.PhoneNumber.fieldName} maxLength={21} />
          </LabelGroup>
        </div>
        <Button
          theme="primary"
          htmlType="submit"
          className="leadgen-button"
          busy={this.props.updating}
          disabled={!this.props.valid}
        >
          <FormattedMessage id="privatedining.leadgen.button.label" />
        </Button>
      </form>
    );
  }
}

const mapStateToProps = (state: State) => ({
  initialValues: userSelector(state),
  locale: localeSelector.locale(state),
  updating: state.leadGen.status === Status.Started,
});

type LeadGenFormErrors = FormErrors<{
  firstName?: string;
  lastName?: string;
  phone?: string;
  email?: string;
}>;

const validate = (formValues: LeadGenForm): LeadGenFormErrors => {
  const errors: LeadGenFormErrors = {};
  const { firstName = '', lastName = '', email = '', phone = '' } = formValues;

  if (firstName.length === 0) {
    errors.firstName = 'Required';
  }

  if (lastName.length === 0) {
    errors.lastName = 'Required';
  }

  if (!testEmail(email)) {
    errors.email = 'Required';
  }

  if (!phone.length) {
    errors.phone = 'Required';
  }

  return errors;
};

const ReduxLeadGenForm = reduxForm<LeadGenForm, BaseProps>({
  form: LEADGEN_FORM,
  onSubmit: (values, dispatch, props) => {
    dispatch(createSalesForceLead.started({ type: props.type, user: leadGenFormDefaults(values) }));
  },
  validate,
})(EditLeadGenForm);

export default connect<SP, {}, OP>(mapStateToProps)(injectIntl<BaseProps>(ReduxLeadGenForm));
export { EditLeadGenForm as PureEditLeadGenForm };
