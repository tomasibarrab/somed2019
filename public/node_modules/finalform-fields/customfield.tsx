import * as React from 'react';
import { Field, FieldProps, FieldRenderProps } from 'react-final-form';

export type InputFieldProps<T> = T & FieldProps & {
  valid?: boolean
  showValidationWhenPristine?: boolean;
};

type FieldRenderer<T> =
  (props: InputFieldProps<T>, fieldRenderProps: FieldRenderProps ) => JSX.Element;

function detectValid<T>(props: InputFieldProps<T>, meta: any) {
  const hideValidation = props.showValidationWhenPristine ? false : !meta.touched;
  return meta.valid || hideValidation;
}

/**
 * customFinalField allows to create a custom Field component wrapping buffet input components.
 *
 * showValidationWhenPristine can be set in props or in context as a boolean value.
 * - When showValidationWhenPristine is set to FALSE the validation feedback is only visible
 *   when the field has been focused and focused out once (in final form this is reported with the meta.touched)
 * - When showValidationWhenPristine is set to TRUE the validation feedback is always visible.
 *
 * @param fieldRenderer render function for the controlled component.
 */
export const customFinalField = <T extends {}>( fieldRenderer: FieldRenderer<T> ) => (
  (props: InputFieldProps<T>) => (
    <Field {...props}>
      {(renderProps: FieldRenderProps) => {
        const { meta } = renderProps;
        const valid = detectValid(props, meta);
        const errorText = valid ? undefined : (props.errorText || meta.error);

        return fieldRenderer({ ...props, errorText, valid }, renderProps);
      }}
    </Field>
  )
);
