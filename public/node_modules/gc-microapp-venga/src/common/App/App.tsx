/**
 *
 * App.tsx
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */
import { AsyncContent } from 'gca-react-components';
import React, { useEffect } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Redirect, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';

import { initializeGcScope } from 'gca-react-components/src/redux-modules/initializeApp';
import { useHistoryTracking } from 'shared-react-utils/useHistoryTracking';
import { getGcScope } from 'shared-utils/gcScope';

import LandingPage from '../../LandingPage/LandingPage';
import LeadGenDone from '../../LeadGenPage/LeadGenDone';
import SignUpPage from '../../SignUpPage/SignUpPage';

import { eventTracker } from '../../helpers/tracking';
import { selectors as appSelectors } from '../../store/redux-modules/appSelectors';
import { actions as productActions } from '../../store/redux-modules/products';
import { State } from '../../store/types';
import { allLandingPagesRoute, AppRoutes } from './AppRoutes';

import './App.scss';


interface AppStateProps {
  isAppLoading: boolean,
  isAppError: boolean,
  isVengaCompliant: boolean;
}

interface AppActions {
  initializeGcScope: (...args: Parameters<typeof initializeGcScope>) => void;
  fetchIsSignedUp: (rid: number) => void;
  fetchIsActive: (rid: number) => void;
  fetchProductsPrices: (rid: number) => void;
}

type AppProps = AppStateProps & AppActions & InjectedIntlProps & RouteComponentProps<{}>;

function AppImpl({
  initializeGcScope: initGcScope,
  fetchProductsPrices,
  isAppLoading,
  isAppError,
  isVengaCompliant,
  history,
  location,
}: AppProps) {
  // initialize the gcScope
  useEffect(() => {
    const gcScope = getGcScope(window);

    initGcScope(gcScope);

    if (gcScope.id) {
      fetchProductsPrices(gcScope.id as number);
    }
  }, []);

  // track page views for history changes
  useHistoryTracking(history, eventTracker);

  if (isAppLoading || isAppError) {
    return (
      <AsyncContent
        isLoading={isAppLoading}
        isError={isAppError}
        errorMessage="Something happened while loading the page. Please try again later..."
      >
        <div />
      </AsyncContent>
    );
  }

  // force the user to the lead-gen page if not Venga-compliant
  if (!isVengaCompliant && !location.pathname.startsWith(AppRoutes.LeadGen)) {
    return <Redirect to={AppRoutes.LeadGen} />;
  }

  return (
    <Switch>
      <Route path={allLandingPagesRoute} exact component={LandingPage} />

      <Route path={`${AppRoutes.SignUp}/:product_name?`} exact component={SignUpPage} />
      <Route path={AppRoutes.LeadGenDone} exact component={LeadGenDone} />

      <Redirect to={AppRoutes.Root} />
    </Switch>
  );
}


const mapStateToProps = (state: State): AppStateProps => ({
  isAppError: appSelectors.isAppError(state),
  isAppLoading: appSelectors.isAppLoading(state),
  isVengaCompliant: appSelectors.isVengaCompliant(state),
});

const mapDispatchToProps = {
  fetchProductsPrices: productActions.fetchUserAgreementsAndPrices,
  initializeGcScope,
};

const AppIntl = injectIntl(AppImpl);
const AppConnected = connect<AppStateProps, AppActions, RouteComponentProps<{}>>(
  mapStateToProps,
  mapDispatchToProps,
)(AppIntl);


export default withRouter(AppConnected);
export { AppImpl as PureApp };
