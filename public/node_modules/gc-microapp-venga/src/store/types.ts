import { Dispatch as ReduxDispatch, Store as ReduxStore } from 'redux';
import { ActionsObservable } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import { Action as FsaAction } from 'typescript-fsa';

import { gcaApi } from 'gca-react-components/src/redux-modules/api';
import { CurrentContext } from 'gca-react-components/src/redux-modules/currentContext';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { LanguageProvider } from 'gca-react-components/src/redux-modules/languageProvider';


import * as api from './api';
import { LeadGenState } from './redux-modules/leadGen';
import { ProductsState } from './redux-modules/products';
import { SignUpState } from './redux-modules/signUp';


export interface Dependencies {
  api: typeof api & typeof gcaApi;
}

export interface State {
  language: LanguageProvider;
  currentContext: CurrentContext;
  featureToggles: FeatureToggles;
  leadGen: LeadGenState;
  signUp: SignUpState;
  products: ProductsState;
}

export type Action = FsaAction<any>;
export type Store = ReduxStore<State>;
export type Dispatch = ReduxDispatch<Action>;
export type Epic = (action$: ActionsObservable<Action>, store: Store, options: Dependencies) => Observable<Action>;


export interface LeadGenFormData {
  Company: string; // user company
  Country: string;
  CurrencyISOCode: 'USD';
  Disqualification_Reason__c: string;
  Email: string; // user email
  FirstName: string; // user first name
  LastName: string; // user last name
  LeadSource: 'GCA';
  POS_Brand__c: string; // user pos id
  Phone: number | string; // user phone number
  Product_Type__c: string;
  RID__c: string | number; // resturant rid
  RecordTypeID: '01230000000jw7a';
  Restaurant_or_parent__c: 'Restaurant';
  Status: string;
}


export interface PrimaryProduct {
  product: string;
  status: 'Active' | 'Inactive' | 'Pending Active' | 'Pending Inactive';
}

export interface PrimaryProductsResponse {
  primaryProducts: PrimaryProduct[];
  rid: number;
}

// TODO: interface for the response object of IsSignedUp and IsActive
export interface StatusResponse {
  responseStatus: string,
  isOn: boolean,
}

interface BasePriceItem {
  listPrice: number;
  feeType: string;
  billingRecurrence: string;
  termLength: number;
}

export interface BundleDetails extends BasePriceItem {
  sku: string;
  name: string;
  description: string;
}

export interface Pricing extends BasePriceItem {
  productCode: string;
  productName: string;
  currencyCode: string;
}

interface BaseAddOn {
  bundleCategory: string;
  bundleDisplayName: string;
  bundleName: string;
  status: 'Active' | 'PendingActive' | 'Available'; // todo: check if these statuses are correct
}

export interface AddOn extends BaseAddOn {
  bundleDetails: BundleDetails[];
}

export interface PricedAddOn extends BaseAddOn {
  bundleDetails: Pricing[];
}

export interface PricingResponse {
  rid: number;
  ['primary-product']: string;
  region: {
    country: string;
    metro: string;
  };
  currency: string;
  addons: AddOn[];
}

export const AGREEMENT_TYPE_ROOT = 'venga_integration_';
export enum AgreementType {
  venga_integration_review_manager = 'venga_integration_review_manager',
  venga_integration_host = 'venga_integration_host',
  venga_legacy_customer = 'venga_legacy_customer',
}

export enum ShortAgreementType {
  host = 'host',
  review_manager = 'review_manager',
}

export interface UserAgreementPayload {
  agreementType: AgreementType;
  rid: number;
}
