import { Location } from 'history';
import React from 'react';
import { connect } from 'react-redux';
import { Redirect, RouteComponentProps, withRouter } from 'react-router';

import { AppRoutes } from '../common/App/AppRoutes';
import { selectors as appSelectors } from '../store/redux-modules/appSelectors';
import { selectors as productSelectors } from '../store/redux-modules/products';
import { State } from '../store/types';

import LeadGenPage from '../LeadGenPage/LeadGenPage';
import ActivePage from './ActivePage/ActivePage';
import MarketingPage from './MarketingPage/MarketingPage';
import PendingPage from './PendingPage/PendingPage';

interface StateProps {
  isSignedUp: boolean;
  isActive: boolean;
  isVengaCompliant: boolean;
}

type Props = StateProps & RouteComponentProps<{}>;

// given a location object, ensure the PageComponent only renders at the expected path,
// otherwise redirect to that expected path.
const pageRouteMatcher = (location: Location<any>) => (
  PageComponent: React.ComponentFactory<any, any> | React.ComponentClass,
  expectedRoute: AppRoutes,
): React.ReactElement => (
  location.pathname === expectedRoute
    ? <PageComponent />
    : <Redirect to={expectedRoute} />
);


const LandingPage = ({
  isSignedUp,
  isActive,
  isVengaCompliant,
  location,
}: Props) => {
  // create page route matcher
  const ensurePageRoute = pageRouteMatcher(location);

  // Non compliant restaurants should be presented with the LeadGen form
  if (!isVengaCompliant) {
    return ensurePageRoute(LeadGenPage, AppRoutes.LeadGen);
  }

  //
  // Checking this first, because legacy venga product would be active if present, but is not in UAS
  // (so would not be signed up)
  //
  if (isActive) {
    return ensurePageRoute(ActivePage, AppRoutes.Active);
  }

  if (isSignedUp) {
    return ensurePageRoute(PendingPage, AppRoutes.Pending);
  }

  return ensurePageRoute(MarketingPage, AppRoutes.Marketing);
};

const mapStateToProps = (state: State) => ({
  isActive: productSelectors.isActiveProduct(state),
  isSignedUp: productSelectors.isUASigned(state),
  isVengaCompliant: appSelectors.isVengaCompliant(state),
});

const ConnectedLandingPage = connect<StateProps, {}, RouteComponentProps<{}>>(mapStateToProps)(LandingPage);

export default withRouter(ConnectedLandingPage);
