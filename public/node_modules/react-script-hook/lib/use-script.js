"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var react_is_mounted_hook_1 = __importDefault(require("react-is-mounted-hook"));
function useScript(_a) {
    var src = _a.src, attributes = __rest(_a, ["src"]);
    var isMounted = react_is_mounted_hook_1.default();
    var _b = react_1.useState(true), loading = _b[0], setLoading = _b[1];
    var _c = react_1.useState(null), error = _c[0], setError = _c[1];
    react_1.useEffect(function () {
        if (!isBrowser)
            return;
        if (document.querySelector("script[src=\"" + src + "\"]")) {
            if (isMounted()) {
                setLoading(false);
            }
            return;
        }
        var scriptEl = document.createElement('script');
        scriptEl.src = src;
        Object.keys(attributes).forEach(function (key) { return (scriptEl[key] = attributes[key]); });
        var handleLoad = function () {
            if (isMounted()) {
                setLoading(false);
            }
        };
        var handleError = function (error) {
            if (isMounted()) {
                setError(error);
            }
        };
        scriptEl.addEventListener('load', handleLoad);
        scriptEl.addEventListener('error', handleError);
        document.body.appendChild(scriptEl);
        return function () {
            scriptEl.removeEventListener('load', handleLoad);
            scriptEl.removeEventListener('error', handleError);
        };
    }, [src, attributes, isMounted]);
    return [loading, error];
}
exports.default = useScript;
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
//# sourceMappingURL=use-script.js.map