const path = require('path');
const root = path.resolve(__dirname, '..');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = {
  mode: 'development',
  entry: './src/index.ts',
  output: {
    path: path.resolve(root, 'dist'),
    filename: 'index.js',
    library: 'Damper',
    libraryTarget: 'umd',
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        include: [
          path.resolve(root, 'src'),
        ],
        loader: 'babel-loader',
      },
      {
        test: /\.tsx?$/,
        loader: 'ts-loader',
        exclude: /node_modules\/(?!@buffet)/,
        options: { allowTsInNodeModules: true }
      },
      {
        test: /\.scss$/,
        use: [
          {
            loader: 'style-loader'
          },
          {
            loader: 'typings-for-css-modules-loader',
            options: {
              namedExport: true,
              camelCase: true,
              importLoaders: 2,
              modules: true,
              localIdentName: '[name]__[local]___[hash:base64]'
            }
          },
          {
            loader: 'postcss-loader'
          },
          {
            loader: 'sass-loader',
          },
        ],
      },
      {
        test: /\.css$/,
        use: [
          {
            loader: 'style-loader'
          },
          {
            loader: 'postcss-loader'
          },
        ],
      },
    ],
  },
  target: 'web',
  resolve: {
    alias: {
      // '@common': path.resolve(root, 'src/common'),
      // '@config$': configPath(),
      // '@styles': path.resolve(root, 'src/styles'),
      // '@utils': path.resolve(root, 'src/utils')
    },
    mainFields: ['browser', 'main', 'module'],
    modules: ['src', 'node_modules', 'dev/testing'],
    extensions: ['.ts', '.tsx', '.js', '.jsx', '.json', '.svg', '.scss', '.css'],
  },
  optimization: {
    chunkIds: 'named',
    namedModules: true,
    moduleIds: 'named',
    sideEffects: true,
    minimize: false,
  },
  node: {
    child_process: "empty",
    fs: "empty",
  },
  plugins: [
    // new BundleAnalyzerPlugin()
  ],
};
