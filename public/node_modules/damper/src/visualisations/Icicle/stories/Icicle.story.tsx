import { boolean, date, number, object, select } from '@storybook/addon-knobs';
import { addMinutes, format, isBefore, isEqual, startOfHour } from 'date-fns';
import times from 'lodash.times';
import React from 'react';
import { SlideController } from '../../../components/SlideController';
import { Icicle } from '../Icicle/index';

interface IFifteenMinuteInt {
  id: string;
  label: string;
}

const getTimeLabel = (date: Date) => {
  if (isEqual(startOfHour(date), date)) {
    return format(date, 'ha');
  }

  const halfHour = addMinutes(startOfHour(date), 30);

  if (isEqual(halfHour, date)) {
    return format(date, 'h:mma');
  }

  return '';
};

const createFifteenMinuteIntervals = (from: Date, until: Date): IFifteenMinuteInt[] => {
  let time = new Date(from);
  const timeUntil = new Date(until);
  const intervals = [];

  // tslint:disable
  while (isBefore(time, timeUntil)) {
    intervals.push(time);
    time = addMinutes(time, 15);
  }
  // tslint:enable

  return intervals.map((date) => ({
    id: format(new Date(date), 'DD-MM-YYYY--HH:mm'),
    label: getTimeLabel(new Date(date)),
  }));
}

export const icicleDefaultStory = () => {
  const responsive = select('Responsive', ['redraw', 'scale', 'none'], 'none');
  const largeSize = number('large party size', 6);
  const padding = object('Padding', {
    bottom: 50,
    left: 50,
    right: 20,
    top: 20,
  });

  const slideDistance = select('Slide distance', {
    1: 100,
    '1/2': 50,
    '1/3': 33,
    '1/4': 25,
    '1/5': 20,
  }, 33);

  const isDisabled = boolean('Disable slider', false);

  const getColumns = () => {
    const shiftGroup = 'SHIFT DETAIL';

    const startDateVal = new Date('Sep 01 2018 11:00:00');
    const startDate = date('Shift start time', startDateVal, shiftGroup);

    const endDateVal = new Date('Sep 01 2018 20:00:00');
    const endDate = date('Shift end time', endDateVal, shiftGroup);

    return createFifteenMinuteIntervals(startDate, endDate);
  }

  const columns = getColumns();

  const data = columns.map((col) => {
    const partyCount = Math.floor(Math.pow(Math.random(), 2) * (12 - 0 + 1)) + 1;
    const parties = times(partyCount, () => Math.floor(Math.pow(Math.random(), 2) * (13 - 0 + 1)) + 1);

    return {
      id: col.id,
      values: parties,
    }
  });

  return (
    <article className="markdown-body">
      <h1>Icicle - Default</h1>
      <SlideController
        columnWidth={40}
        columnPadding={4}
        slideDistance={slideDistance}
        isDisabled={isDisabled}
      >
        <Icicle
          columns={columns}
          columnOffsets={{
            left: 50,
            right: 50,
          }}
          data={data}
          width={1010}
          padding={padding}
          responsive={responsive}
          largeValue={largeSize}
        />
      </SlideController>
    </article>
  );
};
