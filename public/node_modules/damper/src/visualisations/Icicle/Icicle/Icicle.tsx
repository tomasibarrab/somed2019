import React from 'react';
import Measure, { BoundingRect, ContentRect } from 'react-measure';
import {
  AxisX,
  AxisY,
  Group,
  Svg,
} from '../../../components';
import { ClipPath } from '../../../components/ClipPath';

import { customPropTypes, DEFAULT_ANIMATE } from '../../../utils';
import { registerHelpers } from '../../../utils/general';
import { getInnerArea } from '../../../utils/general/getInnerArea';
import { getOuterArea } from '../../../utils/general/getOuterArea';
import { registerTheme } from '../../../utils/theme';

import { Cubes } from './Cubes';

import { AnimationType } from '../../../@types/animationOptions';
import { IColumn } from '../../../@types/columns';
import { ResponsiveType } from '../../../@types/responsiveOptions';
import { IYAxisProps } from '../../../@types/yAxis';
import { ISlideProps } from '../../../components/SlideController';

interface IProps {
  AxisYLabel?: React.ComponentType;
  animation: AnimationType;
  columnOffsets: {
    left: number;
    right: number;
  },
  columns: IColumn[];
  customTheme?: any;
  data: any;
  helpers: any;
  largeValue: number;
  maxY: number;
  padding: {
    top: number;
    right: number;
    bottom: number;
    left: number;
  }
  slideProps?: ISlideProps;
  responsive: ResponsiveType;
  width: number;
  yTickCount: number;
}

interface IState {
  bounds: BoundingRect;
}

interface IDetailedData {
  isBold: boolean;
  label: string;
  value: number;
}

export interface IData {
  id: string;
  values: IDetailedData[];
}

class Icicle extends React.Component<IProps, IState> {
  static defaultProps = {
    animation: DEFAULT_ANIMATE,
    columnOffsets: customPropTypes.defaultColumnOffsets,
    columns: [],
    customTheme: {
      bars: {
        default: {
          width: 40,
        },
      },
    },
    helpers: {},
    maxY: 10,
    padding: customPropTypes.defaultPadding,
    responsive: 'none',
    width: 600,
    yTickCount: 6,
  }

  constructor(props:IProps) {
    super(props);
    const bounds = {};

    this.state = {
      bounds: bounds as BoundingRect,
    };

    this.onResize = this.onResize.bind(this);
  }

  onResize({ bounds }: ContentRect): void {
    if (bounds) {
      this.setState((prevState) => ({
        ...prevState,
        bounds,
      }));
    }
  }

  boundsExist(): boolean {
    if (this.state.bounds) {
      const { bounds } = this.state;
      if (bounds.height === null || bounds.width === null) {
        return false
      }
      return true;
    }

    return false;
  }

  getSVGWidth(): number {
    const {
      columns,
      columnOffsets,
      padding,
      // responsive,
      slideProps,
    } = this.props;

    const barWidth = 40;
    const barPadding = 4;

    const inner = columns.length * (barWidth + barPadding);
    const combinedPadding = padding.left + padding.right + columnOffsets.left + columnOffsets.right;

    let width = inner + combinedPadding;

    // If using slider helper, adjust SVG width to fit screen or minWidth
    if (slideProps && !slideProps.isDisabled) {
      width = (slideProps.minWidth < slideProps.containerWidth) ? slideProps.containerWidth : slideProps.minWidth;
    }

    return width;
  }

  getSVGHeight(): number {
    const { padding } = this.props;
    const maxBarCount = 10;
    const barHeight = 40;
    const barYPadding = 1;

    const inner = maxBarCount * (barHeight + barYPadding);
    const combinedPadding = padding.bottom + padding.top;

    return inner + combinedPadding;
  }

  getSvgProps({ measureRef, theme }: any): any {
    const { responsive, slideProps } = this.props;
    let svgResponsive = responsive;

    if (slideProps && !slideProps.isDisabled) {
      svgResponsive = 'none';
    }

    return {
      height: this.getSVGHeight(),
      measureRef,
      responsive: svgResponsive,
      theme,
      width: this.getSVGWidth(),
    };
  }

  getXAxisProps({ outerArea, scale, theme }: any): any {
    const data = this.props.columns;
    const { slideProps } = this.props;

    return {
      activeOuterArea: {
        ...outerArea,
        ...outerArea.bounds,
      },
      data,
      scale,
      slideProps,
      theme,
    };
  }

  getYAxisProps({ outerArea, highestValue, theme, helpers }: any): IYAxisProps {
    const { yTickCount, AxisYLabel } = this.props;

    return {
      AxisYLabel,
      activeOuterArea: {
        ...outerArea,
        ...outerArea.bounds,
      },
      count: yTickCount,
      helper: helpers.axis.y,
      highestValue,
      overrideCount: true,
      theme,
    };
  }

  sortValues(data: any[]): IData[] {
    const { largeValue } = this.props;

    return data
      .map((datum) => {
        // tslint:disable-next-line
        const limitedValues = [...datum.values]
          .sort((a, b) => b - a)
          .map((value) => ({
            isBold: largeValue ? value >= this.props.largeValue : false,
            label: `${value}`,
            value,
          }))
          .slice(0, 10);

        if (limitedValues.length === 10) {
          // tslint:disable-next-line
          limitedValues[9] = {
            isBold: limitedValues[9].value >= this.props.largeValue,
            label: '...',
            value: limitedValues[9].value,
          };
        }

        return {
          ...datum,
          values: limitedValues,
        }
      });
  }

  render(): React.ReactNode {
    const { bounds } = this.state;
    const {
      columns,
      columnOffsets,
      customTheme,
      data,
      maxY,
      padding,
      responsive,
      slideProps,
      width,
    } = this.props;

    const theme = registerTheme(customTheme);
    const helpers = registerHelpers(this.props.helpers);

    const outerArea = getOuterArea({
      bounds,
      columns,
      height: this.getSVGHeight(),
      maxY,
      padding,
      responsive,
      width,
    });

    const innerArea = getInnerArea({
      columns,
      customColumnOffsets: columnOffsets,
      maxY,
      outerAreaBounds: outerArea.bounds,
      slideProps,
      theme,
    });

    return (
      <Measure bounds onResize={this.onResize}>
      {({ measureRef }) => (
        <Svg {...this.getSvgProps({ measureRef, theme })}>
          {this.boundsExist() && (
            <Group>
              <ClipPath
                outerBounds={outerArea.bounds}
                innerBounds={innerArea.bounds}
                padding={padding}
                slideProps={slideProps}
              />
              <Cubes
                data={this.sortValues(data)}
                slideProps={slideProps}
                xScale={innerArea.scales.x2}
                yScale={innerArea.scales.yInverted}
              />
              <AxisX
                isAnimated={false}
                {...this.getXAxisProps({
                  outerArea,
                  scale: innerArea.scales.x,
                  theme,
                })}
              />
              <AxisY
                {...this.getYAxisProps({
                  helpers,
                  highestValue: maxY,
                  outerArea,
                  theme,
                })}
              />
            </Group>
          )}
        </Svg>
      )}
    </Measure>
    )
  }
}

export { Icicle };
