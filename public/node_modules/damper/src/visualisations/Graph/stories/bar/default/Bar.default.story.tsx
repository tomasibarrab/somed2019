import { boolean, object, select } from '@storybook/addon-knobs';
import React from 'react';
import { Graph } from '../../../index';
import Readme from './README.md';

const color1 = 'rgba(82, 151, 222, 1)';
const color2 = 'rgba(131, 197, 184, 1)';

const defaultColumns = [
  {
    id: 'a',
    label: 'A',
  },
  {
    id: 'b',
    label: 'B',
  },
  {
    id: 'c',
    label: 'C',
  },
];

const barsSingle = [
  {
    id: 'a',
    value: 218,
  },
  {
    id: 'b',
    value: {
      theme: {
        hoverFill: 'rgba(0, 0, 255, 1)',
        style: {
          fill: 'rgba(255, 0, 0, 1)',
        },
      },
      value: 72,
    },
  },
  {
    id: 'c',
    value: {
      theme: {
        style: {
          fill: 'transparent',
          stroke: 'rgba(0, 255, 0, 1)',
          strokeDasharray: '8px',
          strokeWidth: 6,
        },
      },
      value: 50,
    },
  },
];

const generateContent = (style: any, count = 1) => {
  const arr = [];
  let i = 0;

  // tslint:disable
  do {
    arr.push({
      theme: {
        style,
      },
      value: Math.random() * 100,
    });
    i++;
  } while (i < count);
  // tslint:enable

  return arr;
};

const barsGroup = defaultColumns.map((v) => ({
  group: [
    {
      offset: -30,
      values: generateContent({
        fill: 'transparent',
        stroke: color1,
        strokeDasharray: '5px 5px',
        width: 20,
      }),
    },
    {
      offset: 20,
      values: generateContent({
        fill: 'transparent',
        stroke: color2,
        strokeDasharray: '5px 5px',
        width: 20,
      }),
    },
    {
      offset: -20,
      values: generateContent({ width: 20, fill: color1 }),
    },
    {
      offset: 30,
      values: generateContent({ width: 20, fill: color2 }),
    },
  ],
  id: v.id,
}));

const barsStacked = defaultColumns.map((v) => ({
  group: [
    {
      offset: -20,
      values: generateContent(
        {
          fill: 'transparent',
          stroke: color1,
          strokeDasharray: '5px 5px',
          width: 20,
        },
        3
      ),
    },
    {
      offset: 20,
      values: generateContent(
        {
          fill: 'transparent',
          stroke: color2,
          strokeDasharray: '5px 5px',
          width: 20,
        },
        3
      ),
    },
  ],
  id: v.id,
}));

const columnOffsets = {
  left: 20,
  right: 10,
};

const defaultPadding = {
  bottom: 50,
  left: 70,
  right: 70,
  top: 40,
};

export const barDefaultStory = () => {
  const responsive = select('Responsive', ['redraw', 'scale', 'none'], 'redraw');
  const dataType = select('Bar graph', ['single', 'group', 'stacked'], 'single');
  const isHighlightBar = boolean('Show Highlight', false);
  const columns = object('Columns', defaultColumns);
  const padding = object('Padding', defaultPadding);
  const getBarType = (type: string) => {
    switch (type) {
      case 'single': return barsSingle;
      case 'group': return barsGroup;
      case 'stacked': return barsStacked;
      default: return barsSingle;
    }
  };

  const helpers = {
    axis: {
      y: {
        commaLargeValues: true,
        normalizeValues: true,
      },
    },
    bar: {
      highlight: {
        callback: (bar: any) => {
          if (bar.id === 'b') {
            return {
              id: bar.id,
              styles: {},
            };
          }
          return false;
        },
        show: isHighlightBar,
      },
    },
  };

  const bars = getBarType(dataType);
  const actions = {
    onBarClick: () => undefined,
    onBarMouseOut: () => undefined,
    onBarMouseOver: () => undefined,
  };

  return (
    <article className="markdown-body">
      <h1>Bar - Default</h1>
      <Graph
        width={1010}
        height={500}
        bars={bars}
        columns={columns}
        padding={padding}
        responsive={responsive}
        columnOffsets={columnOffsets}
        helpers={helpers}
        {...actions}
      />
    </article>
  );
};

export { Readme as barDefaultStoryReadMe };
