import { object, select } from '@storybook/addon-knobs';
import { tealLighter } from 'otkit-colors/token.common';
import React from 'react';
import { Graph } from '../../../Graph/index';
import ReadMe from './README.md';

const MAX = 200;

const defaultColumns = [
  {
    id: 'a',
    label: 'A',
  },
  {
    id: 'b',
    label: 'B',
  },
  {
    id: 'c',
    label: 'C',
  },
  {
    id: 'd',
    label: 'D',
  },
  {
    id: 'e',
    label: 'E',
  },
  {
    id: 'f',
    label: 'F',
  },
  {
    id: 'g',
    label: 'G',
  },
  {
    id: 'h',
    label: 'H',
  },
];

const generateData = (num: number) => defaultColumns.map((v) => {
  const value = Math.floor((Math.random() * num) + 10);
  return {
    id: v.id,
    value,
  };
});

const getArea = (num: number) => [{
  data: [
    {
      data: generateData(num || MAX),
      id: 'area-0-1',
    },
  ],
  group: false,
  id: 'area-0',
},
{
  data: [
    {
      data: generateData(num || MAX),
      id: 'area-1-1',
      styles: {
        common: {
          fill: 'transparent',
          mouseOver: {
            fill: 'transparent',
            stroke: tealLighter,
          },
          stroke: tealLighter,
          strokeOpacity: 1,
          strokeWidth: 2,
        },
      },
    },
  ],
  group: false,
  id: 'area-1',
}];

const columnOffsets = {
  left: 0,
  right: 0,
};

const defaultPadding = {
  bottom: 40,
  left: 60,
  right: 60,
  top: 20,
};

interface IProps {
  animation: any;
  columns: any[];
  padding: any;
  responsive: any;
  columnOffsets: any;
}

interface IState {
  areas: any[];
}

class GraphWrapper extends React.Component<IProps, IState> {
  constructor(props: IProps) {
    super(props);

    this.state = {
      areas: getArea(MAX),
    };

    this.handleGenerateClick = this.handleGenerateClick.bind(this);
    this.handleEmptyClick = this.handleEmptyClick.bind(this);
  }

  handleGenerateClick(): void {
    this.setState({
      areas: getArea(MAX),
    });
  }

  handleEmptyClick(): void {
    this.setState({
      areas: [],
    });
  }

  render(): React.ReactElement {
    return (
      <article className="markdown-body">
        <h1>Area - Default</h1>
        <Graph
          width={1010}
          height={500}
          animation={this.props.animation}
          areas={this.state.areas}
          columns={this.props.columns}
          padding={this.props.padding}
          responsive={this.props.responsive}
          columnOffsets={this.props.columnOffsets}
        />
        <hr />
        <div>
          <button className="btn BtnGroup-item" onClick={this.handleGenerateClick}>Generate Data</button>
          <button className="btn BtnGroup-item" onClick={this.handleEmptyClick}>Empty Data</button>
        </div>
      </article>
    );
  }
}

export const areaDefaultStory = () => {
  const responsive = select('Responsive', ['redraw', 'scale', 'none'], 'redraw');
  const animation = select('Animation', ['all', 'none'], 'all');
  const columns = object('Columns', defaultColumns);

  return (
    <GraphWrapper
      animation={animation}
      columns={columns}
      padding={defaultPadding}
      responsive={responsive}
      columnOffsets={columnOffsets}
    />
  );
};

export const areaDefaultStoryReadMe = ReadMe;
