import React from 'react';
import Measure, { BoundingRect } from 'react-measure';
import {
  Areas,
  AxisX,
  Bars,
  Group,
  Svg,
} from '../../../components';
import { ClipPath } from '../../../components/ClipPath';

import { AxisY } from '../../../components/Axis/AxisY/AxisY';
import { customPropTypes, DEFAULT_ANIMATE } from '../../../utils';

import { registerHelpers } from '../../../utils/general';
import { registerTheme } from '../../../utils/theme';

import { bracketNumberToNormalizedValue } from '../../../utils/general/bracketNumberToNormalizedValue';
import { getHighestAreaValue } from '../../../utils/general/getHighestAreaValue';
import { getHigestBarValue } from '../../../utils/general/getHighestBarValue';

import { AnimationType } from '../../../@types/animationOptions';
import { IBar } from '../../../@types/bars';
import { IColumn } from '../../../@types/columns';
import { ResponsiveType } from '../../../@types/responsiveOptions';
import { ISlideProps } from '../../../components/SlideController';

import { getInnerArea } from '../../../utils/general/getInnerArea';
import { getOuterArea } from '../../../utils/general/getOuterArea';

interface IProps {
  AxisYLabel: any;
  animation: AnimationType;
  areas?: any;
  bars?: IBar[];
  columnOffsets: {
    left: number;
    right: number;
  };
  columns: IColumn[];
  customTheme?: any;
  height: number;
  helpers: any;
  onAreaClick: any;
  onAreaMouseOut: any;
  onAreaMouseOver: any;
  onBarClick?: any;
  onBarMouseOut?: any;
  onBarMouseOver?: any;
  onGraphInfo: any;
  padding: {
    bottom: number;
    left: number;
    right: number;
    top: number;
  };
  responsive: ResponsiveType;
  slideProps?: ISlideProps;
  width: number;
  yTickCount: number;
}

interface IState {
  bounds: BoundingRect;
}

class Graph extends React.Component<IProps, IState> {
  static defaultProps = {
    AxisYLabel: null,
    animation: DEFAULT_ANIMATE,
    columnOffsets: customPropTypes.defaultColumnOffsets,
    columns: [],
    customTheme: null,
    height: 200,
    helpers: {},
    onAreaClick: () => undefined,
    onAreaMouseOut: () => undefined,
    onAreaMouseOver: () => undefined,
    onGraphInfo: () => undefined,
    padding: customPropTypes.defaultPadding,
    responsive: 'none',
    width: 600,
    yTickCount: 5,
  };

  constructor(props: IProps) {
    super(props);
    const bounds = {};

    this.state = {
      bounds: bounds as BoundingRect,
    };

    this.onResize = this.onResize.bind(this);
  }

  onResize({ bounds }: { bounds: any }): void {
    this.setState((prevState) => ({
      ...prevState,
      bounds,
    }));
  }

  getActiveBars(): IBar[] | null {
    const { bars, columns } = this.props;
    let activeBars = null;

    if (bars) {
      activeBars = columns.map((column) => {
        const matchingBar = bars.find((bar) => bar.id === column.id);
        const emptyBar = { id: column.id, value: 0 };
        return matchingBar || emptyBar;
      });
    }

    return activeBars;
  }

  getActiveAreas(): any {
    let activeAreas = null;
    const { areas, columns } = this.props;

    const removeHidden = (dataPoint: any) => columns.some((column) => column.id === dataPoint.id);

    if (areas) {
      activeAreas = areas.map((group: any) => {
        const filteredGroup = group.data.map((item: any) => {
          const filteredItem = item.data.filter(removeHidden);
          return {
            ...item,
            data: filteredItem,
          };
        });
        return {
          ...group,
          data: filteredGroup,
        };
      });
    }

    return activeAreas;
  }

  getHighestValue(areas: any, bars: any, helpers: any): number {
    const { columns } = this.props;

    const highestValues = {
      areas: getHighestAreaValue(areas, columns),
      bars: getHigestBarValue(bars),
    };

    let highestNum = Math.max(highestValues.bars, highestValues.areas);

    if (highestNum && helpers.axis.y.normalizeValues) {
      highestNum = bracketNumberToNormalizedValue(highestNum);
    }

    return highestNum || 0;
  }

  getSvgProps({ measureRef, theme }: any): any {
    const { responsive, width, height } = this.props;

    return {
      height,
      measureRef,
      responsive,
      theme,
      width,
    };
  }

  getAreasProps(areaData: any): any {
    const {
      theme,
      activeData,
      activeInnerArea,
      helpers,
    } = areaData;

    const {
      animation,
      columns,
      onAreaClick,
      onAreaMouseOver,
      onAreaMouseOut,
      slideProps,
    } = this.props;

    return {
      actions: {
        onClick: onAreaClick,
        onMouseOut: onAreaMouseOut,
        onMouseOver: onAreaMouseOver,
      },
      activeInnerArea,
      animation,
      columns,
      data: activeData.areas,
      helper: helpers.area,
      slideProps,
      theme,
    };
  }

  getBarsProps(barData: any): any {
    const {
      activeData,
      activeInnerArea,
      theme,
      helpers,
    } = barData;

    const {
      animation,
      onBarClick,
      onBarMouseOver,
      onBarMouseOut,
      slideProps,
    } = this.props;

    return {
      actions: {
        onClick: onBarClick,
        onMouseOut: onBarMouseOut,
        onMouseOver: onBarMouseOver,
      },
      activeInnerArea,
      columns: this.props.columns,
      data: activeData.bars,
      helper: helpers.bar,
      isAnimated: animation !== 'none',
      isAnimatedX: helpers.bar.animateXAxis,
      slideProps,
      theme,
    };
  }

  getYAxisProps(yAxisData: any): any {
    const {
      activeOuterArea,
      highestValue,
      theme,
      helpers,
    } = yAxisData;

    const { yTickCount, AxisYLabel } = this.props;

    return {
      AxisYLabel,
      activeOuterArea,
      count: yTickCount,
      helper: helpers.axis.y,
      highestValue,
      theme,
    };
  }

  /* Expose graph information when graph is updating or resizing */
  updateGraphInfo({ activeData, activeInnerArea, activeOuterArea }: { activeData: any; activeInnerArea: any; activeOuterArea: any; }): void {
    this.props.onGraphInfo({
      activeData,
      activeInnerArea,
      activeOuterArea,
      bounds: this.state.bounds,
    });
  }

  boundsExist(): boolean {
    const { bounds } = this.state;

    if (bounds.height === null || bounds.width === null) {
      return false
    }

    return true;
  }

  render(): React.ReactElement {
    const { bounds } = this.state;
    const {
      animation,
      columns,
      columnOffsets,
      customTheme,
      padding,
      responsive,
      slideProps,
      width,
      height,
    } = this.props;

    const theme = registerTheme(customTheme);
    const helpers = registerHelpers(this.props.helpers);

    const activeAreas = this.getActiveAreas();
    const activeBars = this.getActiveBars();
    const highestValue = this.getHighestValue(activeAreas, activeBars, helpers);

    const outerArea = getOuterArea({
      bounds,
      columns,
      height,
      maxY: highestValue,
      padding,
      responsive,
      width,
    });

    const innerArea = getInnerArea({
      columns,
      customColumnOffsets: columnOffsets,
      maxY: highestValue,
      outerAreaBounds: outerArea.bounds,
      slideProps,
      theme,
    });

    const activeOuterArea = {
      ...outerArea.bounds,
      scales: outerArea.scales,
    };

    const activeInnerArea = {
      ...innerArea.bounds,
      scales: innerArea.scales,
    };

    const activeData = {
      areas: activeAreas,
      bars: activeBars,
      highestVal: highestValue,
    };

    /**
     * Notify of updates on each render
     */
    this.updateGraphInfo({ activeData, activeInnerArea, activeOuterArea });

    return (
      <Measure bounds onResize={this.onResize}>
        {({ measureRef }) => (
          <Svg {...this.getSvgProps({ measureRef, theme })}>
            {this.boundsExist() && (
              <Group>
                <ClipPath
                  outerBounds={outerArea.bounds}
                  innerBounds={innerArea.bounds}
                  padding={padding}
                  slideProps={slideProps}
                />
                <AxisX
                  activeOuterArea={activeOuterArea}
                  isAnimated={animation !== 'none'}
                  data={columns}
                  scale={innerArea.scales.x}
                  slideProps={slideProps}
                  theme={theme}
                />
                <AxisY
                  {...this.getYAxisProps({
                    activeOuterArea,
                    helpers,
                    highestValue,
                    theme,
                  })}
                />
                <Bars
                  {...this.getBarsProps({
                    activeData,
                    activeInnerArea,
                    helpers,
                    theme,
                  })}
                />
                <Areas
                  {...this.getAreasProps({
                    activeData,
                    activeInnerArea,
                    helpers,
                    theme,
                  })}
                />
              </Group>
            )}
          </Svg>
        )}
      </Measure>
    );
  }
}

export { Graph };
