/**
 * Returns D3 Areas stack structure
 */

interface IGetAreas {
  data: any[];
  columns: any[];
  id?: string;
}

type Datum = any;

export const getAreas = ({ data, columns, id }: IGetAreas = { data: [], columns: [] }) => {
  if (data.length) {
    const sets = columns
      .map((column) => {
        const columnid = column.id;

        // @TODO: What's this reduce doing?, can it be refactored/broken into its own function
        // to be clearer, reusable?
        const val = data.reduce((prev, item) => {

          // @TODO: Datum should not be "any"
          // tslint:disable-next-line
          const _item = item.data.find((i: Datum) => i.id === columnid);

          if (_item) {
            return {
              ...prev,
              [item.id]: _item.value,
            }
          }

          return prev
        }, {});

        return {
          data: val,
          id: columnid,
        }
      })
      .filter((set) => {
        if (Object.keys(set.data).length) {
          return true;
        }
        return false;
      });

    return {
      data: sets,
      id,
    }
  }

  return [];
};
