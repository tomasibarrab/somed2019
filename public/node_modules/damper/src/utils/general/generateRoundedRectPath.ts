interface IGenerateRoundedRect {
  rounding: number;
  width: number;
  height: number;
  x: number;
  y: number;
  poseVals: {
    height: number;
    y: number;
  };
}

/**
 * Generates a rounded rectangle using a path
 * @see: https://stackoverflow.com/questions/10177985/svg-rounded-corner
 */
export const generateRoundedRectPath = ({
  rounding,
  width,
  height: staticHeight,
  x,
  y: staticY,
  poseVals,
}: IGenerateRoundedRect) => {
  let height = staticHeight;
  let y = staticY;

  if (poseVals) {
    if (poseVals.height) {
      ({ height } = poseVals);
    }

    if (poseVals.y) {
      ({ y } = poseVals);
    }
  }

  if (!height) {
    height = 0;
  }

  if (!y) {
    y = 0;
  }

  let constrainedRounding = rounding < height ? rounding : height;
  constrainedRounding = (constrainedRounding * 2) > width ? (width / 2) : constrainedRounding;

  const dXandY = `M${x + constrainedRounding},${y}`;
  const dHorizontalTop = `h${width - (constrainedRounding * 2)}`;
  const dArcRight = `a${constrainedRounding}, ${constrainedRounding} 0 0 1 ${constrainedRounding}, ${constrainedRounding}`;
  const dVerticalRight = `v${height - constrainedRounding}`;
  const dHorizontalBottom = `h${width * -1}`;
  const dVerticalLeft = `v${(height - constrainedRounding) * -1}`;
  const dArcLeft = `a${constrainedRounding}, ${constrainedRounding} 0 0 1 ${constrainedRounding}, ${constrainedRounding * -1}`;
  const closePath = 'z';

  return dXandY +
    dHorizontalTop +
    dArcRight +
    dVerticalRight +
    dHorizontalBottom +
    dVerticalLeft +
    dArcLeft +
    closePath;
};
