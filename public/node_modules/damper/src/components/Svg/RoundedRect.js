import React from 'react';
import posed from 'react-pose';
import { generateRoundedRectPath } from '../../utils/general/generateRoundedRectPath';

const RoundedRect = React.forwardRef((props, ref) => {
  const defaultProps = {
    actions: {},
    className: '',
    d: null,
    hostRef: null,
    fill: 'transparent',
    stroke: 'transparent',
    strokeDasharray: 'none',
    style: {},
  };

  const mergedProps = {
    ...defaultProps,
    ...props,
  };

  return (
    <g >
      <path
        ref={ref}
        d={mergedProps.d}
        {...mergedProps.actions}
        className={mergedProps.className}
        fill={mergedProps.fill}
        stroke={mergedProps.stroke}
        strokeDasharray={mergedProps.strokeDasharray}
        style={mergedProps.style}
      />
    </g>
  );
});

const AnimatedRoundedRect = posed(RoundedRect)({
  enter: {
    d: (props) => generateRoundedRectPath({ ...props, height: props.rectPoseVals.height, y: props.rectPoseVals.y }),
    delay: ({ rectPoseVals }) => {
      if (rectPoseVals.index) {
        return rectPoseVals.index * 200;
      }
      return 0;
    },
    transition: {
      easing: 'linear',
      duration: 200,
    },
  },
  // Exit isn't firing correctly causing stacked bars to remain in place when they shouldn't be
  // exit: {
  //   d: (props) => generateRoundedRectPath({ ...props, height: 0, y: props.rectPoseVals.y + props.rectPoseVals.height }),
  //   delay: ({ rectPoseVals }) => {
  //     if (rectPoseVals.index) {
  //       return rectPoseVals.index * 200;
  //     }
  //     return 0;
  //   },
  //   transition: {
  //     easing: 'linear',
  //     duration: 200,
  //   },
  // },
  pose: {
    d: (props) => generateRoundedRectPath({ ...props, height: props.rectPoseVals.height, y: props.rectPoseVals.y }),
    transition: {
      easing: 'linear',
      duration: 200,
    },
  },
});

export { RoundedRect, AnimatedRoundedRect };
