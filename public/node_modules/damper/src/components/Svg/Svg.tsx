import React from 'react';
import { ResponsiveType } from '../../@types/responsiveOptions';

interface IProps {
  children: React.ReactNode,
  height: number,
  measureRef: any;
  responsive: ResponsiveType;
  theme: any;
  width: number,
}

class Svg extends React.Component<IProps> {
  static defaultProps = {
    responsive: 'redraw',
  }

  getProportions({ width, height, responsive }: { width: number, height: number, responsive: ResponsiveType }): {
    svg: {
      width: number | string;
      height: number | string;
    };
    viewbox?: {
      width: number | string;
      height: number | string;
    };
  } {
    const proportions = {
      svg: { width, height },
      viewbox: { width, height },
    };

    if (responsive === 'redraw') {
      return {
        svg: {
          ...proportions.svg,
          width: '100%',
        },
      }
    }

    if (responsive === 'scale') {
      return {
        ...proportions,
        svg: {
          height: '100%',
          width: '100%',
        },
      }
    }

    return proportions;
  }

  render(): React.ReactElement {
    const {
      children,
      width,
      height,
      measureRef,
      responsive,
      theme,
    } = this.props;

    const proportions = this.getProportions({
      height,
      responsive,
      width,
    });

    const style = {
      background: theme.container.background,
    };

    const { svg, viewbox } = proportions;

    const divStyle = {
      width: svg.width,
    };

    if (typeof svg.width === 'number') {
      // tslint:disable-next-line
      divStyle.width = `${svg.width}px`;
    }

    return (
      <div style={divStyle} ref={measureRef}>
        <svg
          style={style}
          viewBox={viewbox ? `0 0 ${viewbox.width} ${viewbox.height}` : undefined}
          width={proportions.svg.width}
          height={proportions.svg.height}
        >
          { typeof children === 'function' && children({ proportions }) }
          { typeof children === 'object' && children }
        </svg>
      </div>
    );
  }
}

export { Svg };
