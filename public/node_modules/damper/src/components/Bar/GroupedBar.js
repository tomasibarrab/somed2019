import React from 'react';
import PropTypes from 'prop-types';
import { SingleBar } from './SingleBar';
import { StackedBar } from './StackedBar';

export class GroupedBar extends React.Component {
  static propTypes = {
    actions: PropTypes.shape({
      onClick: PropTypes.func,
      onMouseOver: PropTypes.func,
      onMouseOut: PropTypes.func,
    }),
    data: PropTypes.arrayOf(PropTypes.shape({
      offset: PropTypes.number,
      showBarValue: PropTypes.object,
      values: PropTypes.arrayOf(PropTypes.shape({
        theme: PropTypes.shape({
          id: PropTypes.string,
          style: PropTypes.object,
        }),
        value: PropTypes.number.isRequired,
      })),
    })),
    id: PropTypes.string.isRequired,
    isAnimated: PropTypes.bool,
    isHovered: PropTypes.bool,
    scale: PropTypes.func,
    theme: PropTypes.shape({
      default: PropTypes.shape({
        fill: PropTypes.string,
        width: PropTypes.number,
        cursor: PropTypes.oneOf(['pointer', 'cursor']),
      }),
      easing: PropTypes.shape({
        opacity: PropTypes.string,
        x: PropTypes.string,
      }),
    }).isRequired,
    xOffset: PropTypes.number,
    yOffset: PropTypes.number,
  };

  static defaultProps = {
    actions: null,
    data: null,
    isAnimated: true,
    isHovered: false,
    scale: null,
    xOffset: 0,
    yOffset: 0,
  }

  renderSingleBar(barProps, index) {
    return (
      <SingleBar
        key={`SingleBar--${index}`}
        {...barProps}
      />
    );
  }

  renderStackedBar(barProps, index) {
    return (
      <StackedBar
        key={`StackedBar--${index}`}
        {...barProps}
      />
    );
  }

  render() {
    const {
      actions,
      data,
      id,
      isAnimated,
      isHovered,
      scale,
      theme,
      xOffset,
      yOffset,
    } = this.props;

    const commonGroupedBarProps = {
      actions,
      id,
      isAnimated,
      isHovered,
      scale,
      theme,
      yOffset,
    };

    return (
      <g transform={`translate(${xOffset}, 0)`}>
        {data.map((datum, index) => {
          if (datum.values) {
            return this.renderStackedBar({
              ...commonGroupedBarProps,
              data: datum.values,
              showBarValue: datum.showBarValue,
              xOffset: datum.offset || 0,
            }, index);
          }

          if (datum.value) {
            return this.renderSingleBar({
              ...commonGroupedBarProps,
              data: datum.value,
              showBarValue: datum.showBarValue,
              xOffset: datum.offset || 0,
            }, index);
          }

          return null;
        })}
      </g>
    );
  }
}
