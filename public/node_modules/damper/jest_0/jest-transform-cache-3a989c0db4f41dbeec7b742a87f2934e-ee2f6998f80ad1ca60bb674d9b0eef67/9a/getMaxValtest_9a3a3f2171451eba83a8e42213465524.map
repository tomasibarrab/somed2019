{"version":3,"sources":["getMaxVal.test.js"],"names":["describe","it","emptyGetMaxVal","hasDataGetMaxVal","data","hasKeyGetMaxVal","key","expect","toThrowError","Error","isVisible","value","value2","notCounted","toEqual"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,WAAD,EAAc,YAAM;AAC1BA,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,IAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAClD,UAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,eAAM,2BAAN;AAAA,OAAvB;;AACA,UAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,eAAM,0BAAU;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAV,CAAN;AAAA,OAAzB;;AACA,UAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,eAAM,0BAAU;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAV,CAAN;AAAA,OAAxB;;AAEAC,MAAAA,MAAM,CAACL,cAAD,CAAN,CAAuBM,YAAvB,CAAoC,IAAIC,KAAJ,CAAU,qBAAV,CAApC;AACAF,MAAAA,MAAM,CAACJ,gBAAD,CAAN,CAAyBK,YAAzB,CAAsC,IAAIC,KAAJ,CAAU,qBAAV,CAAtC;AACAF,MAAAA,MAAM,CAACF,eAAD,CAAN,CAAwBG,YAAxB,CAAqC,IAAIC,KAAJ,CAAU,qBAAV,CAArC;AACD,KARC,CAAF;AASD,GAVO,CAAR;AAYAT,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,IAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACtC,UAAMG,IAAI,GAAG;AACXA,QAAAA,IAAI,EAAE,CACJ;AACEM,UAAAA,SAAS,EAAE,KADb;AAEEC,UAAAA,KAAK,EAAE;AAFT,SADI,EAKJ;AACED,UAAAA,SAAS,EAAE,IADb;AAEEC,UAAAA,KAAK,EAAE,EAFT;AAGEC,UAAAA,MAAM,EAAE;AAHV,SALI,EAUJ;AACEF,UAAAA,SAAS,EAAE,IADb;AAEEC,UAAAA,KAAK,EAAE,EAFT;AAGEC,UAAAA,MAAM,EAAE;AAHV,SAVI,EAeJ;AACEF,UAAAA,SAAS,EAAE,IADb;AAEEC,UAAAA,KAAK,EAAE,CAFT;AAGEE,UAAAA,UAAU,EAAE;AAHd,SAfI,CADK;AAsBXP,QAAAA,GAAG,EAAE;AAtBM,OAAb;AAyBAC,MAAAA,MAAM,CAAC,0BAAUH,IAAV,CAAD,CAAN,CAAwBU,OAAxB,CAAgC,EAAhC;AAEAV,MAAAA,IAAI,CAACE,GAAL,GAAW,QAAX;AACAC,MAAAA,MAAM,CAAC,0BAAUH,IAAV,CAAD,CAAN,CAAwBU,OAAxB,CAAgC,IAAhC;AACD,KA9BC,CAAF;AA+BD,GAhCO,CAAR;AAiCD,CA9CO,CAAR","sourcesContent":["import { getMaxVal } from '../getMaxVal';\n\ndescribe('getMaxVal', () => {\n  describe('Missing values', () => {\n    it('Should throw an error when missing data', () => {\n      const emptyGetMaxVal = () => getMaxVal();\n      const hasDataGetMaxVal = () => getMaxVal({ data: [] });\n      const hasKeyGetMaxVal = () => getMaxVal({ key: 'key' });\n\n      expect(emptyGetMaxVal).toThrowError(new Error('Missing data or key'));\n      expect(hasDataGetMaxVal).toThrowError(new Error('Missing data or key'));\n      expect(hasKeyGetMaxVal).toThrowError(new Error('Missing data or key'));\n    });\n  });\n\n  describe('Explicit values', () => {\n    it('Should return the max value', () => {\n      const data = {\n        data: [\n          {\n            isVisible: false,\n            value: 100000,\n          },\n          {\n            isVisible: true,\n            value: 67,\n            value2: 80,\n          },\n          {\n            isVisible: true,\n            value: 50,\n            value2: 2300,\n          },\n          {\n            isVisible: true,\n            value: 1,\n            notCounted: 200,\n          },\n        ],\n        key: 'value',\n      };\n\n      expect(getMaxVal(data)).toEqual(67);\n\n      data.key = 'value2';\n      expect(getMaxVal(data)).toEqual(2300);\n    });\n  });\n});\n"]}