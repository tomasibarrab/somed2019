dceb12c25b60860a00e8c6603eac748a
"use strict";

var _sinon = _interopRequireDefault(require("sinon"));

var _propTypes = require("prop-types");

var _numberOrString = require("../numberOrString");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
var checkProps = function checkProps(p) {
  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    numberOrString: _numberOrString.numberOrString
  };
  var props = {
    numberOrString: p
  };
  (0, _propTypes.checkPropTypes)(propTypes, props, 'prop', 'TestComponent');
};

var createCheckPropErrorCalled = function createCheckPropErrorCalled(stub) {
  return function (props) {
    var expectCalled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    checkProps(props);
    expect(stub.calledOnce).toBe(expectCalled);
  };
};

describe('numberOrString', function () {
  var checkPropErrorCalled;
  beforeEach(function () {
    var stub = _sinon.default.stub(console, 'error');

    checkPropErrorCalled = createCheckPropErrorCalled(stub);
  });
  afterEach(function () {
    console.error.restore();
  }); //

  describe('Wrong values', function () {
    it('Should throw an error when no prop is passed', function () {
      checkPropErrorCalled(undefined);
    });
    it('Should throw an error when a prop of type Object is passed', function () {
      checkPropErrorCalled({});
    });
  });
  describe('Correct values', function () {
    it('Should do nothing when correct prop of type String is provided', function () {
      checkPropErrorCalled('String', false);
    });
    it('Should do nothing when correct prop of type number is provided', function () {
      checkPropErrorCalled(122, false);
    });
    it('Should do nothing when correct prop of type decimal is provided', function () {
      checkPropErrorCalled(18.214, false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm51bWJlck9yU3RyaW5nLnRlc3QuanMiXSwibmFtZXMiOlsiY2hlY2tQcm9wcyIsInAiLCJwcm9wVHlwZXMiLCJudW1iZXJPclN0cmluZyIsInByb3BzIiwiY3JlYXRlQ2hlY2tQcm9wRXJyb3JDYWxsZWQiLCJzdHViIiwiZXhwZWN0Q2FsbGVkIiwiZXhwZWN0IiwiY2FsbGVkT25jZSIsInRvQmUiLCJkZXNjcmliZSIsImNoZWNrUHJvcEVycm9yQ2FsbGVkIiwiYmVmb3JlRWFjaCIsInNpbm9uIiwiY29uc29sZSIsImFmdGVyRWFjaCIsImVycm9yIiwicmVzdG9yZSIsIml0IiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOztBQUNBOzs7O0FBSEE7QUFLQSxJQUFNQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDQyxDQUFELEVBQXVDO0FBQUEsTUFBbkNDLFNBQW1DLHVFQUF2QjtBQUFFQyxJQUFBQSxjQUFjLEVBQWRBO0FBQUYsR0FBdUI7QUFDeEQsTUFBTUMsS0FBSyxHQUFHO0FBQUVELElBQUFBLGNBQWMsRUFBRUY7QUFBbEIsR0FBZDtBQUNBLGlDQUFlQyxTQUFmLEVBQTBCRSxLQUExQixFQUFpQyxNQUFqQyxFQUF5QyxlQUF6QztBQUNELENBSEQ7O0FBS0EsSUFBTUMsMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUE2QixDQUFDQyxJQUFEO0FBQUEsU0FBVSxVQUFDRixLQUFELEVBQWdDO0FBQUEsUUFBeEJHLFlBQXdCLHVFQUFULElBQVM7QUFDM0VQLElBQUFBLFVBQVUsQ0FBQ0ksS0FBRCxDQUFWO0FBQ0FJLElBQUFBLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDRyxVQUFOLENBQU4sQ0FBd0JDLElBQXhCLENBQTZCSCxZQUE3QjtBQUNELEdBSGtDO0FBQUEsQ0FBbkM7O0FBS0FJLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQy9CLE1BQUlDLG9CQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2YsUUFBTVAsSUFBSSxHQUFHUSxlQUFNUixJQUFOLENBQVdTLE9BQVgsRUFBb0IsT0FBcEIsQ0FBYjs7QUFDQUgsSUFBQUEsb0JBQW9CLEdBQUdQLDBCQUEwQixDQUFDQyxJQUFELENBQWpEO0FBQ0QsR0FIUyxDQUFWO0FBS0FVLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RELElBQUFBLE9BQU8sQ0FBQ0UsS0FBUixDQUFjQyxPQUFkO0FBQ0QsR0FGUSxDQUFULENBUitCLENBWS9COztBQUNBUCxFQUFBQSxRQUFRLENBQUMsY0FBRCxFQUFpQixZQUFNO0FBQzdCUSxJQUFBQSxFQUFFLENBQUMsOENBQUQsRUFBaUQsWUFBTTtBQUN2RFAsTUFBQUEsb0JBQW9CLENBQUNRLFNBQUQsQ0FBcEI7QUFDRCxLQUZDLENBQUY7QUFJQUQsSUFBQUEsRUFBRSxDQUFDLDREQUFELEVBQStELFlBQU07QUFDckVQLE1BQUFBLG9CQUFvQixDQUFDLEVBQUQsQ0FBcEI7QUFDRCxLQUZDLENBQUY7QUFHRCxHQVJPLENBQVI7QUFVQUQsRUFBQUEsUUFBUSxDQUFDLGdCQUFELEVBQW1CLFlBQU07QUFDL0JRLElBQUFBLEVBQUUsQ0FBQyxnRUFBRCxFQUFtRSxZQUFNO0FBQ3pFUCxNQUFBQSxvQkFBb0IsQ0FBQyxRQUFELEVBQVcsS0FBWCxDQUFwQjtBQUNELEtBRkMsQ0FBRjtBQUlBTyxJQUFBQSxFQUFFLENBQUMsZ0VBQUQsRUFBbUUsWUFBTTtBQUN6RVAsTUFBQUEsb0JBQW9CLENBQUMsR0FBRCxFQUFNLEtBQU4sQ0FBcEI7QUFDRCxLQUZDLENBQUY7QUFJQU8sSUFBQUEsRUFBRSxDQUFDLGlFQUFELEVBQW9FLFlBQU07QUFDMUVQLE1BQUFBLG9CQUFvQixDQUFDLE1BQUQsRUFBUyxLQUFULENBQXBCO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FaTyxDQUFSO0FBYUQsQ0FwQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyBjaGVja1Byb3BUeXBlcyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbnVtYmVyT3JTdHJpbmcgfSBmcm9tICcuLi9udW1iZXJPclN0cmluZyc7XG5cbmNvbnN0IGNoZWNrUHJvcHMgPSAocCwgcHJvcFR5cGVzID0geyBudW1iZXJPclN0cmluZyB9KSA9PiB7XG4gIGNvbnN0IHByb3BzID0geyBudW1iZXJPclN0cmluZzogcCB9O1xuICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIHByb3BzLCAncHJvcCcsICdUZXN0Q29tcG9uZW50Jyk7XG59O1xuXG5jb25zdCBjcmVhdGVDaGVja1Byb3BFcnJvckNhbGxlZCA9IChzdHViKSA9PiAocHJvcHMsIGV4cGVjdENhbGxlZCA9IHRydWUpID0+IHtcbiAgY2hlY2tQcm9wcyhwcm9wcyk7XG4gIGV4cGVjdChzdHViLmNhbGxlZE9uY2UpLnRvQmUoZXhwZWN0Q2FsbGVkKTtcbn07XG5cbmRlc2NyaWJlKCdudW1iZXJPclN0cmluZycsICgpID0+IHtcbiAgbGV0IGNoZWNrUHJvcEVycm9yQ2FsbGVkO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHN0dWIgPSBzaW5vbi5zdHViKGNvbnNvbGUsICdlcnJvcicpO1xuICAgIGNoZWNrUHJvcEVycm9yQ2FsbGVkID0gY3JlYXRlQ2hlY2tQcm9wRXJyb3JDYWxsZWQoc3R1Yik7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgY29uc29sZS5lcnJvci5yZXN0b3JlKCk7XG4gIH0pO1xuXG4gIC8vXG4gIGRlc2NyaWJlKCdXcm9uZyB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIG5vIHByb3AgaXMgcGFzc2VkJywgKCkgPT4ge1xuICAgICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQodW5kZWZpbmVkKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBhIHByb3Agb2YgdHlwZSBPYmplY3QgaXMgcGFzc2VkJywgKCkgPT4ge1xuICAgICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQoe30pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29ycmVjdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCBkbyBub3RoaW5nIHdoZW4gY29ycmVjdCBwcm9wIG9mIHR5cGUgU3RyaW5nIGlzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQoJ1N0cmluZycsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgZG8gbm90aGluZyB3aGVuIGNvcnJlY3QgcHJvcCBvZiB0eXBlIG51bWJlciBpcyBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNoZWNrUHJvcEVycm9yQ2FsbGVkKDEyMiwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBkbyBub3RoaW5nIHdoZW4gY29ycmVjdCBwcm9wIG9mIHR5cGUgZGVjaW1hbCBpcyBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNoZWNrUHJvcEVycm9yQ2FsbGVkKDE4LjIxNCwgZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19