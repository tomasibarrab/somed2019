3d214552271c8f929965705247d22152
"use strict";

var _sinon = _interopRequireDefault(require("sinon"));

var _propTypes = require("prop-types");

var _paddingShape = require("../paddingShape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
var checkProps = function checkProps(p) {
  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    padding: _paddingShape.paddingShape
  };
  var props = {
    padding: p
  };
  (0, _propTypes.checkPropTypes)(propTypes, props, 'prop', 'TestComponent');
};

var createCheckPropErrorCalled = function createCheckPropErrorCalled(stub) {
  return function (props) {
    var expectCalled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    checkProps(props);
    expect(stub.calledOnce).toBe(expectCalled);
  };
};

describe('defaultPadding', function () {
  it('should match css-style padding shorthand', function () {
    var keys = Object.keys(_paddingShape.defaultPadding);
    expect(keys).toEqual(['top', 'right', 'bottom', 'left']);
  });
});
describe('paddingShape', function () {
  var checkPropErrorCalled;
  beforeEach(function () {
    var stub = _sinon.default.stub(console, 'error');

    checkPropErrorCalled = createCheckPropErrorCalled(stub);
  });
  afterEach(function () {
    console.error.restore();
  }); //

  describe('Wrong values', function () {
    it('Should return false when no prop is passed', function () {
      checkPropErrorCalled(false);
    });
    it('Should throw an error when a wrong prop value is passed', function () {
      checkPropErrorCalled({
        top: '0',
        right: 0,
        bottom: 0,
        left: 0
      });
    });
  });
  describe('Correct values', function () {
    it('Should do nothing when correct prop of types are provided', function () {
      checkPropErrorCalled({
        top: 20,
        right: 15,
        bottom: 11,
        left: 0
      }, false);
    });
    it('Should do nothing when partial props are provided', function () {
      checkPropErrorCalled({
        top: 20
      }, false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZGRpbmdTaGFwZS50ZXN0LmpzIl0sIm5hbWVzIjpbImNoZWNrUHJvcHMiLCJwIiwicHJvcFR5cGVzIiwicGFkZGluZyIsInBhZGRpbmdTaGFwZSIsInByb3BzIiwiY3JlYXRlQ2hlY2tQcm9wRXJyb3JDYWxsZWQiLCJzdHViIiwiZXhwZWN0Q2FsbGVkIiwiZXhwZWN0IiwiY2FsbGVkT25jZSIsInRvQmUiLCJkZXNjcmliZSIsIml0Iiwia2V5cyIsIk9iamVjdCIsImRlZmF1bHRQYWRkaW5nIiwidG9FcXVhbCIsImNoZWNrUHJvcEVycm9yQ2FsbGVkIiwiYmVmb3JlRWFjaCIsInNpbm9uIiwiY29uc29sZSIsImFmdGVyRWFjaCIsImVycm9yIiwicmVzdG9yZSIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUhBO0FBS0EsSUFBTUEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsQ0FBRCxFQUE4QztBQUFBLE1BQTFDQyxTQUEwQyx1RUFBOUI7QUFBRUMsSUFBQUEsT0FBTyxFQUFFQztBQUFYLEdBQThCO0FBQy9ELE1BQU1DLEtBQUssR0FBRztBQUFFRixJQUFBQSxPQUFPLEVBQUVGO0FBQVgsR0FBZDtBQUNBLGlDQUFlQyxTQUFmLEVBQTBCRyxLQUExQixFQUFpQyxNQUFqQyxFQUF5QyxlQUF6QztBQUNELENBSEQ7O0FBS0EsSUFBTUMsMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUE2QixDQUFDQyxJQUFEO0FBQUEsU0FBVSxVQUFDRixLQUFELEVBQWdDO0FBQUEsUUFBeEJHLFlBQXdCLHVFQUFULElBQVM7QUFDM0VSLElBQUFBLFVBQVUsQ0FBQ0ssS0FBRCxDQUFWO0FBQ0FJLElBQUFBLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDRyxVQUFOLENBQU4sQ0FBd0JDLElBQXhCLENBQTZCSCxZQUE3QjtBQUNELEdBSGtDO0FBQUEsQ0FBbkM7O0FBS0FJLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQy9CQyxFQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUNuRCxRQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRSw0QkFBWixDQUFiO0FBQ0FQLElBQUFBLE1BQU0sQ0FBQ0ssSUFBRCxDQUFOLENBQWFHLE9BQWIsQ0FBcUIsQ0FDbkIsS0FEbUIsRUFFbkIsT0FGbUIsRUFHbkIsUUFIbUIsRUFJbkIsTUFKbUIsQ0FBckI7QUFNRCxHQVJDLENBQUY7QUFTRCxDQVZPLENBQVI7QUFZQUwsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QixNQUFJTSxvQkFBSjtBQUVBQyxFQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmLFFBQU1aLElBQUksR0FBR2EsZUFBTWIsSUFBTixDQUFXYyxPQUFYLEVBQW9CLE9BQXBCLENBQWI7O0FBQ0FILElBQUFBLG9CQUFvQixHQUFHWiwwQkFBMEIsQ0FBQ0MsSUFBRCxDQUFqRDtBQUNELEdBSFMsQ0FBVjtBQUtBZSxFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkRCxJQUFBQSxPQUFPLENBQUNFLEtBQVIsQ0FBY0MsT0FBZDtBQUNELEdBRlEsQ0FBVCxDQVI2QixDQVk3Qjs7QUFDQVosRUFBQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QkMsSUFBQUEsRUFBRSxDQUFDLDRDQUFELEVBQStDLFlBQU07QUFDckRLLE1BQUFBLG9CQUFvQixDQUFDLEtBQUQsQ0FBcEI7QUFDRCxLQUZDLENBQUY7QUFJQUwsSUFBQUEsRUFBRSxDQUFDLHlEQUFELEVBQTRELFlBQU07QUFDbEVLLE1BQUFBLG9CQUFvQixDQUFDO0FBQ25CTyxRQUFBQSxHQUFHLEVBQUUsR0FEYztBQUVuQkMsUUFBQUEsS0FBSyxFQUFFLENBRlk7QUFHbkJDLFFBQUFBLE1BQU0sRUFBRSxDQUhXO0FBSW5CQyxRQUFBQSxJQUFJLEVBQUU7QUFKYSxPQUFELENBQXBCO0FBTUQsS0FQQyxDQUFGO0FBUUQsR0FiTyxDQUFSO0FBZUFoQixFQUFBQSxRQUFRLENBQUMsZ0JBQUQsRUFBbUIsWUFBTTtBQUMvQkMsSUFBQUEsRUFBRSxDQUFDLDJEQUFELEVBQThELFlBQU07QUFDcEVLLE1BQUFBLG9CQUFvQixDQUFDO0FBQ25CTyxRQUFBQSxHQUFHLEVBQUUsRUFEYztBQUVuQkMsUUFBQUEsS0FBSyxFQUFFLEVBRlk7QUFHbkJDLFFBQUFBLE1BQU0sRUFBRSxFQUhXO0FBSW5CQyxRQUFBQSxJQUFJLEVBQUU7QUFKYSxPQUFELEVBS2pCLEtBTGlCLENBQXBCO0FBTUQsS0FQQyxDQUFGO0FBU0FmLElBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFNO0FBQzVESyxNQUFBQSxvQkFBb0IsQ0FBQztBQUNuQk8sUUFBQUEsR0FBRyxFQUFFO0FBRGMsT0FBRCxFQUVqQixLQUZpQixDQUFwQjtBQUdELEtBSkMsQ0FBRjtBQUtELEdBZk8sQ0FBUjtBQWdCRCxDQTVDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IGNoZWNrUHJvcFR5cGVzIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWZhdWx0UGFkZGluZywgcGFkZGluZ1NoYXBlIH0gZnJvbSAnLi4vcGFkZGluZ1NoYXBlJztcblxuY29uc3QgY2hlY2tQcm9wcyA9IChwLCBwcm9wVHlwZXMgPSB7IHBhZGRpbmc6IHBhZGRpbmdTaGFwZSB9KSA9PiB7XG4gIGNvbnN0IHByb3BzID0geyBwYWRkaW5nOiBwIH07XG4gIGNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgcHJvcHMsICdwcm9wJywgJ1Rlc3RDb21wb25lbnQnKTtcbn07XG5cbmNvbnN0IGNyZWF0ZUNoZWNrUHJvcEVycm9yQ2FsbGVkID0gKHN0dWIpID0+IChwcm9wcywgZXhwZWN0Q2FsbGVkID0gdHJ1ZSkgPT4ge1xuICBjaGVja1Byb3BzKHByb3BzKTtcbiAgZXhwZWN0KHN0dWIuY2FsbGVkT25jZSkudG9CZShleHBlY3RDYWxsZWQpO1xufTtcblxuZGVzY3JpYmUoJ2RlZmF1bHRQYWRkaW5nJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG1hdGNoIGNzcy1zdHlsZSBwYWRkaW5nIHNob3J0aGFuZCcsICgpID0+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFBhZGRpbmcpO1xuICAgIGV4cGVjdChrZXlzKS50b0VxdWFsKFtcbiAgICAgICd0b3AnLFxuICAgICAgJ3JpZ2h0JyxcbiAgICAgICdib3R0b20nLFxuICAgICAgJ2xlZnQnLFxuICAgIF0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncGFkZGluZ1NoYXBlJywgKCkgPT4ge1xuICBsZXQgY2hlY2tQcm9wRXJyb3JDYWxsZWQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc3Qgc3R1YiA9IHNpbm9uLnN0dWIoY29uc29sZSwgJ2Vycm9yJyk7XG4gICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQgPSBjcmVhdGVDaGVja1Byb3BFcnJvckNhbGxlZChzdHViKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yLnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgLy9cbiAgZGVzY3JpYmUoJ1dyb25nIHZhbHVlcycsICgpID0+IHtcbiAgICBpdCgnU2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIG5vIHByb3AgaXMgcGFzc2VkJywgKCkgPT4ge1xuICAgICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGEgd3JvbmcgcHJvcCB2YWx1ZSBpcyBwYXNzZWQnLCAoKSA9PiB7XG4gICAgICBjaGVja1Byb3BFcnJvckNhbGxlZCh7XG4gICAgICAgIHRvcDogJzAnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb3JyZWN0IHZhbHVlcycsICgpID0+IHtcbiAgICBpdCgnU2hvdWxkIGRvIG5vdGhpbmcgd2hlbiBjb3JyZWN0IHByb3Agb2YgdHlwZXMgYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY2hlY2tQcm9wRXJyb3JDYWxsZWQoe1xuICAgICAgICB0b3A6IDIwLFxuICAgICAgICByaWdodDogMTUsXG4gICAgICAgIGJvdHRvbTogMTEsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGRvIG5vdGhpbmcgd2hlbiBwYXJ0aWFsIHByb3BzIGFyZSBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNoZWNrUHJvcEVycm9yQ2FsbGVkKHtcbiAgICAgICAgdG9wOiAyMCxcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==