20eaec906615c395ec0ef4a3f2f4a335
"use strict";

/* istanbul ignore next */
var cov_1nhlfw93s5 = function () {
  var path = "/app/src/utils/general/getMaxVal.ts";
  var hash = "31b002c59398617ce8da47754f1ac3819de301b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/app/src/utils/general/getMaxVal.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "3": {
        start: {
          line: 9,
          column: 13
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "4": {
        start: {
          line: 9,
          column: 45
        },
        end: {
          line: 9,
          column: 52
        }
      },
      "5": {
        start: {
          line: 9,
          column: 60
        },
        end: {
          line: 9,
          column: 66
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 12,
          column: 5
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 47
        }
      },
      "8": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "9": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 14,
          column: 68
        }
      },
      "10": {
        start: {
          line: 15,
          column: 31
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "11": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "12": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 17
        }
      },
      "14": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 20,
          column: 89
        }
      },
      "15": {
        start: {
          line: 20,
          column: 56
        },
        end: {
          line: 20,
          column: 86
        }
      },
      "16": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "17": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "18": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 8,
            column: 21
          }
        },
        loc: {
          start: {
            line: 8,
            column: 34
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 17
          }
        },
        loc: {
          start: {
            line: 14,
            column: 29
          },
          end: {
            line: 14,
            column: 70
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 17
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 15,
            column: 62
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 16,
            column: 13
          },
          end: {
            line: 16,
            column: 14
          }
        },
        loc: {
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 16,
            column: 44
          }
        },
        line: 16
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 20,
            column: 40
          },
          end: {
            line: 20,
            column: 41
          }
        },
        loc: {
          start: {
            line: 20,
            column: 54
          },
          end: {
            line: 20,
            column: 88
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 13
          },
          end: {
            line: 9,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 29
          },
          end: {
            line: 9,
            column: 31
          }
        }, {
          start: {
            line: 9,
            column: 34
          },
          end: {
            line: 9,
            column: 36
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        }, {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 13
          }
        }, {
          start: {
            line: 10,
            column: 17
          },
          end: {
            line: 10,
            column: 21
          }
        }],
        line: 10
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }],
        line: 21
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "31b002c59398617ce8da47754f1ac3819de301b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_1nhlfw93s5.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
var max_1 =
/* istanbul ignore next */
(cov_1nhlfw93s5.s[1]++, require("./max"));
/**
 * Gets the max value from an arrays visible values
 * If the array is not number based it will return the length instead
 */

/* istanbul ignore next */
cov_1nhlfw93s5.s[2]++;

exports.getMaxVal = function (_a) {
  /* istanbul ignore next */
  cov_1nhlfw93s5.f[0]++;

  var _b =
  /* istanbul ignore next */
  (cov_1nhlfw93s5.s[3]++, _a === void 0 ?
  /* istanbul ignore next */
  (cov_1nhlfw93s5.b[0][0]++, {}) :
  /* istanbul ignore next */
  (cov_1nhlfw93s5.b[0][1]++, _a)),
      data =
  /* istanbul ignore next */
  (cov_1nhlfw93s5.s[4]++, _b.data),
      key =
  /* istanbul ignore next */
  (cov_1nhlfw93s5.s[5]++, _b.key);

  /* istanbul ignore next */
  cov_1nhlfw93s5.s[6]++;

  if (
  /* istanbul ignore next */
  (cov_1nhlfw93s5.b[2][0]++, !data) ||
  /* istanbul ignore next */
  (cov_1nhlfw93s5.b[2][1]++, !key)) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.b[1][0]++;
    cov_1nhlfw93s5.s[7]++;
    throw new Error('Missing data or key');
  } else
  /* istanbul ignore next */
  {
    cov_1nhlfw93s5.b[1][1]++;
  }

  var array =
  /* istanbul ignore next */
  (cov_1nhlfw93s5.s[8]++, data.filter(function (d) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.f[1]++;
    cov_1nhlfw93s5.s[9]++;
    return typeof d[key] !== 'undefined';
  }).filter(function (d) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.f[2]++;
    cov_1nhlfw93s5.s[10]++;
    return d.isVisible !== false;
  }).map(function (d) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.f[3]++;
    cov_1nhlfw93s5.s[11]++;
    return d[key];
  }));

  /* istanbul ignore next */
  cov_1nhlfw93s5.s[12]++;

  if (array.length === 0) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.b[3][0]++;
    cov_1nhlfw93s5.s[13]++;
    return 0;
  } else
  /* istanbul ignore next */
  {
    cov_1nhlfw93s5.b[3][1]++;
  }

  var arrayIsAllNumbers =
  /* istanbul ignore next */
  (cov_1nhlfw93s5.s[14]++, array.every(function (el) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.f[4]++;
    cov_1nhlfw93s5.s[15]++;
    return typeof el === 'number';
  }));

  /* istanbul ignore next */
  cov_1nhlfw93s5.s[16]++;

  if (arrayIsAllNumbers) {
    /* istanbul ignore next */
    cov_1nhlfw93s5.b[4][0]++;
    cov_1nhlfw93s5.s[17]++;
    return max_1.max(array);
  } else
  /* istanbul ignore next */
  {
    cov_1nhlfw93s5.b[4][1]++;
  }

  cov_1nhlfw93s5.s[18]++;
  return array.length - 1;
};