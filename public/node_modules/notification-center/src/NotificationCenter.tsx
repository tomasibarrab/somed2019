import { AlertMessage } from '@buffet/alert-message';
import { Notify } from '@buffet/notify';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { removeNotification } from './notifications';
import { Notification, NotificationState } from './types';

interface SP {
  notifications: Notification[];
}

interface DP {
  removeNotification: (payload: number) => void;
}

type Props = SP & DP & InjectedIntlProps;

class NotificationCenter extends React.Component<Props> {
  public render() {
    const {
      intl: { formatMessage },
      notifications,
    } = this.props;

    return (
      <Notify show={notifications.length > 0} delay={0} autohide={false}>
        {notifications.map((notification, index) => (
          <AlertMessage
            key={`notification-${index}`}
            id={`notification-${index}`}
            type={notification.type || 'error'}
            iconId={notification.iconId || 'information'}
            message={notification.messageValues
              ? formatMessage({ id: notification.messageId }, notification.messageValues)
              : formatMessage({ id: notification.messageId })}
            onClose={this.removeNotificationHandler(index)}
          />
        ))}
      </Notify>
    );
  }

  private removeNotificationHandler = (index: number) => () => this.props.removeNotification(index);
}

const mapState = (state: NotificationState): SP => ({
  notifications: state.notifications,
});

const mapDispatch = {
  removeNotification,
};

export default connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(injectIntl(NotificationCenter));
export { NotificationCenter as PureNotificationCenter, Props };
