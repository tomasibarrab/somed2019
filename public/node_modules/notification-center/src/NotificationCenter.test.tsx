import { AlertMessage } from '@buffet/alert-message';
import { Notify } from '@buffet/notify';
import { shallow } from 'enzyme';
import React from 'react';
import { Props, PureNotificationCenter as NotificationCenter } from './NotificationCenter';

describe('notification center component', () => {
  const setup = (override = {}) => {
    const { notifications = [] } = override as Props;
    const props: Props = {
      intl: { formatMessage: jest.fn(x => x.id) } as any,
      notifications,
      removeNotification: jest.fn(),
    };
    const notificationCenter = shallow(<NotificationCenter {...props} />);

    return { props, notificationCenter };
  };

  it('should not show if there are no notifications', () => {
    const { notificationCenter } = setup({ notifications: [] });
    const notify = notificationCenter.find(Notify);

    expect(notify.length).toBe(1);
    expect(notify.props().show).toBe(false);
  });

  it('should show if there are notifications', () => {
    const messageId = 'error message';
    const { notificationCenter, props } = setup({ notifications: [{ messageId }] });
    const notify = notificationCenter.find(Notify);
    const alerts = notificationCenter.find(AlertMessage);

    expect(notify.length).toBe(1);
    expect(notify.props().show).toBe(true);

    expect(alerts.length).toBe(1);
    expect(alerts.props().message).toEqual(messageId);

    expect(props.intl.formatMessage).toHaveBeenCalledWith({ id: messageId });
  });

  it('should show multiple alerts', () => {
    const { notificationCenter } = setup({ notifications: [{ messageId: 'danger 1' }, { messageId: 'error 2' }] });
    const notify = notificationCenter.find(Notify);
    const alerts = notificationCenter.find(AlertMessage);

    expect(notify.length).toBe(1);
    expect(notify.props().show).toBe(true);

    expect(alerts.length).toBe(2);
    expect(alerts.get(0).props.message).toEqual('danger 1');
    expect(alerts.get(1).props.message).toEqual('error 2');
  });

  it('should be able to change the iconId and alert type', () => {
    const { notificationCenter } = setup({
      notifications: [
        { messageId: 'Good thing', type: 'success' },
        { messageId: 'a personal problem', iconId: 'person' },
      ],
    });

    const alerts = notificationCenter.find(AlertMessage);

    expect(alerts.length).toBe(2);
    const firstAlertProps = alerts.get(0).props;
    expect(firstAlertProps.message).toEqual('Good thing');
    expect(firstAlertProps.iconId).toEqual('information');
    expect(firstAlertProps.type).toEqual('success');

    const secondAlertProps = alerts.get(1).props;
    expect(secondAlertProps.message).toEqual('a personal problem');
    expect(secondAlertProps.iconId).toEqual('person');
    expect(secondAlertProps.type).toEqual('error');
  });
});
