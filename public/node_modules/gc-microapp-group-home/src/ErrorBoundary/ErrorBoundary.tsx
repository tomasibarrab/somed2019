import { ErrorPanel } from 'gca-react-components';
import React from "react";
import { InjectedIntlProps, injectIntl } from 'react-intl';

interface SP {
  errorComponent: JSX.Element;
}

interface State {
  hasError: boolean;
}

type Props = InjectedIntlProps;

class ErrorBoundary extends React.Component <Props, State> {
  public static getDerivedStateFromError(error: any) {
    // tslint:disable-next-line:no-console
    console.log("getDerivedStateFromError: ", error);
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  constructor(props: any) {
    super(props);
    this.state = { hasError: false };
  }


  public componentDidCatch(error: Error, info: any) {
    // tslint:disable-next-line:no-console
    console.log("componentDidCatch: ", error, info);
    this.setState({ hasError: true });
  }

  public render() {
    const { intl } = this.props;

    if (this.state.hasError) {
      return <div className="error-boundary">
        <ErrorPanel
          title={ intl.formatMessage({id: 'app.errorTitle'}) }
          message={ intl.formatMessage({id: 'app.errorMessage'}) }
        />
      </div>;

    }
    return this.props.children;
  }
}

export default injectIntl(ErrorBoundary);
export { ErrorBoundary as PureErrorBoundary};
