// tslint:disable: only-arrow-functions
import {
  simple_agreement,
  priced_agreement,
  special_priced_agreement,
} from '../fixtures/agreements';


const gatewayBase = '/gateway/proxies';
const uasBase = `${gatewayBase}/userAgreementService/v1/user-agreement/agreements`;

describe('Agreement Details page', () => {
  beforeEach(() => {
    cy.server();
    // mock unnecessary requests (made by chrome, or otherwise)
    cy.route('/sockjs-node/**', '').as('nodeSock');
    cy.route(`${gatewayBase}/featureManager/**`, '').as('apiFeatureManager');
    cy.route(`${gatewayBase}/gcrestaurant/**`, '').as('apiRestaurantInfo');
    cy.route('/restaurant-search/**', '').as('apiRestaurantSearch');
    cy.route('POST', '/restaurant-search/**', '').as('apiRestaurantSearch');
  });

  it('Should show a loading indicator', () => {
    // mock the UAS request with a very long delay
    cy.route('GET', `${uasBase}/test-id`, () => simple_agreement, { delay: 500 }).as('apiAgreement');

    cy.visit('/agreements/test-id');

    // check the loading indicator is displayed until the Agreement is fetched
    cy.get('.gca-loading-panel')
      .should('exist');

    cy.wait('@apiAgreement');
  });

  it('Should show a basic User Agreement', () => {
    // mock the UAS request
    cy.route('GET', `${uasBase}/test-id`, () => simple_agreement).as('apiAgreement');

    cy.visit('/agreements/test-id');
    cy.wait('@apiAgreement');

    // check the agreement title is displayed
    cy.get('#agreement-title')
      .should('contain', simple_agreement.termsAndConditions[0].title);

    // check the agreement status is displayed
    cy.get('#agreement-status')
      .should('contain', simple_agreement.state);

    // check the agreement terms are displayed
    cy.get('#agreement-terms')
      .should('contain', simple_agreement.termsAndConditions[0].content);

    // also check for terms section title - it should not be there when no pricing is available
    cy.get('#agreement-terms > h1')
      .should('not.exist');
  });

  it('Should show a priced User Agreement', () => {
    // mock the UAS request
    cy.route('GET', `${uasBase}/test-id`, () => priced_agreement).as('apiAgreement');

    cy.visit('/agreements/test-id');
    cy.wait('@apiAgreement');

    // check the agreement title is displayed
    cy.get('#agreement-title')
      .should('contain', priced_agreement.termsAndConditions[0].title);

    // check the agreement status is displayed
    cy.get('#agreement-status')
      .should('contain', priced_agreement.state);

    // check the pricing details are displayed correctly
    cy.get('#agreement-pricing .pricing-title')
      .should('exist')
      .and('not.be.empty');

    cy.get('#agreement-pricing .pricing-section')
      .should('exist')
      .and('have.length', 3);

    cy.get('#pricing-items ul li')
      .should('have.length', priced_agreement.pricingDetails.length)
      .each(($li, $i) => {
        expect($li).to.contain(priced_agreement.pricingDetails[$i].listPrice);
      });

    // check the agreement terms are displayed
    cy.get('#agreement-terms')
      .should('contain', priced_agreement.termsAndConditions[0].content);

    // also check for terms section title - it should be there when pricing is available
    cy.get('#agreement-terms > h1')
      .should('exist')
      .and('contain', 'Terms and Conditions');
  });

  it('Should not show zero-based prices', () => {
    // mock the UAS request
    cy.route('GET', `${uasBase}/test-id`, () => special_priced_agreement).as('apiAgreement');

    cy.visit('/agreements/test-id');
    cy.wait('@apiAgreement');

    // pricing items should be filtered by 1
    cy.get('#pricing-items ul li')
      .should('have.length', special_priced_agreement.pricingDetails.length - 1);
  });

  it('Should trigger the Print function', () => {
    // mock the UAS request
    cy.route('GET', `${uasBase}/test-id`, () => simple_agreement).as('apiAgreement');

    cy.visit('/agreements/test-id', {
      onBeforeLoad: (win) => {
        // stub the window.print() function
        cy.stub(win, 'print');
      },
    });

    cy.wait('@apiAgreement');

    // check for the 'Print' button and click it
    cy.get('.header-print-section button')
      .should('exist')
      .click();

    cy.window()
      .its('print')
      .should('be.called');
  });
});
