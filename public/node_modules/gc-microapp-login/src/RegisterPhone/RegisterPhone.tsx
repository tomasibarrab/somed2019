import React from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { Redirect } from 'react-router';
import { PhoneInputFinalField } from 'shared-react-atomic-ui/finalform-fields';
import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync';
import * as validate from 'shared-utils/validate';

import * as api from '../common/api';
import { Routes } from '../common/App/routes';
import { SubmitButton } from '../common/App/SubmitButton';
import LoginContainer from '../common/LoginContainer/LoginContainer';
import { MessagePanel } from '../common/MessagePanel/MessagePanel';
import { LoginCredentials, LoginRequest, LoginResponse, Message, RegisterPhoneRequest } from '../common/types';


import registerPhoneImage from './registerPhone.gif';

interface RegisterPhoneOwnProps {
  loginCredentials: LoginCredentials;
  handleLoginResponse: (response: LoginResponse, values: LoginRequest | RegisterPhoneRequest) => void;
  message: Message | undefined;
  handleConnectionFail: () => void;
}

type Props = RegisterPhoneOwnProps & InjectedIntlProps;

export function RegisterPhone({
  intl,
  loginCredentials,
  handleLoginResponse,
  message,
  handleConnectionFail,
}: Props) {

  const [registerPhoneStatus, registerPhone] = useAsync(api.registerPhone);

  const handleRequest = React.useCallback((values: RegisterPhoneRequest) => {
    registerPhone(values)
      .then((loginResp: LoginResponse) => {
        handleLoginResponse(loginResp, values)
      })
      .catch(err => {
        handleConnectionFail();
      });
  }, [handleLoginResponse, handleConnectionFail]);

  const inProgress = registerPhoneStatus.progress === AsyncProgress.Started;

  const validatePhone = React.useCallback(validate.create({
    phoneNumber: validate.custom((value: any | undefined) =>
      value && value.isValid,
      intl.formatMessage({ id: 'PhoneNumberInvalidMessage' }),
    ),
  }), []);

  const onSubmit = React.useCallback((values: any) => {
    handleRequest({
      cellphone: values.phoneNumber.shortValue,
      country_code: values.phoneNumber.valuePrefix,
      password: loginCredentials.password,
      username: loginCredentials.username,
    });
  }, [
      loginCredentials.password,
      loginCredentials.username,
      handleRequest,
    ]);

  if (!loginCredentials.username || !loginCredentials.password) {
    return <Redirect to={Routes.Login} />;
  }

  const inProgressStatus = inProgress || registerPhoneStatus.progress === AsyncProgress.Started;

  return (
    <LoginContainer>
      <Form
        onSubmit={onSubmit}
        validate={validatePhone}
        initialValues={{ phoneNumber: { defaultCountry: 'US' } }}
        render={({ handleSubmit }) => (
          <form onSubmit={handleSubmit}>
            <div className="login-content login-content--spacing-large">
              <div className="login-content">
                <img src={registerPhoneImage} alt="Mobile Phone" width="240" height="160"></img>
              </div>
              <div className="login-content login-font--title">
                <FormattedMessage id="SetUpTwoStepVerification" />
              </div>
              <div className="login-content">
                <FormattedMessage id="EnterYourMobileNumber" />
              </div>
            </div>
            <MessagePanel message={message} />
            <div className="login-content">
              <PhoneInputFinalField
                id="phone-id"
                name="phoneNumber"
                label={intl.formatMessage({ id: 'PhoneNumber' })}
                data-testid="phone-input"
              />
              <SubmitButton
                onSubmit={handleSubmit}
                inProgress={inProgressStatus}
                label={intl.formatMessage({ id: 'Next' })}
                data-testid="submit-button"
              />
              <div className="login-footer">
                <div>
                  <FormattedMessage id="YouWillNeedToEnterCode" />
                </div>
                <div>
                  <FormattedMessage id="CarrierRatesMayApply" />
                </div>
              </div>
            </div>
          </form>
        )}
      />
    </LoginContainer>
  );
}
export default injectIntl(RegisterPhone);
