import React from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { Redirect } from 'react-router';
import { InputFinalField } from 'shared-react-atomic-ui/finalform-fields';
import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync';
import * as validate from 'shared-utils/validate';

import { Button } from '@buffet/button';

import * as api from '../common/api';
import { Routes } from '../common/App/routes';
import { SubmitButton } from '../common/App/SubmitButton';
import LoginContainer from '../common/LoginContainer/LoginContainer';
import { MessagePanel } from '../common/MessagePanel/MessagePanel';
import { LoginCredentials, LoginRequest, LoginResponse, Message } from '../common/types';
import verifyCodeImage from './verifyCode.gif';


interface RegisterPhoneOwnProps {
  loginCredentials: LoginCredentials;
  handleLogin: (values: LoginRequest) => void;
  message: Message | undefined;
  setMessage: (message: Message | undefined) => void;
  inProgress: boolean;
  cellphone: string;
  handleLoginResponse: (response: LoginResponse, values: LoginRequest) => void;
  handleConnectionFail: () => void;
}

type Props = RegisterPhoneOwnProps & InjectedIntlProps;

export function VerifyCode({
  intl,
  loginCredentials,
  handleLogin,
  message,
  setMessage,
  inProgress,
  cellphone,
  handleLoginResponse,
  handleConnectionFail,
}: Props) {

  const [resend2faCodeStatus, resend2faCode] = useAsync(api.resend2faCode);

  const handleResendRequest = React.useCallback((values: LoginRequest) => {
    setMessage(undefined);
    resend2faCode(values)
      .then((loginResp: LoginResponse) => {
        handleLoginResponse(loginResp, values)
      })
      .catch(err => {
        handleConnectionFail();
      });
  }, [handleLoginResponse, handleConnectionFail]);

  const onResendCode = React.useCallback((): void => {
    handleResendRequest(loginCredentials)
  }, [handleResendRequest, loginCredentials.username, loginCredentials.password]);

  const onSubmit = React.useCallback((values: any) => {
    handleLogin({ code: values.code, password: loginCredentials.password, username: loginCredentials.username });
  }, [
      loginCredentials.password,
      loginCredentials.username,
      handleLogin,
    ]);

  if (!loginCredentials.username || !loginCredentials.password) {
    return <Redirect to={Routes.Login} />;
  }

  const validateCode = React.useCallback(validate.create({
    code: validate.required(intl.formatMessage({ id: 'EnterYourVerificationCode' })),
  }), []);

  const resendIsInProgress = resend2faCodeStatus.progress === AsyncProgress.Started;

  return (
    <LoginContainer>

      <Form
        onSubmit={onSubmit}
        validate={validateCode}
        render={({ handleSubmit }) => (
          <form onSubmit={handleSubmit}>
            <div className="login-content login-content--spacing-large">
              <div className="login-content">
                <img src={verifyCodeImage} alt="Mobile Phone" width="240" height="160"></img>
              </div>
              <div className="login-content login-font--title">
                <FormattedMessage id="EnterYourVerificationCode" />
              </div>
              <div className="login-content">
                {intl.formatMessage({ id: 'CheckPhoneForTextMessage' }, { phoneNumber: cellphone })}
              </div>
            </div>
            <MessagePanel message={message} />
            <div className="login-content">
              <InputFinalField
                autoFocus
                name="code"
                type="text"
                label={intl.formatMessage({ id: 'Code' })}
                data-testid="verify-code-input"
              />
              <SubmitButton
                onSubmit={handleSubmit}
                inProgress={inProgress}
                label={intl.formatMessage({ id: 'Submit' })}
                data-testid="submit-button"
              />
              <div className="login-footer">
                <FormattedMessage id="DidntReceiveToken" />
                <Button
                  className="resend-link-button"
                  size="large"
                  disabled={resendIsInProgress}
                  type="button"
                  theme="link"
                  onClick={onResendCode}
                  testId="resend-code-button">
                  <FormattedMessage id="ResendToken" />
                </Button>
              </div>
              <div className="login-footer">
                <FormattedMessage id="NeedToChangeYourMobileNumber" />
              </div>
              <div>
                <FormattedMessage id="CallOpenTablePhoneNumber" />
              </div>
            </div>
          </form>
        )}
      />

    </LoginContainer>
  );
}
export default injectIntl(VerifyCode);
