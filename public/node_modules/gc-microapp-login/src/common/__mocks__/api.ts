import { ErrorCode, LoginRequest, LoginResponse, RegisterPhoneRequest } from '../types';

const resolveResponse = (resolve, params) => {
  resolve({
    cellphone: null,
    errorCode: null,
    errorMessages: null,
    redirectUrl: null,
    resultStatus: 3,
    ...params,
  })
}

export function login(loginRequest: Partial<LoginRequest>): Promise<LoginResponse> {
  if (loginRequest.username === 'erroruser@opentable.com') {
    return new Promise((resolve, reject) => {
      resolveResponse(resolve, { errorMessages: ['ERROR MESSAGE HERE'] });
    });
  }

  if (loginRequest.username === 'user@needrecaptcha.net') {
    if (loginRequest.recaptchaTokenV2) {
      return new Promise((resolve, reject) => {
        resolveResponse(resolve, { redirectUrl: '/postlogin', resultStatus: 9 })
      });
    } else {
      return new Promise((resolve, reject) => {
        resolveResponse(resolve, { errorCode: ErrorCode.recaptchaRequired })
      });
    }
  }

  return new Promise((resolve, reject) => {
    resolveResponse(resolve, { redirectUrl: '/postlogin', resultStatus: 9 });
  });
}

export function registerPhone(registerPhoneRequest: Partial<RegisterPhoneRequest>): Promise<LoginResponse> {
  if (registerPhoneRequest.username === 'erroruser@opentable.com') {
    return new Promise((resolve, reject) => {
      resolveResponse(resolve, { errorMessages: ['ERROR MESSAGE HERE'] });
    });
  } else {
    return new Promise((resolve, reject) => {
      resolveResponse(resolve, { errorCode: ErrorCode.codeNeeded, resultStatus: 3 })
    });
  }
}

export function verifyCode(verifyCodeRequest: Partial<LoginRequest>): Promise<LoginResponse> {
  if (verifyCodeRequest.code === '666666') {
    return new Promise((resolve, reject) => {
      resolveResponse(resolve, { errorMessages: ['ERROR MESSAGE HERE'] })
    });
  }

  return new Promise((resolve, reject) => {
    resolveResponse(resolve, { redirectUrl: '/postlogin', resultStatus: 9 });
  });
}
