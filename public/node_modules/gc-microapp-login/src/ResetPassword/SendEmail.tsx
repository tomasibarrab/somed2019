import React, { useContext, useEffect } from 'react';
import { Form } from 'react-final-form';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync';
import * as validate from 'shared-utils/validate';

import * as api from '../common/api';
import { ConnectionLostCtx } from '../common/App/App';
import { Message, MessageType } from '../common/types';
import EmailSent from './EmailSent';
import EnterEmail from './EnterEmail';

interface StateProps {
  email?: string;
  errorMessage?: string;
}

type Props = StateProps & InjectedIntlProps;

export function SendEmail({ intl, email, errorMessage }: Props) {

  const [resetPasswordStatus, resetPassword] = useAsync(api.resetPassword);
  const [message, setMessage] = React.useState<Message>();
  const showConnectionLostModal = useContext(ConnectionLostCtx);
  const [isEmailSent, setEmailSent] = React.useState(false);

  const handleSubmit = React.useCallback((values: any) => {
    resetPassword(values.email).then(() => {
      // server always response with empty body.
      setEmailSent(true);
    })
      .catch(err => {
        showConnectionLostModal();
      });
  }, [resetPassword]);

  const inProgress = resetPasswordStatus.progress === AsyncProgress.Started;

  const validateUser = React.useCallback(validate.create({
    email: validate.email(intl.formatMessage({ id: 'EnterValidEmailMessage' }),
    ),
  }), []);

  useEffect(() => {
    if (errorMessage) {
      setMessage({ text: errorMessage, type: MessageType.error });
    }
  }, [errorMessage]);

  return (
    isEmailSent
      ? <EmailSent />
      : <Form onSubmit={handleSubmit}
        initialValues={{ email }}
        validate={validateUser}
        render={(p) =>
          <EnterEmail {...p} isSubmitting={inProgress} setMessage={setMessage} message={message} />
        }
      />
  );
}

export default injectIntl(SendEmail);
