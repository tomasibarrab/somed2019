/**
 * Common Registry based Micro-app Webpack configuration
 */

const path = require('path');
const webpack = require('webpack');

const CopyPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const cwd = process.cwd();

// // Allow server to be killed with a SIGINT signal
// const kill = require('tree-kill')
// const pid = process.pid
// process.on('SIGTERM', function () {
//   kill(pid, 'SIGKILL')
// });

const copyAssets = new CopyPlugin([
  path.resolve(cwd, 'src/manifest.json'),
  {
    from: path.resolve(cwd, 'src/*.html'),
    to: path.resolve(cwd, 'dist'),
    context: 'src/',
  },
  {
    // @note absolute paths maintain the folder structure
    from: path.resolve(cwd, 'src/assets/**/*'),
    to: path.resolve(cwd, 'dist/assets'),
    context: 'src/assets'
  }
]);

module.exports = (options) => ({
  mode: options.mode,
  entry: options.entry,
  devtool: options.devtool,
  output: options.output,
  devServer: options.devServer,
  stats: {
    errors: true,
    warnings: false,
    timings: true,
    reasons: false,
    performance: false,
    outputPath: false,
    moduleTrace: false,
    modules: false,
    hash: false,
    children: false,
    assetsSort: '!size'
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: 'babel-loader',
            options: {
              env: {
                production: {
                  plugins: ['syntax-dynamic-import'],
                },
                development: {
                  plugins: ['syntax-dynamic-import'],
                },
                test: {
                  plugins: ['dynamic-import-node'],
                },
              }
            }
          },
          {
            loader: 'awesome-typescript-loader',
            options: {
              // Fixes issue with logs polluting stats: https://github.com/s-panferov/awesome-typescript-loader/issues/375
              silent: process.argv.indexOf('--json') !== -1,
            }
          },
        ],
      },
      {
        test: /\.js$/,
        use: [
          {
            loader: 'babel-loader',
            options: options.babelQuery,
          },
        ],
        exclude: /node_modules\/(?!gca)/,
      },
      {
        test: /\.(css|scss)$/,
        use: options.cssLoaders,
      },
      {
        test: /\.(eot|svg|ttf|woff|woff2)$/,
        use: ['file-loader'],
      },
      {
        test: /\.(jpg|png|gif)$/,
        use:[{
          loader:'file-loader',
          options: options.imageOptions,
        }],
      },
      {
        test: /\.html$/,
        use: ['html-loader'],
      },
      {
        test: /\.(mp4|webm)$/,
        use: ['url-loader?limit=10000'],
      },
      {
        test: /\.hbs$/,
        loader: 'handlebars-loader',
      }
    ]
  },
  plugins: [
    // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
    // inside your code for any environment checks; UglifyJS will automatically
    // drop any unreachable code.
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV),
      },
    }),
    copyAssets,
    ...options.plugins
  ],
  target: 'web', // Make web variables accessible to webpack, e.g. window
  resolve: {
    modules: ['src', 'node_modules', 'internals/testing', 'shared_modules'],
    extensions: ['.ts', '.tsx', '.js', '.jsx', '.react.js'],
    mainFields: ['browser', 'main', 'jsnext:main'],
    symlinks: false,
  },
  // Do not include these because they are already loaded by gc-bundle-vendor in the main template.
  externals: {
    'react': 'react',
    'react-dom': 'reactDom',
    'react-intl': 'reactIntl'
  }
});
