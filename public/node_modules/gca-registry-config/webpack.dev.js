/**
 * Development Registry based Micro-app Webpack configuration
 */

const path = require('path');
const fs = require('fs');

const webpack = require('webpack');
const base = require('./webpack.base.js');
const postcssConfig = require('./postcss.loader.js');

const cwd = process.cwd();

const registrySimulator = require('./simulator/registry-simulator');
const localPackage = require('gca-mono/lib/load-local-package');
const app_manifest = localPackage.getManifestFile();

const plugins = [
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new webpack.NoEmitOnErrorsPlugin(),
];

// Opening path (Note we need to remove here the initial /)
const openingPath = app_manifest.routes
  ? app_manifest.routes[0].substr(1)
    .replace(':rid', 241)
    .replace(':id', 241)
    .replace('*', '')
  : '';

module.exports = base({
  mode: 'development',

  // Emit a source map for easier debugging
  devtool: 'source-map',

  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client',
    path.join(process.cwd(), 'src/app.tsx'), // Start with js/app.js
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
    publicPath: '/'
  },

  // Load the CSS in a style tag in development
  cssLoaders: [
    'style-loader',
    {
      loader: 'css-loader',
      query: {
        localIdentName: '[local]__[path][name]__[hash:base64:5]',
        importLoaders: 1,
        sourceMap: true,
      },
    },
    postcssConfig,
    'sass-loader',
  ],

  // Tell babel that we want to hot-reload
  babelQuery: {
    presets: ['react-hmre', 'gca-babel-config/babelrc'],
  },

  plugins: plugins,

  imageOptions: {
    name: '[path][name].[ext]',
    publicPath: `http://localhost:9000/`,
    useRelativePath: false,
  },

  // Customize the WebPack dev-server to serve the micro app on the routes defined in manifest.json
  devServer: {
    contentBase: path.join(cwd, 'dist'),
    compress: true,
    port: 9000,
    openPage: openingPath,
    before: (app) => {
      const routes = app_manifest.routes || [];
      routes.forEach((route) => {
        console.log(`- Registering route "${route}"...`); // eslint-disable-line no-console
        app.get(route, registrySimulator.handleRequest);
      });

      app.use((reason, req, res, next) => { // eslint-disable-line no-unused-vars
        res.status(500).send(`<h1>${reason.message}</h1>
        <hr />
        <p>${reason.stack}</p>
        `);
      });
    },
    proxy: [
      {
        context: [
          '/login',
          '/postlogin',
          '/gateway/proxies',
          '/setup/api',
          '/gateway/api',
          '/gateway/v1/api',
          '/restaurant-search'
        ],
        target: 'https://gc-pp-sf.otenv.com',
        secure: false,
        changeOrigin: true
      }
    ]
  }
});
