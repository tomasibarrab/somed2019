import { createMixpanelMiddleware } from 'gca-react-components';
// tslint:disable-next-line:max-line-length
import { createMixpanelDispatcher } from 'gca-react-components/src/redux-middleware/mixpanel-redux-middleware';
import {
  actionNames,
  createActionEvent,
  createLoadPageEvent,
  createPublishEvent,
  eventNames } from 'gca-react-components/src/redux-modules/mixpanel';
import { Action, State } from './types';
import { actions, selectors } from './userAgreements/userAgreements';

export const app: string = 'UserAgreements';
const defaultProps = {
  app,
  feature: app,
};

const mixpanelDispatcher = createMixpanelDispatcher(defaultProps);

export const STARTED = 'started';
export const SUCCESS = 'success';
export const FAILURE = 'failure';

interface PublishProps {
  changedFields: string[];
  feature: string;
  action: string;
  info: string;
}

const trackedActions = {
  [actions.fetchUserAgreements.done.type]: {
    event: eventNames.LOAD_PAGE,
    props: (state: State, action: Action) => {
      const { props } = createLoadPageEvent({
        pageName: selectors.getCurrentPage(state),
        props: {
          agreementState: state.userAgreements.userAgreement.agreementState,
          info: SUCCESS,
        },
      });
      return props;
    },
  },
  [actions.fetchUserAgreements.failed.type]: {
    event: eventNames.LOAD_PAGE,
    props: (state: State, action: Action) => {
      const { props } = createLoadPageEvent({
        pageName: selectors.getCurrentPage(state),
        props: {
          agreementState: state.userAgreements.userAgreement.agreementState,
          errorCode: action.payload.error ? action.payload.error.status : undefined,
          errorMessage: action.payload.error ? action.payload.error.message : undefined,
          info: FAILURE,
        },
      });
      return props;
    },
  },

  [actions.updateAgreementState.done.type]: {
    event: 'Agreement Progress',
    props: (state: State, action: Action) => {
      return {
        'Page name': selectors.getCurrentPage(state),
        'info': SUCCESS,
        'stepFrom': state.userAgreements.userAgreement.agreementState,
        'stepTo': action.payload.result.agreementState,
      }
    },
  },
  [actions.updateAgreementState.failed.type]: {
    event: 'Agreement Progress',
    props: (state: State, action: Action) => {
      return {
        'Page name': selectors.getCurrentPage(state),
        'errorCode': action.payload.error ? action.payload.error.status : undefined,
        'errorMessage': action.payload.error ? action.payload.error.message : undefined,
        'info': FAILURE,
        'stepFrom': state.userAgreements.userAgreement.agreementState,
        'stepTo': action.payload.result.agreementState,
      }
    },
  },
  [actions.emailContractOwner.type]: {
    event: eventNames.CUSTOM_ACTION,
    props: (state: State, action: Action) => {
      return {
        'Page name': selectors.getCurrentPage(state),
        'action': 'Email Contract Owner',
        'agreementState': state.userAgreements.userAgreement.agreementState,
      }
    },
  },
};

export default createMixpanelMiddleware({
  defaultProps,
  trackedActions,
});
