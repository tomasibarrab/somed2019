import AsyncStatus from '../../AsyncStatus';
import {
  State,
} from '../types';
import {
  actions,
  initialState,
  selectors,
} from './userAgreements';
import { initUserAgreements } from './userAgreements.fixture';
import { AgreementState, UserAgreementsDTO, UserAgreementsState } from './userAgreements.types';

// tslint:disable-next-line:no-var-requires

describe('User Agreements selectors', () => {
  const baseState = {
    language : {
      locale: 'en-us',
    },
    userAgreements: {
      acceptStatus: 'ASYNC_INITIAL',
      agreementId: '123456789',
      appRoute: 'test',
      fetchError: null,
      fetchStatus: 'ASYNC_DONE',
      printPage: false,
      updateStatus: 'ASYNC_INITIAL',
      userAgreement: {
        agreementId: '123456789',
        agreementState: '',
        contractOwner: {},
        createdDate: '',
        customerInfo: {},
        entityInfo: {},
        isSigned: false,
        pricingDetails: {},
        rid: 98700,
        salesforce: {},
        termsAndConditions: [],
        type: '',
      },
    },
  };

  describe('getCurrentPage', () => {
    const { getCurrentPage } = selectors;
    it('should return PricingDetails for AgreementCreated', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'agreementCreated',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('PricingDetails');
    });

    it('should return PricingDetails for AgreementUpdated', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'agreementUpdated',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('PricingDetails');
    });

    it('should return TermsAndConditions for PricingAccepted', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'pricingAccepted',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('TermsAndConditions');
    });

    it('should return Scheduling for TermsAccepted', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'termsAccepted',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('Scheduling');
    });

    it('should return Confirm for AppointmentScheduled', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'appointmentScheduled',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('Confirm');
    });

    it('should return Print for AppointmentScheduled and Print selected', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          printPage: true,
          userAgreement: {
            agreementState: 'appointmentScheduled',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('Print');
    });

    it('should return AgreementInvalid for AgreementExpired', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'agreementExpired',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('AgreementInvalid');
    });

    it('should return AgreementInvalid for AgreementRenegotiated', () => {
      const state: State  = {
        ...baseState,
        userAgreements: {
          userAgreement: {
            agreementState: 'agreementRenegotiated',
          },
        },
      }
      const actual = getCurrentPage(state);
      expect(actual).toEqual('AgreementInvalid');
    });
  });

  describe('isAppLoadFailed', () => {

    it('should be failed if current context fetch failed', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          fetchFailed: true,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Initial,
        },
      };

      const actual = selectors.isAppLoadFailed(state);
      expect(actual).toBe(true);
    });

    it('should be failed if fetch failed', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          fetchFailed: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Failed,
          updateAppointmentScheduledStatus: AsyncStatus.Initial,
        },
      };

      const actual = selectors.isAppLoadFailed(state);
      expect(actual).toBe(true);
    });

    it('should be failed if updateAppointmentScheduledStatus failed', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          fetchFailed: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Failed,
        },
      };

      const actual = selectors.isAppLoadFailed(state);
      expect(actual).toBe(true);
    });

    it('should not be failed if forbidden and updateAppointmentScheduledStatus failed', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          fetchFailed: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchError: {
            status: 403,
          },
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Failed,
        },
      };

      const actual = selectors.isAppLoadFailed(state);
      expect(actual).toBe(false);
    });

    it('should not be failed if fetch or updateAppointmentScheduledStatus are not failed', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          fetchFailed: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Initial,
        },
      };

      const actual = selectors.isAppLoadFailed(state);
      expect(actual).toBe(false);
    });
  });

  describe('isAppLoading', () => {
    it('should not be loading if current context and get are not fetching', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          isFetching: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Done,
          updateAppointmentScheduledStatus: AsyncStatus.Initial,
          wasAppointmentJustScheduled: false,
        },
      };

      const actual = selectors.isAppLoading(state);
      expect(actual).toBe(false);
    });

    it('should not be loading if current context and appointment scheduled are not fetching', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          isFetching: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Done,
          wasAppointmentJustScheduled: true,
        },
      };

      const actual = selectors.isAppLoading(state);
      expect(actual).toBe(false);
    });

    it('should be loading if current context is fetching', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          isFetching: true,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Done,
          updateAppointmentScheduledStatus: AsyncStatus.Done,
          wasAppointmentJustScheduled: false,
        },
      };

      const actual = selectors.isAppLoading(state);
      expect(actual).toBe(true);
    });

    it('should be loading if fetch is initial', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          isFetching: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Initial,
          updateAppointmentScheduledStatus: AsyncStatus.Done,
          wasAppointmentJustScheduled: false,
        },
      };

      const actual = selectors.isAppLoading(state);
      expect(actual).toBe(true);
    });

    it('should be loading if appointment scheduled is started', () => {
      const state: State = {
        ...baseState,
        currentContext: {
          isFetching: false,
        },
        userAgreements: {
          ...baseState.userAgreements,
          fetchStatus: AsyncStatus.Done,
          updateAppointmentScheduledStatus: AsyncStatus.Started,
          wasAppointmentJustScheduled: true,
        },
      };

      const actual = selectors.isAppLoading(state);
      expect(actual).toBe(true);
    });
  });

});
