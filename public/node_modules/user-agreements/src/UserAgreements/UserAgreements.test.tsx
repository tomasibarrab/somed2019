import { shallowWithIntl } from 'gca-jest-config';
import React from 'react';
import { AgreementState, AgreementStepName } from '../store/userAgreements/userAgreements.types';
import { PureUserAgreements as UserAgreements } from './UserAgreements';

describe('<UserAgreements />', () => {

  it('should render PricingDetails', () => {
    const props = {
      currentPageName: AgreementStepName.PricingDetails,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render TermsAndConditions', () => {
    const props = {
      currentPageName: AgreementStepName.TermsAndConditions,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render Scheduling', () => {
    const props = {
      currentPageName: AgreementStepName.Scheduling,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render Confirm', () => {
    const props = {
      currentPageName: AgreementStepName.Confirm,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render Print', () => {
    const props = {
      currentPageName: AgreementStepName.Print,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render AgreementInvalid', () => {
    const props = {
      currentPageName: AgreementStepName.AgreementInvalid,
      dismissError: () => undefined,
      isAnyAsyncFailed: false,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });

  it('should render PricingDetails and modal for isAnyAsyncFailed', () => {
    const props = {
      currentPageName: AgreementStepName.PricingDetails,
      dismissError: () => undefined,
      isAnyAsyncFailed: true,
    };

    const wrapper = shallowWithIntl(<UserAgreements {...props} />);
    expect(wrapper).toMatchSnapshot();
  });
});
