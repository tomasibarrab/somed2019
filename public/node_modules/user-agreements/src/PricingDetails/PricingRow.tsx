
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { PricingItem } from '../store/userAgreements/userAgreements.types';

interface PricingRowState {
  browserLocale: string;
  lineItem: PricingItem;
  key: number;
  category: "one time" | "recurring" | "covers";
}

type Props = PricingRowState & InjectedIntlProps;

class PricingRow extends React.Component<Props, {}> {
  public render() {
    const { intl: { formatMessage }, category, key, lineItem, browserLocale } = this.props;

    const recurringFeeTranslationMap: {[key: string]: string} = {
      'covers': 'pricePerCover',
      'one time': 'rawPrice',
      'recurring': 'pricePerMonth',
    }

    function displayIfValue(value: any, formattedString: string): string {
      return value ? formattedString : '';
    }

    function formatCurrency(currencyValue: number, currencyCode: string) {
      return new Intl.NumberFormat(
        browserLocale,
        { style: 'currency', currency: currencyCode },
      ).format(currencyValue);
    }

    return (
      <tr key={`pricingLine_${key}`} data-qa="pricing-table-row">
        <td>{lineItem.productName}</td>
        <td>{formatCurrency(lineItem.listPrice, lineItem.currencyCode)}</td>
        <td>
          <div>
            {displayIfValue(lineItem.temporaryDiscountAmount,
              formatCurrency(lineItem.temporaryDiscountAmount * -1, lineItem.currencyCode),
            )}
          </div>
          <div>
            {displayIfValue(lineItem.temporaryDiscountMonths,
              formatMessage(
                {id: 'pricingDetails.table.item.discountDuration'},
                {numberOfMonths: lineItem.temporaryDiscountMonths},
              ),
            )}
          </div>
        </td>
        <td>
          {displayIfValue(lineItem.discount,
            formatCurrency(lineItem.discount * -1, lineItem.currencyCode),
          )}
        </td>
        <td>
          {formatMessage(
              {id: `pricingDetails.table.item.${recurringFeeTranslationMap[category]}`},
              {formattedCurrency: formatCurrency(lineItem.totalPrice, lineItem.currencyCode)},
            )
          }
        </td>
      </tr>
    )
  }
}

export default injectIntl(PricingRow);
export { PricingRow as PurePricingRow };
