import { Panel } from '@buffet/panel';
import React, { useEffect } from 'react';
import { connect } from 'react-redux';

import { FormRenderProps } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';

import { InfoIcon } from 'gca-react-components';

import {
  CheckboxFinalField,
  InputFinalField,
  SelectFinalField,
} from 'shared-react-atomic-ui/finalform-fields';

import { DropdownAlert } from '../common/DropdownAlert/DropdownAlert';
import { formatPhone, formatTrimSpaces } from '../utils/inputHelpers';
import UserFormAccessTypes from './UserFormAccessTypes';
import UserFormEmailFeedback from './UserFormEmailFeedback';
import UserFormHeader from './UserFormHeader';
import UserProfileSwitcher from './UserProfileSwitcher';

import {
  actions as availableUserActions,
  selectors as availableUserSelectors,
} from '../store/redux-modules/availableUser';
import {
  AnyUser,
  SaveStatus,
  State,
  User,
  UserState,
} from '../store/types';
import {
  useDisabledSections,
  useSubmitHandler,
  useTitles,
 } from '../utils/formUtils';
import { isRoleGroupAllAccess, isRoleRestaurantAllAccess } from '../utils/rolesHelpers';
import { headerButtonsContainer } from '../utils/styleUtils';


interface UserFormState {
  isGroupApp: boolean;
  scopeType: string;
  availableHasRidOrProfile: boolean;
  availableIsFailed: boolean;
  availableIsLoaded: boolean;
  availableIsLoading: boolean;
  availableUser: UserState<AnyUser>;
  currentUser: Partial<User>,
}

interface UserFormActions {
  resetAvailableUser: (ms: number) => void;
}

interface UserFormOwnProps {
  isSelf: boolean;
  isNew: boolean;
  saveStatus: SaveStatus;
  onCancel: () => void;
}

export type UserFormProps =  FormRenderProps
  & UserFormState
  & UserFormActions
  & UserFormOwnProps
  & InjectedIntlProps;


const UserFormImpl: React.SFC<UserFormProps> = ({
  intl,
  isGroupApp,
  scopeType,
  form,
  saveStatus,
  values,
  errors,
  initialValues,
  handleSubmit,
  submitErrors,
  onCancel,
  isSelf,
  isNew,
  availableUser,
  availableIsLoaded,
  availableIsLoading,
  availableIsFailed,
  availableHasRidOrProfile,
  currentUser,
  resetAvailableUser,
}) => {
  // run first time to reset available user (?)
  useEffect(() => { resetAvailableUser(0); }, []);

  // get profile titles
  const titles = useTitles(intl);

  // In this case the user is a OT/GC user,
  // we fill the form firstName and lastName automatically.
  useEffect(() => {
    if (availableIsLoaded && !availableHasRidOrProfile) {
      form.batch(() => {
        form.change('firstName', availableUser.user.firstName );
        form.change('lastName', availableUser.user.lastName );
      });
    }
  }, [availableIsLoaded]); // depends on availableIsLoaded being changed

  // logic to enable/disable form sections
  const { disableEmail, disableRoles, disableUserInfo } = useDisabledSections({
    availableHasRidOrProfile,
    availableIsLoaded,
    availableIsLoading,
    errors,
    initialValues,
    isSelf,
    saveStatus,
    values,
  });

  // logic to submit the form, with submit & error states
  const {
    getSubmitHandler,
    submitAttempted,
    canShowDropdownError,
    hideDropdownError,
  } = useSubmitHandler({
    errors,
    saveStatus,
  });

  const isGroupAllAccess = (values.rolesSet.find(isRoleGroupAllAccess) || {}).set;
  const isRestaurantAllAccess = (values.rolesSet.find(isRoleRestaurantAllAccess) || {}).set;

  return (
    <>
      <DropdownAlert
        drop={canShowDropdownError}
        onClose={hideDropdownError}
        msg={Object.keys(errors).length === 0
          ? intl.formatMessage({ id: 'user.error.save.title'})
          : intl.formatMessage({ id: 'user.error.title'})}
        type="error"
      />
      <form className="user-form" onSubmit={getSubmitHandler(handleSubmit)}>
        <Panel
          title={intl.formatMessage({
            id: isNew ? `user.createnew.title.${scopeType}` : 'user.update_existing.title',
          })}
          customHeaderStyle={headerButtonsContainer}
          headerContent={<UserFormHeader
            saveStatus={saveStatus}
            isNew={isNew}
            onCancel={onCancel}
          />}
        >

          { isGroupApp && isNew ? (
            <div className="user-form-panel -no-border">
              <FormattedMessage id="user.createnew.description.group" />
            </div>
          ) : null}

          { currentUser && (currentUser.restaurants || currentUser.groups) ? (
            <div className="user-form-panel">
              <div className="gca-role-definitions">
                <FormattedMessage id="user.update.multiple_profiles" />
              </div>
              <div className="form-row">
                <div id="profile-selector" className="gca-label-group">
                  <UserProfileSwitcher />
                </div>
              </div>
            </div>
          ) : null}

          <div className="user-form-panel">
            <h2>{intl.formatMessage({ id: 'user.basic.header' })}</h2>
            <div className={`form-row ${disableEmail ? 'disabled' : ''}`}>
              <InputFinalField
                id="email-input"
                name="email"
                label={intl.formatMessage({ id: 'user.basic.email' })}
                className="gca-label-group"
                disabled={disableEmail || !isNew}
                autoFocus={isNew}
                showValidationWhenPristine={!!submitErrors}
                format={formatTrimSpaces}
              />
              <div className="message-group">
                {(isNew && !errors.email) ? (
                  <UserFormEmailFeedback
                    scopeType={scopeType}
                    availableUser={availableUser}
                    availableHasRidOrProfile={availableHasRidOrProfile}
                    availableIsFailed={availableIsFailed}
                    availableIsLoaded={availableIsLoaded}
                    availableIsLoading={availableIsLoading}
                  />
                ) : null}
              </div>
            </div>

            <div className={`form-row ${disableUserInfo ? 'disabled' : ''}`}>
              <InputFinalField
                id="firstName-input"
                name="firstName"
                label={intl.formatMessage({ id: 'user.basic.firstName' })}
                className="gca-label-group"
                disabled={disableUserInfo}
                autoFocus={!isNew}
                showValidationWhenPristine={!!submitErrors}
              />
              <InputFinalField
                id="lastName-input"
                name="lastName"
                label={intl.formatMessage({ id: 'user.basic.lastName' })}
                className="gca-label-group"
                disabled={disableUserInfo}
                showValidationWhenPristine={!!submitErrors}
              />
            </div>
            <div className={`form-row form-row-2fa ${disableUserInfo ? 'disabled' : ''}`}>
              <CheckboxFinalField
                id="enable2FA-input"
                name="enable2FA"
                label={intl.formatMessage({ id: 'user.basic.enable2fa' })}
              />
              <div id="enable2fa-info"><InfoIcon width="24" /></div>
            </div>

            <div className={`form-row ${disableUserInfo ? 'disabled' : ''}`}>
              <h2>{intl.formatMessage({ id: `user.basic.header.${scopeType}` })}</h2>
            </div>
            <div className={`form-row ${disableUserInfo ? 'disabled' : ''}`}>
              <InputFinalField
                id="phone-input"
                name="phone"
                label={intl.formatMessage({ id: 'user.basic.phone' })}
                className="gca-label-group"
                disabled={disableUserInfo}
                showValidationWhenPristine={!!submitErrors}
                format={formatPhone}
              />
              <SelectFinalField
                id="title-input"
                name="title"
                className="gca-label-group"
                disabled={disableUserInfo}
                showValidationWhenPristine={!!submitErrors}
                options={titles}
              />
            </div>
            { scopeType === 'restaurant'
              ? (
                <div className={`form-row form-row-gdpr ${disableUserInfo ? 'disabled' : ''}`}>
                  <CheckboxFinalField
                    id="gdpr-input"
                    name="gdprNotificationReceiver"
                    label={(
                      <FormattedMessage
                        id="user.basic.gdpr.label"
                        values={{
                          gdprLink: (
                            <a
                              href="https://support.opentable.com/s/article/GDPR-FAQ"
                              target="_blank"
                              title={intl.formatMessage({ id: 'user.basic.gdpr.link' })}
                            >
                              {intl.formatMessage({ id: 'user.basic.gdpr.link' })}
                            </a>
                          ),
                        }}
                      />
                    )}
                  />
                </div>
              ) : null
            }
          </div>

          <div className={`user-form-panel ${disableRoles ? 'disabled' : ''}`}>
            {errors.rolesSet && errors.rolesSet['FINAL_FORM/array-error'] && submitAttempted
              ? <p className="error"><FormattedMessage id="validate.roleSet" /></p>
              : null
            }

            {
              scopeType === 'group'
                ? (
                  <>
                    <UserFormAccessTypes
                      scopeType={scopeType}
                      isAllAccessSet={isGroupAllAccess}
                      values={values}
                      filterFields
                    />
                    <UserFormAccessTypes
                      scopeType={'restaurant'}
                      isAllAccessSet={isGroupAllAccess || isRestaurantAllAccess}
                      values={values}
                      filterFields
                      forceDisabled={isGroupAllAccess}
                    />
                  </>
                )
                : (
                  <UserFormAccessTypes
                    scopeType={scopeType}
                    isAllAccessSet={isRestaurantAllAccess}
                    values={values}
                  />
                )
            }
          </div>
        </Panel>
      </form>
    </>
  );
};

export function mapStateToProps(state: State): UserFormState {
  return {
    availableHasRidOrProfile: availableUserSelectors.hasRidOrProfile(state),
    availableIsFailed: availableUserSelectors.isFailed(state),
    availableIsLoaded: availableUserSelectors.isLoaded(state),
    availableIsLoading: availableUserSelectors.isLoading(state),
    availableUser: state.availableUser,
    currentUser: state.currentUser.user,
    isGroupApp: state.appScope.type === 'group',
    scopeType: state.scope ? state.scope.type : '',
  };
}

export const mapDispatchToProps = {
  resetAvailableUser: availableUserActions.resetAvailableUser.started,
};

const UserFormIntl = injectIntl(UserFormImpl);
const UserForm = connect<UserFormState, UserFormActions, UserFormOwnProps>
  (mapStateToProps, mapDispatchToProps)(UserFormIntl);

export default UserForm;
export { UserFormImpl as PureUserForm };
