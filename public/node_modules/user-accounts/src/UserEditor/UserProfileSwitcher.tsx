import { DropdownSelect } from '@buffet/select';
import React, { useEffect, useLayoutEffect, useState } from 'react';
import { InjectedIntl, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { actions as scopeActions } from '../store/redux-modules/scope';
import {
  ContextInstance,
  GroupInstance,
  GuestCenterScope,
  RestaurantInstance,
  State,
  UserProfile,
} from '../store/types';
import { getContextUrn } from '../utils/appUtils';


interface ProfileSwitcherState {
  profiles?: UserProfile[];
  groups?: GroupInstance[];
  restaurants?: RestaurantInstance[];
  scope: GuestCenterScope;
}

interface OptionType {
  label: string;
  value: string;
}

interface OptionGroup {
  label: string;
  options: OptionType[];
}

interface ProfileSwitcherActions {
  selectUserProfile: (context: string) => void;
}

type ProfileSwitcherProps = ProfileSwitcherState & ProfileSwitcherActions & InjectedIntlProps;

// map groups and restaurants to react-select options
function toOptions(groupsOrRestaurans: ContextInstance[]): OptionType[] {
  return groupsOrRestaurans
    .map(gr => ({
      label: gr.name,
      value: gr.urn,
    }));
}

// filter groups and restaurants that are not in the user profiles list
function contextInProfiles(profiles: UserProfile[] | undefined) {
  return (instance: ContextInstance) => (profiles || []).some(p => p.context === instance.urn);
}
function filterProfiles(
  groupsOrRestaurans: ContextInstance[] | undefined,
  profiles: UserProfile[] | undefined,
): any[] {
  return (groupsOrRestaurans || []).filter(contextInProfiles(profiles));
}

// combine above transformations
function filteredOptions(
  groupsOrRestaurans: ContextInstance[] | undefined,
  profiles: UserProfile[] | undefined,
): OptionType[] {
  return toOptions(filterProfiles(groupsOrRestaurans, profiles));
}

// returns the "current" option based on the selected scope
function getCurrentOption(options: OptionType[], scope: GuestCenterScope): OptionType | undefined {
  return options.find(option => option.value === getContextUrn(scope));
}

// logic to build the options list with groups and restaurants
function useOptions(
  scope: GuestCenterScope,
  groups: GroupInstance[] | undefined,
  restaurants: RestaurantInstance[] | undefined,
  profiles: UserProfile[] | undefined,
  intl: InjectedIntl,
) {
  // groups and restaurants options
  const [groupOptions, setGroupOptions] = useState(() => [] as OptionType[]);
  const [restaurantOptions, setRestaurantOptions] = useState(() => [] as OptionType[]);
  // dropdown optgroup options
  const [optGroups, setOptGroups] = useState(() => [] as OptionGroup[]);
  // dropdown selected value
  const [currentOption, setCurrentOption] = useState();

  // update options when scope changes
  useEffect(() => {
    const newGroupOptions = filteredOptions(groups, profiles);
    setGroupOptions(newGroupOptions);

    const newRestaurantOptions = filteredOptions(restaurants, profiles);
    setRestaurantOptions(newRestaurantOptions);

    setCurrentOption(getCurrentOption([...newGroupOptions, ...newRestaurantOptions], scope));

    // TODO: intl "Groups" and "Restaurants" labels
    const optionGroups: OptionGroup[] = [];
    if (newGroupOptions.length) {
      optionGroups.push({ label: intl.formatMessage({ id: 'userAccounts.groups' }), options: newGroupOptions });
    }
    if (newRestaurantOptions.length) {
      optionGroups.push({ label: intl.formatMessage({ id: 'userAccounts.rests' }), options: newRestaurantOptions });
    }
    setOptGroups(optionGroups);
  }, [scope.type, scope.id]);

  return {
    currentOption,
    optGroups,
    totalOptions: groupOptions.length + restaurantOptions.length,
  };
}

const UserProfileSwitcher: React.SFC<ProfileSwitcherProps> = ({
  intl,
  profiles,
  groups,
  restaurants,
  scope,
  selectUserProfile,
}) => {
  const {
    currentOption,
    optGroups,
    totalOptions,
  } = useOptions(scope, groups, restaurants, profiles, intl);

  // using a layout effect to prevent content from flashing
  useLayoutEffect(() => {
    // current value is missing => current scope has no associated value
    if (!currentOption && totalOptions > 0) {
      // auto-select first option (we know it exists, because totalOptions > 0)
      selectUserProfile(optGroups[0].options[0].value);
    }
  }, [totalOptions, currentOption !== undefined]);

  if (!totalOptions) {
    return null;
  }

  return (
    <DropdownSelect
      isSearchable={totalOptions > 10}
      isDisabled={totalOptions === 1}
      options={optGroups}
      value={currentOption}
      onChange={(option: OptionType) => selectUserProfile(option.value)}
    />
  )
};

export function mapStateToProps(state: State): ProfileSwitcherState {
  return {
    groups: state.currentUser.user.groups,
    profiles: state.currentUser.user.profiles,
    restaurants: state.currentUser.user.restaurants,
    // context: state.currentUser.user.context,
    scope: state.scope,
  };
}

export const mapDispatchToProps = {
  selectUserProfile: scopeActions.setScopeFromContextUrn,
};


export default connect(mapStateToProps, mapDispatchToProps)(injectIntl(UserProfileSwitcher));
