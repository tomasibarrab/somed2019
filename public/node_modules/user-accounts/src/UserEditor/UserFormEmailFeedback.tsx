
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { NavLink } from 'react-router-dom';

import { BusyIcon, InfoIcon, SuccessIcon } from 'gca-react-components';

import {
  AnyUser,
  UserState,
} from '../store/types';


interface UserFormEmailFeedbackOwnProps {
  availableHasRidOrProfile: boolean;
  availableIsFailed: boolean;
  availableIsLoaded: boolean;
  availableIsLoading: boolean;
  availableUser: UserState<AnyUser>,
  scopeType: string;
}

type UserFormEmailFeedbackProps =  UserFormEmailFeedbackOwnProps & InjectedIntlProps;

/**
 * Internal utility that renders the result of the email check while the user is
 * typing an email address in this form.
 * @param error An optional error string indicating if the check had failed.
 */
const UserFormEmailFeedback: React.SFC<UserFormEmailFeedbackProps> = ({
  scopeType,
  availableUser,
  availableHasRidOrProfile,
  availableIsFailed,
  availableIsLoaded,
  availableIsLoading,
}) => {
  // If the check is still in progress show the busy animated icon
  if (availableIsLoading) {
    return (
      <span className="icon"><BusyIcon size="22" /></span>
    );
  }

  // If there are no users matching the email then the email address is available
  if (availableIsFailed) {
    return (
      <>
        <span className="icon"><SuccessIcon /></span>
        <span><FormattedMessage id="validate.async.emailavailable"/></span>
      </>
    );
  }

  if (availableIsLoaded) {
    if (availableHasRidOrProfile) {
      // If there is a user in the system and if already it belongs to
      // this context then shows error message
      const userid = availableUser.user.urn || availableUser.user.email;
      const msgId = `validate.async.${scopeType === 'group' ? 'useralreadyingroup' : 'useralreadyinrid'}`;
      return (
        <>
          <span className="icon"><InfoIcon width="24" /></span>
          <span>
            <FormattedMessage id={msgId} />
            <NavLink to={`/directory/user/${userid}`}>
              <FormattedMessage id="validate.async.edituser" />
            </NavLink>
          </span>
        </>
      );
    } else {
      // If there is a user in the system, but not in this context then
      // show a info message and let it continue.
      return (
        <>
          <span className="icon"><InfoIcon width="24" /></span>
          <span>
            <FormattedMessage id="validate.async.useralreadyinot" />
          </span>
        </>
      );
    }
  }

  return null;
};

export default injectIntl(UserFormEmailFeedback);
