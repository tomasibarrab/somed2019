import React from 'react';

import { Table } from 'gca-react-components';

interface Item {
  id: string;
}

export interface ItemListProps<T> {
  // ids: string[];
  items: T[];
  activeId?: string;
  // getItem: (id: string) => T;
  children: (item: T, idx: number) => React.ReactNode;
  renderHeader: () => React.ReactNode;
  onItemClick: (item: T) => void;
  clickableItem: (item: T) => boolean;
}

export class ItemList<T extends Item> extends React.Component<ItemListProps<T>> {
  public render() {
    return (
      <div className="gca-item-list">
        <Table data-testid="item-list">
          <thead>
            <tr>
              {this.props.renderHeader()}
            </tr>
          </thead>
          <tbody>
            {this.renderRows()}
          </tbody>
        </Table>
      </div>
    )
  }

  private renderRows() {
    const { items, activeId, onItemClick, clickableItem } = this.props;
    return items.map((item, idx) => {
      const isClickable = clickableItem(item);
      return (
        <tr
          data-testid={`item-${idx}`}
          onClick={() => (isClickable ? onItemClick(item) : null)}
          key={item.id}
          className={`table-item-row ${isClickable ? 'clickable' : ''} ${item.id === activeId ? 'active' : ''}`}
        >
          {this.props.children(item, idx)}
        </tr>
      );
    });
  }
}
