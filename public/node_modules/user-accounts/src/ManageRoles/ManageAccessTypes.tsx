import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { actions } from '../store/redux-modules/roles';

import { ContextType, Permission, Role } from '../store/types';
import { eventTracker, trackingCategory, trackingEvents } from '../utils/trackingUtils';
import { EditRole } from './EditRole';
import { RoleDefinitions } from './RoleDefinitions';


export interface ManageAccessTypesOwnProps {
  skipIntro?: boolean;
  scopeType: ContextType;
  roles: Role[];
  permissions: Permission[];
}

export interface ManageAccessTypesActions {
  editRole: (v: { roleId: string, edit: boolean}) => void;
  editPermissionInRole: (v: { roleId: string, permId: string, flag: boolean}) => void;
  saveRole: (v: { roleId: string }) => void;
}

type ManageAccessTypesProps = ManageAccessTypesOwnProps & ManageAccessTypesActions & InjectedIntlProps;


class ManageAccessTypes extends React.Component<ManageAccessTypesProps> {
  public render() {
    const { skipIntro, intl, scopeType, roles, permissions } = this.props;

    return (
      <div id={`roles-section-${scopeType}`}>
        { !skipIntro
          ? (
            <>
              <h2>{intl.formatMessage({ id: `manageRoles.title.${scopeType}` })}</h2>
              <p key="intro">
                {intl.formatMessage({
                  id: scopeType === 'group'
                    ? 'manageRoles.group.description'
                    : 'manageRoles.group.restaurant.description',
                })}
              </p>
            </>
          ) : null
        }
        <RoleDefinitions type={scopeType} />
        <div>
          {roles.map(role => (
              <EditRole
                type={scopeType}
                key={role.urn}
                info={role}
                permissions={permissions}
                onChangeRole={this.handleChangeRole}
                onRevertToDefault={this.handleRevertRoleToDefault}
                onEdit={this.handleEditRole}
                onSave={this.handelSaveRole}
                onCancel={this.handelCancelEditingRole}
              />
          ))}
        </div>
      </div>
    );
  }

  private handleRevertRoleToDefault = (roleid: string) => {
    throw(new Error(`handleRevertRoleToDefault ${roleid} Not yet implemented`));
  };

  private handleChangeRole = (roleId: string, permId: string, flag: boolean) => {
    this.props.editPermissionInRole({
      flag,
      permId,
      roleId,
    })
  };

  private handleEditRole = (roleId: string) => {
    eventTracker.sendEvent({
      action: trackingEvents.customizeAccessTypes.action,
      category: trackingCategory,
      label: trackingEvents.customizeAccessTypes.labels.customizeButton,
    });

    this.props.editRole({
      edit: true,
      roleId,
    });
  };

  private handelSaveRole = (roleId: string) => {
    eventTracker.sendEvent({
      action: trackingEvents.customizeAccessTypes.action,
      category: trackingCategory,
      label: trackingEvents.customizeAccessTypes.labels.saveButton,
    });

    this.props.saveRole({ roleId });
  };

  private handelCancelEditingRole = (roleId: string) => {
    eventTracker.sendEvent({
      action: trackingEvents.customizeAccessTypes.action,
      category: trackingCategory,
      label: trackingEvents.customizeAccessTypes.labels.cancelButton,
    });

    this.props.editRole({ roleId, edit: false });
  };
}


export const mapDispatchToProps = {
  editPermissionInRole: actions.editPermissionInRole,
  editRole: actions.editRole,
  saveRole: actions.saveRole.started,
};


const manageAccessTypesIntl = injectIntl<ManageAccessTypesProps>(ManageAccessTypes);
export default connect<{}, ManageAccessTypesActions, ManageAccessTypesOwnProps>
  (null, mapDispatchToProps)(manageAccessTypesIntl);
