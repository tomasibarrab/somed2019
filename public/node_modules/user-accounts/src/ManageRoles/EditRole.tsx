import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';

import { Permission, Role } from '../store/types';
import { isRoleAllAccess } from '../utils/rolesHelpers';
import { RolePermissionEdit } from './RolePermissionEdit';
import { RolePermissionList } from './RolePermissionList';


interface EditRoleOwnProps {
  info: Role;
  permissions: Permission[];
  type: string;
  onChangeRole: (id: string, p: string, flag: boolean) => void;
  onEdit: (id: string) => void;
  onRevertToDefault: (id: string) => void;
  onSave: (id: string) => void;
  onCancel: (id: string) => void;
}

interface EditableRoleOwnState {
  editable: boolean;
  visible: boolean;
}

type EditRoleProps = EditRoleOwnProps & InjectedIntlProps;

class EditRoleImpl extends React.Component<EditRoleProps, EditableRoleOwnState> {

  public state: EditableRoleOwnState = {
    editable: true,
    visible: true,
  };

  public componentDidMount() {
    const { info } = this.props;
    if ( isRoleAllAccess(info.urn) ||
      Object.keys(info.properties).find(p => p === 'urn:ot.gc:editable' && info.properties[p] === 'false' ) ) {
      this.setState((s) => ({ ...s, editable: false }));
    }
    if (Object.keys(info.properties).find(p => p === 'urn:ot.gc:hidden' && info.properties[p] === 'true' ) ) {
      this.setState((s) => ({ ...s, visible: false }));
    }
  }

  public render() {
    const { info, intl, onChangeRole, permissions, type, onEdit, onSave, onCancel } = this.props;
    const { editable, visible } = this.state;
    if (!visible || (!editable && info.permissions.length === 0)) {
      return (null);
    }

    return (
      <div className="gca-role-editor">
        <h3>
          {intl.formatMessage({ id: info.urn })}
          {!info.isDefault && !isRoleAllAccess(info.urn)
            ? <span className="isDefault">
                {intl.formatMessage({ id: 'manageRoles.role.customized' })}
              </span>
            : null
          }
          {info.status === 'error'
            ? <span className="error">
                {intl.formatMessage({ id: 'manageRoles.role.error' })}
              </span>
            : null
          }
        </h3>
        {info.status !== 'view'
          ? <RolePermissionEdit
              info={info}
              permissions={permissions}
              type={type}
              onChangeRole={onChangeRole}
              onSave={onSave}
              onCancel={onCancel}
            />
          : <RolePermissionList
              info={info}
              permissions={permissions}
              type={type}
              editable={this.state.editable}
              onEdit={onEdit}
            />
        }
      </div>
    );
  }
}

export const EditRole = injectIntl<EditRoleProps>(EditRoleImpl);
