import { AlertMessage } from '@buffet/alert-message';
import { Panel } from '@buffet/panel';
import React, { useLayoutEffect } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { AsyncContent } from 'gca-react-components';

import { actions, selectors } from '../store/redux-modules/roles';
import { ContextType, InProgressOps, Permission, Role, State } from '../store/types';
import ManageRolesSection from './ManageRolesSection';

import './ManageRoles.scss';


interface ManageRolesActions {
  ensurePermissions: () => void;
}

interface ManageRolesState {
  scopeType: ContextType;
  permissions: Permission[];
  roles: Role[];
  inProgress: InProgressOps;
  rolesAndPermissionLoading: boolean;
  rolesAndPermissionError: boolean;
}

type ManageRolesProps = ManageRolesState & ManageRolesActions & InjectedIntlProps;


const ManageRolesImpl: React.FunctionComponent<ManageRolesProps> = ({
  intl,
  scopeType,
  roles,
  rolesAndPermissionLoading,
  rolesAndPermissionError,
  permissions,
  inProgress,
  ensurePermissions,
}) => {
  useLayoutEffect(() => {
    ensurePermissions();
  }, []);

  const rolesNotAvailable = !roles || !roles.length && inProgress.fetchingRoles !== 'inprogress';

  return (
    <Panel title={intl.formatMessage({ id: 'manageRoles.title'})}>
      <AsyncContent
        isLoading={rolesAndPermissionLoading}
        isError={rolesAndPermissionError}
        errorTitle={intl.formatMessage({ id: 'manageRoles.errorTitle' })}
        errorMessage={intl.formatMessage({ id: 'manageRoles.errorMessage' })}
      >
        <div className="gca-roles">
          <p key="intro" className="intro">
            {intl.formatMessage({
              id: scopeType === 'group'
                ? 'manageRoles.group.intro'
                : 'manageRoles.rid.intro',
            })}
          </p>

          {rolesNotAvailable
            ? (
              <div className="roles-error-container">
                <AlertMessage
                  id={'roles-error-message'}
                  iconId={'negative'}
                  type="error"
                  message={intl.formatMessage({ id: 'manageRoles.noroles'})}
                />
              </div>
            ) : (
              <ManageRolesSection
                scopeType={scopeType}
                roles={roles}
                permissions={permissions}
              />
            )
          }
        </div>
      </AsyncContent>
    </Panel>
  );
};


export function mapStateToProps(state: State): ManageRolesState {
  return {
    inProgress: state.appRoles.inProgress,
    permissions: selectors.getVisiblePermissions(state.appRoles),
    roles: state.appRoles.roles,
    rolesAndPermissionError: selectors.getRolesAndPermissionError(state.appRoles),
    rolesAndPermissionLoading: selectors.getRolesAndPermissionsLoading(state.appRoles),
    scopeType: state.appScope.type,
  };
}

export const mapDispatchToProps = {
  ensurePermissions: actions.ensurePermissions,
};

const ManageRolesIntl = injectIntl<ManageRolesProps>(ManageRolesImpl);
const ManageRoles = connect<ManageRolesState, ManageRolesActions, {}>
  (mapStateToProps, mapDispatchToProps)(ManageRolesIntl);

export { ManageRolesImpl as PureManageRoles };
export default ManageRoles;
