import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';

import { Button } from '@buffet/button';
import { LabeledCheckbox } from '@buffet/checkbox';
import { SuccessIcon } from 'gca-react-components';

import { CUSTOMIZABLE_PROP_URN, DEFAULTS_PROP_URN, Permission, Role } from '../store/types';

interface RolePermissionEditOwnProps {
  info: Role;
  permissions: Permission[];
  type: string;
  onChangeRole: (id: string, p: string, flag: boolean) => void;
  onSave: (id: string) => void;
  onCancel: (id: string) => void;
}

type RolePermissionEditProps = RolePermissionEditOwnProps & InjectedIntlProps;

export class RolePermissionEditImpl extends React.Component<RolePermissionEditProps> {

  public render() {
    const { info, permissions, type } = this.props;

    // Builds the list of permissions the user is allow to customize under the role.
    // If the property is not present we assume all permissions are customizable.
    const customizablePermissions = info.properties && info.properties[CUSTOMIZABLE_PROP_URN]
      ? info.properties[CUSTOMIZABLE_PROP_URN].split(',').map(p => p.trim())
      : permissions;

    // Builds a list that are set by default and shows as disabled.
    // If the property is not present we assume no permission is not set by default
    const defaultPermissions = info.properties && info.properties[DEFAULTS_PROP_URN]
      ? info.properties[DEFAULTS_PROP_URN].split(',').map(p => p.trim())
      : [];

    if (type === 'group') {
      return this.renderSeparatePermissionsEdit(customizablePermissions, defaultPermissions);
    }

    return (
      <div className="edit">
        <div className={`roles-checks ${info.status}`}>
          {permissions
            .filter(p => customizablePermissions.find(np => p.indexOf(np) >= 0) !== undefined)
            .map(permissionUrn => this.renderPermissionCheckbox(permissionUrn, defaultPermissions))
          }
        </div>
        {this.renderEditControls()}
      </div>
    );
  }

  /**
   * Renders the editable list of check-boxes for customizing permissions under an Access Type.
   * This function will display 2 lists: one for groups and one for restaurant permissions
   */
  private renderSeparatePermissionsEdit(customizablePermissions: string[], defaultPermissions: string[]) {
    const { permissions } = this.props;
    const availRestPermissions = permissions.filter(p => p.startsWith('urn:ot.rest.'));
    const availGroupPermissions = permissions.filter(p => p.startsWith('urn:ot.group.'));

    const editableGroupPermList = availGroupPermissions
      .filter(p => customizablePermissions.some(np => p.includes(np)));
    const editableRestPermList = availRestPermissions
      .filter(p => customizablePermissions.some(np => p.includes(np)));
    return (
      <div className="edit">
        {this.renderPermissionEditSection(editableGroupPermList, defaultPermissions, 'manageRoles.group.features')}
        {this.renderPermissionEditSection(editableRestPermList, defaultPermissions, 'manageRoles.rest.features')}
        {this.renderEditControls()}
      </div>
    );
  }

  private renderPermissionEditSection(editPermList: string[], defPermList: string[], titleId: string): React.ReactNode {
    const { info, intl } = this.props;
    return editPermList.length > 0
      ? <div className={`roles-checks ${info.status}`}>
          <span className="feature-types">{intl.formatMessage({ id: titleId })}:</span>
          {editPermList
            .map(permissionUrn => this.renderPermissionCheckbox(permissionUrn, defPermList))}
        </div>
      : null;
  }

  /**
   * Display a permission checkbox.
   * If the permission is in the role it will be displayed as checked.
   * If the permission name matched the role name it will disabled
   */
  private renderPermissionCheckbox(permissionUrn: string, defaultPermissions: string[]): JSX.Element {
    const { info, intl, onChangeRole } = this.props;
    const isChecked = info.editingPermissions
      ? info.editingPermissions.includes(permissionUrn)
      : false;
    return (
      <div data-testid={`checkbox-${permissionUrn}-${info.urn}`} key={permissionUrn}>
        <LabeledCheckbox
          id={`checkbox-${permissionUrn}-${info.urn}`}
          checked={isChecked}
          key={permissionUrn}
          label={intl.formatMessage({ id: permissionUrn })}
          onClick={() => onChangeRole(info.urn, permissionUrn, !isChecked)}
          disabled={defaultPermissions.find(p => p === permissionUrn) !== undefined} />
      </div>
    );
  }

  /**
   * Render editing controls under the permissions check-boxes.
   */
  private renderEditControls() {
    const { info, intl, onCancel, onSave } = this.props;
    const simpleId = info.urn.split(':')[2];
    switch (info.status) {
      case 'editing':
      case 'error':
        return (
          <p>
            <Button
              type="button"
              theme="primary"
              size="small"
              className={`${simpleId}_save_bt`}
              onClick={() => onSave(info.urn)}
            >
              {intl.formatMessage({ id: 'manageRoles.bt.role.save' })}
            </Button>
            <Button
              type="button"
              theme="bare"
              size="small"
              className={`${simpleId}_cancel_bt`}
              onClick={() => onCancel(info.urn)}
            >
              {intl.formatMessage({ id: 'manageRoles.bt.role.cancel' })}
            </Button>
          </p>
        );
      case 'saved':
        return (
          <p className="saving-ok">
            <SuccessIcon />
            {intl.formatMessage({ id: 'manageRoles.saved' })}
          </p>
        );
      default:
        return (
          <p className="saving-info">
            {intl.formatMessage({ id: 'manageRoles.saving' })}
          </p>
        );
    }
  }
}

export const RolePermissionEdit = injectIntl<RolePermissionEditOwnProps>(RolePermissionEditImpl);

