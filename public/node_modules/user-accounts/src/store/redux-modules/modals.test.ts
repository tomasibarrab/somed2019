import * as duck from './modals';

describe('modals duck', () => {
  describe('modals reducer', () => {
    it('should return the initialState when nothing is passed', () => {
      const expected = duck.initialState;
      const actual = duck.modalReducer(expected, { type: 'NO_MATCH' });
      expect(actual).toEqual(expected);
    });

    it('should return the state passed into the reducer, regardless, when the action type is unmatched', () => {
      const expected = { test: true };
      const actual = duck.modalReducer(expected, { type: 'NO_MATCH' });
      expect(actual).toEqual(expected);
    });

    it('should set the currentModal property according to the action', () => {
      const expected = { ...duck.initialState, currentModal: 'TEST_MODAL' };
      const action = { type: duck.OPEN_MODAL, payload: { modal: 'TEST_MODAL' } };
      const actual = duck.modalReducer(duck.initialState, action);

      expect(actual).toEqual(expected);
    });

    it('should set the currentModal property according to the action', () => {
      const initialState = { ...duck.initialState, currentModal: 'TEST_MODAL' };
      const action = { type: duck.CLOSE_MODAL };
      const actual = duck.modalReducer(initialState, action);

      expect(actual).toEqual(duck.initialState);
    });

    it('should set the currentModal property according to the action', () => {
      const initialState = { ...duck.initialState, currentModal: 'TEST_MODAL' };
      const action = { type: duck.CONFIRM_CLOSE_MODAL };
      const actual = duck.modalReducer(initialState, action);

      expect(actual).toEqual(duck.initialState);
    });
  });

  describe('modal action creators', () => {
    it('closeModal should return the correct type with no payload', () => {
      expect(duck.closeModal()).toEqual({ type: duck.CLOSE_MODAL });
    });

    it('closeModal should return the correct type with no payload', () => {
      expect(duck.confirmCloseModal()).toEqual({ type: duck.CONFIRM_CLOSE_MODAL });
    });

    it('closeModal should return the correct type with no payload', () => {
      const payload = { modal: 'TEST_MODAL' };
      expect(duck.openModal(payload)).toEqual({ type: duck.OPEN_MODAL, payload });
    });
  });
});
