/**
 * Create the root store
 */

import { gcaApi } from 'gca-react-components/src/redux-modules/api';
import { applyMiddleware, compose, createStore } from 'redux';
import { createEpicMiddleware } from 'redux-observable';
import createReducer from './reducers';

import mixpanelMiddleware from './mixpanel';
import rootEpic from './rootEpic';

import { commonApiEndpoints, SpecificApiCreator} from './api';
import { State, Store } from './types';

export interface Dependencies {
  usersApi: SpecificApiCreator;
}

const devtools = (window as any).__REDUX_DEVTOOLS_EXTENSION__ || (() => (noop: any) => noop);

/**
 * Configure the store
 * @param initialState
 */
export default function configureStore(initialState: Partial<State> = {}): Store {
  const epicMiddleware = createEpicMiddleware(
    rootEpic,
    {
      dependencies: {
        api: gcaApi,
        usersApi: commonApiEndpoints,
      },
    },
  );

  const middleware = [mixpanelMiddleware, epicMiddleware];
  const enhancers = compose(
    applyMiddleware(...middleware),
    devtools(),
  );
  const store = createStore<State>(
    createReducer(initialState),
    initialState as State,
    enhancers as any,
  );

  /* istanbul ignore next */
  if (module.hot) {
    module.hot.accept('./reducers', () => {
      store.replaceReducer(createReducer(initialState));
    });

    module.hot.accept('./rootEpic', () => {
      epicMiddleware.replaceEpic(rootEpic);
    });
  }

  return store;
}
