import Modal, { ModalType } from '@buffet/modal';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';

const errorStringsMap = {
  duplicate: {
    body: { id: 'modals.duplicateUser.body' },
    button: { id: 'modals.button.ok' },
    title: { id: 'modals.duplicateUser.title' },
  },
  inactive: {
    body: { id: 'modals.inactiveUser.body' },
    button: { id: 'modals.button.ok' },
    title: { id: 'modals.inactiveUser.title' },
  },
  invalid: {
    body: { id: 'modals.error.body' },
    button: { id: 'modals.button.ok' },
    title: { id: 'modals.error.title' },
  },
  standard: {
    body: { id: 'modals.error.body' },
    button: { id: 'modals.button.ok' },
    title: { id: 'modals.error.title' },
  },
};

const resolveModalStrings = (status: number, code: string) => {
  if (status === 409) {
    return errorStringsMap.duplicate;
  } else if (status === 400 && code === 'INACTIVE USER') {
    return errorStringsMap.inactive;
  } else if (status === 400 && code === 'validation_exception') {
    return errorStringsMap.invalid;
  }
  return errorStringsMap.standard;
};

interface ErrorModalActions {
  closeModal: () => void;
}

interface ErrorModalOwnProps {
  isOpen: boolean;
  error: { errorStatus: number, errorCode?: string };
}

type ErrorModalProps = ErrorModalOwnProps & ErrorModalActions & InjectedIntlProps;

const ErrorModalImpl = (props: ErrorModalProps ) => {
  const { intl, closeModal, error, isOpen } = props;
  const errorStrings = resolveModalStrings(error.errorStatus , error.errorCode || 'standard');

  // className="gca-small-modal"
  return (
    <Modal
      type={ModalType.prompt}
      onCloseRequest={closeModal}
      open={isOpen}
      title={intl.formatMessage(errorStrings.title)}
      acknowledgeLabel={intl.formatMessage(errorStrings.button)}
      onAcknowledge={closeModal}
    >
      <FormattedMessage tagName="p" id={errorStrings.body.id} />
    </Modal>
  );
};

// ErrorModal.propTypes = {
//   closeModal: PropTypes.func,
//   error: PropTypes.object,
//   intl: intlShape,
// };

// ErrorModal.defaultProps = {
//   error: {},
// };

export const ErrorModal = injectIntl(ErrorModalImpl);
export { ErrorModalImpl as PureErrorModal };
