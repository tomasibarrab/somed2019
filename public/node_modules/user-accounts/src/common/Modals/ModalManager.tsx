import get from 'lodash/get';
import React from 'react';
import { connect } from 'react-redux';
import { RouteComponentProps, withRouter } from 'react-router';

import { modalTypes } from '../../constants';
import { State } from '../../store/types';
import { DeleteUserModal } from './DeleteUserModal/DeleteUserModal';
import { ErrorModal } from './ErrorModal';

import {
  closeModal,
  confirmCloseModal,
} from '../../store/redux-modules/modals';

const {
  ERROR,
  DELETE_USER,
} = modalTypes;

interface ModalManagerActions {
  closeModal: () => void;
  confirmCloseModal: () => void;
}

interface ModalManagerState {
  currentModal: string;
  modalPayload: any;
}

type ModalManagerProps = ModalManagerActions & ModalManagerState & RouteComponentProps<{}>;

const ModalManagerImpl = (props: ModalManagerProps ) => {
  return (
    <>
      <DeleteUserModal
        isOpen={props.currentModal === DELETE_USER}
        modalPayload={props.modalPayload}
        closeModal={props.closeModal}
        confirmCloseModal={props.confirmCloseModal}
      />
      <ErrorModal
        isOpen={props.currentModal === ERROR}
        closeModal={props.closeModal}
        error={props.modalPayload}
      />
    </>
  );
};

export function mapStateToProps(state: State): ModalManagerState {
  return {
    currentModal: get(state, ['modals', 'currentModal']),
    modalPayload: get(state, ['modals', 'modalPayload']),
  };
}

const mapDispatchToProps = {
  closeModal,
  confirmCloseModal,
};

const ModalManager = connect(mapStateToProps, mapDispatchToProps)(withRouter(ModalManagerImpl));

export { ModalManagerImpl as PureModalManager };
export default ModalManager;
