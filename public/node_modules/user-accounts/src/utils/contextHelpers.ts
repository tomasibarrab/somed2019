import {
  Permission,
  Role,
  ROLE_TYPE,
  User,
  UserProfile,
  UserProfileSource,
} from '../store/types';


const toUrn = (role: Role | string) => (typeof role === 'string' ? role : role.urn);

export const isGroupContext = (context: string) => context.startsWith('urn:ot.groups:');
export const isRestaurantContext = (context: string) => context.startsWith('urn:ot.restaurants:');

const isGroupProfile = (profile: UserProfile) => isGroupContext(profile.context);

export const isGroupAccessType = (role: Role | string) => toUrn(role).startsWith('urn:ot.group.roles:');

const isSource = (profileSource: UserProfileSource) => (profile: UserProfile) => (profile.source === profileSource);
const isParentSource = isSource('parent');

export const isRestaurantAccessType = (role: Role | string) => {
  if (typeof role !== 'string' && role.properties && role.properties[ROLE_TYPE] === 'restaurant') {
    return true;
  }

  return (
    toUrn(role).startsWith('urn:ot.groups.roles:') // restaurant access type in group context
    || toUrn(role).startsWith('urn:ot.rest.roles:') // restaurant access type
  );
};


export const isGroupPermission = (permission: Permission) => permission.startsWith('urn:ot.group.perms:');

export const isRestaurantPermission = (permission: Permission) => permission.startsWith('urn:ot.rest.perms:');

export const userHasGroupAccess = (user: User) => (
  user.profiles
    ? user.profiles
      // get flat list of access types
      .map(profile => profile.roles)
      .reduce((allRoles, currentRoles) => [...allRoles, ...currentRoles], [])
      // see if any is a group access type
      .some(isGroupAccessType)
    : false
);

export const userHasGroupProfile = (user: User) => (
  user.profiles
    ? user.profiles.some(isGroupProfile)
    : false
);

export const userHasHigherLevelProfile = (user: User) => (
  user.profiles
    ? user.profiles.some(isParentSource)
    : false
);
