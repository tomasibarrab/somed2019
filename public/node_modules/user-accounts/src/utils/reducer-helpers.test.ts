import { createEditableDataFromUser, createUserFromEditableData } from '../store/redux-modules/users';
import { Role, UserData } from '../store/types';
import { transformArrayToObject } from './reducer-helpers';


describe('reducer helpers', () => {
  const list = [{ id: 'a', val: 'test' }, { id: 'b', val: 'test' }];
  const expected = {
    a: { id: 'a', val: 'test' },
    b: { id: 'b', val: 'test' },
  };
  it('should transform an array of objects into a map keyed by id', () => {
    const actual = transformArrayToObject(list, 'id');
    expect(actual).toEqual(expected);
  });

  it('should default to "id" when no id is passed as second arg', () => {
    const actual = transformArrayToObject(list);
    expect(actual).toEqual(expected);
  });
});


describe('conversions User from/to UserData', () => {

  it('Should convert a user with extra roles to editable data with rolesNotEditable field', () => {
    const user = {
      roles: ['a', 'b', 'c', 'd'],
    };
    const editableRoles: Role[] = [
      {
        permissions: [],
        properties: {},
        urn: 'b',
      }, {
        permissions: [],
        properties: {},
        urn: 'd',
      }, {
        permissions: [],
        properties: {},
        urn: 'z',
      },
    ];
    const editableUserData = createEditableDataFromUser('111', user, editableRoles, false);
    expect(editableUserData.rolesNotEditable).toHaveLength(2);
    expect(editableUserData.rolesNotEditable[0]).toBe('a');
    expect(editableUserData.rolesNotEditable[1]).toBe('c');
  });

  it('Should convert editable data to a user preserving roles in rolesNotEditable ', () => {
    const editableData: UserData = {
      email: 'john@doe.com',
      enable2FA: false,
      firstName: '',
      gdprNotificationReceiver: false,
      id: '111',
      lastActive: '',
      lastName: '',
      newUser: false,
      phone: '',
      role: '',
      rolesNotEditable: [ 'c', 'f' ],
      rolesSet: [
        {
          permissions: [],
          set: true,
          urn: 'a',
        }, {
          permissions: [],
          set: false,
          urn: 'b',
        },
      ],
      title: 'chef',
      urn: 'urn:fake.urn:111',
    };
    const user = createUserFromEditableData(editableData, '111', false);
    expect(user.roles).toHaveLength(3);
    expect(user.roles[0]).toBe('c');
    expect(user.roles[1]).toBe('f');
    expect(user.roles[2]).toBe('a');
  });

});
