import sortBy from 'lodash/sortBy';

import {
  HIDDEN_PROP_URN,
  Permission,
  PermissionWithMetadata,
  RANK_PROP_URN,
  Role,
  WithMetadata,
} from '../store/types';

export function isVisible(p: WithMetadata): boolean {
  return (!p.properties || p.properties[HIDDEN_PROP_URN] !== 'true');
}

export function isHidden(p: WithMetadata): boolean {
  return (p.properties !== undefined && p.properties[HIDDEN_PROP_URN] === 'true');
}

export function getRank(p: WithMetadata): number {
  return p.properties && p.properties[RANK_PROP_URN]
    ? Number.parseInt(p.properties[RANK_PROP_URN], 10)
    : Number.MAX_SAFE_INTEGER;
}

// ================== Permissions filter

/**
 * Returns an array of permissions with Metadata sorted by Rank
 * @param permissions PermissionWithMetadata[] array of permissions to be sorted
 */
export function sortPermissionsByRank(permissions: PermissionWithMetadata[]): PermissionWithMetadata[] {
  return sortBy( permissions, p => getRank(p) );
}

// ================== Roles filter

/**
 * Extracts the visible role permissions urn sorted according to the order in sortedAllPermissions.
 * This is done by just filtering and extracting the URN from the already sorted permissions
 * in sortedAllPermissions
 * @param role Role Role with editable permissions
 * @param sortedAllPermissions PermissionWithMetadata[] sorted array of permissions with metadata
 */
// tslint:disable-next-line:max-line-length
export function getEditablePermissionsFromRole(role: Role, sortedAllPermissions: PermissionWithMetadata[]): Permission[] {
  return sortedAllPermissions
  .filter(permission => role.permissions.indexOf(permission.urn) >= 0 && isVisible(permission))
  .map(permission => permission.urn);
}

/**
 * Extracts the invisible role permissions urn sorted according to the order in sortedAllPermissions.
 * @param role Role Role with hidden permissions
 * @param sortedAllPermissions PermissionWithMetadata[] sorted array of permissions with metadata
 */
export function getHiddenPermissionsFromRole(role: Role, sortedAllPermissions: PermissionWithMetadata[]): Permission[] {
  return sortedAllPermissions
  .filter(permission => role.permissions.indexOf(permission.urn) >= 0 && isHidden(permission))
  .map(permission => permission.urn);
}

/**
 * Returns the list of roles with permission sorted and filtered.
 * Hidden permissions in each role are stored separately in hiddenPermissions for future use
 * when updating the role.
 * @param roles Role[] Array of Role to sort with permission to sort and filter
 * @param sortedAllPermissions PermissionWithMetadata[] sorted array of permissions with metadata
 */
export function sortRolesPermissions(roles: Role[], sortedAllPermissions: PermissionWithMetadata[]) {
  return sortBy(
    roles.map(role => ({
        ...role,
        hiddenPermissions: getHiddenPermissionsFromRole(role, sortedAllPermissions),
        permissions: getEditablePermissionsFromRole(role, sortedAllPermissions),
      })),
    (r) => getRank(r),
  );
}

/**
 * Remove all the roles marked with a property PROP_HIDDEN set to true
 * @param roles Role[] Array of Role to filter according to visibility metadata
 */
export function filterHiddenRoles(roles: Role[]): Role[] {
  return roles.filter(isVisible);
}
