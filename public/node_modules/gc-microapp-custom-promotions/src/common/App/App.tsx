/**
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import { AsyncContent, Layout } from 'gca-react-components';
import { FeatureToggle } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import { initializeApp } from 'gca-react-components/src/redux-modules/initializeApp';
import getGcScopeRid from 'gca-react-components/src/utils/getGcScopeRid';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
// tslint:disable-next-line:max-line-length
import { fetchRestaurantPIProperties } from '../../../../../shared_modules/shared-pi-properties-store/restaurantPIProperties';
import CreateCustomPromotion from '../../CustomPromotions/CreateCustomPromotion';
import { actions as customPromotionsActions } from '../../store/customPromotions/customPromotions';
import { State } from '../../store/types';
import './App.scss';

interface SP {
  loading: boolean;
  error: boolean;
}

interface DP {
  getCredits: (payload: any) => void;
  initializeApp: (payload: any) => void;
  fetchRestaurantPIPropertiesStarted: typeof fetchRestaurantPIProperties.started;
}

type Props = SP & DP & InjectedIntlProps;

class App extends React.Component<Props, {}> {
  public render() {
    const {
      loading,
      error,
      intl: { formatMessage },
    } = this.props;
    return (
      <Layout title="">
        <section className="app-content">
          <AsyncContent
            isLoading={loading}
            isError={error}
            errorTitle={formatMessage({ id: 'app.errorTitle' })}
            errorMessage={formatMessage({ id: 'app.errorMessage' })}
          >
            <FeatureToggle featureId="featureGcaPiCreateCustomPromotion">
              <CreateCustomPromotion />
            </FeatureToggle>
          </AsyncContent>
        </section>
      </Layout>
    );
  }

  public componentDidMount() {
    const rid = getGcScopeRid(window);
    this.props.initializeApp({ rid });
    this.props.fetchRestaurantPIPropertiesStarted(rid);
    this.props.getCredits({ rid });
  }
}

const mapState = (state: State): SP => ({
  error: selectors.currentContext(state).fetchFailed,
  loading:
    selectors.currentContext(state).isFetching ||
    state.featureToggles.isFetching ||
    state.customPromotions.credits.pending,
});

const mapDispatch = {
  fetchRestaurantPIPropertiesStarted: fetchRestaurantPIProperties.started,
  getCredits: customPromotionsActions.getCredits.started,
  initializeApp,
};

const Connected = connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(injectIntl(App));

export default Connected;
export { App as PureApp };
