import { gcaApi } from 'gca-react-components/src/redux-modules/api';
import { routerMiddleware } from 'react-router-redux';
import { applyMiddleware, compose, createStore } from 'redux';
import { createEpicMiddleware } from 'redux-observable';
import * as api from './api';
import mixpanelMiddleware from './mixpanel';
import createReducer from './reducers';
import rootEpic from './rootEpic';
import { State } from './types';

export interface Dependencies {
  api: typeof api;
}

const dependencies: Dependencies = {
  api: {
    ...api,
    ...gcaApi,
  },
};

const devtools: any = (window as any).devToolsExtension || (() => (noop: any) => noop);

export default function configureStore(initialState: any, history: any) {
  const epicMiddleware = createEpicMiddleware(rootEpic, { dependencies });
  const middlewares = [mixpanelMiddleware, epicMiddleware, routerMiddleware(history)];
  const enhancers = compose(applyMiddleware(...middlewares), devtools());
  const store = createStore<State>(createReducer(), initialState, enhancers as any);

  /* istanbul ignore next */
  if ((module as any).hot) {
    (module as any).hot.accept('./reducers', () => {
      store.replaceReducer(createReducer());
    });

    (module as any).hot.accept('./rootEpic', () => {
      epicMiddleware.replaceEpic(rootEpic);
    });
  }

  return store;
}
