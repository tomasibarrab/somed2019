import { CampaignState, CampaignTypes } from '../store/customPromotions/customPromotions.types';
import makeCampaignDTO from './makeCampaignDTO';

const mockApprovalInfo = {
  restaurantLegalName: 'PI Test',
};

const mockEmail = 'jest@example.com';
const mockCoverPrice = 5.5;
const mockFirstName = 'Jest';
const mockLastName = 'User';
const mockRid = 268852;

/* tslint:disable:object-literal-sort-keys */
const mockUser = {
  userName: mockEmail,
  firstName: mockFirstName,
  lastName: mockLastName,
};

const mockFormValues = {
  seatingDates: {
    endDate: null,
    startDate: '2018-01-01',
  },
  daysAndTimes: {
    monday: {
      morning: true,
      midDay: true,
    },
    wednesday: {
      morning: true,
      midDay: false,
      evening: true,
    },
    thursday: {
      evening: false,
    },
  },
  blockedDays: {
    custom: {
      '2018-01-05': true,
      '2018-01-20': false,
    },
    default: {
      new_years_eve: true,
      valentines_day: true,
      christmas_day: false,
    },
  },
  monthlyBudget: {
    disabled: true,
  },
};
const expectedCampaign = {
  startDate: '2018-01-01',
  schedule: [
    {
      dayOfWeek: 'MONDAY',
      startTime: '02:00:00',
      endTime: '09:45:00',
    },
    {
      dayOfWeek: 'MONDAY',
      startTime: '10:00:00',
      endTime: '15:45:00',
    },
    {
      dayOfWeek: 'WEDNESDAY',
      startTime: '02:00:00',
      endTime: '09:45:00',
    },
    {
      dayOfWeek: 'WEDNESDAY',
      startTime: '16:00:00',
      endTime: '23:45:00',
    },
  ],
  suppressionDates: {
    custom: [
      {
        startDate: '2018-01-05',
        endDate: '2018-01-05',
      },
    ],
    default: ['new_years_eve', 'valentines_day'],
  },
  state: CampaignState.Live,
  type: CampaignTypes.CustomPromotions,
  campaignApprovalInfo: mockApprovalInfo,
  changedByUser: mockEmail,
  maxBid: mockCoverPrice,
  restaurantContactEmail: mockEmail,
  restaurantContactName: `${mockFirstName} ${mockLastName}`,
  rid: mockRid,
};

describe('makeCampaignDTO', () => {
  it('makes campaign w/o end date, no budget', () => {
    expect(makeCampaignDTO(mockFormValues, mockUser as any, mockRid, mockApprovalInfo, mockCoverPrice)).toEqual(
      expectedCampaign,
    );
  });

  it('makes campaign w/ end date, budget cap', () => {
    const expectedCampaignWithEndDateAndBudget = {
      ...expectedCampaign,
      endDate: '2018-05-01',
      monthlyBudget: 500,
    };

    const formValuesWithEndDateAndBudget = {
      ...mockFormValues,
      seatingDates: {
        ...mockFormValues.seatingDates,
        endDate: '2018-05-01',
      },
      monthlyBudget: {
        disabled: false,
        cap: 500,
      },
    };

    expect(
      makeCampaignDTO(formValuesWithEndDateAndBudget, mockUser as any, mockRid, mockApprovalInfo, mockCoverPrice),
    ).toEqual(expectedCampaignWithEndDateAndBudget);
  });
});
