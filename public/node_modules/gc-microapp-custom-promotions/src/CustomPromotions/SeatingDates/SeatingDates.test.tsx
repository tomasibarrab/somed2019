import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import testShowingFieldsOrSummary from '../../../internals/testing/helpers/testShowSummary';
import messages from '../../i18n/custom-promotions';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../constants';
import SeatingDates from './SeatingDates';

jest.mock('./SeatingDatesSummary', () => (props: any) => 'SeatingDatesSummary Component');

jest.mock('../Fields/DatePickerField', () => (props: any) => 'DatePickerField');
jest.mock('../Fields/makeDisabledBeforeDatePickerField', () => {
  // tslint:disable-next-line:no-shadowed-variable
  const React = require('react');
  return (nameOfField: string) => () => (
    <div className="disabled-before-datepicker-field-mock">{`DisabledBeforeDatePickerField(for ${nameOfField}`}</div>
  );
});

const renderComponent = (fn: any, props: any, state: any) => {
  const store = configureMockStore([])(state);
  return {
    component: fn(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={messages}>
          <SeatingDates {...props} />
        </IntlProvider>
      </Provider>,
    ),
    store,
  };
};
describe('SeatingDates', () => {
  const formState = {
    form: {
      [CUSTOM_PROMOTIONS_FORM_NAME]: {
        values: { startDate: '2018-01-01' },
      },
    },
  };

  it('toggling switch should show end date, then toggling again stops showing end date and fires change', () => {
    const change = jest.fn();
    const { component } = renderComponent(mount, { isOpen: true, showValidationErrors: false, change }, formState);

    const mockEndDateContainerClassName = '.disabled-before-datepicker-field-mock';
    let endDate = component.find(mockEndDateContainerClassName);
    expect(endDate.length).toEqual(0);

    const checkbox = component.find('input[type="checkbox"]');
    checkbox.simulate('change', { target: { checked: true } });

    endDate = component.find(mockEndDateContainerClassName);
    expect(endDate.length).toEqual(1);
    expect(change).not.toHaveBeenCalled();

    checkbox.simulate('change', { target: { checked: false } });

    endDate = component.find(mockEndDateContainerClassName);
    expect(endDate.length).toEqual(0);
    expect(change).toHaveBeenCalled();
  });

  it('should show fields when isOpen, summary when !isOpen', () => {
    testShowingFieldsOrSummary(SeatingDates, false);
    testShowingFieldsOrSummary(SeatingDates, true);
  });
});
