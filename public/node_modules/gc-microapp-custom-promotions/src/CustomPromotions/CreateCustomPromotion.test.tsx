import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import messages from '../i18n/custom-promotions';
import { CreditsModel, CustomPromotionsState } from '../store/customPromotions/customPromotions.types';
import makeCreditsModel from '../store/customPromotions/makeCreditsModel';
import CreateCustomPromotion from './CreateCustomPromotion';

jest.mock('./SteppedForm/SteppedFormSection', () => () => 'SteppedFormSection');

describe('<CreateCustomPromotion />', () => {
  const model: CreditsModel = makeCreditsModel({
    activeCustomPromotion: false,
    coverPrice: 2.75,
    creditAmount: 100,
    currencyCode: 'USD',
    rid: 268852,
  });

  const credits = {
    model,
  };

  const currentContext = {
    restaurant: { name: 'Ye Olde Test restaurant' },
    user: {
      userName: 'john.doe@email.com',
    },
  };

  const scenarios = [
    {
      customPromotions: { create: {} as CustomPromotionsState['create'], educationPage: 1, credits },
      description: 'to match snapshot - education page 1',
    },
    {
      customPromotions: { create: {} as CustomPromotionsState['create'], educationPage: 2, credits },
      description: 'to match snapshot - education page 2',
    },
    {
      customPromotions: { create: {} as CustomPromotionsState['create'], educationPage: 0, credits },
      description: 'to match snapshot - create campaign',
    },
    {
      customPromotions: { create: { modal: true } as CustomPromotionsState['create'], educationPage: 0, credits },
      description: 'to match snapshot - create campaign w/ modal',
    },
    {
      customPromotions: {
        create: {
          formValuesSnapshot: { blockedDays: { custom: {}, default: {} }, monthlyBudget: {}, seatingDates: {} },
          success: true,
        } as CustomPromotionsState['create'],
        credits,
        educationPage: 0,
      },
      description: 'to match snapshot - create campaign w/ summary page',
    },
  ];

  scenarios.forEach(({ customPromotions, description }) => {
    test(description, () => {
      const state = { currentContext: { ...currentContext }, customPromotions: { ...customPromotions } };
      const store = configureMockStore([])(state);

      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={messages}>
            <CreateCustomPromotion />
          </IntlProvider>
        </Provider>,
      );
      if (customPromotions.educationPage > 0) {
        expect(wrapper.find('EducationPage')).toBeDefined();
      } else if (customPromotions.create.success === true) {
        expect(wrapper.find('FinishedPage')).toBeDefined();
      } else {
        expect(wrapper.find('Panel')).toBeDefined();
      }
    });
  });

  test('clicking "Learn More" shows education page 1 as standalone', () => {
    const state = {
      currentContext: { ...currentContext },
      customPromotions: { create: {}, educationPage: 0, credits },
    };
    const store = configureMockStore([])(state);

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={messages}>
          <CreateCustomPromotion />
        </IntlProvider>
      </Provider>,
    );

    expect(
      wrapper
        .find('Panel')
        .props()
        .className.includes('is-active'),
    ).toBeTruthy();

    wrapper.find('Button[data-testid="learn-more"]').simulate('click');

    expect(
      wrapper
        .find('Panel')
        .props()
        .className.includes('is-active'),
    ).toBeFalsy();

    expect(
      wrapper
        .find('EducationPage')
        .props()
        .className.includes('is-active'),
    ).toBeTruthy();
  });
});
