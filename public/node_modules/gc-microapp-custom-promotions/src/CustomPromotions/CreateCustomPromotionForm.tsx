import { Button } from 'gca-react-components';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { getFormSyncErrors, InjectedFormProps, reduxForm, submit as reduxFormSubmit } from 'redux-form';
import { actions } from '../store/customPromotions/customPromotions';
import { SetProgressPercentagePayload } from '../store/customPromotions/customPromotions.types';
import { State } from '../store/types';
import BlockedDays from './BlockedDays/BlockedDays';
import { CUSTOM_PROMOTIONS_FORM_NAME } from './constants';
import './CreateCustomPromotionForm.scss';
import DaysAndTimes from './DaysAndTimes/DaysAndTimes';
import MonthlyBudget from './MonthlyBudget/MonthlyBudget';
import MoreInformation from './MoreInformation/MoreInformation';
import RestaurantName from './RestaurantName/RestaurantName';
import SeatingDates from './SeatingDates/SeatingDates';
import SteppedFormSectionContainer from './SteppedForm/SteppedFormSectionContainer';
import validate from './validate';

interface SP {
  progressPercentage: number;
  validationErrors: any;
}
interface OP {
  form: string;
  onClickNeedMoreInfo: () => void;
}

interface DP {
  submit: () => void;
  clickOrInteract: typeof actions.clickOrInteract;
  setProgressPercentage: (payload: SetProgressPercentagePayload) => void;
}

interface Props extends SP, OP, DP, InjectedIntlProps {}
interface FormProps extends Props, InjectedFormProps<{}, Props> {}

const syncErrorsSelector = getFormSyncErrors(CUSTOM_PROMOTIONS_FORM_NAME);

class CreateCustomPromotionForm extends Component<FormProps> {
  public render() {
    const { clickOrInteract, form, onClickNeedMoreInfo, progressPercentage, setProgressPercentage, submit, validationErrors } = this.props;
    return (
      <form className="create-custom-promotion-form">
        <RestaurantName />
        <SteppedFormSectionContainer
          config={[
            {
              defaultDone: false,
              name: 'monthlyBudget',
              onClickNext: () => {
                clickOrInteract({
                  action: 'Click',
                  props: {
                    name: 'Next',
                    page: 'Set up budget',
                  },
                });
              },
              sectionComponent: MonthlyBudget,
            },
            {
              defaultDone: false,
              name: 'daysAndTimes',
              sectionComponent: DaysAndTimes,
            },
            {
              defaultDone: true,
              name: 'seatingDates',
              sectionComponent: SeatingDates,
            },
            {
              defaultDone: true,
              name: 'blockedDays',
              sectionComponent: BlockedDays as any,
            },
          ]}
          form={form}
          endComponent={<MoreInformation onClickNeedMoreInfo={onClickNeedMoreInfo} />}
          finishButton={
            <Button
              theme="publish"
              className="finish"
              disabled={validationErrors && !!Object.keys(validationErrors).length}
              onClick={() => {
                clickOrInteract({
                  action: 'Click',
                  props: {
                    name: 'Finish',
                    page: 'Set up schedule',
                  },
                });
                setProgressPercentage({ percentage: progressPercentage < 100 ? progressPercentage + 25 : 100 });
                submit();
              }}
            >
              <FormattedMessage id="guestcampaigns.custom_promotions.form.finish" />
            </Button>
          }
        />
      </form>
    );
  }
}

const ReduxFormCreateCustomPromotionForm = reduxForm<{}, Props>({
  onSubmit: (values, dispatch) => {
    dispatch(
      actions.openCustomPromotionsCreationTermsModal({
        formValuesSnapshot: values,
      }),
    );
  },
  validate,
})(CreateCustomPromotionForm);

const mapState = (state: State) => ({
  progressPercentage: state.customPromotions.progressPercentage,
  validationErrors: syncErrorsSelector(state),
});

const mapDispatch = {
  clickOrInteract: actions.clickOrInteract,
  setProgressPercentage: actions.setProgressPercentage,
  submit: () => reduxFormSubmit(CUSTOM_PROMOTIONS_FORM_NAME),
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl<Props>(ReduxFormCreateCustomPromotionForm));
