import classnames from 'classnames';
import React, { Component, ComponentType, ReactNode } from 'react';
import { connect } from 'react-redux';
import { actions } from '../../store/customPromotions/customPromotions';
import { SetProgressPercentagePayload } from '../../store/customPromotions/customPromotions.types';
import { State } from '../../store/types';
import { ChildComponentProps } from '../commonTypes';
import SteppedFormSection from './SteppedFormSection';

interface SP {
  progressPercentage: number;
}

interface Config {
  sectionComponent: ComponentType<ChildComponentProps>; // Open to suggestion on the naming of this one
  defaultDone?: boolean;
  name: string;
  onClickNext?: () => void;
}

interface OP {
  config: Config[];
  form: string;
  endComponent?: ReactNode;
  finishButton?: ReactNode;
}

interface DP {
  setProgressPercentage: (payload: SetProgressPercentagePayload) => void;
}

type Props = SP & OP & DP;

class SteppedFormSectionContainer extends Component<Props, State> {
  constructor(props: any) {
    super(props);
    const initialProgressPercentage = this.getInitialProgress();
    this.props.setProgressPercentage({ percentage: initialProgressPercentage });
  }

  public render() {
    const { config, form, endComponent, finishButton } = this.props;

    return (
      <div className="stepped-form-section-container">
        {/* Progress bar stuff */}
        <div className="stepped-form-sections">
          {config.map((sectionConfig: Config, index: number) => {
            return (
              <SteppedFormSection
                defaultDone={sectionConfig.defaultDone}
                disabled={this.isChildDisabled(index)}
                key={sectionConfig.name}
                onDone={this.makeOnDone(index)}
                name={sectionConfig.name}
                component={sectionConfig.sectionComponent}
                form={form}
                onClickNext={sectionConfig.onClickNext}
              />
            );
          })}
          {!this.isChildDisabled(config.length - 1) && finishButton}
          <div
            className={classnames({
              /* tslint:disable-next-line:object-literal-key-quotes */
              disabled: this.isChildDisabled(config.length - 1),
              'end-component': true,
            })}
          >
            {endComponent}
          </div>
        </div>
      </div>
    );
  }

  private getInitialProgress = () => {
    const initialDoneSections = this.props.config.filter((sectionConfig: Config) => !!sectionConfig.defaultDone);
    return 100 * initialDoneSections.length / this.props.config.length;
  }

  private updateProgress = () => {
    const progress = this.props.progressPercentage + (100 / this.props.config.length);
    this.props.setProgressPercentage({ percentage: progress });
  };

  private isChildDisabled(sectionNumber: number) {
    const initialProgressPercentage = this.getInitialProgress();

    /* Disable all sections below first when first section is not done (i.e. progress percentage = initialProgressPercentage) */
    if (this.props.progressPercentage <= initialProgressPercentage && sectionNumber > 0) {
      return true;
    }

    /* Disable only first section when first section is done (i.e. progress percentage > initialProgressPercentage) */
    if (this.props.progressPercentage > initialProgressPercentage && sectionNumber === 0) {
      return true;
    }

    return false;
  }

  /* Creates functions for each section. Each section's onDone serves to advance/unlock the next section. */
  private makeOnDone(sectionNumber: number) {
    return () => {
      this.updateProgress();
    };
  }
}

const mapState = (state: State) => ({
  progressPercentage: state.customPromotions.progressPercentage,
});

const mapDispatch = {
  setProgressPercentage: actions.setProgressPercentage,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(SteppedFormSectionContainer);
