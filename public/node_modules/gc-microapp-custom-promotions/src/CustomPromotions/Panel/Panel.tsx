import { Button } from 'gca-react-components';
import { Line } from 'rc-progress';
import React, { SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { getFormSyncErrors, submit as reduxFormSubmit } from 'redux-form';
import { actions } from 'store/customPromotions/customPromotions';
import { SetProgressPercentagePayload } from '../../store/customPromotions/customPromotions.types';
import { State } from '../../store/types';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../constants';
import BackArrow from '../images/BackArrow';
import CheckmarkIcon from '../images/CheckmarkIcon';
import CloseIcon from '../images/CloseIcon';
import './Panel.scss';

interface SP {
  progressPercentage: number;
  syncErrors: any;
}

interface DP {
  clickOrInteract: typeof actions.clickOrInteract;
  onPublish: () => void;
  setProgressPercentage: (payload: SetProgressPercentagePayload) => void;
}

interface OP {
  className: any;
  showHeader: boolean;
  onClickBack: () => void;
}

const syncErrorsSelector = getFormSyncErrors(CUSTOM_PROMOTIONS_FORM_NAME);

type Props = SP & DP & OP;

const Panel: SFC<Props> = props => {
  const { className, clickOrInteract, onClickBack, onPublish, progressPercentage, setProgressPercentage, showHeader, syncErrors } = props;

  const onClick = () => {
    /* Note: this will only work for a form with 4 sections */
    if (progressPercentage > 50) {
      const progress = progressPercentage - 25;
      setProgressPercentage({ percentage: progress });
    } else {
      onClickBack();
    }
  }

  return (
    <div className={className}>
      {showHeader && (
        <div className="header">
          <div className="left-content">
            <Button theme="link" onClick={onClick} className="cancel-button">
              {progressPercentage > 50 ? <BackArrow /> : <CloseIcon />}
            </Button>
          </div>
          <div className="center-content">
            <FormattedMessage id="guestcampaigns.custom_promotions.form.header.title" tagName="h3" />
            <Line percent={Math.round(progressPercentage)} strokeWidth="6" trailWidth="6" strokeColor="#6CB6F5" />
          </div>
          <div className="right-content"></div>
        </div>
      )}
      <div className="content">{props.children}</div>
    </div>
  );
};

const mapState = (state: State) => ({
  progressPercentage: state.customPromotions.progressPercentage,
  syncErrors: syncErrorsSelector(state),
});

const mapDispatch = {
  clickOrInteract: actions.clickOrInteract,
  onPublish: () => reduxFormSubmit(CUSTOM_PROMOTIONS_FORM_NAME),
  setProgressPercentage: actions.setProgressPercentage,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(Panel);
