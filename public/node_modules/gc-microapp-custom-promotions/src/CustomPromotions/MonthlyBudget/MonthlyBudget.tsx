import classNames from 'classnames';
import { Checkbox } from 'gca-react-components';
import moment, { Moment } from 'moment';
import Slider, { Handle } from 'rc-slider';
import 'rc-slider/assets/index.css';
import React, { Component } from 'react';
import { FormattedDate, FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Field, formValues } from 'redux-form';
import { createNumberMask } from 'redux-form-input-masks';
import { CreditsModel } from '../../store/customPromotions/customPromotions.types';
import { State } from '../../store/types';
import { ChildComponentProps } from '../commonTypes';
import Fieldset from '../Fieldset/Fieldset';
import {
  formatCurrencyAmount,
  getCostPerCover,
  getCoversFromMonthlyBudget,
  getCreditsApplied,
  getMonthlyBudgetFromCovers,
  getRestaurantTotalCost,
  getUnusedCredits,
} from './helpers';
import './MonthlyBudget.scss';
import MonthlyBudgetSummary from './MonthlyBudgetSummary';

import AutosizeInput from 'react-input-autosize';
import WithMonthlyBudget from '../WithMonthlyBudget';

type OP = ChildComponentProps & InjectedIntlProps & { disabled: boolean };

interface SP {
  credits: CreditsModel;
}

type Props = SP & OP;

class MonthlyBudget extends Component<
  Props,
  {
    covers: number;
    showCreditsOverlay: boolean;
    maxCovers: number;
    currentMonth: Moment;
  }
> {
  private budgetInputMask = createNumberMask({
    decimalPlaces: 2,
    onChange: (updatedValue: number) => {
      this.setState({
        covers: getCoversFromMonthlyBudget(
          // Need to handle the case of the user backspacing to enter something else...
          // TODO see if this input parsing can be cleaned up
          Math.max(updatedValue, this.props.credits.coverPrice),
          this.props.credits,
        ),
      });
    },
  });

  constructor(props: Props) {
    super(props);
    const covers = props.credits.defaultCovers;
    this.state = { currentMonth: moment(), covers, maxCovers: 2.0 * covers, showCreditsOverlay: false };
  }

  public render() {
    const { change, isOpen, intl: { formatMessage }, credits, disabled } = this.props;
    const { currentMonth, covers, maxCovers, showCreditsOverlay } = this.state;
    const { currencySymbol } = credits;
    return (
      <Fieldset
        className="monthly-budget"
        legend={formatMessage({ id: 'guestcampaigns.custom_promotions.form.monthly_budget' })}
      >
        {isOpen ? (
          <>
            <div className={classNames({ disabled, fields: true })}>
              {credits.shouldShowCredits && (
                <FormattedMessage
                  id="guestcampaigns.custom_promotions.form.monthly_budget_subheading"
                  tagName="p"
                  values={{
                    formattedCoverPrice: credits.formattedCoverPrice,
                  }}
                />
              )}
              <article className="budget-callout-box">
                {showCreditsOverlay && (
                  <div className="credits-overlay">
                    <FormattedMessage
                      id="guestcampaigns.custom_promotions.form.credits_overlay.explanation"
                      values={{
                        additionalCoverCost: credits.coverPrice - 1,
                        currencySymbol,
                      }}
                    />
                    <span
                      className="credits-overlay-close"
                      onClick={() => {
                        this.setState({ showCreditsOverlay: false });
                      }}
                    >
                      {formatMessage({ id: 'guestcampaigns.custom_promotions.form.credits_overlay.ok_got_it' })}
                    </span>
                  </div>
                )}
                <FormattedMessage id="guestcampaigns.custom_promotions.form.monthly_budget_cap" tagName="p" />
                <div className="input-container">
                  <span>{`${currencySymbol}`}</span>
                  <Field component={this.renderBudgetBox} name="cap" {...this.budgetInputMask} />
                </div>
                {credits.shouldShowCredits && (
                  <WithMonthlyBudget
                    render={monthlyBudgetCap => {
                      const hasUnusedCredits = getUnusedCredits(monthlyBudgetCap, credits) > 0;
                      return (
                        <>
                          <p
                            className={classNames({
                              'credits-this-month': true,
                              'has-unused-credits': hasUnusedCredits,
                            })}
                            onClick={() => {
                              if (hasUnusedCredits) {
                                this.setState({ showCreditsOverlay: true });
                              }
                            }}
                          >
                            <FormattedMessage
                              id="guestcampaigns.custom_promotions.form.credits_in_month"
                              tagName="span"
                              values={{ month: <FormattedDate value={currentMonth.toDate()} month="long" /> }}
                            />
                            {hasUnusedCredits ? (
                              <span className="where-did-the-credits-go">
                                {formatMessage({ id: 'guestcampaigns.custom_promotions.form.where_credits_go' })}
                              </span>
                            ) : (
                              undefined
                            )}
                          </p>
                          <p>
                            {currencySymbol}
                            {formatCurrencyAmount(getCreditsApplied(monthlyBudgetCap, credits))}
                          </p>
                        </>
                      );
                    }}
                  />
                )}
                <p className="total">
                  <FormattedMessage id="guestcampaigns.custom_promotions.form.total_for_up_to" tagName="span" />
                  <FormattedMessage
                    id="guestcampaigns.custom_promotions.form.number_of_covers"
                    tagName="strong"
                    values={{ covers }}
                  />
                </p>
                <WithMonthlyBudget
                  render={monthlyBudgetCap => (
                    <p
                      className={classNames({
                        'restaurant-cost-with-credits': true,
                        'use-credits': credits.shouldShowCredits,
                      })}
                    >
                      {credits.shouldShowCredits && (
                        <span>
                          {monthlyBudgetCap < credits.coverPrice
                            ? '-'
                            : `${credits.currencySymbol}${formatCurrencyAmount(
                                getRestaurantTotalCost(monthlyBudgetCap, credits),
                              )}`}
                        </span>
                      )}
                      {monthlyBudgetCap < credits.coverPrice ? (
                        <span>-</span>
                      ) : (
                        <FormattedMessage
                          id="guestcampaigns.custom_promotions.form.price_per_cover"
                          tagName="span"
                          values={{
                            coverPrice: formatCurrencyAmount(getCostPerCover(monthlyBudgetCap, credits)),
                            currencySymbol,
                          }}
                        />
                      )}
                    </p>
                  )}
                />
              </article>
              <Slider
                min={1}
                max={maxCovers}
                onChange={(value: any) => {
                  this.setState({ covers: parseInt(value, 10) }, () => {
                    change('cap', getMonthlyBudgetFromCovers(this.state.covers, credits));
                  });
                }}
                step={1}
                handle={this.renderHandle}
                value={Math.min(covers, maxCovers)}
                className={classNames({
                  'with-credits': credits.shouldShowCredits,
                })}
              />
              <p
                className={classNames({
                  'slider-legend': true,
                  'with-credits': credits.shouldShowCredits,
                })}
              >
                <FormattedMessage id="guestcampaigns.custom_promotions.form.fewer_covers" tagName="span" />
                {credits.shouldShowCredits && (
                  <FormattedMessage id="guestcampaigns.custom_promotions.form.use_all_credits" tagName="span" />
                )}
                <FormattedMessage id="guestcampaigns.custom_promotions.form.more_covers" tagName="span" />
              </p>
              <p className="cap-info">{formatMessage({ id: 'guestcampaigns.custom_promotions.form.cap_info' })}</p>
            </div>
            <Field
              name="disabled"
              component={this.renderCheckboxAndLabel as any}
              type="checkbox"
              props={
                {
                  label: (
                    <div className="time-label">
                      <FormattedMessage id="guestcampaigns.custom_promotions.form.dont_set_a_budget" tagName="p" />
                      {credits.shouldShowCredits && (
                        <FormattedMessage
                          id="guestcampaigns.custom_promotions.form.keep_bringing_me_diners"
                          tagName="span"
                          values={{
                            creditAmount: credits.creditAmount,
                            currencySymbol,
                            month: <FormattedDate value={currentMonth.toDate()} month="long" />,
                          }}
                        />
                      )}
                    </div>
                  ),
                } as any
              }
            />
          </>
        ) : (
          <div className="summary">
            <MonthlyBudgetSummary credits={credits} />
          </div>
        )}
      </Fieldset>
    );
  }

  private renderCheckboxAndLabel = ({ input, className, label }: any) => {
    const { onChange, value } = input;

    return <Checkbox onClick={onChange} checked={value || false} className={className} label={label} />;
  };

  private renderHandle = (props: any) => <Handle {...props} offset={props.offset - 2} />;

  private renderBudgetBox = ({ input }: { [key: string]: any }) => (
    <AutosizeInput
      {...input}
      tabIndex="0"
      pattern="[0-9]*"
      minWidth={60}
      maxLength={9}
      onKeyPress={(ev: KeyboardEvent) => {
        if (ev.key === 'Enter') {
          ev.preventDefault(); // Stop the implicit form submission
        }
      }}
      onChange={(ev: any) => {
        this.setState({
          covers: getCoversFromMonthlyBudget(
            // Need to handle the case of the user backspacing to enter something else...
            // TODO see if this input parsing can be cleaned up
            Math.max(parseFloat(ev.target.value || '0'), this.props.credits.coverPrice),
            this.props.credits,
          ),
        });
        input.onChange(ev);
      }}
    />
  );
}

const mapState = (state: State): SP => ({
  credits: state.customPromotions.credits.model!,
});

// TODO: check this `any`
export default connect<SP, {}, OP>(mapState)(formValues('disabled')(injectIntl(MonthlyBudget) as any) as any);
