import { CreditsModel } from 'store/customPromotions/customPromotions.types';

export const getMonthlyBudgetFromCovers = (covers: number, credits: CreditsModel): number => {
  const { coverPrice } = credits;
  return coverPrice * covers;
};

/* Monthly budget is the source of truth for all of the calculations, and as such, they
only take a monthlyBudget parameter.

We should not be using the (rounded, from the component state) `covers` value to perform
any calculations other than passing it into the one function above, which then is used to
update the value of the monthly budget, which then propagates to all the other things derived from it below. */

/* TODO: Use these, see if there is any performance impact. (is the slider slow etc due to calculations and/or
  re-rendering too much stuff.)

  TODO: Tests. */

export const getCoversFromMonthlyBudget = (monthlyBudget: number, credits: CreditsModel): number => {
  const { coverPrice } = credits;
  return Math.round(monthlyBudget / coverPrice);
};

export const getCreditsApplied = (monthlyBudget: number, credits: CreditsModel): number => {
  const { creditAmount, coverPrice } = credits;
  const monthlyCovers = getCoversFromMonthlyBudget(monthlyBudget, credits);
  return Math.min(creditAmount, monthlyCovers * (coverPrice - 1));
};

export const getRestaurantTotalCost = (monthlyBudget: number, credits: CreditsModel): number => {
  return monthlyBudget - getCreditsApplied(monthlyBudget, credits);
};

export const getCostPerCover = (monthlyBudget: number, credits: CreditsModel): number => {
  return credits.shouldShowCredits
    ? getRestaurantTotalCost(monthlyBudget, credits) / getCoversFromMonthlyBudget(monthlyBudget, credits)
    : credits.coverPrice;
};

export const getUnusedCredits = (monthlyBudget: number, credits: CreditsModel): number => {
  const { creditAmount } = credits;
  return creditAmount - getCreditsApplied(monthlyBudget, credits);
};

export const formatCurrencyAmount = (amount: number): string => {
  const intermediate = Math.round(100 * amount) / 100;
  const hasFractionalPart = intermediate % 1 !== 0;
  return hasFractionalPart ? `${intermediate.toFixed(2)}` : `${intermediate}`;
};
