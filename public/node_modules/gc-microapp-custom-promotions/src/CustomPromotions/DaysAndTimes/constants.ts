import moment from 'moment';

interface Time {
  time: string;
  short: string;
  startTime: string;
  endTime: string;
}

interface Times {
  [index: string]: Time;
}

/* tslint:disable */
export const times: Times = {
  morning: {
    short: 'Morning',
    time: 'Open - 10am',
    startTime: '02:00:00',
    endTime: '09:45:00',
  },
  midDay: {
    time: '10 am - 4 pm',
    short: 'Mid-day',
    startTime: '10:00:00',
    endTime: '15:45:00',
  },
  evening: {
    time: '4 pm - Close',
    short: 'Evening',
    startTime: '16:00:00',
    endTime: '23:45:00' /* TODO: this should be 2am next day? */,
  },
};
/* tslint:enable */

export const timesOrdering: string[] = ['morning', 'midDay', 'evening'];

const weekdays = moment.weekdays();

/*
[ 'Sunday',
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday' ]
*/

/* Using this allows us not to rely on Object.keys traversing the keys in the order they were added. */
export const dayOrdering: string[] = weekdays.map(weekday => weekday.toLowerCase());

export interface Day {
  expanded: boolean;
  label: string;
  short: string;
}

export interface Days {
  [index: string]: Day;
}

export const days: Days = weekdays
  .map(name => ({
    label: name,
    short: name.substr(0, 3),
  }))
  .reduce((accumulator: any, current: any) => {
    const key = current.label.toLowerCase();
    accumulator[key] = current;
    return accumulator;
  }, {});
