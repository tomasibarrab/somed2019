import { Chevron, Dropdown } from 'gca-react-components';
import moment from 'moment';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import Custom from './Custom';
import Preset from './Preset';

import { dateRange } from '../../../store/reviewFilters/reviewFilters';

interface DateRange {
  start: string;
  end: string;
}

interface SP {
  current: DateRange;
  focused: boolean;
}

interface DP {
  focus(): void;
  cancel(): void;
}

interface BaseProps extends SP, DP {}
interface Props extends BaseProps, InjectedIntlProps {}

interface State {
  showCustomDate: boolean;
}

class DateRangeDropdown extends React.Component<Props, State> {
  public state = {
    showCustomDate: false,
  };

  public render() {
    const { focused, intl, current: { start, end } } = this.props;
    const { showCustomDate } = this.state;

    const isFarPastStartDate = moment(start).isBefore('2000-01-01');

    const rangeLabelText = intl.formatMessage(
      { id: 'reviews.filters.dateRange' },
      {
        end: intl.formatDate(end),
        start: intl.formatDate(start),
      },
    );

    const allTimeLabelText = intl.formatMessage({ id: 'reviews.filters.dateRange.allTime' });

    const labelText = isFarPastStartDate ? allTimeLabelText : rangeLabelText;

    const specifyDatesButton = (
      <button className="filter-title" onClick={this.toggleShowCustomDate}>
        <FormattedMessage id="reviews.filters.dateRange.specifyDates" />
        <span>
          {' '}
          <Chevron height="15" color="#56A1E3" direction="right" />
        </span>
      </button>
    );

    const backToDateRangesButton = (
      <button className="filter-title" onClick={this.toggleShowCustomDate}>
        <span>
          <Chevron height="15" color="#56A1E3" direction="left" />{' '}
        </span>
        <FormattedMessage id="reviews.filters.dateRange.backToDateRanges" />
      </button>
    );

    const toggleButton = showCustomDate ? backToDateRangesButton : specifyDatesButton;
    const content = showCustomDate ? <Custom /> : <Preset />;

    return (
      <Dropdown label={labelText} open={focused} onLabelClick={this.handleLabelClick}>
        {toggleButton}
        {content}
      </Dropdown>
    );
  }

  private toggleShowCustomDate = () => this.setState({ showCustomDate: !this.state.showCustomDate });
  private handleLabelClick = () => (this.props.focused ? this.props.cancel() : this.props.focus());
}

export default connect<SP, DP, {}>(dateRange.selector, dateRange.actions)(injectIntl<BaseProps>(DateRangeDropdown));
export { DateRangeDropdown as PureDateRangeDropdown };
