/**
 * Paginator
 *
 * NOTE: react-paginate handles the current page itself. All we need to do is specify the total number of pages.
 *       If we handle the page correctly, and only give it the current page to display, then the paginator will
 *       behave correctly. In addition, **it is zero indexed** so page 1 is passed in as 0 on init.
 */

import React from 'react';
import Paginate from 'react-paginate';
import { connect } from 'react-redux';

import { selectPage } from '../../store/allReviews/allReviews';
import { State } from '../../store/types';

import './Paginator.scss';

interface SP {
  page: number;
  totalCount: number;
  pageSize: number;
}

interface DP {
  selectPage(payload: any): void;
}

interface Props extends SP, DP {}

function Paginator(props: Props) {
  const totalPages = Math.ceil(props.totalCount / props.pageSize);

  if (totalPages <= 1) {
    return null;
  }

  return (
    <Paginate
      forcePage={props.page}
      pageCount={totalPages}
      pageRangeDisplayed={5}
      marginPagesDisplayed={2}
      initialPage={0}
      containerClassName="gca-paginator-container"
      pageClassName="gca-paginator-link"
      activeClassName="gca-paginator-current-page"
      previousClassName="gca-paginator-link"
      nextClassName="gca-paginator-link"
      breakClassName="gca-paginator-link"
      disabledClassName="gca-paginator-disabled"
      onPageChange={props.selectPage}
      disableInitialCallback
    />
  );
}

function mapStateToProps(state: State) {
  return {
    page: state.allReviews.page,
    pageSize: state.allReviews.pageSize,
    totalCount: state.allReviews.totalReviews,
  };
}

const mapDispatchToProps = {
  selectPage,
};

export default connect<SP, DP, {}>(mapStateToProps, mapDispatchToProps)(Paginator);
export { Paginator as PurePaginator };
