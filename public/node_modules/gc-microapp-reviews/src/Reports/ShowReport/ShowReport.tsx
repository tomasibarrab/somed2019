import { DownloadIcon, PencilIcon, TrashCanIcon } from 'gca-react-components';
import get from 'lodash/get';
import React from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';

import { deleteReport, editReportActiveUpdate } from '../../store/reports/reports';
import { Report } from '../../store/reports/reports';
import { State } from '../../store/types';

import './ShowReport.scss';

const reportTypeToIdMap = {
  Detailed: 'reports.detailed',
  RatingsOnly: 'reports.ratingOnly',
};

const reportFrequencyToIdMap = {
  Daily: 'reports.show.daily',
  Monthly: 'reports.show.monthly',
  Weekly: 'reports.show.weekly',
};

interface SP {
  report: Report;
}

interface DP {
  editReportActiveUpdate(reportId: string): void;
  deleteReport({ reportId }: { reportId: string }): void;
}

interface OP {
  reportId: string;
}

interface Props extends SP, DP, OP {}

class ShowReport extends React.Component<Props> {
  public render() {
    const { report } = this.props;

    const recipients = report.Recipients.map(r => <p key={r}>{r}</p>);

    const downloadLink = get(report, ['History', '0', 'ReportLocation'], null);
    const downloadDisabledStyle = !downloadLink ? 'download-disabled' : '';
    const color = !downloadLink ? '#D7D9E0' : undefined;

    return (
      <tr className="gca-review-report">
        <FormattedMessage tagName="td" id={reportFrequencyToIdMap[report.Frequency]} />
        <FormattedMessage tagName="td" id={reportTypeToIdMap[report.Type]} />
        <td>{recipients}</td>
        <td>
          <button onClick={this.handleEditClick}>
            <PencilIcon />
          </button>
          <button onClick={this.handleDeleteClick}>
            <TrashCanIcon />
          </button>
          <a className={downloadDisabledStyle} href={downloadLink}>
            <DownloadIcon color={color} height={'19px'} />
          </a>
        </td>
      </tr>
    );
  }

  private handleEditClick = () => {
    this.props.editReportActiveUpdate(this.props.reportId);
  };

  private handleDeleteClick = () => {
    this.props.deleteReport({ reportId: this.props.reportId });
  };
}

function mapState(state: State, ownProps: OP) {
  return {
    report: state.reports.reports[ownProps.reportId],
  };
}

const mapDispatch = {
  deleteReport: deleteReport.started,
  editReportActiveUpdate,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(ShowReport);
export { ShowReport as PureShowReport };
