import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';
import { Observable } from 'rxjs';
import { initialState as reviewFiltersInitialState } from '../reviewFilters/reviewFilters';

import { allReviewsEpic } from './allReviews';

import { fetchReviews, fetchReviewsRequest, initialState as allReviewsInitialState } from '../allReviews/allReviews';

const reviews = [{ id: 123, Review: 'test review' }, { id: 456, Review: 'test review 2' }];
const payload = { response: { Reviews: reviews, TotalCount: 2 } };
const request = () => Observable.of(payload);

const rootEpic = (actions, store) => allReviewsEpic(actions, store, { api: { fetchAllReviews: request } });

describe('allReviewsEpic', () => {
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;

  beforeEach(() => {
    store = mockStore({
      allReviews: allReviewsInitialState,
      currentContext: { restaurant: { rid: 123 } },
      reviewFilters: reviewFiltersInitialState,
    });
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(allReviewsEpic as any);
  });

  xit('should listen on a FETCH_REVIEWS action', () => {
    store.dispatch(fetchReviews());

    expect(store.getActions()).toEqual([
      fetchReviews(),
      fetchReviewsRequest.started({}),
      fetchReviewsRequest.done({ params: {}, result: payload }, { filtersChanged: false }),
    ]);
  });
});
