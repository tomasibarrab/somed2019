import MockDate from 'mockdate';

import {
  allReviewsReducer,
  fetchReviewsRequest,
  initialState as allReviewsInitialState,
  selectPage,
} from './allReviews';

describe('allReviewsReducer', () => {
  beforeEach(() => {
    MockDate.set('1/1/2000');
  });

  afterAll(() => {
    MockDate.reset();
  });

  it('should correctly initialize the state when not given an initial state', () => {
    const action = { type: 'NO_MATCH' };
    const actual = allReviewsReducer(undefined, action);

    expect(actual).toEqual(allReviewsInitialState);
  });

  it('FETCH_REVIEWS_SUCCESS should set loading & error to false and reviews to payload', () => {
    const payload = { result: { Reviews: [{ ReviewId: 123, HasNewReply: false, Replies: [] }], TotalCount: 2 } };
    const reviews = { 123: payload.result.Reviews[0] };
    const reviewIds = [123];
    const initialState = {
      ...allReviewsInitialState,
      loading: true,
    };
    const action = { type: fetchReviewsRequest.done.type, payload };
    const expected = { ...allReviewsInitialState, reviews, reviewIds, loading: false, error: false, totalReviews: 2 };
    const actual = allReviewsReducer(initialState as any, action);

    expect(actual).toEqual(expected);
  });

  it('FETCH_REVIEWS_ERROR should set error to true and loading to false', () => {
    const initialState = { ...allReviewsInitialState, loading: true };
    const action = { type: fetchReviewsRequest.failed.type, error: { message: 'test error' } };
    const expected = { ...allReviewsInitialState, error: true, loading: false };
    const actual = allReviewsReducer(initialState as any, action);

    expect(actual).toEqual(expected);
  });

  it('SELECT_PAGE should update the page according to which page was clicked', () => {
    const initialState = { pageSize: 40, page: 0 };
    const action = { type: selectPage.type, payload: { selected: 4 } };
    const expected = { pageSize: 40, page: 4 };
    const actual = allReviewsReducer(initialState as any, action);

    expect(actual).toEqual(expected);
  });
});
