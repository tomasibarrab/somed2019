import configureMockStore from 'redux-mock-store';
import { combineEpics, createEpicMiddleware } from 'redux-observable';
import { Observable } from 'rxjs';

import {
  addReport,
  addReportEpic,
  confirmDeleteReportEpic,
  deleteReport,
  deleteReportEpic,
  deleteReportRequestEpic,
  fetchReports,
  fetchReportsEpic,
  updateReport,
  updateReportEpic,
} from './reports';

import { closeModal, confirmCloseModal, openModal } from '../modals/modals';

const initialState = {
  currentContext: {
    restaurant: {
      rid: 12345,
    },
    user: {
      userName: 'foo@bar.com',
    },
  },
  reports: {
    reports: {
      testId: {
        Archived: false,
        Recipients: ['foo@bar.com'],
        ReportId: 'testId',
        ReportType: 'Detailed',
        RestaurantIds: [12345],
      },
    },
  },
};

// tslint:disable:no-shadowed-variable
describe('fetchReportsEpic', () => {
  const reports = [{ id: 123 }, { id: 456 }];
  const request = () => Observable.of(reports);

  const rootEpic = (actions, rootStore) => fetchReportsEpic(actions, rootStore, { api: { fetchReports: request } });
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);
  const store = mockStore(initialState);

  xit('should fetch reports', () => {
    store.dispatch(fetchReports.started({}));

    expect(store.getActions()).toEqual([fetchReports.started({}), fetchReports.done({ params: {}, result: reports })]);
  });
});

describe('fetchReportsEpic Error', () => {
  const reports = [{ id: 123 }, { id: 456 }];
  const request = () => Observable.throw('bad request');

  const rootEpic = (actions, store) => fetchReportsEpic(actions, store, { api: { fetchReports: request } });
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {
    store = mockStore(initialState);
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(fetchReportsEpic);
  });

  xit('should fetch reports', () => {
    store.dispatch(fetchReports.started({}));

    expect(store.getActions()).toEqual([fetchReports.started({}), fetchReports.failed(reports)]);
  });
});

describe('addReportEpic', () => {
  const report = { type: 'detailed-test', creator: 'me' };
  const request = () => Observable.of({ response: { id: 123 } });

  const rootEpic = (actions, store) => addReportEpic(actions, store, { api: { fetchReports: request } });
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {
    store = mockStore(initialState);
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(addReportEpic);
  });

  xit('should add a report', () => {
    store.dispatch(addReport.started(report));

    expect(store.getActions()).toEqual([addReport.started(report), addReport.done({ ReportId: 123, ...report })]);
  });
});

describe('updateReportEpic', () => {
  const report = { type: 'detailed-test', creator: 'me', id: 123 };
  const request = () => Observable.of({ response: { test: true } });

  const rootEpic = (actions, store) => updateReportEpic(actions, store, { api: { fetchReports: request } });
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {
    store = mockStore(initialState);
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(updateReportEpic);
  });

  xit('should update a report', () => {
    store.dispatch(updateReport.started(report));

    expect(store.getActions()).toEqual([updateReport.started(report), addReport.done(report)]);
  });
});

describe('deleteReportEpic and confirmDeleteReportEpic', () => {
  const payload = { id: 'test' };

  const epicMiddleware = createEpicMiddleware(combineEpics(deleteReportEpic, confirmDeleteReportEpic));
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {
    store = mockStore(initialState);
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(updateReportEpic);
  });

  xit('should open a modal when deleting a report', () => {
    store.dispatch(deleteReport(payload));

    expect(store.getActions()).toEqual([
      deleteReport(payload),
      openModal({ modal: 'DELETE_REPORT', modalPayload: payload }),
    ]);
  });

  xit('should open a modal when deleting a report', () => {
    const openModalPayload = { modal: 'DELETE_REPORT', modalPayload: 'test-id' };

    store.dispatch(openModal(openModalPayload));
    store.dispatch(closeModal());
    const otherPayload = { ...openModalPayload, modalPayload: 'other-test' };
    store.dispatch(openModal(otherPayload));
    store.dispatch(confirmCloseModal());

    expect(store.getActions()).toEqual([
      openModal(openModalPayload),
      closeModal(),
      openModal(otherPayload),
      confirmCloseModal(),
      deleteReport.started('other-test'),
    ]);
  });
});

describe('deleteReportRequestEpic', () => {
  const report = initialState.reports.reports.testId;
  const request = () => Observable.of(report);

  const rootEpic = (actions, store) => deleteReportRequestEpic(actions, store, { api: { fetchReports: request } });
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {
    store = mockStore(initialState);
  });

  afterEach(() => {
    epicMiddleware.replaceEpic(deleteReportRequestEpic);
  });

  xit('should fetch reports', () => {
    store.dispatch(deleteReport.started('testId'));
    const expected = { ...report, Archived: true, Editor: 'foo@bar.com' };

    expect(store.getActions()).toEqual([deleteReport.started('testId'), deleteReport.done(expected)]);
  });
});
