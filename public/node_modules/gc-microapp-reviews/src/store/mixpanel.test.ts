import { mixpanelMock } from 'gca-jest-config';
import { mixpanel as mp } from 'gca-react-components';
import configureMockStore from 'redux-mock-store';

import mixpanelMiddleware from './mixpanel';
import * as Reports from './reports/reports';
import * as ReviewSummary from './reviewSummary/reviewSummary';

describe('Checking MixPanel events', () => {
  const mixpanel = mixpanelMock();
  const state = {
    currentContext: {
      restaurant: {
        rid: 123,
      },
    },
  };

  beforeEach(() => {
    mixpanel.reset();
  });

  it('should generate a LoadPage Event with feature: "Summary & All Reviews" ', () => {
    const action = ReviewSummary.fetchReviewSummary.started({});
    const mockStore = configureMockStore([mixpanelMiddleware]);
    const store = mockStore(state);
    store.dispatch(action);

    expect(mixpanel.events[0].name).toBe(mp.eventNames.LOAD_PAGE);
    expect(mixpanel.events[0].props.feature).toBe('Summary & All Reviews');
    expect(mixpanel.events[0].props.app).toBe('Reviews');
  });

  it('should generate a LoadPage Event with feature: "Reports" ', () => {
    const action = Reports.fetchReports.started({});
    const mockStore = configureMockStore([mixpanelMiddleware]);
    const store = mockStore(state);
    store.dispatch(action);

    expect(mixpanel.events[0].name).toBe(mp.eventNames.LOAD_PAGE);
    expect(mixpanel.events[0].props.feature).toBe('Reports');
    expect(mixpanel.events[0].props.app).toBe('Reviews');
  });

  it('when dispatching a addReport action should generate a Publish Event with feature: "Reports" ', () => {
    const newReport = {
      Archived: false,
      Creator: 'me',
      Frequency: Reports.ReportFrequency.Daily,
      Recipients: ['foo@bar.com'],
      ReportId: 'testId',
      RestaurantIds: [12345],
      Type: Reports.ReportType.Detailed,
    };

    const action = Reports.addReport.started(newReport);
    const mockStore = configureMockStore([mixpanelMiddleware]);
    const store = mockStore(state);
    store.dispatch(action);

    expect(mixpanel.events[0].name).toBe(mp.eventNames.PUBLISH);
    expect(mixpanel.events[0].props.feature).toBe('Reports');
    expect(mixpanel.events[0].props.app).toBe('Reviews');
    expect(mixpanel.events[0].props.action).toBe(mp.actionNames.CREATE);
  });

  it('when dispatching a updateReport action should generate a Publish Event with feature: "Reports" ', () => {
    const updateReport = {
      Archived: false,
      Editor: 'me',
      Frequency: Reports.ReportFrequency.Daily,
      Recipients: ['foo@bar.com'],
      ReportId: 'testId',
      RestaurantIds: [12345],
      Type: Reports.ReportType.Detailed,
    };

    const action = Reports.updateReport.started(updateReport);
    const mockStore = configureMockStore([mixpanelMiddleware]);
    const store = mockStore(state);
    store.dispatch(action);

    expect(mixpanel.events[0].name).toBe(mp.eventNames.PUBLISH);
    expect(mixpanel.events[0].props.feature).toBe('Reports');
    expect(mixpanel.events[0].props.app).toBe('Reviews');
    expect(mixpanel.events[0].props.action).toBe(mp.actionNames.UPDATE);
  });

  it('when dispatching a deleteReport action should generate a Publish Event with feature: "Reports" ', () => {
    const deleteReport = {
      reportId: 'testId',
    };

    const action = Reports.deleteReport.started(deleteReport);
    const mockStore = configureMockStore([mixpanelMiddleware]);
    const store = mockStore(state);
    store.dispatch(action);

    expect(mixpanel.events[0].name).toBe(mp.eventNames.PUBLISH);
    expect(mixpanel.events[0].props.feature).toBe('Reports');
    expect(mixpanel.events[0].props.app).toBe('Reviews');
    expect(mixpanel.events[0].props.action).toBe(mp.actionNames.DELETE);
  });
});
