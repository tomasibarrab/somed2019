/**
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import { AsyncContent, Layout } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import { initializeGcScope } from 'gca-react-components/src/redux-modules/initializeApp';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Redirect, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';

import { GcScope, getGcScope } from 'shared-utils/gcScope';

import Reports from '../../Reports/Reports';
import Reviews from '../../Reviews/Reviews';
import { State } from '../../store/types';
import MainNav from '../MainNav/MainNav';
import ModalManager from '../Modals/ModalManager';
import './App.scss';

export const enum Routes {
  PrivateDining = '/private-dining',
  GuestCampaigns = '/guest-campaigns',
  Featured = '/featured',
  Seasonal = '/seasonal',
}

interface SP {
  loading: boolean;
  error: boolean;
}
interface DP {
  initializeGcScope: (payload: GcScope) => void;
}
type OP = RouteComponentProps<{}>;
type Props = SP & DP & OP & InjectedIntlProps;

class App extends React.Component<Props, {}> {
  public render() {
    const { formatMessage } = this.props.intl;

    return (
      <Layout title={this.props.intl.formatMessage({ id: 'app.title' })}>
        <MainNav />

        <AsyncContent
          isLoading={this.props.loading}
          isError={this.props.error}
          errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
          errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
        >
          <section className="app-content">
            <Switch>
              <Route path="/reports" component={Reports} />
              <Route path="/reviews" component={Reviews} />
              <Redirect to="/reviews" />
            </Switch>
          </section>
        </AsyncContent>
        <ModalManager />
      </Layout>
    );
  }

  public componentDidMount() {
    this.props.initializeGcScope(getGcScope(window));
  }
}

const mapState = (state: State): SP => ({
  error: selectors.currentContext(state).fetchFailed,
  loading: selectors.currentContext(state).isFetching,
});

const mapDispatch = {
  initializeGcScope,
};

const WithRouter = withRouter(connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl<Props>(App)));

export default WithRouter;
export { App as PureApp };
