/**
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import { AsyncContent, Layout, Panel } from 'gca-react-components';
import { actions, selectors } from 'gca-react-components/src/redux-modules/currentContext';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { State } from 'store/types';
import AsyncStatus from '../../AsyncStatus';
import MyProfile from '../../MyProfile/MyProfile';
import { selectors as myProfileSelectors } from '../../store/myProfile/myProfile';
import './App.scss';

interface SP {
  loading: boolean;
  error: boolean;
}

interface DP {
  fetchCurrentContext: () => void;
}

type Props = SP & DP & InjectedIntlProps;

class App extends React.Component<Props, {}> {
  public render() {
    const { formatMessage } = this.props.intl;

    return (
      <Layout title={this.props.intl.formatMessage({ id: 'app.title' })}>
        <section className="app-content">
          <Panel title={this.props.intl.formatMessage({ id: 'app.title' })}>
            <AsyncContent
              isLoading={this.props.loading}
              isError={this.props.error}
              errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
              errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
            >
              <MyProfile />
            </AsyncContent>
          </Panel>
        </section>
      </Layout>
    );
  }

  public componentDidMount() {
    this.props.fetchCurrentContext();
  }
}

const mapState = (state: State): SP => ({
  error: selectors.currentContext(state).fetchFailed || myProfileSelectors.getFetchUserStatus(state).isFailed(),
  loading: selectors.currentContext(state).isFetching || myProfileSelectors.getFetchUserStatus(state).isStarted(),
});

const mapDispatch = {
  fetchCurrentContext: actions.fetchCurrentContext,
};

const Connected = connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl<Props>(App));

export default Connected;
export { App as PureApp };
