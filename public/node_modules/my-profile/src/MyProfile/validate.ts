// Errors are reported as string values. If there is no error, an error will be `undefined`
export type Error = string | undefined;
export type Validator = (value: any) => Error;
export type StringValidator = (value: string) => Error;
export interface StringMap { [id: string]: string };
export interface ValueMap { [id: string]: any };
export interface ValidatorsMap { [id: string]: Validator };
export type FormValidator = (values: ValueMap) => StringMap; // returns a map of errors

/**
 * Create a composed validator which will execute all passed in validators for a provided value. Will return the first
 * error encountered, or `undefined` if none of the validators evaluate to invalid.
 */
export const composeValidators = (...validators: Validator[]): Validator => (value: any): Error =>
  validators.reduce((error: Error, validator: Validator) => error || validator(value), undefined);

/**
 * Required field validation. Value must not be `undefined` to pass.
 */
export const validateRequired: Validator = (value: any): Error => (
  value !== undefined ? undefined : 'validate.required'
);

/**
 * RegEx validator factory function
 *
 * @param {regex} a regular expression to test a string against
 * @param {string} errorMessage an error message key
 */
export function createRegExValidator(regex: RegExp, errorMessage: string): StringValidator {
  return (value: string | undefined): Error => (!value || !regex.test(value))
    ? errorMessage
    : undefined;
}

//
// regex source: http://emailregex.com/
// based on: RFC 5322
//
// tslint:disable-next-line:max-line-length
const emailRegEx = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

/**
 * Email validation. Must not be falsy, and must pass RegEx pattern.
 */
export const validateEmail: StringValidator = createRegExValidator(emailRegEx, 'validate.email');

/**
 * Min chars validator factory function
 *
 * @param {number} min string passed to validator will be valid if greater than or equal to this value
 * @return {StringValidator} a validator which will check for the specified min number of characters
 */
export function createMinCharsValidator(min: number): StringValidator {
  return (value: string | undefined): Error => (!value || value.length < min)
    ? `validate.minChars`
    : undefined;
}

/**
 * Max chars validator factory function
 *
 * @param {number} max string passed to validator will be valid if less than or equal to this value
 * @return {StringValidator} a validator which will check for the specified max number of characters
 */
export function createMaxCharsValidator(max: number): StringValidator {
  return (value: string | undefined): Error => (value !== '' && (!value || value.length > max))
    ? `validate.maxChars`
    : undefined;
}

/**
 * Form validator factory function.
 * @param {ValidatorsMap} validators a map of `Validator`s whose keys should correspond to named form fields
 * @return {FormValidator} a function called with a map of field values which returns a corresponding map of errors if
 *  there are any, or any empty object if there are no errors
 */
export function createFormValidator(validators: ValidatorsMap): FormValidator {
  return (values: ValueMap): StringMap => Object.keys(validators)
    .reduce((errors: StringMap, valueKey: string) => {
        const error: Error = validators[valueKey](values[valueKey]);
        if (error) {
          errors[valueKey] = error;
        }
        return errors;
      },
      { },
    );
}
