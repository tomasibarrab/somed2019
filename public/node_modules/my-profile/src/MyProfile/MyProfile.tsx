import React from 'react';
import { Form, FormRenderProps } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import {
  LabelGroup,
  ModalWrapper,
  PublishButton,
} from 'gca-react-components';

import { InputFinalField } from 'gca-react-components/src/finalform-fields/InputFinalField';
import { SelectFinalField } from 'gca-react-components/src/finalform-fields/SelectFinalField';
import { titleIds } from '../constants';
import { actions, FormData, selectors, UserDTO } from '../store/myProfile/myProfile';
import {
  composeValidators,
  createFormValidator,
  createMaxCharsValidator,
  createMinCharsValidator,
  FormValidator,
  StringMap,
  validateEmail,
  validateRequired,
  Validator,
  ValidatorsMap } from './validate';

import { formatNumeric } from './formatters';

import { State } from '../store/types';

import './MyProfile.scss';

interface Option {
  value: string,
  label: string
};

interface SP {
  isUpdatingUser: boolean;
  isUpdateUserDone: boolean;
  isUpateUserFailed: boolean;
  user: UserDTO | null;
}

interface DP {
  dismissError(): void;
  dispatchSubmit(formData: FormData): void;
};

type Props =  InjectedIntlProps & SP & DP;

class MyProfile extends React.Component<Props, {}> {
  private formValidator: FormValidator;
  private titleOptions: Option[];
  private isPristine: boolean = true;

  constructor(props: Props) {
    super(props);

    // tslint:disable:object-literal-sort-keys
    this.formValidator = createFormValidator({
      firstName: validateRequired,
      lastName: validateRequired,
      title: validateRequired,
      email: composeValidators(validateRequired, validateEmail),
      phone: composeValidators(validateRequired, createMinCharsValidator(1), createMaxCharsValidator(21)),
    });
    // tslint:enable:object-literal-sort-keys

    this.titleOptions = titleIds.map(id => ({
      label: this.props.intl.formatMessage({ id: `form.title.${id}` }),
      value: id,
    }));

    this.onBeforeUnload = this.onBeforeUnload.bind(this);
  }

  public componentDidMount() {
    window.onbeforeunload = this.onBeforeUnload;
  }

  public componentWillUnmount() {
    // tslint:disable-next-line:no-empty
    window.onbeforeunload = () => { };
  }

  public render() {
    const {
      intl,
      dismissError,
      dispatchSubmit,
      isUpdatingUser,
      isUpdateUserDone,
      isUpateUserFailed,
      user } = this.props;

    if (!user) {
      return null;
    }

    const { firstName, lastName, title, email, phone } = user;
    const formData: FormData = { firstName, lastName, title, email, phone };
    const errorModal = !isUpateUserFailed
      ? null
      : (
          <ModalWrapper
            title={intl.formatMessage({ id: 'app.errorTitle' })}
            confirmButtonText={intl.formatMessage({ id: 'modals.error.confirm' })}
            onConfirm={() => dismissError()}
            onCancel={() => null}
          >
            <FormattedMessage tagName="p" id="modals.error.body" />
          </ModalWrapper>
        );

    return (
      <>
        <Form
          onSubmit={this.handleDispatchSubmit}
          validate={this.formValidator}
          validateOnBlur={false}
          initialValues={formData}
        >
          {
            ({ pristine, invalid, valid, dirty, errors, handleSubmit }: FormRenderProps) => {
              this.isPristine = pristine;
              return <form className="user-form" onSubmit={handleSubmit}>
                <LabelGroup label={intl.formatMessage({ id: 'form.firstName' })}>
                  <InputFinalField
                    autoFocus={true}
                    name="firstName"
                  />
                </LabelGroup>
                <LabelGroup label={intl.formatMessage({ id: 'form.lastName' })}>
                  <InputFinalField
                    name="lastName"
                  />
                </LabelGroup>
                <LabelGroup label={intl.formatMessage({ id: 'form.title' })}>
                  <SelectFinalField
                    name="title"
                    options={this.titleOptions}
                    placeholder={intl.formatMessage({ id: 'form.title.placeholder' })}
                  />
                </LabelGroup>
                <LabelGroup label={intl.formatMessage({ id: 'form.email' })}>
                  <InputFinalField
                    name="email"
                  />
                </LabelGroup>
                <LabelGroup label={intl.formatMessage({ id: 'form.phone' })}>
                  <InputFinalField
                    name="phone"
                    parse={formatNumeric}
                  />
                </LabelGroup>
                <PublishButton
                  disabled={pristine || invalid}
                  buttonText={intl.formatMessage({ id: 'form.button.save' })}
                  successText={intl.formatMessage({ id: 'form.button.changesSaved' })}
                  busy={isUpdatingUser}
                  success={isUpdateUserDone}
                  htmlType="submit"
                />
              </form>
            }
          }
        </Form>
        {errorModal}
      </>
    );
  }

  private handleDispatchSubmit = (values: FormData) => { this.props.dispatchSubmit(values) }

  private onBeforeUnload() {
    return this.isPristine ? undefined : true;
  }
}

// tslint:disable:object-literal-sort-keys
const mapState = (state: State) => ({
  isUpdatingUser: selectors.getUpdateUserStatus(state).isStarted(),
  isUpdateUserDone: selectors.getUpdateUserStatus(state).isDone(),
  isUpateUserFailed: selectors.getUpdateUserStatus(state).isFailed(),
  user: state.myProfile.user,
});
// tslint:enable:object-literal-sort-keys

const mapDispatch = {
  dismissError: actions.resetUpdateUser,
  dispatchSubmit: actions.updateUser.started,
};

export default connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl<SP & DP>(MyProfile));
export { MyProfile as PureMyProfile };
