const Promise = require('bluebird');
const _ = require('lodash');

function cleanArray(originalList) {
  const list = _.map(originalList, value => _.trim(value || '').toLowerCase());
  return _.uniq(_.reject(list, _.isEmpty));
}

const promiseQueue = function (fns) {
  return _.reduce(
    _.tail(fns),
    (prevPromise, currentFn) => prevPromise.then(currentFn),
    _.head(fns)()
  );
};

const fatal = function (message, reason) {
  console.error(`FAIL: ${message}`);
  if (reason) {
    console.log('---');
    console.error(reason);
  }
  process.exit(1);
};

const requireTeamCity = function (errorMessage) {
  const { TEAMCITY_VERSION } = process.env;
  const isTeamCity = !_.isEmpty(TEAMCITY_VERSION);
  if (!isTeamCity) {
    fatal(errorMessage)
  }
}

const listOptions = function (options) {
  return Object.keys(options).join(', ');
}

module.exports = {
  cleanArray,
  promiseQueue,
  fatal,
  requireTeamCity,
  listOptions,
};

