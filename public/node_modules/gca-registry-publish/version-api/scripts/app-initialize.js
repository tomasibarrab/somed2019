#!/usr/bin/env node

const _ = require('lodash');
const fullApiClient = require('../api/api-client');
const fakeApiClient = require('../api/fake-client');
const utils = require('../../utils/utils');
const { getServerSettings } = require('../config/getVersionApiSettings');
const { getManifestFile } = require('gca-mono/lib/load-local-package');

function microAppExists(apiClient, appName, host) {
  return apiClient
    .microAppExists({ appName, host })
    .then(() => utils.fatal(`Microapp "${appName}" already exists on ${host}. Skipping creation.`))
    .catch(response => {
      if (response.status !== 404) {
        utils.fatal(`Error checking existence of microapp "${appName}" on ${host}.`, response.status);
      }
    });
}

function createApp(apiClient, { appName, host, owner, creator }) {
  return apiClient
    .createMicroApp({ appName, host, owner, creator })
    .then(() => console.info(`Microapp "${appName}" was added to ${host}.`))
    .catch(reason => utils.fatal(`Error adding microapp "${appName}" to ${host}`, reason));
}

/*
*  Initialize a new microapp onto a Microapp Version API server
*/
module.exports = function (registryServerEnvName, isDryRun) {
  const { host } = getServerSettings(registryServerEnvName);

  const apiClient = isDryRun ? fakeApiClient : fullApiClient;
  const { name: appName, owner, creator } = getManifestFile();

  utils
    .promiseQueue([
      () => microAppExists(apiClient, appName, host),
      () =>
        createApp(apiClient, {
          appName,
          host,
          owner,
          creator,
        }),
    ])
    .then(
      () => {
        console.info(`All done creating microapp "${appName}" on ${host}`);
      },
      reason => {
        utils.fatal(`The overall job failed to create microapp "${appName}" on ${host}`, reason);
      },
    );
};
