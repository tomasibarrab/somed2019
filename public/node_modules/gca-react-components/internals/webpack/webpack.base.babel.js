/**
 * COMMON WEBPACK CONFIGURATION
 */

const path = require('path');

module.exports = options => ({
  entry: options.entry,
  output: Object.assign(
    {
      // Compile into js/build.js
      path: path.resolve(process.cwd(), 'build'),
      publicPath: '/',
    },
    options.output
  ), // Merge with env dependent settings
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: 'babel-loader',
            query: options.babelQuery,
          },
          {
            loader: 'awesome-typescript-loader',
            query: {
              // Fixes issue with logs polluting stats: https://github.com/s-panferov/awesome-typescript-loader/issues/375
              silent: process.argv.indexOf('--json') !== -1,
            },
          },
        ],
      },
      {
        test: /\.js$/, // Transform all .js files required somewhere with Babel
        use: [
          {
            loader: 'babel-loader',
            options: options.babelQuery,
          },
        ],
        exclude: /node_modules\/(?!react-codemirror)/,
      },
      {
        // Transform our own .css files with PostCSS and CSS-modules
        test: /\.(css|scss)$/,
        exclude: /node_modules/,
        use: options.cssLoaders,
      },
      {
        // Do not transform vendor's CSS with CSS-modules
        // The point is that they remain in global scope.
        // Since we require these CSS files in our JS or CSS files,
        // they will be a part of our compilation either way.
        // So, no need for ExtractTextPlugin here.
        test: /\.css$/,
        include: /node_modules/,
        use: [{ loader: 'style-loader' }, { loader: 'css-loader' }],
      },
      {
        test: /\.(eot|svg|ttf|woff|woff2)$/,
        use: [
          { loader: 'file-loader' },
        ],
      },
      {
        test: /\.(jpg|png|gif)$/,
        use: [
          { loader: 'file-loader' },
        ],
      },
      {
        test: /\.html$/,
        use: [
          { loader: 'html-loader' },
        ],
      },
      {
        test: /\.(mp4|webm)$/,
        use: [
          {
            loader: 'url-loader',
            options: {
              limit: 10000,
            },
          },
        ],
      },
    ],
  },
  devtool: options.devtool,
  target: 'web', // Make web variables accessible to webpack, e.g. window
  stats: false, // Don't show stats in the console
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx', '.react.js'],
  }
});
