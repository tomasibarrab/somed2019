import './rxjsOperators';
import { fetchContextUser, fetchContextRid, fetchContextGroup, fetchCurrentContext } from './currentContext';
import { actions as featureToggleActions } from './featureToggles';

/**
 * Constants
 */
export const INITIALIZE_APP = 'gca/initializeApp/INITIALIZE_APP';
export const INITIALIZE_GCSCOPE = 'gca/initializeApp/INITIALIZE_GCSCOPE';

export const types = {
  INITIALIZE_APP,
  INITIALIZE_GCSCOPE,
};

/**
 * Action Creators
 */
export function initializeApp(payload) {
  return {
    type: INITIALIZE_APP,
    payload,
  };
}

/**
 * Action Creators
 */
export function initializeGcScope(gcScope) {
  return {
    type: INITIALIZE_GCSCOPE,
    payload: gcScope,
  };
}


export const actions = {
  initializeApp,
};


/**
 * Epics
 * include here all the actions that should be triggered on micro-app startup
 */

export function initializeAppEpic(action$) {
  return action$.ofType(INITIALIZE_APP)
    .map(({ payload }) => payload)
    .switchMap((payload) =>
      (payload && payload.rid)
        ? [fetchCurrentContext(payload), featureToggleActions.fetchFeatureToggles(payload)]
        : [fetchCurrentContext(payload)]
    );
}

export function initializeGcScopeEpic(action$) {
  return action$.ofType(INITIALIZE_GCSCOPE)
    .switchMap(({ payload }) => {
      switch (payload.type) {
        case 'group':
          return [
            fetchContextUser(payload),
            fetchContextGroup(payload)
          ];
        case 'restaurant':
          return [
            fetchContextUser(payload),
            fetchContextRid(payload),
            featureToggleActions.fetchFeatureToggles({ rid: payload.id })
          ];
        default:
          return [fetchContextUser(payload)];
      }
    });
}
