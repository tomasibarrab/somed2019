import { defaultInitialState, languageProviderReducer, createReducer } from './languageProvider';

describe('languageProvider', () => {
  describe('reducer', () => {
    it('should be a function', () => {
      expect(typeof languageProviderReducer).toBe('function');
    });

    it('should return default initial state', () => {
      expect(languageProviderReducer()).toEqual(defaultInitialState);
    });
  });

  describe('factory', () => {
    it('should be a function', () => {
      expect(typeof createReducer).toBe('function');
    });

    it('should return a function', () => {
      expect(typeof createReducer()).toBe('function');
    });

    it('should behave exactly like the default languageProviderReducer when no argument is passed', () => {
      const reducer = createReducer();
      expect(reducer()).toBe(defaultInitialState);
    });

    it('should return a reducer with the correct initial state when passed in', () => {
      const reducer = createReducer({ locale: 'it-IT' });
      expect(reducer()).toEqual({ locale: 'it-IT' });
    });
  });
});
