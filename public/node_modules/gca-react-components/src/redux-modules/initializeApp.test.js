import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';

import {
  initializeAppEpic,
  initializeApp,
  types,
} from './initializeApp';

import { fetchCurrentContext } from './currentContext';
import { actions as featureToggleActions } from './featureToggles';

describe('initializeApp ', () => {
  describe('action creators', () => {
    it('initializeApp should return the correct type with no payload', () => {
      expect(initializeApp()).toEqual({ type: types.INITIALIZE_APP });
    });
  });

  describe('initializeAppEpic', () => {
    let store;

    beforeEach(() => {
      const rootEpic = (action$) => initializeAppEpic(action$);
      const epicMiddleware = createEpicMiddleware(rootEpic);
      const mockStore = configureMockStore([epicMiddleware]);

      store = mockStore({});
    });

    it('initializeAppEpic Success with rid', () => {
      const payload = { rid: 123 };
      store.dispatch(initializeApp(payload));

      expect(store.getActions())
        .toEqual([
          initializeApp(payload),
          fetchCurrentContext(payload),
          featureToggleActions.fetchFeatureToggles(payload),
        ]);
    });

    it('initializeAppEpic Success without rid', () => {
      store.dispatch(initializeApp());

      expect(store.getActions())
        .toEqual([initializeApp(), fetchCurrentContext()]);
    });
  });
});
