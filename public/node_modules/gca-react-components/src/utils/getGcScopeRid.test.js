import getGcScopeRid from './getGcScopeRid';

describe('getGcScopeRid()', () => {
  it('should return 0 when window does not contain gcScope', () => {
    const context = {};

    const result = getGcScopeRid(context);
    expect(result).toBe(0);
  });

  it('should return 0 when window.gcScope is an empty object', () => {
    const gcScope = {};
    const context = { gcScope };

    const result = getGcScopeRid(context);
    expect(result).toBe(0);
  });

  it('should return 0 when window.gcScope.type is not "restaurant"', () => {
    const type = 'not-restaurant';
    const gcScope = { type };
    const context = { gcScope };

    const result = getGcScopeRid(context);
    expect(result).toBe(0);
  });

  describe('when gcScope.type is "restaurant"', () => {
    let gcScope;
    let context;

    beforeEach(() => {
      const id = '123';
      const type = 'restaurant';
      gcScope = { id, type };
      context = { gcScope };
    });

    it('should return 0 when window.gcScope.id is missing', () => {
      delete gcScope.id;
      const result = getGcScopeRid(context);
      expect(result).toBe(0);
    });

    it('should return 123 when window.gcScope.id is 123', () => {
      const result = getGcScopeRid(context);
      expect(result).toBe(123);
    });

    it('should typecast rid to number when gcScope.id is a string', () => {
      const result = getGcScopeRid(context);
      expect(result).toEqual(expect.any(Number));
    });
  });
});
