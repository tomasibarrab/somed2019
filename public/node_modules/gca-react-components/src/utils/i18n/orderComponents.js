const mapKeys = require('lodash/mapKeys');

export function resolveLocale(map, locale, fallbackLocale) {
  // Locale resolution behavior:
  // 1) Use locale if it exists in orderMap
  // 2) Use fallbackLocale if it exists in orderMap
  // 3) If fallbackLocale is not specified, it defaults to 'en-us'
  if (map[fallbackLocale] === undefined) {
    throw new Error(
      `orderComponents: The orderMap you provided does not contain the fallbackLocale '${fallbackLocale}'. ` +
      'Add an entry to orderMap for this locale, or specify a valid fallbackLocale.'
    );
  }
  return map[locale] !== undefined ? locale : fallbackLocale;
}

// orderComponents - Developer API:
//
// orderMap (object) - keys are locales, values are arrays which contain the appopriate order of componentNames for that locale
// fallbackLocale (string) - this locale is used if the user-provided locale is not found in your orderMap
export function orderComponents(orderMap, fallbackLocale = 'en-us') {
  function transformKeysToLowercase(obj) {
    return mapKeys(obj, (v, k) => k.toLowerCase());
  }

  // Returns a function:
  // Use the orderMap to return the correct order of components for a certain locale
  //
  // components (object) - where the keys are component names, and the values are components
  // locale (string) - the locale used to order the components
  return (components, locale = 'en-us') => {
    // Convert all locales to lowercase, for comparison purposes
    const localeLowercase = locale.toLowerCase();
    const orderMapLowercase = transformKeysToLowercase(orderMap);
    const fallbackLocaleLowercase = fallbackLocale.toLowerCase();

    const resolvedLocale = resolveLocale(orderMapLowercase, localeLowercase, fallbackLocaleLowercase);

    return orderMapLowercase[resolvedLocale]
      .filter(name => components[name] !== undefined)
      .map(name => components[name]);
  };
}

export default orderComponents;
