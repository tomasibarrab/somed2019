import React from 'react';
import PropTypes from 'prop-types';
import cloneDeep from 'lodash/cloneDeep';

import Select from '../Select/Select';
import SwitchList from '../SwitchList/SwitchList';
import TimeSelect from '../TimeSelect/TimeSelect';
import Button from '../Button/Button';

import { getDayOptions } from './utils';

import { ShiftErrorPropTypes, LabelPropTypes, StandardShiftPropTypes, ShiftPropTypes } from './ProfileHoursPropTypes';

import './ProfileHour.scss';

const Error = ({ message }) => <p className="inline-error">{message}</p>;

Error.propTypes = {
  message: PropTypes.string,
};

export class ProfileHour extends React.Component {
  static propTypes = {
    countryCode: PropTypes.string.isRequired,
    disabled: PropTypes.bool,
    errors: ShiftErrorPropTypes,
    disableRemove: PropTypes.bool.isRequired,
    onRemove: PropTypes.func.isRequired,
    onChange: PropTypes.func.isRequired,
    labels: LabelPropTypes,
    locale: PropTypes.string.isRequired,
    standardShifts: StandardShiftPropTypes,
    shift: ShiftPropTypes,
    forceDirty: PropTypes.bool,
  };

  static defaultProps = {
    disabled: false,
  };

  constructor(props) {
    super(props);
    const name = props.shift.customShiftName && props.shift.customShiftName.name;
    const standardShifts = props.shift.customShiftName
      ? cloneDeep(props.standardShifts).concat([{ id: name, label: name }])
      : cloneDeep(props.standardShifts);
    this.state = {
      pristine: {
        name: true,
        days: true,
        start: true,
        end: true,
        lastSeating: true,
      },
      dayOptions: getDayOptions(props.locale),
      standardShifts,
      showLastSeating: this.getLastSeatingOption(props.countryCode),
    };
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.locale !== nextProps.locale) {
      this.setState({
        dayOptions: getDayOptions(nextProps.locale),
      });
    }
    if (this.props.countryCode !== nextProps.countryCode) {
      this.setState({
        showLastSeating: this.getLastSeatingOption(nextProps.countryCode),
      });
    }
  }

  onChange = changes => {
    this.props.onChange({
      ...this.props.shift,
      ...changes,
    });
  };

  getLastSeatingOption = countryCode => countryCode.toLowerCase() === 'jp';

  handleDaysChange = days => {
    this.setState({ pristine: { ...this.state.pristine, days: false } });
    this.onChange({ days });
  };

  handleStartChange = shiftStarts => {
    this.setState({ pristine: { ...this.state.pristine, start: false } });
    this.onChange({ shiftStarts });
  };

  handleEndChange = shiftEnds => {
    this.setState({ pristine: { ...this.state.pristine, end: false } });
    this.onChange({ shiftEnds });
  };

  handleLastSeatingChange = lastSeating => {
    this.setState({ pristine: { ...this.state.pristine, lastSeating: false } });
    if (lastSeating === null) {
      const shift = { ...this.props.shift };
      delete shift.lastSeating;
      this.props.onChange({ ...shift });
    } else {
      this.onChange({ lastSeating });
    }
  };

  handleNameChange = name => {
    this.setState({ pristine: { ...this.state.pristine, name: false } });
    const shift = { ...this.props.shift };
    const shiftName = this.props.standardShifts.map(({ id }) => id).includes(name)
      ? { standardShiftName: { id: name } }
      : { customShiftName: { name, language: this.props.locale } };

    if (shiftName.standardShiftName != null) {
      delete shift.customShiftName;
      this.props.onChange({ ...shift, ...shiftName });
    } else {
      delete shift.standardShiftName;
      this.props.onChange({ ...shift, ...shiftName });
    }
  };

  render() {
    const { pristine, dayOptions, standardShifts, showLastSeating } = this.state;
    const { disabled, labels, shift, errors, locale, forceDirty } = this.props;
    const { standardShiftName, customShiftName, days, shiftStarts, shiftEnds, lastSeating } = shift;
    const shiftName = standardShiftName != null ? standardShiftName.id : customShiftName.name;
    const removeButton = this.props.disableRemove ? null : (
      <Button type="button" theme="link" className="remove-shift" onClick={this.props.onRemove} disabled={disabled} >
        {labels.removeShift}
      </Button>
    );

    return (
      <div className="shift">
        {removeButton}
        <Select
          creatable
          disabled={disabled}
          valueKey="id"
          searchable
          options={standardShifts}
          placeholder={labels.selectShiftName}
          value={shiftName}
          onChange={this.handleNameChange}
          valid={(pristine.name && !forceDirty) || !errors.name}
        />
        {!!errors.name && (!pristine.name || forceDirty) ? <Error message={errors.name} /> : null}
        <SwitchList
          className="profile-hour-days"
          disabled={disabled}
          errorMessage={<Error message={errors.days} />}
          onChange={this.handleDaysChange}
          options={dayOptions}
          selected={days}
          valid={(pristine.days && !forceDirty) || !errors.days}
        />
        <div>
          <div className="time-range">
            <TimeSelect
              className="shift-time"
              disabled={disabled}
              pattern="HH:mm"
              locale={locale}
              start="05:00"
              end={shiftEnds.length > 0 ? shiftEnds : '29:00'}
              increment={15}
              placeholder={labels.shiftStarts}
              onChange={this.handleStartChange}
              value={shiftStarts}
              valid={(pristine.start && !forceDirty) || !errors.timeRange}
            />
            <p className="time-range-delimiter">{labels.timeRangeTo}</p>
            <TimeSelect
              className="shift-time"
              disabled={disabled}
              pattern="HH:mm"
              locale={locale}
              start={shiftStarts.length > 0 ? shiftStarts : '05:00'}
              startType={shiftStarts.length > 0 ? 'exclusive' : 'inclusive'}
              end="29:00"
              increment={15}
              placeholder={labels.shiftEnds}
              onChange={this.handleEndChange}
              value={shiftEnds}
              valid={(pristine.end && !forceDirty) || !errors.timeRange}
            />
            {showLastSeating && (
              <div className="last-seating">
                <p className="time-range-delimiter">{labels.lastSeating}</p>
                <TimeSelect
                  clearable
                  disabled={disabled}
                  pattern="HH:mm"
                  locale={locale}
                  start={shiftStarts.length > 0 ? shiftStarts : '05:00'}
                  end={shiftEnds.length > 0 ? shiftEnds : '29:00'}
                  endType="exclusive"
                  onChange={this.handleLastSeatingChange}
                  placeholder={labels.lastSeating}
                  increment={15}
                  value={lastSeating}
                />
              </div>
            )}
          </div>
          {(forceDirty || (!pristine.start && !pristine.end)) &&
            errors.timeRange && <Error message={errors.timeRange} />}
        </div>
      </div>
    );
  }
}

export default ProfileHour;
