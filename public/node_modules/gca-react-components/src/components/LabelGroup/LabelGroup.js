import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import './LabelGroup.scss';

/**
 * Lays out a `<label>` with an input element, and correctly binds them. Combine with `<Fieldset>` for consistent styling of standard GCA forms.
 */
export function LabelGroup(props) {
  const { children, className, label, ...rest } = props;
  const classNames = classnames('gca-label-group', className);

  // Ensure a single child is passed.
  const originalInput = React.Children.only(children);

  // Get an ID using either the input's id (if it has one) or its name.
  const inputId = originalInput.props.id || originalInput.props.name;

  if (!inputId) {
    // eslint-disable-next-line no-console
    console.warn('component passed to LabelGroup has no name or id');
  }

  // Clone the element, assigning it an id if it does not already have one.
  const clonedInput = React.cloneElement(originalInput, {
    id: originalInput.props.id || inputId,
  });

  return (
    <div className={classNames} {...rest}>
      <label htmlFor={inputId}>{label}</label>

      {clonedInput}
    </div>
  );
}

LabelGroup.propTypes = {
  /** Child should be a single form input (text, select, textarea, ...) with a name or id. The element will be assigned an `id` based on its `name` if no `id` is passed. */
  children: PropTypes.node,
  /** Class(es) will be assigned to the root element as a hook for style overrides. */
  className: PropTypes.string,
  /** The text label for your input. */
  label: PropTypes.string,
};

export default LabelGroup;
