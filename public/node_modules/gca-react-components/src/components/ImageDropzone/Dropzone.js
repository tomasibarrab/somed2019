import React from 'react';
import ReactDropzone from 'react-dropzone';
import classnames from 'classnames';
import './Dropzone.scss';

/**
 * A wrapper around [react-dropzone](https://react-dropzone.js.org/).
 */
export class Dropzone extends React.Component {
  constructor(props) {
    super(props);

    this.onDrop = this.onDrop.bind(this);
  }

  /* eslint-disable no-param-reassign */
  onDrop(acceptedFiles, rejectedFiles, event) {
    const { accept = [], maxSize, minSize, onDrop, onDropAccepted, onDropRejected } = this.props;

    acceptedFiles.forEach(acceptedFile => {
      acceptedFile.errorCodes = [];
    });

    rejectedFiles.forEach(rejectedFile => {
      rejectedFile.errorCodes = [];

      if (accept.length > 0 && !accept.includes(rejectedFile.type)) {
        rejectedFile.errorCodes.push('FileTypeIncorrect');
      }

      if (maxSize && rejectedFile.size > maxSize) {
        rejectedFile.errorCodes = ['FileSizeTooLarge'];
      }

      if (minSize && rejectedFile.size < minSize) {
        rejectedFile.errorCodes = ['FileSizeTooSmall'];
      }
    });

    if (typeof onDrop === 'function') {
      onDrop(acceptedFiles, rejectedFiles, event);
    }

    if (rejectedFiles.length > 0 && typeof onDropRejected === 'function') {
      onDropRejected(rejectedFiles, event);
    }

    if (acceptedFiles.length > 0 && typeof onDropAccepted === 'function') {
      onDropAccepted(acceptedFiles, event);
    }
  }

  render() {
    const { onDropAccepted, onDropRejected, ...rest } = this.props;
    const className = classnames('gca-dropzone', this.props.className);

    return <ReactDropzone {...rest} className={className} activeClassName="drag-over" onDrop={this.onDrop} />;
  }
}

Dropzone.propTypes = ReactDropzone.propTypes;

export default Dropzone;
