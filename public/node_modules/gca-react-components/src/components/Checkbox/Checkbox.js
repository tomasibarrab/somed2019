import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CheckboxIcon from './CheckboxIcon';
import './Checkbox.scss';

let counter = 0;

/**
 * A fully managed checkbox component with handlers and invalid styling. Currently does not use a real `<input>`.
 */
export class Checkbox extends React.Component {
  constructor(props) {
    super(props);

    this.onClick = () => this.props.onClick(!this.props.checked);

    // Giving each checkbox a unique id allows us to us our <label> htmlFor property correctly.
    // eslint-disable-next-line no-plusplus
    this.id = `checkbox-${counter++}`;
  }

  render() {
    const { checked, className, disabled, indeterminate, label, valid } = this.props;

    return (
      <div className={classnames('gca-checkbox', className, { checked, disabled, invalid: !valid })}>
        <CheckboxIcon checked={checked} indeterminate={indeterminate} disabled={disabled} />
        <input disabled={disabled} id={this.id} type="checkbox" onClick={this.onClick} />
        <label className={classnames('fake-checkbox', { disabled })} htmlFor={this.id} />
        {label && (
          <label className={classnames('label', { disabled })} htmlFor={this.id}>
            {label}
          </label>
        )}
      </div>
    );
  }
}

Checkbox.defaultProps = {
  valid: true,
  indeterminate: false,
  disabled: false,
};

Checkbox.propTypes = {
  checked: PropTypes.bool.isRequired,
  indeterminate: PropTypes.bool,
  /** Class(es) will be assigned to the root element as a hook for style overrides. */
  className: PropTypes.string,
  /** Is it disabled? */
  disabled: PropTypes.bool,
  /** A string or component to display inline with the checkbox */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /** Receives the updated value. You are responsible for updating the bound data source. */
  onClick: PropTypes.func.isRequired,
  /** Show the component as valid or invalid. Styling only. */
  valid: PropTypes.bool,
};

export default Checkbox;
