import React from 'react';
import PropTypes from 'prop-types';
import { Field } from 'redux-form';

export default function customField({ baseValidators = [], component: Component, propTypes = {} }) {
  function renderField(props, context) {
    // eslint-disable-next-line react/prop-types
    const { input, meta, ...custom } = props;
    const showValidationWhenPristine =
      props.showValidationWhenPristine !== undefined
        ? props.showValidationWhenPristine
        : context.showValidationWhenPristine;

    const valid = showValidationWhenPristine ? meta.valid : meta.valid || meta.pristine;

    return <Component {...custom} {...input} valid={valid} />;
  }

  renderField.contextTypes = {
    showValidationWhenPristine: PropTypes.bool,
  };

  renderField.propTypes = {
    showValidationWhenPristine: PropTypes.bool,
  };

  class CustomField extends React.Component {
    constructor(props) {
      super(props);

      const validators = baseValidators
        .map(validator => validator.bind(this))
        .concat(this.props.validate)
        .filter(validator => typeof validator === 'function');

      if (validators.length > 0) {
        this.validators = validators;
      }
    }

    render() {
      return <Field {...this.props} component={renderField} validate={this.validators} />;
    }
  }

  CustomField.displayName = `CustomField(${Component.displayName || Component.name})`;

  CustomField.propTypes = {
    ...propTypes,
    /** The name prop used by Redux Form to setup the form data. Also passed down to `<textarea>` */
    name: PropTypes.string.isRequired,
    /** By default, fields will not display the validation styles. Pass `true` to show them anyway. You also pass this down via context. */
    showValidationWhenPristine: PropTypes.bool,
    /** Any additional field-level validation functions you wish to run in addition to the min/max validation */
    validate: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),
  };

  return CustomField;
}
