import { shallow } from 'enzyme';
import React from 'react';
import { PureFeatureToggle as FeatureToggle } from './FeatureToggle';

describe('<FeatureToggle />', () => {
  let props;
  beforeEach(() => {
    props = {
      features: {
        featureOne: true,
        featureTwo: false,
        featureThree: true,
        featureFour: false,
      },
      featureId: 'featureOne',
      triggerInitialFetch: jest.fn(),
      initialFetch: true,
    };
  });

  it('should render children when the feature is toggled on', () => {
    const wrapper = shallow(
      <FeatureToggle {...props}>
        <div>feature-toggled-on</div>
      </FeatureToggle>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('should render `null` when the feature is toggled off', () => {
    props.featureId = 'featureTwo';

    const wrapper = shallow(
      <FeatureToggle {...props}>
        <div>feature-toggled-off</div>
      </FeatureToggle>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('should render `null` when hide prop is true and is toggled on', () => {
    props.featureId = 'featureThreeDisabled';

    const wrapper = shallow(
      <FeatureToggle {...props} hide>
        <div>feature-toggled-off</div>
      </FeatureToggle>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('should render children when hide prop is true and is toggled off', () => {
    props.featureId = 'featureFourDisabled';

    const wrapper = shallow(
      <FeatureToggle {...props} hide>
        <div>feature-toggled-on</div>
      </FeatureToggle>,
    );

    expect(wrapper).toMatchSnapshot();
  });
});
