import PropTypes from 'prop-types';
import React from 'react';
import ReactCropper from 'react-cropper';
import classnames from 'classnames';
import 'cropperjs/dist/cropper.css';
import './Cropper.scss';

/**
 * See: Handling demensions in `Cropper.md`.
 */
function minCropBoxSize(relativeMin, rendered, original, natural) {
  const realSize = original || natural;

  if (realSize === undefined) {
    throw new Error('Image size (original or natural) must be defined');
  }

  if (realSize === undefined || realSize <= 0) {
    throw new Error('Image size (original or natural) must be greater than zero');
  }

  if (relativeMin > realSize) {
    throw new Error('Minimum crop size must be smaller than the actual image');
  }

  return Math.round(relativeMin * rendered / realSize);
}

/**
 * A wrapper around [react-cropper](https://github.com/roadmanfong/react-cropper), which is itself a wrapper around [cropperjs](https://github.com/fengyuanchen/cropperjs).
 */
export class Cropper extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      imageLoaded: false,
      minCropBoxHeight: 0,
      minCropBoxWidth: 0,
    };
  }

  componentDidMount() {
    this.loadImage();
  }

  loadImage() {
    const {
      cropperHeight,
      cropperWidth,
      minRelativeHeight,
      originalHeight,
      minRelativeWidth,
      originalWidth,
      src,
    } = this.props;
    const img = new Image();

    img.onload = () => {
      const minCropBoxHeight = minCropBoxSize(minRelativeHeight, cropperHeight, originalHeight, img.naturalHeight);
      const minCropBoxWidth = minCropBoxSize(minRelativeWidth, cropperWidth, originalWidth, img.naturalWidth);

      this.setState({
        imageLoaded: true,
        minCropBoxHeight,
        minCropBoxWidth,
      });
    };

    img.src = src;
  }

  render() {
    const { cropperHeight, cropperWidth, onDropAccepted, onDropRejected, cropperRef, ...rest } = this.props;
    const { imageLoaded } = this.state;
    const className = classnames('gca-cropper', this.props.className);

    const minCropBoxHeight = this.props.minCropBoxHeight || this.state.minCropBoxHeight;
    const minCropBoxWidth = this.props.minCropBoxWidth || this.state.minCropBoxWidth;

    return (
      imageLoaded && (
        <ReactCropper
          {...rest}
          style={{ height: cropperHeight, width: cropperWidth }}
          ref={cropperRef}
          className={className}
          minCropBoxHeight={minCropBoxHeight}
          minCropBoxWidth={minCropBoxWidth}
        />
      )
    );
  }
}

Cropper.propTypes = {
  ...ReactCropper.propTypes,
  /** The height, in px, of the cropper area. */
  cropperHeight: PropTypes.number.isRequired,
  /** The width, in px, of the cropper area. */
  cropperWidth: PropTypes.number.isRequired,
  /** A ref binding function to pass onto the wrapped <ReactCropper> component */
  cropperRef: PropTypes.func,
  /** See: Handling demensions. */
  minRelativeHeight: PropTypes.number,
  /** See: Handling demensions. */
  minRelativeWidth: PropTypes.number,
  /** See: Handling demensions. */
  originalHeight: PropTypes.number,
  /** See: Handling demensions. */
  originalWidth: PropTypes.number,
};

Cropper.defaultProps = {
  autoCropArea: 1,
  center: false,
  guides: false,
  viewMode: 1,
  dragMode: 'none',
  zoomable: false,
  toggleDragModeOnDblclick: false,
  background: false,
};

export default Cropper;
