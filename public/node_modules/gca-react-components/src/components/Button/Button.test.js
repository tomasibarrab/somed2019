import { mount, shallow } from 'enzyme';
import React from 'react';
import { Button } from './Button';

describe('<Button />', () => {
  const clickHandlerSpy = jest.fn();
  describe('defaults', () => {
    let wrapper;
    beforeEach(() => {
      clickHandlerSpy.mockReset();
      wrapper = shallow(
        <Button onClick={clickHandlerSpy}>
          <p className="test-class-text">Press me</p>
        </Button>,
      );
    });
    it('should render as a button with default theme', () => {
      expect(wrapper.is('button')).toEqual(true);
      expect(wrapper.is('.default')).toEqual(true);
    });
  });

  describe('busy & disabled', () => {
    let component;
    beforeEach(() => {
      clickHandlerSpy.mockReset();
      component = mount(
        <Button onClick={clickHandlerSpy}>
          <p className="test-class-text">Press me</p>
        </Button>,
      );
    });

    it('should invoke the callback when clicked', () => {
      component.simulate('click');
      expect(clickHandlerSpy).toHaveBeenCalled();
    });

    it('should not invoke the onClick handler when busy', () => {
      component.setProps({ busy: true });
      component.simulate('click');
      expect(clickHandlerSpy).not.toHaveBeenCalled();
    });

    it('should not invoke the onClick handler when disabled', () => {
      component.setProps({ disabled: true });
      component.simulate('click');
      expect(clickHandlerSpy).not.toHaveBeenCalled();
    });
  });

  describe('snapshots', () => {
    // TODO: Add tests for 'link' type.  Need to figure out how to best add Router to test page
    ['a', 'button'].forEach(type => {
      ['default', 'primary', 'publish', 'bare', 'hollow', 'link'].forEach(theme => {
        it(`should render as type '${type}' with theme '${theme}'`, () => {
          expect(
            shallow(
              <Button type={type} theme={theme}>
                <span>
                  Test content for type: {type} and theme: {theme}.
                </span>
              </Button>,
            ),
          ).toMatchSnapshot();
        });
      });
    });
  });
});
