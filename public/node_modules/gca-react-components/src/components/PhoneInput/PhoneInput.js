import React from 'react';
import PropTypes from 'prop-types';
import { format } from 'libphonenumber-js';
import { Input } from '../Input/Input';
import '../Input/Input.scss';
import { fallbacks } from './constants';

export class PhoneInput extends React.Component {
  format = (phone, phoneFormat, valid) => {
    const code = this.props.countryCode.toUpperCase();
    const countryCode = fallbacks[code] !== undefined ? fallbacks[code] : code;

    return valid ? format(phone, countryCode, phoneFormat) : phone;
  };

  handleChange = e => {
    this.props.onChange(e.target.value.replace(/\D/g, ''));
  };

  render() {
    const { disabled, value, phoneFormat, valid } = this.props;
    const formattedValue = this.format(value, phoneFormat, valid);

    return <Input
      disabled={disabled}
      valid={valid}
      className="gca-input"
      value={formattedValue}
      onChange={this.handleChange}
    />;
  }
}

PhoneInput.propTypes = {
  countryCode: PropTypes.string.isRequired,
  // eslint-disable-next-line react/no-unused-prop-types
  locale: PropTypes.string,
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  valid: PropTypes.bool,
  phoneFormat: PropTypes.oneOf(['National', 'International']),
  disabled: PropTypes.bool,
};

PhoneInput.defaultProps = {
  disabled: false,
  valid: true,
  phoneFormat: 'National',
};

export default PhoneInput;
