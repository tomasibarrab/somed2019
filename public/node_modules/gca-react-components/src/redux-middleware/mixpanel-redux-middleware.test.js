import { createStore, applyMiddleware } from 'redux';
import { createMixpanelDispatcher, createMixpanelMiddleware } from './mixpanel-redux-middleware';

const reducer = (state = {}, action) => ({ ...state, ...action.payload });
window.mixpanel = {
  track: jest.fn(),
};

const trackedActions = {
  TRACKED_ACTION: {
    event: 'Human Readable Test Name',
    props: (state) => ({ userId: state.user.id }),
  },
  SIMPLE_TRACKED_ACTION: {
    event: 'Simple Action',
    props: {},
  },
  OVERRIDE_DEFAULT_ACTION: {
    event: 'Override Action',
    props: {
      'Default Key': 'Overridden Value',
    },
  },
  DONT_TRACK_ACTION: {
    event: 'Dont Track',
    props: () => ({ skip: true }),
  },
};

const defaultProps = {
  'Default Key': 'Default Value',
};

const initializer = {
  action: 'INITIALIZE',
  initialize(mix, state) {
    mix.identify(state.user.id);
  },
};

describe('mixpanel middleware', () => {
  it('should throw if called without any arguments', () => {
    expect(createMixpanelMiddleware).toThrow();
  });

  it('should throw if called without trackedActions defined', () => {
    const testFunc = () => createMixpanelMiddleware({ initializer: {} });
    expect(testFunc).toThrow();
  });

  it('should throw if called without property parameter', () => {
    const testFunc = () => createMixpanelMiddleware();
    expect(testFunc).toThrow();
  });

  describe('correct middleware usage', () => {
    it('should return a function', () => {
      const middleware = createMixpanelMiddleware({ initializer, trackedActions });
      expect(typeof middleware).toBe('function');
    });
  });

  describe('middleware applied to the store', () => {
    let store;

    beforeEach(() => {
      const middleware = createMixpanelMiddleware({ trackedActions });
      store = createStore(reducer, applyMiddleware(middleware));
    });

    afterEach(() => {
      window.mixpanel.track.mockClear();
    });

    describe('tracking events in middleware', () => {
      beforeEach(() => {
        store.dispatch({ type: 'TEST_1', payload: { user: { id: 'test-id' } } });
      });


      it('should call track for registered actions', () => {
        store.dispatch({ type: 'TRACKED_ACTION' });
        expect(window.mixpanel.track).toHaveBeenCalledWith(
          'Human Readable Test Name',
          { userId: 'test-id' }
        );
      });

      it('should call track for simple registered actions', () => {
        const action = { type: 'SIMPLE_TRACKED_ACTION', payload: { data: [1, 2, 3] } };
        store.dispatch(action);
        expect(window.mixpanel.track).toHaveBeenCalledWith(
          'Simple Action',
          {}
        );
      });

      it('should not call track for skip props', () => {
        const action = { type: 'DONT_TRACK_ACTION', payload: { data: [1] } };
        store.dispatch(action);
        expect(window.mixpanel.track).not.toHaveBeenCalled();
      });
    });
  });

  describe('middleware with default props', () => {
    let store;

    beforeEach(() => {
      const middleware = createMixpanelMiddleware({ trackedActions, defaultProps });
      store = createStore(reducer, applyMiddleware(middleware));
    });

    describe('tracking events in middleware', () => {
      it('should apply default props to event', () => {
        const action = { type: 'SIMPLE_TRACKED_ACTION', payload: { data: [1, 2, 3] } };
        store.dispatch(action);
        expect(window.mixpanel.track).toHaveBeenCalledWith(
          'Simple Action',
          defaultProps
        );
      });

      it('should override any default props in event', () => {
        const action = { type: 'OVERRIDE_DEFAULT_ACTION' };
        store.dispatch(action);
        expect(window.mixpanel.track).toHaveBeenCalledWith(
          'Override Action',
          { 'Default Key': 'Overridden Value' }
        );
      });
    });
  });

  describe('createMixpanelDispatcher', () => {
    const props = { bar: 'bar' };

    afterEach(() => {
      window.mixpanel.track.mockClear();
    });

    it('should be creatable with no default props', () => {
      const dispatcher = createMixpanelDispatcher();
      dispatcher('foo', props);
      expect(window.mixpanel.track).toHaveBeenCalledWith('foo', props);
    });

    it('should be creatable with default props', () => {
      const dispatcher = createMixpanelDispatcher({ baz: 'baz' });
      dispatcher('foo', props);
      expect(window.mixpanel.track).toHaveBeenCalledWith('foo', { baz: 'baz', ...props });
    });

    it('should shadow default props with custom props', () => {
      const dispatcher = createMixpanelDispatcher({ baz: 'baz' });
      const shadowProps = {
        ...props,
        baz: 'zab'
      };
      dispatcher('foo', shadowProps);
      expect(window.mixpanel.track).toHaveBeenCalledWith('foo', shadowProps);
    });
  });
});
