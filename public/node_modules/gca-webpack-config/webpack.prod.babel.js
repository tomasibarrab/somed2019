// Important modules this config uses
const path = require('path');

const HTMLPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const postcssConfig = require('./postcss.loader.js');
const pkg = require(path.join(process.cwd(), './package'));

const version = pkg.version.replace(/\./g, '-');
const appName = pkg.name;
const cdnPath = `https://gc-cdn.otstatic.com/gc-microapps/prod/${appName}/${version}/`;

const appConfig = require(path.join(process.cwd(), './app.config'));
const templateParameters = appConfig.template || {};
const chromeProps = appConfig.chromeProps || {};

const templatePath = process.env.TEMPLATE_PATH || path.join(__dirname, 'index.hbs');

module.exports = require('./webpack.base.babel')({
  mode: 'production',

  dllPath: 'gca-common-dll/dist/gcaCommon.prod.json',

  // In production, we skip all hot-reloading stuff
  entry: [path.join(process.cwd(), 'src/app')],

  // Utilize long-term caching by adding content hashes (not compilation hashes) to compiled assets
  output: {
    publicPath: cdnPath,
    filename: 'main.js',
    chunkFilename: '[name].js',
  },

  babelQuery: {
    presets: ['gca-babel-config/babelrc'],
  },

  cssLoaders: [
    {
      loader: MiniCssExtractPlugin.loader,
      options: {
        publicPath: '../',
      },
    },
    {
      loader: 'css-loader',
      query: {
        importLoaders: 1,
        sourceMap: true,
      },
    },
    postcssConfig,
    'sass-loader',
  ],

  imageOptions: {
    name: '[path][name].[ext]',
    publicPath: cdnPath,
    useRelativePath: false,
  },

  plugins: [
    new HTMLPlugin({
      filename: 'index.html',
      inject: false,
      template: templatePath,
      templateParameters: {
        dllVersion: require('gca-common-dll/package.json').version.replace(/\./g, '-'),
        isResponsive: templateParameters.isResponsive,
        withChrome: templateParameters.withChrome,
        chromeProps: JSON.stringify(chromeProps, null, 2),
      },
    }),

    // Extract the CSS into a separate file
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: '[name].css',
      chunkFilename: '[name].css',
    }),
  ],
});
