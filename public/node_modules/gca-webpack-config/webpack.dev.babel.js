/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

/* eslint-disable import/no-dynamic-require */
/* eslint-disable import/newline-after-import */
const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const postcssConfig = require('./postcss.loader.js');

const plugins = [
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new webpack.NoEmitOnErrorsPlugin(),
];

module.exports = (options = {}) => require('./webpack.base.babel')({
  mode: 'development',

  dllPath: 'gca-common-dll/dist/gcaCommon.dev.json',

  // Emit a source map for easier debugging
  devtool: 'source-map',

  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client',
    path.join(process.cwd(), 'src/app.tsx'), // Start with js/app.js
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
    publicPath: options.publicPath || '/'
  },

  // Load the CSS in a style tag in development
  cssLoaders: [
    'style-loader',
    {
      loader: 'css-loader',
      query: {
        localIdentName: '[local]__[path][name]__[hash:base64:5]',
        importLoaders: 1,
        sourceMap: true,
      },
    },
    postcssConfig,
    'sass-loader',
  ],

  // Tell babel that we want to hot-reload
  babelQuery: {
    presets: ['react-hmre'],
  },

  plugins: plugins,

  imageOptions: {
    name: '[path][name].[ext]',
    publicPath: `http://localhost:3000/`,
    useRelativePath: false,
  },

});
