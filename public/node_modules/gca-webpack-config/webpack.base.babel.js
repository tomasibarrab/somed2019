/**
 * COMMON WEBPACK CONFIGURATION
 */

const path = require('path');
const webpack = require('webpack');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

// // Allow server to be killed with a SIGINT signal
// const kill = require('tree-kill')
// const pid = process.pid
// process.on('SIGTERM', function () {
//   kill(pid, 'SIGKILL')
// });

module.exports = options => ({
  mode: options.mode,
  entry: options.entry,
  devtool: options.devtool,
  stats: {
    errors: true,
    warnings: false,
    timings: true,
    reasons: false,
    performance: false,
    outputPath: false,
    moduleTrace: false,
    modules: false,
    hash: false,
    children: false,
    assetsSort: '!size'
  },
  output: Object.assign(
    {
      // Compile into dist/*.js
      path: path.resolve(process.cwd(), 'dist'),
      publicPath: options.publicPath || '/',
    },
    options.output,
  ), // Merge with env dependent settings
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: 'babel-loader',
            options: {
              env: {
                production: {
                  plugins: ['syntax-dynamic-import'],
                },
                development: {
                  plugins: ['syntax-dynamic-import'],
                },
                test: {
                  plugins: ['dynamic-import-node'],
                },
              }
            }
          },
          {
            loader: 'awesome-typescript-loader',
            options: {
              // Fixes issue with logs polluting stats: https://github.com/s-panferov/awesome-typescript-loader/issues/375
              silent: process.argv.indexOf('--json') !== -1,
            },
          },
        ],
      },
      {
        test: /\.js$/,
        use: [
          {
            loader: 'babel-loader',
            options: options.babelQuery,
          },
        ],
        exclude: /node_modules\/(?!gca)/,
      },
      {
        exclude: /module\.css/,
        test: /\.(scss|css)$/,
        use: options.cssLoaders,
      },
      {
        test: /\.(module\.css)$/,
        use: options.cssLoaders.map((val, index) => {
          /* Only want to modify the css-loader options, so identify
             css loader based on its name rather than its index in the
             list of loaders, since its index will change in different
             environments' webpack configs. */
          if (val.loader && val.loader === 'css-loader') {
            return Object.assign({}, val, {
              query: Object.assign({}, val.query, {
                camelCase: 'only',
                localIdentName: '[local]-[hash:base64:5]',
                modules: true,
              }),
            });
          }
          return val;
        }),
      },
      {
        test: /\.(eot|svg|ttf|woff|woff2)$/,
        use: ['file-loader'],
      },
      {
        test: /\.(jpg|png|gif)$/,
        use: [
          {
            loader: 'file-loader',
            options: options.imageOptions,
          },
        ],
      },
      {
        test: /\.html$/,
        use: ['html-loader'],
      },
      {
        test: /\.(mp4|webm)$/,
        use: ['url-loader?limit=10000'],
      },
      {
        test: /\.hbs$/,
        loader: 'handlebars-loader',
      },
    ],
  },
  plugins: options.plugins
    .concat([
      // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
      // inside your code for any environment checks; UglifyJS will automatically
      // drop any unreachable code.
      new webpack.DefinePlugin({
        'process.env': {
          NODE_ENV: JSON.stringify(process.env.NODE_ENV),
        },
      }),

      new webpack.DllReferencePlugin({
        context: process.cwd(),
        manifest: require(options.dllPath),
      }),
    ])
    .concat(process.argv.indexOf('--analyze') !== -1 ? [new BundleAnalyzerPlugin()] : []),
  resolve: {
    modules: ['src', 'node_modules', 'internals/testing', 'shared_modules'],
    extensions: ['.ts', '.tsx', '.js', '.jsx', '.react.js'],
    mainFields: ['browser', 'main', 'jsnext:main'],
    symlinks: false,
  },
  target: 'web', // Make web variables accessible to webpack, e.g. window
});
