module.exports = (SmartlingClient, Promise, _) ->

  class TranslationsImport

    @import: (manifest, bundles) ->
      (new TranslationsImport(manifest, bundles)).import()

    constructor: (@manifest, @bundles) ->

    import: ->
      Promise.map _.values(@bundles), @importBundleKeys

    importBundleKeys: (bundle) =>
      Promise.map @manifest.imports, (importManifest) =>
        @getClientInstance(bundle, importManifest)
          .import(@getImportOptions(bundle, importManifest))
          .catch(@handleImportResponse)

    getClientInstance: (bundle, importManifest) ->
      @client ?= new SmartlingClient(bundle?.smartling?.userIdentifier, bundle?.smartling?.userSecret, bundle?.smartling?.projectId)
      @client

    getImportOptions: (bundle, importManifest) ->
      {
        fileUri: bundle?.smartling?.fileUri
        content: JSON.stringify(bundle?.keys)
        localeId: importManifest?.locale
        fileType: bundle?.smartling?.fileType
        contentType: bundle?.smartling?.contentType
        overwrite: importManifest?.options?.overwrite
        translationState: importManifest?.options?.translationState
      }

    handleImportResponse: ->
      Promise.reject(new Error("Could not import to smartling"))
