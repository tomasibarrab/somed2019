module.exports = ($injector, _, Logger) ->

  availableLocales = $injector.getRegex(/Locales$/)

  class Manifest

    @DefaultProcessorConfig: {
      forEach: "locale"
    }

    constructor: (data, @manifestPath) ->
      _.extend(@, data)
      @writers = @mapPipeline(@writers)
      @processors = @mapPipeline(@processors, _.clone(Manifest.DefaultProcessorConfig))
      @dependencies = @mapBundles(@dependencies)
      @locales = @getLocales(@locales)
      @validate()

    @create: (data, manifestPath) ->
      new Manifest(data, manifestPath)

    mapPipeline: (arr=[], configDefaults={}) ->
      _.map arr, (item) ->
        if _.isArray(item)
          return {
            name: item[0],
            config: _.extend({}, configDefaults, item[1])
          }
        else
          return {
            name: item,
            config: _.extend({}, configDefaults)
          }

    mapBundles: (obj={}) ->
      _.map obj, (dependencyBundle) =>
        dependencyBundle.fileUri ?= dependencyBundle.resourceId
        dependencyBundle.retrievalType ?= "pending"
        @validateBundle(dependencyBundle)
        dependencyBundle

    validateBundle: (dependencyBundle) ->
      if not dependencyBundle.fileUri
        @errorNoFileUri()
      if not dependencyBundle.userIdentifier or not dependencyBundle.userSecret
        @errorMissingCredentials()

    errorNoFileUri: ->
      Logger.error("Unable to find a 'fileUri' or 'resourceId' for a dependency in #{@manifestPath}.")

    errorMissingCredentials: ->
      Logger.error("Need Smartling user credentials for a dependency in #{@manifestPath}.")

    getLocales: (locales=[]) ->
      finalLocales = []
      if Array.isArray(locales)
        finalLocales = locales
      else if typeof locales is "string"
        finalLocales = @getExternalLocales(locales)
      else if locales.shared
        sharedLocales = @getExternalLocales(locales.shared)
        extendLocales = locales.extend or []
        finalLocales = _.union(sharedLocales, extendLocales)
      return finalLocales

    getExternalLocales: (localeName) ->
      externalLocales = []
      sharedLocales = @getInjectedLocales(localeName) or @getLocalesModule(localeName)
      if (sharedLocales)
        externalLocales = sharedLocales
      return externalLocales

    getInjectedLocales: (localeName) ->
      injectedLocales = false
      sharedLocales = availableLocales[localeName]
      if sharedLocales and Array.isArray(sharedLocales)
        injectedLocales = sharedLocales
      return injectedLocales

    getLocalesModule: (localeName) ->
      localesModule = false
      try
        sharedLocales = require(localeName)
      catch error
      if sharedLocales and Array.isArray(sharedLocales)
        localesModule = sharedLocales
      return localesModule

    validate: ->
      if not @writers.length
        @warnNoWriters()
      if not @processors.length
        @warnNoProcessors()
      if not @dependencies.length
        @warnNoDependencies()
      if not Array.isArray(@locales) or not @locales.length
        @errorNoLocales()

    warnNoWriters: ->
      Logger.warn("No writers found in #{@manifestPath}, is this intended?")

    warnNoProcessors: ->
      Logger.warn("No processors found in #{@manifestPath}, is this intended?")

    warnNoDependencies: ->
      Logger.warn("No dependencies found in #{@manifestPath}, is this intended?")

    errorNoLocales: ->
      Logger.error("Unable to find locales from #{@manifestPath}")
