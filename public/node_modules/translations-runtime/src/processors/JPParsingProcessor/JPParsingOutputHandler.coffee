module.exports = (_, JPRepairEnglishWords, JPUtils) ->

  new class JPParsingOutputHandler

    buildString: (sentenceObj) ->
      sentence = ""
      sentenceObj = JPRepairEnglishWords.optimizeParsedObject(sentenceObj)
      for wordObj, i in sentenceObj
        sentence += @_buildWord(wordObj, i, sentenceObj)
      sentence

    _buildWord: (wordObj, i, sentenceObj) ->
      word = wordObj.word
      prevWordObj = sentenceObj[i-1]
      nextWordObj = sentenceObj[i+1]
      prevWord = prevWordObj?.word
      nextWord = nextWordObj?.word

      # English word
      if JPUtils.isEnglish(word) then return JPRepairEnglishWords.formatWord(word, nextWord, prevWord)

      # Symbol or number
      if JPUtils.isSymbolOrNumber(word) then return word

      # JP open parentheses
      if JPUtils.isJpOpenParen(word) and nextWord
        formattedWord = word + JPUtils.getJpOpenParenJoin(nextWord)
        return JPUtils.combineWithNextWord(formattedWord, nextWord, sentenceObj, i)

      # Regular JP word
      word = JPUtils.glueCharacters(word)
      if JPUtils.isJp(prevWord) then return JPUtils.getJpToJpJoin(wordObj) + word

      return word
