/**
 * Standard version endpoints
 */

/* eslint-disable import/no-dynamic-require */

const fs = require('fs');
const express = require('express');
const path = require('path');
const chalk = require('chalk');

const divider = require('../scripts/helpers/divider');
const localPath = path.resolve(process.cwd());
const router = express.Router();

let mocks = {};
const mockSpecFilename = path.join(localPath,'mocks.json');
if ( fs.existsSync(mockSpecFilename) ) {
  mocks = require(mockSpecFilename);
}

/**
 * High Order Function building the handler returning mocked data
 * as defined in the mockRespDefinition object
 * @param {*} mockRespDefinition is defined as an object with these props:
 * {
 *    verb: 'GET' | 'POST' | 'PUT' | 'DELETE';
 *    file?: string;
 *    data?: any
 * }
 */
function mockRouteResponse( mockRespDefinition ) {
  let payload = {};
  if ( mockRespDefinition.file ) {
    payload = require(path.join(localPath,mockRespDefinition.file));
    console.log(`\t- File: ${chalk.green(mockRespDefinition.file)}`);
  } else if ( mockRespDefinition.data ) {
    payload = mockRespDefinition.data;
    console.log(`\t- Data ${chalk.green(Object.keys(mockRespDefinition.data).length)+' keys'}`);
  } else {
    payload = {};
  }
  return (req, res) => {
    console.log(`\t>> Mocked response for ${chalk.green(req.path)}`);
    res.json(payload);
  };
}

/**
 * Return the routes managing mock endpoints
 */
module.exports = (options) => {
  if (options.nomocks || options.static) {
    console.log( chalk.bold( divider) );
    console.log(`No mocks will be used ${chalk.bold.green('âœ“')}`, chalk.bold(divider));
    return router;
  }
  console.log( chalk.bold('Mocks (mocks.json):', divider, '\n') );
  Object.keys(mocks).forEach( (route) => {
    const routeDefinition = mocks[route];
    const verb = routeDefinition.verb || 'GET';
    console.log(` ${chalk.magenta(verb)} ${chalk.blue(route)}`);
    switch(verb) {
      case 'GET':
        router.get(route, mockRouteResponse(routeDefinition));
        break;
      case 'DELETE':
        router.delete(route, mockRouteResponse(routeDefinition));
        break;
      case 'PUT':
        router.delete(route, mockRouteResponse(routeDefinition));
        break;
      case 'POST':
        router.post(route, mockRouteResponse(routeDefinition));
        break;
    }
  });
  console.log('\n');
  return router;
};

