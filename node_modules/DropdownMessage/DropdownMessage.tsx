import React, { useCallback } from 'react';

import './DropdownMessage.scss';

export interface DropdownMessageProps {
  show: boolean;
  autohide: boolean;
  delay: number;
  children: ((show: boolean) => React.ReactNode) | React.ReactNode;
  onTransitioned?: (show: boolean) => void;
}

export function DropdownMessage({ show, children, delay, autohide, onTransitioned }: DropdownMessageProps) {
  const [ visible, setVisible ] = React.useState(show);
  const dropdownEl = React.useRef<HTMLDivElement>(null);
  React.useEffect( () => {
    setVisible(show);
    if (autohide && show) {
      setTimeout(() => setVisible(false), delay * 1000);
    }
  }, [show]);
  const transitionHandler = React.useCallback((event: TransitionEvent) => {
    // console.log('transiton end on: ', event.propertyName);
    if (onTransitioned && event.propertyName === 'opacity') {
      onTransitioned(visible);
    }
  }, [onTransitioned, visible]);

  React.useEffect( () => {
    if (dropdownEl.current) {
      dropdownEl.current.addEventListener('transitionend', transitionHandler);
    }
    return () => {
      if (dropdownEl.current) {
        dropdownEl.current.removeEventListener('transitionend', transitionHandler);
      }
    }
  }, [transitionHandler]);
  return (
    <div
      ref={dropdownEl}
      className={`dropdown-message ${visible ? 'show' : 'hide'}`}>
      <div>
        {children instanceof Function
        ? children(visible)
        : children
        }
      </div>
    </div>
  );
}
