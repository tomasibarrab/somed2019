const path = require('path');
const fs = require('fs');
const Promise = require('bluebird');
const agent = require('superagent-promise')(require('superagent'), Promise);
const url = require('url');
const ejs = require('ejs');

const cwd = process.cwd();

const localPackage = require('gca-mono/lib/load-local-package');
const pkg = localPackage.getPackageFile();
const manifest = localPackage.getManifestFile();
const appConfig = require(path.join(cwd, 'app.config'));

const { template, addins, filename, filetype } = manifest;
// const { host, environment } = pkg.microapp.registry || {};

const fetchTemplate = () => {
  // const uri = url.resolve(host, `/api/micro-app/${template}/${environment}/content`);
  // console.log('>>>>>>>>>>> template ', uri);
  // return agent.get(uri).end();
  const filePath = path.join(__dirname, `../templates/${template}.html`);
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, { encoding: 'utf8' }, (err, data) => {
      return (err)
        ? reject(err)
        : resolve({
          body: {
            microAppId: template,
            creator: pkg.author,
            owner: 'gca',
            type: 'template',
            dist: {
              local: 'Master-44',
              'rc-sf': 'Master-44',
              'pp-sf': 'Master-44',
              'ci-sf': 'Master-44',
              development: 'Master-44'
            },
            tags: [],
            state: 'active',
            created: '2018-06-06T18:55:38.647Z',
            manifest: {
              filename: 'index',
              filetype: 'html',
              name: 'gc-template-authenticated',
              owner: 'gc-frontend@opentable.onmicrosoft.com',
              type: 'template',
              version: 'Master-44',
            },
            layout: data,
            partials: {},
            CDN: 'https://gc-cdn.otstatic.com/gc-microapps-v2/gc-template-authenticated/Master-44'
          }
        });
    });
  });
};

/**
 * Reads an addin file and return a promise with its content
 */
const readAddin = (addin) => {
  const filePath = path.join(cwd, `src/${addin}.${filetype}`);
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, { encoding: 'utf8' }, (err, data) => (
      (err)
        ? reject(err)
        : resolve(data)
    ));
  });
};

/**
 * Reads all the addins conent and deliver a promise of a map: { name, content }
 */
const getAddins = () => {
  return Promise.map(
    addins,
    name => readAddin(name).then(content => ({ name, content }))
  );
};

/**
 * Output a generic error message
 */
const handleError = (res, reason) => {
  const message = `
    <h1>${reason.message}</h1>
    <hr />
    <p><pre>${reason.stack}</pre></p>
  `;
  res.status(500).send(message);
};

/**
 * Inject partial and addins in the main layout (it is the template from manifest.json in the microapp)
 */
const concatTemplate = (layout, partial, addinsList) => {
  let content = layout.replace('<!-- {partial: body} -->', partial);
  addinsList.forEach((addin) => {
    const searchTemplate = `<!-- {partial: ${addin.name}} -->`;
    content = content.replace(searchTemplate, addin.content);
  });

  return content;
};

const prepareModel = (req, templateVersion, templateCdn) => {
  const model = {
    query: req.query,
    params: req.params,
    microapp: {
      type: 'dev',
      version: pkg.version,
      lang: 'en-us',
      cdn: '',
    },
    locals: appConfig.template,
    template: {
      version: templateVersion,
      lang: 'en-us',
      cdn: templateCdn
    }
  };
  return model;
};

const handleRequest = (req, res) => {
  return fetchTemplate(template)
    .then((response) => {
      const { layout, CDN } = response.body;
      const templateVersion = response.body.manifest.version;

      return readAddin(filename)
        .then(partial => getAddins()
          .then((addinsList) => {
            const fullTemplate = concatTemplate(layout, partial, addinsList);
            const model = prepareModel(req, templateVersion, CDN);

            res.status(200).send(ejs.render(fullTemplate, model));
          }, handleError.bind(this, res)), handleError.bind(this, res));

      // res.status(200).json(response.body);
    }, handleError.bind(this, res))
};

module.exports.handleRequest = handleRequest;
module.exports.readAddin = readAddin;
