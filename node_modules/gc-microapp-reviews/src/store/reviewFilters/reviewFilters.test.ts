import merge from 'gca-react-components/src/utils/merge';
import { changed, overallRating, reducer, valid } from './reviewFilters';

describe('reviewFilters duck', () => {
  const reducerState: any = reducer(undefined, { type: 'NO_MATCH' });
  const appState = { reviewFilters: reducerState };

  it('should have a reducer with the following subreducers', () => {
    expect(reducerState.overallRating).toBeInstanceOf(Object);
    expect(reducerState.dateFilter).toBeInstanceOf(Object);
    expect(reducerState.includeRatingsOnly).toBeInstanceOf(Object);
    expect(reducerState.dateRange).toBeInstanceOf(Object);
  });

  describe('selectors', () => {
    it('the "valid" selector should return true if all its submodules are currently valid', () => {
      expect(valid(appState)).toEqual(true);
    });

    it('the "valid" selector should return false if any of its submodules are currently invalid', () => {
      const invalidState = merge(appState, { reviewFilters: { overallRating: { pending: [] } } });

      expect(valid(invalidState)).toEqual(false);
    });

    it('the "changed" selector should return true if any of its submodules have changed', () => {
      expect(changed(appState)).toEqual(false);
    });

    it('the "changed" selector should return false if none of its submodules have inchanged', () => {
      const changedState = merge(appState, { reviewFilters: { overallRating: { pending: [] } } });

      expect(changed(changedState)).toEqual(true);
    });
  });
});
