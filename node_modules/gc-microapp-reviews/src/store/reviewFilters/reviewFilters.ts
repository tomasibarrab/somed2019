import difference from 'lodash/difference';
import isBoolean from 'lodash/isBoolean';
import reduce from 'lodash/reduce';
import moment from 'moment';
import { combineReducers } from 'redux';
import { createSelector } from 'reselect';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';

import { isDateString, isEnum, isISO } from '../../utils/type-checks';
import { create } from './filterModule';

// ACTION TYPES
// =======================================================

export const APPLY_FILTERS = 'reviewFilters/APPLY_FILTERS';
export const BLUR_FILTERS = 'reviewFilters/BLUR_FILTERS';
export const CANCEL_FILTER = 'reviewFilters/CANCEL_FILTER';
export const FOCUS_FILTER = 'reviewFilters/FOCUS_FILTER';
export const SET_FILTER = 'reviewFilters/SET_FILTER';

// REDUCER
// =======================================================

// Configuration common to all filters
const defaultConfig = {
  APPLY: APPLY_FILTERS,
  BLUR: BLUR_FILTERS,
  CANCEL: CANCEL_FILTER,
  FOCUS: FOCUS_FILTER,
  SET: SET_FILTER,
  // TODO: This should be fetchReviewsRequest.done.type, but we have a circular dependency.
  SUCCESS: 'REVIEWS/FETCH_REQUEST_DONE',
};

// Create sub-modules for each filterable property
export const overallRating = create({
  ...defaultConfig,
  initialValue: [1, 2, 3, 4, 5],
  integrityCheck: payload => difference(payload, [1, 2, 3, 4, 5]).length === 0,
  path: ['reviewFilters', 'overallRating'],
  validate: list => list.length > 0,
});

export const dateFilter = create({
  ...defaultConfig,
  initialValue: 'LastActivityDateTimeUtc',
  integrityCheck: isEnum(['SubmissionDateTimeUtc', 'DinedOnDateTimeUtc', 'LastActivityDateTimeUtc']),
  path: ['reviewFilters', 'dateFilter'],
});

export const includeRatingsOnly = create({
  ...defaultConfig,
  initialValue: true,
  integrityCheck: isBoolean,
  path: ['reviewFilters', 'includeRatingsOnly'],
});

export const dateRange = create({
  ...defaultConfig,
  initialValue: {
    end: moment().toISOString(),
    start: moment()
      .subtract(14, 'days')
      .toISOString(),
  },
  integrityCheck: ({ start, end }) => isDateString(start) && isDateString(end),
  path: ['reviewFilters', 'dateRange'],
  validate: ({ start, end }) => isISO(start) && isISO(end),
});

// Export our combined filters module
export const reducer = combineReducers({
  dateFilter: dateFilter.reducer,
  dateRange: dateRange.reducer,
  includeRatingsOnly: includeRatingsOnly.reducer,
  overallRating: overallRating.reducer,
});

// Export a combined initial state for testing
export const initialState = reducer(undefined as any, { type: 'NO_MATCH' });

// SELECTORS
// =======================================================

// Create an aggregate "changed" selector
export const changed = createSelector(
  overallRating.selector,
  dateFilter.selector,
  includeRatingsOnly.selector,
  dateRange.selector,
  (...filters: any[]) => reduce(filters, (acc, filter) => acc || filter.changed, false),
);

// Create an aggregate "valid" selector
export const valid = createSelector(
  overallRating.selector,
  dateFilter.selector,
  includeRatingsOnly.selector,
  dateRange.selector,
  (...filters: any[]) => reduce(filters, (acc, filter) => acc && filter.valid, true),
);
