import { actionCreatorFactory, Success } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import '../commonRxjs';

import { From, Reply } from '../../store/allReviews/allReviews';
import { sendReviewReply } from '../../store/sharedActions';
import { Epic, Status } from '../../store/types';

// --------------------------------- //
// Types
// --------------------------------- //

export interface StatusList {
  [reviewId: string]: Status | undefined;
}

export interface ReviewRepliesState {
  statusList: StatusList;
}

// --------------------------------- //
// Actions
// --------------------------------- //

const actionCreator = actionCreatorFactory('REVIEW_REPLIES');

export const resetStatus = actionCreator<string>('RESET_STATUS');

// --------------------------------- //
// Reducer
// --------------------------------- //

export const initialState: ReviewRepliesState = {
  statusList: {},
};

export const reviewRepliesReducer = reducerWithInitialState(initialState)
  .case(sendReviewReply.started, (state, { reviewId }) => ({
    statusList: {
      ...state.statusList,
      [reviewId]: Status.Started,
    },
  }))
  .case(sendReviewReply.done, (state, { params }) => ({
    statusList: {
      ...state.statusList,
      [params.reviewId]: Status.Done,
    },
  }))
  .case(sendReviewReply.failed, (state, { params }) => ({
    statusList: {
      ...state.statusList,
      [params.reviewId]: Status.Failed,
    },
  }))
  .case(resetStatus, (state, reviewId) => {
    'foo';

    return {
      statusList: {
        ...state.statusList,
        [reviewId]: undefined,
      },
    };
  });

// --------------------------------- //
// Epics
// --------------------------------- //

export const reviewRepliesEpic: Epic = (action$, store, { api }) =>
  action$.filter(sendReviewReply.started.match).switchMap(({ payload }) => {
    const { message, reviewId } = payload;
    const { currentContext } = store.getState();
    const rid = currentContext.restaurant.rid;

    const body = {
      From: From.Restaurant,
      Message: message,
      Name: currentContext.user.userName,
      Role: currentContext.user.role,
    };

    return api
      .postReviewReply({ rid, reviewId, body })
      .map(({ response }) => sendReviewReply.done({ params: payload, result: response }))
      .catch(() => [sendReviewReply.failed({ params: payload, error: {} })]);
  });
