import { Dropdown } from 'gca-react-components';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { dateFilter } from '../../store/reviewFilters/reviewFilters';

const stringIdMap = {
  DinedOnDateTimeUtc: 'reviews.filters.dateFilter.visitDate',
  LastActivityDateTimeUtc: 'reviews.filters.dateFilter.updatedDate',
  SubmissionDateTimeUtc: 'reviews.filters.dateFilter.reviewDate',
};

type DateFilter = 'SubmissionDateTimeUtc' | 'DinedOnDateTimeUtc' | 'LastActivityDateTimeUtc';

interface SP {
  current: DateFilter;
  pending: DateFilter;
  focused: boolean;
}

interface DP {
  focus(): void;
  cancel(): void;
  set(payload: any, applyOnSet?: boolean): void;
}

interface BaseProps extends SP, DP {}
interface Props extends BaseProps, InjectedIntlProps {}

const options = ['SubmissionDateTimeUtc', 'DinedOnDateTimeUtc', 'LastActivityDateTimeUtc'];

function DateFilterDropdown({ cancel, current, focus, focused, intl, pending, set }: Props) {
  return (
    <Dropdown
      label={intl.formatMessage({ id: stringIdMap[current] })}
      open={focused}
      onLabelClick={focused ? cancel : focus}
    >
      <ul className="filters-dropdown-list">
        {options.filter(sortType => sortType !== pending).map((sortType: DateFilter) => (
          <li className="filters-dropdown-item" key={sortType}>
            <button className="date-filter-button" onClick={() => set(sortType, true)}>
              {intl.formatMessage({ id: stringIdMap[sortType] })}
            </button>
          </li>
        ))}
      </ul>
    </Dropdown>
  );
}

export default connect<SP, DP, {}>(dateFilter.selector, dateFilter.actions)(injectIntl<BaseProps>(DateFilterDropdown));
export { DateFilterDropdown as PureDateFilterDropdown };
