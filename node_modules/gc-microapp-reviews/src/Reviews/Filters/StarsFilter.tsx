import { Button, Checkbox, Dropdown } from 'gca-react-components';
import keyBy from 'lodash/keyBy';
import union from 'lodash/union';
import without from 'lodash/without';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { overallRating } from '../../store/reviewFilters/reviewFilters';

interface BaseStarsFilterItemProps {
  ratings: number[];
  rating: number;
  set(payload: any, applyOnSet?: boolean): void;
}

interface StarsFilterItemProps extends BaseStarsFilterItemProps, InjectedIntlProps {}

/**
 * StarsFilterItem
 */
class BaseStarsFilterItem extends React.Component<StarsFilterItemProps> {
  public render() {
    const { ratings, rating } = this.props;
    const checked = ratings.indexOf(rating) > -1;

    return (
      <li className="filters-dropdown-item">
        <Checkbox
          onClick={this.handler}
          checked={checked}
          label={this.props.intl.formatMessage({ id: 'reviews.filters.stars.nStars' }, { number: rating })}
        />
      </li>
    );
  }

  private handler = () => {
    const { ratings, rating, set } = this.props;
    const checked = ratings.indexOf(rating) > -1;

    if (checked) {
      set(without(ratings, rating).sort());
    } else {
      set(union(ratings, [rating]).sort());
    }
  };
}

const StarsFilterItem = injectIntl<BaseStarsFilterItemProps>(BaseStarsFilterItem);

interface SP {
  current: number[];
  pending: number[];
  focused: boolean;
  valid: boolean;
}

interface DP {
  apply(): void;
  cancel(): void;
  focus(): void;
  set(payload: any, applyOnSet?: boolean): void;
  selectAll(): void;
  selectNone(): void;
}

interface BaseStarsFilterProps extends SP, DP {}
interface StarsFilterProps extends BaseStarsFilterProps, InjectedIntlProps {}

/**
 * StarsFilter
 */
function StarsFilter({
  apply,
  cancel,
  current,
  focus,
  focused,
  intl,
  pending,
  selectAll,
  selectNone,
  set,
  valid,
}: StarsFilterProps) {
  const labelKey = current.length === 5 ? 'all' : current.length;
  const labelText = intl.formatMessage({ id: `reviews.filters.stars.label.${labelKey}` }, current as any);
  const allChecked = pending.length === 5;
  const selectMessageId = `reviews.filters.stars.${allChecked ? 'deselectAll' : 'selectAll'}`;
  const selectFunction = allChecked ? selectNone : selectAll;
  const handleLabelClick = focused ? cancel : focus;

  const errorMessage = valid ? null : (
    <p className="error-message">{intl.formatMessage({ id: 'reviews.filters.stars.required' })}</p>
  );

  return (
    <Dropdown label={labelText} open={focused} onLabelClick={handleLabelClick}>
      <button className="stars-select-button" onClick={selectFunction}>
        <FormattedMessage id={selectMessageId} />
      </button>

      <ul className="filters-dropdown-list">
        {[5, 4, 3, 2, 1].map(rating => <StarsFilterItem key={rating} ratings={pending} rating={rating} set={set} />)}
      </ul>

      {errorMessage}

      <Button theme="primary" onClick={apply} disabled={!valid}>
        <FormattedMessage id="reviews.filters.apply" />
      </Button>
    </Dropdown>
  );
}

const mapDispatch = {
  ...overallRating.actions,
  selectAll: () => overallRating.actions.set([1, 2, 3, 4, 5]),
  selectNone: () => overallRating.actions.set([]),
};

export default connect<SP, DP, {}>(overallRating.selector, mapDispatch)(injectIntl<BaseStarsFilterProps>(StarsFilter));
export { StarsFilter as PureStarsFilter };
