import { AsyncContent, StarIcon } from 'gca-react-components';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { fetchReviews } from '../../store/allReviews/allReviews';
import { allReviewsSelector } from '../../store/allReviews/allReviews';
import Paginator from '../Paginator/Paginator';
import Review from './Review/Review';

import './AllReviews.scss';

interface SP {
  error: boolean;
  empty: boolean;
  loading: boolean;
  reviewIds: any[];
}

interface DP {
  fetchReviews(): void;
}

interface BaseProps extends SP, DP {}
interface Props extends BaseProps, InjectedIntlProps {}

class AllReviews extends React.Component<Props> {
  public componentDidMount() {
    this.props.fetchReviews();
  }

  public render() {
    const reviews = this.props.reviewIds.map(reviewId => <Review reviewId={reviewId} key={reviewId} />);
    const starIcon = <StarIcon height="39px" color="#A0A8BD" />;

    return (
      <section className="all-reviews">
        <AsyncContent
          isEmpty={this.props.empty}
          isError={this.props.error}
          isLoading={this.props.loading}
          emptyIcon={starIcon}
          emptyMessage={this.props.intl.formatMessage({ id: 'reviews.allReviews.emptyMessage' })}
          errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
          errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
        >
          <section>
            {reviews}

            <Paginator />
          </section>
        </AsyncContent>
      </section>
    );
  }
}

const mapDispatch = {
  fetchReviews,
};

export default connect<SP, DP, {}>(allReviewsSelector, mapDispatch)(injectIntl<BaseProps>(AllReviews));
export { AllReviews as PureAllReviews };
