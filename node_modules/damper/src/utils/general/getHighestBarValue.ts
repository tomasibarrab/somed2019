import { BarType, IBar } from '../../@types/bars';
import { max } from './max';

/**
 * Gets the total value of a stack of bars
 */
const getHighestStackValues = (stackedGroup: any) => {
  const sumRows = (sum: number, row: any) => sum + row.value;
  return stackedGroup.reduce(sumRows, 0);
};

/**
 * Gets the value of a group
 */
const getHighestGroupValue = (group: any) => {
  if (group && (group.values || group.value)) {
    return group.values ? getHighestStackValues(group.values) : group.value;
  }
  return 0;
};

/**
 * Gets the highest value of a single bar.
 * This combines stacked bar values
 */
export const getHigestBarValue = (bars: BarType) => {
  if (bars) {
    return max(bars, (row: IBar) => {
      if (row.group) {
        return max(row.group, getHighestGroupValue);
      }

      if (row.values) {
        return getHighestStackValues(row.values);
      }

      if (typeof row.value === 'number') {
        return row.value;
      }

      if (row.value && row.value.value) {
        return row.value.value;
      }

      return 0;
    });
  }

  return 0;
};
