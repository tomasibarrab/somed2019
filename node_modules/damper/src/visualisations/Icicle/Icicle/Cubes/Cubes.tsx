import React from 'react';
import { AnimateSlideOffset, ISlideProps } from '../../../../components/SlideController';
import { Cube } from '../Cube';
import { IData } from '../Icicle';

interface ICubesProps {
  data: IData[];
  xScale: any;
  yScale: any;
  slideProps?: ISlideProps;
}

const Cubes = ({ data, slideProps, xScale, yScale }: ICubesProps): React.ReactElement<ICubesProps> => {
  const cubeStyle = {
    height: 40,
    width: 40,
  }

  const getXOffset = (id: string) => {
    const offset = xScale(id);

    if (offset) {
      return offset - (cubeStyle.width / 2);
    }

    return 0;
  };

  const getYOffset = () => {
    return cubeStyle.height / 2;
  }

  const getCubeYOffset = (index: number) => {
    return yScale(index) - cubeStyle.height;
  };

  let xOffset = 0;
  let clipPathProps;

  if (slideProps && !slideProps.isDisabled) {
    xOffset = slideProps.offset;
    clipPathProps = {
      clipPath: 'url(#mask)',
    };
  }

  const animateSlideOffsetProps = {
    pose: 'pose',
    poseKey: xOffset,
    xOffset,
  }

  return (
    <g {...clipPathProps}>
      <AnimateSlideOffset {...animateSlideOffsetProps}>
        {data.map(({ values, id }) => {
          return (
            <g key={id} transform={`translate(${getXOffset(id)}, ${getYOffset()})`}>
              {values.map((cube, index) => {
                return (
                  <g key={`${index}--${cube.value}`} transform={`translate(0, ${getCubeYOffset(index)})`}>
                    <Cube
                      cubeStyle={{
                        fill: cube.isBold ? '#BFADF3' : '#E3DCFA',
                      }}
                      key={index}
                      label={cube.label}
                    />
                  </g>
                );
              })}
            </g>
          );
        })}
      </AnimateSlideOffset>
    </g>
  );
};

export { Cubes };
