import React from 'react';
import PropTypes from 'prop-types';

class HighlightHelper extends React.Component {
  static propTypes = {
    activeInnerArea: PropTypes.object.isRequired,
    animation: PropTypes.object.isRequired,
    columns: PropTypes.array.isRequired,
    helper: PropTypes.object.isRequired,
    helperTheme: PropTypes.object.isRequired,
  }

  static defaultProps = {
  }

  renderHelper() {
    const { helper, columns, helperTheme, activeInnerArea } = this.props;
    const { scales, height, top } = activeInnerArea;
    const { offset } = helper;
    const startIndex = columns.findIndex((v) => v.id === helper.start);
    const endIndex = columns.findIndex((v) => v.id === helper.end);
    const startOffsetIndex = columns.findIndex((v) => v.id === offset.min);
    const endOffsetIndex = columns.findIndex((v) => v.id === offset.max);

    const highlightWidth = typeof helper.width === 'undefined' ? -1 : helper.width;

    if (startIndex < 0 || endIndex < 0) {
      return null;
    }
    const xStartLoc = scales.x(startIndex);
    const xEndLoc = scales.x(endIndex);
    const xStartOffsetLoc = (typeof (offset.min) === 'undefined') ? 0 : scales.x(startOffsetIndex);
    const xEndOffsetLoc = (typeof (offset.max) === 'undefined') ? 0 : scales.x(endOffsetIndex);
    const xStartPortion = xStartOffsetLoc === 0 ? 0 : Math.abs(xStartLoc - xStartOffsetLoc) / 2;
    const xEndPortion = xEndOffsetLoc === 0 ? 0 : Math.abs(xEndOffsetLoc - xEndLoc) / 2;
    const portionWidth = xEndLoc + xStartPortion + xEndPortion;

    let width = portionWidth - xStartLoc;
    let x = xStartLoc - xStartPortion;
    /*
      Allow manual definition of width, only if the start index and end index are the same.
    */
    if (highlightWidth > 0 && startIndex !== endIndex) {
      throw new Error('If you wish to use width, the start and end has to be the same');
    }

    if (highlightWidth > 0 && startIndex === endIndex) {
      width = highlightWidth;
      x = (highlightWidth === 1) ? xStartLoc : xStartLoc - (highlightWidth / 2);
    }

    const highlightProps = {
      width,
      height,
      x,
      y: top,
      fill: helperTheme.helpers.area.highlight.fill,
      opacity: helperTheme.helpers.area.highlight.opacity,
      stroke: helperTheme.helpers.area.highlight.stroke,
      strokeWidth: helperTheme.helpers.area.highlight.strokeWidth,
      style: {
        pointerEvents: 'none',
        mixBlendMode: 'multiply',
      },
    };
    return (<rect {...highlightProps} />);
  }

  render() {
    const { helper } = this.props;
    if (!helper.show) {
      return null;
    }

    return this.renderHelper();
  }
}

export { HighlightHelper };
