import React from 'react';
import posed from 'react-pose';

const Rect = React.forwardRef((props, ref) => {
  const defaultProps = {
    actions: {},
    className: '',
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    fill: 'transparent',
    stroke: 'transparent',
    strokeDasharray: 'none',
    style: {},
  };

  const mergedProps = {
    ...defaultProps,
    ...props,
  };

  return (
    <g >
      <rect
        {...mergedProps.actions}
        ref={ref}
        className={mergedProps.className}
        x={mergedProps.x}
        y={mergedProps.y}
        width={mergedProps.width}
        height={mergedProps.height}
        fill={mergedProps.fill}
        stroke={mergedProps.stroke}
        strokeDasharray={mergedProps.strokeDasharray}
        style={mergedProps.style}
      />
    </g>
  );
});

const AnimatedRect = posed(Rect)({
  enter: {
    // flip: true,
    height: ({ rectPoseVals }) => rectPoseVals.height || 0,
    y: ({ rectPoseVals }) => rectPoseVals.y,
    delay: ({ rectPoseVals }) => {
      if (rectPoseVals.index) {
        return rectPoseVals.index * 200;
      }
      return 0;
    },
    transition: {
      easing: 'linear',
      duration: 200,
    },
  },
  exit: {
    // flip: true,
    height: () => 0,
    y: ({ rectPoseVals }) => rectPoseVals.y + rectPoseVals.height,
    delay: ({ rectPoseVals }) => {
      if (rectPoseVals.index) {
        return rectPoseVals.index * 200;
      }
      return 0;
    },
    transition: {
      easing: 'linear',
      duration: 200,
    },
  },
  pose: {
    // flip: true,
    height: ({ rectPoseVals }) => rectPoseVals.height,
    y: ({ rectPoseVals }) => rectPoseVals.y,
    transition: {
      easing: 'easeInOut',
      duration: 200,
    },
  },
});

export { Rect, AnimatedRect };

