import React from 'react';
import posed from 'react-pose';
import { spring } from 'popmotion';
import { interpolatePath } from 'd3-interpolate-path';
import { generatePathData } from '../../utils';

const springMorphTransition = ({ from, to }) => spring({
  from: 0,
  to: 1,
  stiffness: 210,
  damping: 20,
}).pipe(interpolatePath(from, to));

const Path = React.forwardRef((props, ref) => {
  const defaultProps = {
    id: '',
    ref: null,
    onClick: null,
    onMouseMove: null,
    onMouseOver: null,
    onMouseOut: null,
  };

  const mergedProps = {
    ...defaultProps,
    ...props,
  };

  const {
    d,
    style,
    id,
    onClick,
    onMouseMove,
    onMouseOver,
    onMouseOut,
  } = mergedProps;

  const pathProps = {
    d,
    id,
    style,
    onClick,
    onMouseMove,
    onMouseOver,
    onMouseOut,
    ref,
  };

  return <path {...pathProps} />;
});


const AnimatedPath = posed(Path)({
  enter: {
    d: ({ posePathVal }) => generatePathData(posePathVal.data, posePathVal.theme),
    delay: ({ posePathVal }) => posePathVal.index * posePathVal.theme.area.pose.enter.delay,
    transition: springMorphTransition,
  },
  pose: {
    d: ({ posePathVal }) => generatePathData(posePathVal.data, posePathVal.theme),
    transition: springMorphTransition,
  },
  exit: {
    d: ({ posePathVal }) => {
      const emptyPathData = posePathVal.data.map((d) => ({
        ...d,
        style: {
          ...d.style,
          y0: d.style.y1,
        },
      }));

      return generatePathData(emptyPathData, posePathVal.theme);
    },
    delay: ({ posePathVal }) => posePathVal.index * posePathVal.theme.area.pose.exit.delay,
    transition: springMorphTransition,
  },
});

export { Path, AnimatedPath };
