/**
 * The AsyncState type is an object with a `status` of AsyncStatus type
 * and a (customizable) `data` property of type <T>.
 * The FailedState sub-type also holds the error of the async state.
 */
type init = 'init';
type started = 'started';
type done = 'done';
type failed = 'failed';

export type AsyncStatus = init | started | done | failed;

// use the dynamically prop P, with a value of T, defaulted to undefined
type DynamicProp<P extends string, T = undefined> = {
  [key in P]: T;
}

type InitState<P extends string> = { status: init; } & DynamicProp<P>;
type StartedState<P extends string> = { status: started; } & DynamicProp<P>;
type DoneState<T, P extends string> = { status: done; } & DynamicProp<P, T>
type FailedState<P extends string> = { status: failed; error: any; } & DynamicProp<P>;


export type AsyncState<DataType = undefined, DataProp extends string = 'data'> =
  InitState<DataProp>
  | StartedState<DataProp>
  | DoneState<DataType, DataProp>
  | FailedState<DataProp>;
