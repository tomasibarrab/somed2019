import React from 'react';
import { storiesOf } from '@storybook/react';
import { DropdownSelect } from './src/index';
import { components } from 'react-select';

interface CustomOptionType {
  label: string;
  value: number;
  email: string;
  options: any;
  isDisabled?: boolean;
}

interface CustomOptGroupType {
  label: string;
  options: CustomOptionType[];
}

interface WrapperProps {
  selectedState?: CustomOptionType;
  option?: (props: any) => JSX.Element;
  options?: CustomOptionType[] | CustomOptGroupType[];
  className?: string;
  isDisabled?: boolean;
  multiSelect: boolean;
  isSearchable: boolean;
}

interface WrapperState {
  isOpen: boolean;
  options: CustomOptionType[] | CustomOptGroupType[];
  selectedOption: CustomOptionType | CustomOptionType[] | undefined;
}

const scaryAnimals: CustomOptionType[] = [
  { label: 'John A', value: 1, email: 'john@test1.com', options: {} },
  { label: 'John B', value: 2, email: 'john@test2.com', options: {} },
  { label: 'John C', value: 3, email: 'john@test3.com', options: {} },
  { label: 'John D', value: 4, email: 'john@test4.com', options: {} },
  { label: 'John E', value: 5, email: 'john@test5.com', options: {} },
  { label: 'John F', value: 6, email: 'john@test6.com', options: {} },
  { label: 'John G', value: 7, email: 'john@test7.com', options: {} },
  { label: 'John H', value: 8, email: 'john@test8.com', options: {} }
];

const defaultState: CustomOptionType[] = [];

class DropdownWrapper extends React.Component<WrapperProps, WrapperState> {
  state: WrapperState = {
    isOpen: false,
    options: this.props.options || scaryAnimals,
    selectedOption: undefined
  };

  static defaultProps: Partial<WrapperProps> = {
    multiSelect: false,
    isSearchable: true
  };

  onChange = (value: any) => {
    this.setState({ selectedOption: value });
    console.log('selected state is ' + JSON.stringify(value));
  };

  render() {
    return (
      <div>
        <DropdownSelect
          className={this.props.className}
          components={this.props.option ? { Option: this.props.option } : undefined}
          onChange={this.onChange}
          defaultValue={this.props.selectedState}
          value={this.state.selectedOption}
          placeholder="select approver"
          options={this.state.options}
          isDisabled={this.props.isDisabled}
          isSearchable={this.props.isSearchable}
          isMulti={this.props.multiSelect}
          closeMenuOnSelect={!this.props.multiSelect}
        />
      </div>
    );
  }
}

const Option = (props: any) => {
  return (
    <components.Option {...props}>
      <div>{props.data.label}</div>
      <div>{props.data.email}</div>
    </components.Option>
  );
};

storiesOf('Select', module).add('without initial selected state ', () => {
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper />
    </div>
  );
});

storiesOf('Select', module).add('with selected initial state', () => {
  const selectedState = { label: 'John C', value: 3, email: 'john@test2.com', options: {} };
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper selectedState={selectedState} />
    </div>
  );
});

storiesOf('Select', module).add('with custom option component', () => {
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper option={Option} />
    </div>
  );
});

storiesOf('Select', module).add('with selected custom css class', () => {
  const selectedState = { label: 'John C', value: 3, email: 'john@test2.com', options: {} };
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper selectedState={selectedState} className="react-select-custom-style" />
    </div>
  );
});

storiesOf('Select', module).add('with disabled input', () => {
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper isDisabled={true} />
    </div>
  );
});

storiesOf('Select', module).add('with disabled items', () => {
  const options = scaryAnimals.map(item => {
    if ([2, 4, 5].includes(item.value)) {
      return { ...item, isDisabled: true };
    }
    return item;
  });

  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper options={options} />
    </div>
  );
});

storiesOf('Select', module).add('with option groups', () => {
  const options: CustomOptGroupType[] = [
    { label: 'Group 1', options: scaryAnimals.slice(0, 3) },
    { label: 'Group 2', options: scaryAnimals.slice(3) }
  ];

  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper options={options} />
    </div>
  );
});

storiesOf('Select', module).add('with multi-select', () => {
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper multiSelect={true} />
    </div>
  );
});

storiesOf('Select', module).add('without search for shorter list', () => {
  return (
    <div style={{ width: '400px', margin: '10px' }}>
      <DropdownWrapper options={scaryAnimals.slice(0, 3)} isSearchable={false} />
    </div>
  );
});
