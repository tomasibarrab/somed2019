import { resolveScope, getScope } from './ScopeService';

const restaurantScope = {
  id: 123,
  type: 'restaurant'
};

const groupScope = {
  id: 234,
  type: 'group'
};

const noScope = {
  type: 'none'
};

describe('ScopeService', () => {
  describe('resolveScope', () => {
    it('should resolve to NoScope when no context is provided', () => {
      expect(resolveScope(null)).toMatchObject(noScope);
    });

    it('should resolve to NoScope when context without gcScope is provided', () => {
      expect(resolveScope({})).toMatchObject(noScope);
    });

    it('should resolve to RestaurantScope when restaurant gcScope is provided', () => {
      expect(resolveScope({ gcScope: restaurantScope })).toMatchObject(restaurantScope);
    });

    it('should resolve to GroupScope when group gcScope is provided', () => {
      expect(resolveScope({ gcScope: groupScope })).toMatchObject(groupScope);
    });

    it('should resolve to NoScope when a non-numeric id is provided', () => {
      expect(resolveScope({ gcScope: { id: 'cat', type: 'restaurant' } })).toMatchObject(noScope);
    });

    it('should resolve to NoScope when an unrecognized type is provided', () => {
      expect(resolveScope({ gcScope: { id: 123, type: 'dog' } })).toMatchObject(noScope);
    });

    it('should return a new object for every call', () => {
      const scope1 = resolveScope({ gcScope: restaurantScope });
      const scope2 = resolveScope({ gcScope: restaurantScope });
      expect(scope1).toMatchObject(scope2);
      expect(scope1).not.toBe(scope2);
    });
  });

  describe('getScope', () => {
    beforeAll(() => {
      (window as any).gcScope = restaurantScope;
    });

    it('should get scope for window.gcScope', () => {
      expect(getScope()).toMatchObject(restaurantScope);
    });
  });
});
