import React from 'react';
import { CheckboxFilter, BaseProps } from './CheckboxFilter';
import { CheckboxItem } from '../types';
import { getSelectedOptions } from '../utils/getSelectedOptions';

interface GlobalToggleState {
  state: string;
}

interface State {
  options: Array<CheckboxItem>;
  globalToggle: GlobalToggleState;
  searchString: string;
}

interface StatefulProps extends BaseProps {
  onChange(type: string, id: string, selectedOptions: Array<string>, changes: any): void;
}

export class CheckboxFilterWithState extends React.Component<StatefulProps, State> {
  state = {
    options: this.props.options,
    globalToggle: {
      state: 'unchecked'
    },
    searchString: ''
  };

  componentDidMount() {
    this.initializeState();
  }

  initializeState = () => {
    this.setState(prevState => {
      const newOptions = prevState.options.map(option => {
        if (option.options) {
          const state = this.getGlobalState(option.options);
          return {
            ...option,
            state
          };
        } else if (option.state === 'partial' && !option.options) {
          return {
            ...option,
            state: 'checked'
          };
        }

        return option;
      });

      return {
        ...prevState,
        options: newOptions,
        globalToggle: {
          state: this.getGlobalState(newOptions)
        }
      };
    });
  };

  broadcastOptions = (type: string, id: string, selectedOptions: Array<string>, options: Array<CheckboxItem>) => {
    this.props.onChange(type, id, selectedOptions, options);
  };

  // Is the option.state checked across all checkboxes?
  isAllChecked = (options: Array<CheckboxItem>) =>
    options.every((option: CheckboxItem) => {
      if (option && option.state === 'checked') {
        if (option.options) {
          return option.options.every(nestedOption => nestedOption.state === 'checked');
        }

        return true;
      }

      return false;
    });

  isPartialChecked = (options: Array<CheckboxItem>) =>
    options.some((option: CheckboxItem) => {
      if (option.state === 'checked') {
        return true;
      }

      if (option.options) {
        return option.options.some(nestedOption => nestedOption.state === 'checked');
      }

      return false;
    });

  getGlobalState = (options: Array<CheckboxItem>) => {
    let state = 'unchecked';

    if (this.isPartialChecked(options)) {
      state = 'partial';
    }

    if (this.isAllChecked(options)) {
      state = 'checked';
    }

    return state;
  };

  toggleAllOptions = () => {
    this.setState((prevState: State) => {
      const state = this.isAllChecked(prevState.options) ? 'unchecked' : 'checked';

      const newOptions = prevState.options.map((option: CheckboxItem) => {
        const newOption = {
          ...option,
          state
        };

        // If the option has nested options, toggle them as well
        if (newOption.options) {
          newOption.options = newOption.options.map(nestedOption => ({
            ...nestedOption,
            state
          }));
        }

        return newOption;
      });

      const selectedOptions = getSelectedOptions(newOptions);

      this.broadcastOptions('toggle', 'global', selectedOptions, newOptions);

      return {
        ...prevState,
        options: newOptions,
        globalToggle: {
          ...prevState.globalToggle,
          state
        }
      };
    });
  };

  toggleGlobalCheckboxExpansion = () => {
    const { options } = this.state;
    let isCollapsed = false;

    // if all open, collapse all
    if (options.every(option => option.isCollapsed === false)) {
      isCollapsed = true;
    }

    return this.setState((prevState: State) => {
      const newOptions = prevState.options.map(option => {
        return {
          ...option,
          isCollapsed
        };
      });

      return {
        ...prevState,
        options: newOptions
      };
    });
  };

  getCheckboxState = (option: CheckboxItem, checkedBoxId: string | undefined) => {
    const isClickedOption = option.id === checkedBoxId;

    // Checkbox click (without options)
    if (isClickedOption && !option.options) {
      if (option.state === 'unchecked' || option.state === 'partial' || !option.state) {
        return {
          ...option,
          state: 'checked'
        };
      }

      return {
        ...option,
        state: 'unchecked'
      };
    }

    // Checkbox click (parent of nested options)
    if (isClickedOption && option.options) {
      const state = this.isAllChecked(option.options) ? 'unchecked' : 'checked';

      return {
        ...option,
        state,
        options: option.options.map(nestedOption => ({
          ...nestedOption,
          state
        }))
      };
    }

    // Nested option click
    const optionIsNested = Boolean(
      option.options && option.options.find(nestedOption => nestedOption.id === checkedBoxId)
    );
    if (Array.isArray(option.options) && optionIsNested) {
      const newOptions = option;

      newOptions.options = option.options.map(nestedOption => {
        if (nestedOption.id === checkedBoxId) {
          if (nestedOption.state === 'unchecked' || nestedOption.state === 'partial') {
            return {
              ...nestedOption,
              state: 'checked'
            };
          }

          return {
            ...nestedOption,
            state: 'unchecked'
          };
        }

        return nestedOption;
      });

      // Set the parent state
      newOptions.state = 'unchecked';

      if (this.isPartialChecked(newOptions.options)) {
        newOptions.state = 'partial';
      }

      if (this.isAllChecked(newOptions.options)) {
        newOptions.state = 'checked';
      }

      return newOptions;
    }

    return option;
  };

  toggleCheckbox = (id: string) => {
    if (id === 'global') {
      return this.toggleAllOptions();
    }

    return this.setState((prevState: any) => {
      const newOptions = prevState.options.map((option: CheckboxItem) => this.getCheckboxState(option, id));
      const selectedOptions = getSelectedOptions(newOptions);

      this.broadcastOptions('toggle', id, selectedOptions, newOptions);

      return {
        ...prevState,
        options: newOptions,
        globalToggle: {
          ...prevState.globalToggle,
          state: this.getGlobalState(newOptions)
        }
      };
    });
  };

  toggleCheckboxExpansion = (id: string) => {
    if (id === 'global') {
      return this.toggleGlobalCheckboxExpansion();
    }

    return this.setState(prevState => {
      const newOptions = prevState.options.map(option => {
        if (option.id === id) {
          let isCollapsed = true;

          if (option.isCollapsed) {
            isCollapsed = false;
          }

          return {
            ...option,
            isCollapsed
          };
        }

        return option;
      });

      return {
        ...prevState,
        options: newOptions
      };
    });
  };

  searchTextChange = (query: string) => {
    this.setState({
      searchString: query
    });
  };

  render() {
    let toggleOptions;

    if (this.props.toggleAll && this.props.toggleAll.isVisible) {
      toggleOptions = {
        ...this.props.toggleAll,
        state: this.state.globalToggle.state
      };
    }

    return (
      <CheckboxFilter
        applyLabel={this.props.applyLabel}
        options={this.state.options}
        toggleAll={toggleOptions}
        onClick={this.toggleCheckbox}
        onToggleClick={this.toggleCheckboxExpansion}
        onApply={this.props.onApply}
        searchable={this.props.searchable}
        searchPlaceholderText={this.props.searchPlaceholderText}
        searchString={this.state.searchString}
        searchFilter={this.props.searchFilter}
        onSearchTextChange={this.searchTextChange}
      />
    );
  }
}
