import React, { useState, useEffect } from 'react';
import { storiesOf } from '@storybook/react';
import { withKnobs, boolean, select, text } from '@storybook/addon-knobs';
import { withReadme } from 'storybook-readme';

import { Input, InputWithIcon, LabeledInput, LabeledTextArea, TextArea } from './src';
import LabeledReadme from './README-labeled-input.md';

interface WrapperRenderProps {
  value: string;
  onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void;
  errorText?: string;
}

interface WrapperProps {
  initialValue?: string;
  render(renderProps: WrapperRenderProps): React.ReactNode;
}

interface ValidatorWrapperProps extends WrapperProps {
  validator: (value: string) => boolean;
  errorMessage?: string;
}

const ValueWrapper = ({ initialValue = '', render }: WrapperProps) => {
  const [value, setValue] = useState(initialValue);

  function onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {
    setValue(e.currentTarget.value);
  }

  return <div style={{ marginBottom: '32px' }}>{render({ value, onChange })}</div>;
};

const ValidatedInputWrapper = ({ initialValue = '', render, validator, errorMessage }: ValidatorWrapperProps) => {
  const [value, setValue] = useState(initialValue);
  const [errorText, setErrorText] = useState();

  function onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {
    const newValue = e.currentTarget.value;
    setValue(newValue);
    setErrorText(!validator(newValue) ? errorMessage : undefined);
  }

  useEffect(() => {
    if (errorMessage !== errorText) {
      if (errorText) {
        setErrorText(errorMessage);
      } else {
        setErrorText(!validator(value) ? errorMessage : undefined);
      }
    }
  }, [errorMessage]);

  return <div style={{ marginBottom: '32px' }}>{render({ value, onChange, errorText })}</div>;
};

const inputStories = storiesOf('Input', module);

inputStories.add('Basic Example', () => (
  <div
    style={{
      width: '300px',
      padding: '16px'
    }}
  >
    <ValueWrapper
      initialValue=""
      render={({ onChange, value }) => <Input onChange={onChange} value={value} valid placeholder="Placeholder..." />}
    />
    <ValueWrapper
      initialValue="Regular"
      render={({ onChange, value }) => <Input onChange={onChange} value={value} valid />}
    />
    <ValueWrapper
      initialValue="Disabled"
      render={({ onChange, value }) => <Input onChange={onChange} value={value} valid disabled />}
    />
    <ValueWrapper
      initialValue="Invalid"
      render={({ onChange, value }) => <Input onChange={onChange} value={value} valid={false} errorText="Invalid" />}
    />
    <ValueWrapper
      initialValue="Custom Class"
      render={({ onChange, value }) => <Input onChange={onChange} value={value} valid className="customClass" />}
    />
  </div>
));

inputStories.add('Input With Icon', () => (
  <div
    style={{
      width: '300px',
      padding: '16px'
    }}
  >
    <ValueWrapper
      initialValue=""
      render={({ onChange, value }) => (
        <InputWithIcon onChange={onChange} value={value} valid placeholder="Search..." />
      )}
    />
  </div>
));

inputStories
  .addDecorator(withKnobs)
  .addDecorator(withReadme(LabeledReadme))
  .add('Input With Label', () => {
    const type = select('Type', ['text', 'password'], 'text');
    const state = select('State', ['default', 'error', 'success'], 'default');
    const showStatusText = boolean('Show status text', true);
    const statusText = text('Status text', 'Input info goes here...');
    const disabled = boolean('Disabled', false);

    return (
      <div style={{ width: '300px', padding: '16px' }}>
        <p style={{ marginBottom: '24px' }}>Controlled by knobs</p>
        <ValueWrapper
          render={({ value, onChange }) => (
            <LabeledInput
              type={type}
              label={type === 'password' ? 'Password' : 'Name'}
              value={value}
              onBlur={onChange}
              onChange={onChange}
              state={state}
              statusText={showStatusText ? statusText : ''}
              disabled={disabled}
            />
          )}
        />
        <p style={{ margin: '48px 0 24px' }}>Labeled input with validation</p>
        <ValidatedInputWrapper
          render={({ value, onChange, errorText }) => (
            <LabeledInput
              type="text"
              label="Username"
              value={value}
              onBlur={onChange}
              onChange={onChange}
              state={errorText ? 'error' : 'default'}
              statusText={errorText}
            />
          )}
          validator={value => value.length > 2 && value.length < 11}
          errorMessage={'Value must be between 3 and 10 characters'}
        />
      </div>
    );
  });

inputStories.add('Basic Textarea', () => (
  <div
    style={{
      width: '300px',
      padding: '16px'
    }}
  >
    <ValueWrapper
      initialValue="Regular"
      render={({ onChange, value }) => <TextArea onChange={onChange} value={value} valid />}
    />
    <ValueWrapper
      initialValue="Disabled"
      render={({ onChange, value }) => <TextArea onChange={onChange} value={value} valid disabled />}
    />
    <ValueWrapper
      initialValue="Invalid"
      render={({ onChange, value }) => <TextArea onChange={onChange} value={value} valid={false} errorText="Invalid" />}
    />
    <ValueWrapper
      initialValue="Custom Class"
      render={({ onChange, value }) => <TextArea onChange={onChange} value={value} valid className="customClass" />}
    />
  </div>
));

inputStories.add('TextArea With Label', () => (
  <div
    style={{
      width: '300px',
      padding: '16px'
    }}
  >
    <ValueWrapper
      initialValue=""
      render={({ onChange, value }) => <LabeledTextArea label="Name" onChange={onChange} value={value} />}
    />
    <ValueWrapper
      initialValue="Keanu Reeves"
      render={({ onChange, value }) => <LabeledTextArea label="Name" onChange={onChange} value={value} />}
    />
    <ValueWrapper
      initialValue="Disabled"
      render={({ onChange, value }) => (
        <LabeledTextArea label="Name" onChange={onChange} value={value} state="disabled" />
      )}
    />
    <ValueWrapper
      initialValue="Keanu Reeves"
      render={({ onChange, value }) => (
        <LabeledTextArea label="Name" onChange={onChange} value={value} statusText="Information about this input" />
      )}
    />
    <ValueWrapper
      initialValue="Keanu Reeves"
      render={({ onChange, value }) => (
        <LabeledTextArea label="Name" onChange={onChange} value={value} state="error" statusText="Validation failed" />
      )}
    />
    <ValueWrapper
      initialValue="Keanu Reeves"
      render={({ onChange, value }) => (
        <LabeledTextArea
          label="Name"
          onChange={onChange}
          value={value}
          state="success"
          statusText="Validation Succeeded"
        />
      )}
    />
  </div>
));
