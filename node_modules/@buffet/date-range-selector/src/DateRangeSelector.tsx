import React from 'react';
import moment from 'moment';
import './initDateRangeTheme';
import { DayPickerRangeController, DayPickerRangeControllerShape } from 'react-dates';
import { RadioButtonGroup } from '@buffet/radio-button';
import classNames from 'classnames/bind';
import styles from './DateRangeSelector.css';

const cx = classNames.bind(styles);

interface ButtonProps {
  id: string;
  label: string;
  action(e: any): void;
}

interface RadioButtonProps {
  value: string;
  label: React.ReactNode;
  disabled?: boolean;
}

export interface DateRangeSelectorProps {
  applyButton?: ButtonProps;
  updateFocusedDate: (focusedInput: string) => void;
  updateDate: (startDate: any, endDate: any) => void;
  startDate?: moment.Moment;
  endDate?: moment.Moment;
  startDateOffset?: () => void;
  endDateOffset?: () => void;
  locale?: string;
  startRange?: moment.Moment;
  endRange?: moment.Moment;
  displayMonths?: number;
  focusedDate?: any;
  title?: string;
  buttons?: ButtonProps[];
  radioButtons?: RadioButtonProps[];
  selectedRadioButton?: string;
  onRadioButtonChange?: (selectedButtonValue: string) => void;
  dateRangeRules?: any;
  showSelectedDates?: boolean;
  today?: moment.Moment;
}

export class DateRangeSelector extends React.Component<DateRangeSelectorProps> {
  static defaultProps = {
    displayMonths: 2,
    buttons: [],
    showSelectedDates: true,
    dateRangeRules: {
      unit: null,
      inclusivity: '()' // momentjs default
    }
  };

  handleDateChange = (date: any) => {
    const { startDate, endDate } = date;
    // Check if end date is the same day (if so it is returned as null)
    // if so set it to the same as startDate
    const matchedDate = endDate !== null ? endDate : startDate;
    this.props.updateDate(startDate, matchedDate);
  };

  isOutsideRange = (day: any) =>
    !day.isBetween(
      this.props.startRange,
      this.props.endRange,
      this.props.dateRangeRules.unit,
      this.props.dateRangeRules.inclusivity
    );

  handleFocusChange = (input: any) => {
    const focusedInput = input === null || input === 'startDate' ? 'startDate' : 'endDate';
    this.props.updateFocusedDate(focusedInput);
  };

  isSameDay = (day: any) => {
    let today = moment();
    if (this.props.today && moment(this.props.today).isValid()) {
      today = moment(this.props.today);
    }
    return today.isSame(day, 'day');
  };

  render() {
    // Props specific to the airbnb datepicker component
    // https://github.com/airbnb/react-dates#daypickerrangecontroller
    let dayPickerProps: DayPickerRangeControllerShape = {
      minimumNights: 0,
      noBorder: true,
      numberOfMonths: this.props.displayMonths,
      startDate: this.props.startDate ? this.props.startDate : moment.utc(),
      endDate: this.props.endDate ? this.props.endDate : moment.utc(),
      startDateOffset: this.props.startDateOffset,
      endDateOffset: this.props.endDateOffset,
      focusedInput: this.props.focusedDate ? this.props.focusedDate : 'startDate',
      onDatesChange: this.handleDateChange,
      onFocusChange: this.handleFocusChange,
      isDayHighlighted: this.isSameDay,
      hideKeyboardShortcutsPanel: true
    };

    // If start and end range are provided, include them with the
    // daypickerProps to create range
    if (this.props.startRange && this.props.endRange) {
      dayPickerProps = {
        ...dayPickerProps,
        isOutsideRange: this.isOutsideRange
      };
    }

    const locale = this.props.locale ? this.props.locale : 'en-US';

    return (
      <div className={cx('date-selection')}>
        {(this.props.title || this.props.showSelectedDates) && (
          <div className={cx('header')}>
            {this.props.title && <div className={cx('title')}>{this.props.title}</div>}
            {this.props.radioButtons &&
              this.props.selectedRadioButton &&
              this.props.onRadioButtonChange && (
                <RadioButtonGroup
                  childProvider={this.props.radioButtons}
                  onChange={this.props.onRadioButtonChange}
                  selectedValue={this.props.selectedRadioButton}
                  className={cx('radiobutton-list')}
                  radioOptionClassName={cx('radiobutton')}
                />
              )}
            {this.props.showSelectedDates && (
              <div className={cx('selected-dates')}>
                <button
                  className={cx('start-date', this.props.focusedDate === 'startDate' ? 'is-active' : '')}
                  onClick={() => this.handleFocusChange('startDate')}
                >
                  {this.props.startDate && this.props.startDate.locale(locale).format('L')}
                </button>
                <span className={cx('seperator')}>-</span>
                <button
                  className={cx('end-date', this.props.focusedDate === 'endDate' ? 'is-active' : '')}
                  onClick={() => this.handleFocusChange('endDate')}
                >
                  {this.props.endDate && this.props.endDate.locale(locale).format('L')}
                </button>
              </div>
            )}
          </div>
        )}
        {this.props.buttons &&
          this.props.buttons.length > 0 && (
            <div className={cx('button-list')}>
              {this.props.buttons.map(button => (
                <button key={button.id} onClick={() => button.action(button)} className={cx('button-list-item')}>
                  {button.label}
                </button>
              ))}
            </div>
          )}
        <div className={cx('daterange-wrapper')}>
          <DayPickerRangeController {...dayPickerProps} />
        </div>
        {this.props.applyButton && (
          <div className={cx('apply-wrapper')}>
            <button className={cx('apply-button')} onClick={this.props.applyButton.action}>
              {this.props.applyButton.label}
            </button>
          </div>
        )}
      </div>
    );
  }
}
