import React from 'react';
import { TextArea, Props } from './textarea';
import { render, wait, fireEvent } from 'react-testing-library';
import { IntlProvider } from '@buffet/intl';

async function renderScenario(props: Partial<Props>) {
  const {
    valid = true,
    min = 0,
    max = Infinity,
    showLabels = true,
    onChange,
    value,
    placeholder = 'Test textarea'
  } = props;

  const result = render(
    <IntlProvider>
      <TextArea {...props} />
    </IntlProvider>
  );
  await wait();
  return result;
}

describe('TextArea', async () => {
  it('Should show the rendered textarea', async () => {
    const { container } = await renderScenario({});
    expect(container.firstChild).toMatchSnapshot();
  });

  it('Should show the minimum label for textarea', async () => {
    const { getByText } = await renderScenario({ min: 100, max: 1000 });
    expect(getByText('100', { exact: false })).toBeTruthy();
  });

  it('Should show textarea with no labels', async () => {
    const { queryByTestId } = await renderScenario({ showLabels: false });
    expect(queryByTestId('gcaTextAreaCounter')).toBeNull();
  });

  // TODO: Fix this test when we migrate react-testing-library to latest version
  it('Should trigger onChange for textarea', async () => {
    const mockOnChange = jest.fn();
    const { getByTestId } = await renderScenario({ onChange: mockOnChange });
    expect(getByTestId('gcaTextArea')).toBeTruthy();

    const textArea = getByTestId('gcaTextArea') as HTMLTextAreaElement;
    fireEvent.change(textArea, {
      target: { value: 'Test the textarea.' }
    });
    expect(mockOnChange).toBeCalledWith('Test the textarea.');
  });

  // TODO: Fix this test when we migrate react-testing-library to latest version
  it('Should render textarea even if onChange is absent', async () => {
    const { getByTestId } = await renderScenario({ value: 'Test the textarea.' });
    expect(getByTestId('gcaTextArea')).toBeTruthy();

    const textArea = getByTestId('gcaTextArea') as HTMLTextAreaElement;
    fireEvent.change(textArea, {
      target: { value: 'Test the textarea.' }
    });
  });
});
