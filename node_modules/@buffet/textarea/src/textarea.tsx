import React from 'react';
import classNames from 'classnames/bind';
import { registerMessages } from '@buffet/intl';
import { FormattedMessage } from 'react-intl';
import styles from './textarea.css';

const cx = classNames.bind(styles);

export const langLocales = [
  'ca-ES',
  'de-CH',
  'de-DE',
  'en-AU',
  'en-GB',
  'en-IE',
  'en-US',
  'es-ES',
  'es-MX',
  'fr-CA',
  'fr-FR',
  'it-IT',
  'ja-JP',
  'nl-NL',
  'pt-BR',
  'zh-CN'
];

const messages = langLocales.reduce((acc: any, langLocale: any) => {
  acc[langLocale] = require(`../translations/${langLocale}/textarea.json`);
  return acc;
}, {});

registerMessages(messages);

export interface Props extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  max?: number;
  min?: number;
  showLabels?: boolean;
  valid?: boolean;
  value?: string;
}

export class TextArea extends React.Component<Props> {
  static defaultProps = {
    max: Infinity,
    min: 0,
    showLabels: true,
    valid: true
  };

  constructor(props: Props) {
    super(props);
    this.onChange = this.onChange.bind(this);
  }

  onChange(e: any) {
    /* istanbul ignore next */
    if (this.props.onChange !== undefined) {
      this.props.onChange(e.target.value);
    }
  }

  render() {
    const { min, max, valid, className, showLabels, value, ...rest } = this.props;
    const classNames = cx('container', className, { invalid: !valid });
    const shouldShowMinChars = min !== undefined && min > 0;

    return (
      <div className={classNames}>
        <textarea
          className={cx('textarea')}
          data-testid="gcaTextArea"
          {...rest}
          value={value}
          onChange={this.onChange}
        />
        {showLabels && (
          <div className={cx('labelRow')}>
            {shouldShowMinChars && (
              <div data-testid="gcaTextAreaMin" className={cx('min')}>
                <FormattedMessage id="textarea.minimum" values={{ chars: min }} />
              </div>
            )}
            <div data-testid="gcaTextAreaCounter" className={cx('counter')}>
              <span className={cx('currentCount')}>{value ? value.length : '0'}</span> / {max === Infinity ? 'âˆž' : max}
            </div>
          </div>
        )}
      </div>
    );
  }
}
