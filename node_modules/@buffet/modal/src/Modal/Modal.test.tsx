import React from 'react';
import { render, fireEvent } from 'react-testing-library';
import { ModalType } from '../types';
import Window from '../Window/Window';

import Modal from './Modal';


test('Should render a Modal with an Overlay inside a Portal', async () => {
  const result = render(
    <Modal open={true} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should not render a closed Modal', async () => {
  const result = render(
    <Modal open={false} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should not render outside a document', async () => {
  const result = render(
    <Modal open={false} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: undefined }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should request a close when the X button is clicked', async () => {
  const onClick = jest.fn();

  const result = render(
    <Modal open={true} onCloseRequest={onClick}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  const closeButton = result.getByRole('button');
  fireEvent.click(closeButton);

  expect(onClick).toHaveBeenCalled();
});


test('Should render a non-dismissible Modal', async () => {
  const result = render(
    <Modal open={true} onCloseRequest={() => {}} preventClose={true}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render a Modal with a default title', async () => {
  const result = render(
    <Modal open={true} onCloseRequest={() => {}} title="Modal test title">
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render a Modal with an Acknowledge button', async () => {
  const onOk = jest.fn();

  const result = render(
    <Modal open={true} onCloseRequest={() => {}} acknowledgeLabel="OK" onAcknowledge={onOk}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();

  const closeButton = result.getByText('OK');
  fireEvent.click(closeButton);

  expect(onOk).toHaveBeenCalled();
});

test('Should render a Modal with a Dismiss button', async () => {
  const onCancel = jest.fn();

  const result = render(
    <Modal open={true} onCloseRequest={() => {}} dismissLabel="cancel" onDismiss={onCancel}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();

  const closeButton = result.getByText('cancel');
  fireEvent.click(closeButton);

  expect(onCancel).toHaveBeenCalled();
});

test('Should render a Prompt Modal', async () => {
  const result = render(
    <Modal open={true} type={ModalType.prompt} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render a Fullscreen Modal', async () => {
  const result = render(
    <Modal open={true} type={ModalType.fullscreen} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render a Fullscreen Modal with Auto-Height', async () => {
  const result = render(
    <Modal open={true} type={ModalType.fullscreen} fullscreenAutoHeight={true} onCloseRequest={() => {}}>
      <p>test</p>
    </Modal>,
    { container: document.body }
  );

  expect(result.container.firstChild).toMatchSnapshot();
});
