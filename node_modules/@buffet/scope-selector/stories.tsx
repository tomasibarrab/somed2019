import React from 'react';
import { IntlProvider } from '@buffet/intl';
import { storiesOf } from '@storybook/react';
import { withReadme } from 'storybook-readme';
import { CurrentRestaurantProvider } from '@buffet/current-restaurant-context';
import { CurrentUserProvider } from '@buffet/current-user-context';
import { FeatureToggleProvider } from '@buffet/feature-toggle-context';
import { ScopeSelectorProvider, ScopeSelectorView } from './src/index';
import mock, { delay } from 'xhr-mock';
import restaurantContextFixture from '../current-restaurant-context/fixtures/restaurantContext';
import userContextFixture from '../current-user-context/fixtures/userContext';
import restaurantSearchFixture from './fixtures/restaurantSearch';
import restaurantSearchSmallFixture from './fixtures/restaurantSearch_small';
import groupSearchFixture from './fixtures/groupSearch';
import groupSearchFixtureA from './fixtures/groupSearch_a';
import README from './README.md';

class ScopeSelectorStory extends React.Component {
  render() {
    // (window as any).gcScope = {
    //   id: 1906,
    //   type: 'restaurant'
    // };

    (window as any).gcScope = {
      type: 'none'
    };

    // const featureToggles = ['globalScopeSelectorIncludeGroups'];
    const featureToggles = ['foo'];

    const noGroupsResponse = {
      items: [],
      pageSize: 5,
      pageIndex: 0,
      totalPages: 1,
      totalResults: 0
    };

    mock.setup();

    mock.get('/gateway/proxies/featureManager/v3/api/restaurant/1906/toggles', {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(featureToggles)
    });

    mock.get('/gateway/proxies/featureManager/v3/api/globalToggle/globalScopeSelectorIncludeGroups', {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ enabled: true })
    });

    mock.get('/gateway/proxies/gcrestaurant/api/restaurants/1906', {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(restaurantContextFixture)
    });

    mock.get('/gateway/proxies/gcrestaurant/api/userContext', {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userContextFixture)
    });

    mock.get(
      '/gateway/proxies/rgsearch/api/v2/groups?pageSize=5',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(groupSearchFixture)
        },
        2000
      )
    );

    mock.get(
      '/gateway/proxies/rgsearch/api/v2/groups?pageSize=5&query=a',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(groupSearchFixtureA)
        },
        2000
      )
    );

    mock.get(
      '/gateway/proxies/rgsearch/api/v2/restaurants',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(restaurantSearchSmallFixture)
        },
        1500
      )
    );

    mock.get(
      '/gateway/proxies/rgsearch/api/v2/restaurants?query=a',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(restaurantSearchFixture)
        },
        1500
      )
    );

    mock.post(
      '/gateway/api/account/switch/rid',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          status: 400,
          body: JSON.stringify({ error: 'bad' })
        },
        3000
      )
    );

    mock.post(
      '/restaurant-search/v1/restaurants',
      delay(
        {
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(restaurantSearchFixture)
        },
        3000
      )
    );

    return (
      <div style={{ minWidth: '600px', padding: '40px', backgroundColor: 'white' }}>
        <IntlProvider>
          <FeatureToggleProvider globalToggleName="globalScopeSelectorIncludeGroups">
            <CurrentRestaurantProvider>
              <CurrentUserProvider>
                <ScopeSelectorProvider>
                  <ScopeSelectorView />
                </ScopeSelectorProvider>
              </CurrentUserProvider>
            </CurrentRestaurantProvider>
            {/* <GroupSearchResults
              onClick={() => null}
              groups={groupSearchFixture.data}
            /> */}
          </FeatureToggleProvider>
        </IntlProvider>
      </div>
      // <GroupList
      //   onClick={() => null}
      //   groups={groupSearchFixture.data}
      // />
    );
  }
}

storiesOf('ScopeSelector', module)
  .addDecorator(withReadme(README))
  .add('ScopeSelector', () => {
    return <ScopeSelectorStory />;
  });
