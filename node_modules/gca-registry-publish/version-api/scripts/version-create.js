#!/usr/bin/env node

const get = require('lodash/get');
const fullApiClient = require('../api/api-client');
const fakeApiClient = require('../api/fake-client');
const utils = require('../../utils/utils');
const { getServerSettings } = require('../config/getVersionApiSettings');
const { getPackageVersion, getManifestFile } = require('gca-mono/lib/load-local-package');

const commandName = 'Registry create-version';

function microAppExists(apiClient, appName, host) {
  console.info(`${commandName}: Check microapp ${appName} exists on host ${host}`)
  return apiClient
    .microAppExists({ appName, host })
    .then(() => console.info(`${commandName}: Microapp "${appName}" entry exists on ${host}. Proceed to create new Version.`))
    .catch(response => {
      utils.fatal(`${commandName}: Error checking existence of Microapp "${appName}" on ${host}.`, {
        status: get(response, 'status'),
        reason: get(response, ['response', 'text']) || get(response, ['response', 'body']) || 'no reason received from API',
      })
    },
    );
}

function createVersion(apiClient, appName, host, appPackageVersion, creator) {
  console.info(`${commandName}: Create new version for ${appName} -> ${appPackageVersion}`)
  return apiClient
    .createMicroAppVersion({ appName, host, appPackageVersion, creator })
    .then(() =>
      console.info(`${commandName}: Microapp version "${appName}@${appPackageVersion}" was added to ${host}.`))
    .catch(reason =>
      utils.fatal(`${commandName}: Error adding microapp version "${appName}@${appPackageVersion}" to ${host}`, reason));
}

/*
*  Creates new version entry on a single server
*  Microapp must already exist on this server
*/
module.exports = function (registryServerEnvName, isDryRun) {
  const { host } = getServerSettings(registryServerEnvName);

  const apiClient = isDryRun ? fakeApiClient : fullApiClient;
  const { name: appName } = getManifestFile();
  const appPackageVersion = getPackageVersion();

  console.log(`${commandName}: Adding new version for ${appName} on ${registryServerEnvName}`);

  utils.requireTeamCity(`${commandName}: Cancelling version creation... can only run from TeamCity.`);
  utils
    .promiseQueue([
      // fullApiClient - Always make a real check to see if Microapp is defined in Version API
      () => microAppExists(fullApiClient, appName, host),
      // apiClient - For dry run, don't actually create the version, just pretend that you did
      () => createVersion(apiClient, appName, host, appPackageVersion, 'TeamCity'),
    ])
    .then(
      response => {
        console.info(`${commandName}: All done creating microapp version "${appName}@${appPackageVersion}" on ${host}`);
      },
      reason => {
        utils.fatal(`${commandName}: create-version FAIL: checking version / creating version "${appName}@${appPackageVersion}" on ${host}`,
          JSON.stringify(reason, null, 2)
        );
      },
    );
};
