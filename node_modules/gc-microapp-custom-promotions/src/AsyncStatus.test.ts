import AsyncStatus from './AsyncStatus';

describe('AsyncStatus', () => {
  test('Initial isInitial()', () => {
    expect(AsyncStatus.Initial.isInitial()).toBe(true);
  });

  test('Initial ! isStarted()', () => {
    expect(AsyncStatus.Initial.isStarted()).toBe(false);
  });

  test('Initial ! isDone()', () => {
    expect(AsyncStatus.Initial.isDone()).toBe(false);
  });

  test('Initial ! isFailed()', () => {
    expect(AsyncStatus.Initial.isFailed()).toBe(false);
  });

  test('Started ! isInitial()', () => {
    expect(AsyncStatus.Started.isInitial()).toBe(false);
  });

  test('Started isStarted()', () => {
    expect(AsyncStatus.Started.isStarted()).toBe(true);
  });

  test('Started ! isDone()', () => {
    expect(AsyncStatus.Started.isDone()).toBe(false);
  });

  test('Started ! isFailed()', () => {
    expect(AsyncStatus.Started.isFailed()).toBe(false);
  });

  test('Done ! isInitial()', () => {
    expect(AsyncStatus.Done.isInitial()).toBe(false);
  });

  test('Done ! isStarted()', () => {
    expect(AsyncStatus.Done.isStarted()).toBe(false);
  });

  test('Done isDone()', () => {
    expect(AsyncStatus.Done.isDone()).toBe(true);
  });

  test('Done ! isFailed()', () => {
    expect(AsyncStatus.Done.isFailed()).toBe(false);
  });

  test('Failed ! isInitial()', () => {
    expect(AsyncStatus.Failed.isInitial()).toBe(false);
  });

  test('Failed ! isStarted()', () => {
    expect(AsyncStatus.Failed.isStarted()).toBe(false);
  });

  test('Failed ! isDone()', () => {
    expect(AsyncStatus.Failed.isDone()).toBe(false);
  });

  test('Failed isFailed()', () => {
    expect(AsyncStatus.Failed.isFailed()).toBe(true);
  });
});
