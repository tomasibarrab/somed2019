import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { makeCreditsResponse } from '../../../internals/testing/helpers/creditsHelpers';
import testShowingFieldsOrSummary from '../../../internals/testing/helpers/testShowSummary';
import messages from '../../i18n/custom-promotions';
import makeCreditsModel from '../../store/customPromotions/makeCreditsModel';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../constants';
import MonthlyBudget from './MonthlyBudget';

jest.mock('./MonthlyBudgetSummary', () => () => 'MonthlyBudgetSummary');

describe('<MonthlyBudget />', () => {
  const noCreditsModel = makeCreditsModel(makeCreditsResponse(true, 0));

  const makeCreditsState = (creditsModel: any) => ({
    customPromotions: {
      credits: {
        model: creditsModel,
      },
    },
  });
  const noCreditsState = makeCreditsState(noCreditsModel);

  const makeComponent = (renderer: any, props: any, state: any, budgetFormValue?: number) => {
    const fullStateWithFormValues = {
      form: {
        [CUSTOM_PROMOTIONS_FORM_NAME]: {
          values: {
            disabled: false,
            monthlyBudget: {
              cap: budgetFormValue || 275,
            },
          },
        },
      },
      ...state,
    };
    const store = configureMockStore([])(fullStateWithFormValues);
    const Decorated = reduxForm({ form: CUSTOM_PROMOTIONS_FORM_NAME })(MonthlyBudget as any);
    return renderer(
      <IntlProvider messages={messages} locale="en-US">
        <Provider store={store}>
          <Decorated {...props} />
        </Provider>
      </IntlProvider>,
    );
  };

  it('receives formValue disabled, and credits from state', () => {
    /* Put (most) of the stuff touching libraries and the outside world into one test
       so we can then focus only on the core component. */
    const wrapper = makeComponent(
      mount,
      {
        change: jest.fn(),
        isOpen: true,
      },
      noCreditsState,
    );

    const actualComponent = wrapper.find('MonthlyBudget').first();

    const props = actualComponent.props() as any;

    expect(props.disabled).toEqual(false);
    expect(props.credits).toEqual(noCreditsModel);
  });

  it('show show fields when isOpen, summary when !isOpen', () => {
    testShowingFieldsOrSummary(MonthlyBudget, false, { disabled: false, monthlyBudget: { cap: 275 } }, noCreditsState);
    testShowingFieldsOrSummary(MonthlyBudget, true, { disabled: false, monthlyBudget: { cap: 275 } }, noCreditsState);
  });

  it('matches snapshot w/o credits', () => {
    const component = makeComponent(create, { change: jest.fn(), isOpen: true }, noCreditsState);

    expect(component.toJSON()).toMatchSnapshot();
  });

  it('matches snapshot w/ credits', () => {
    const component = makeComponent(
      create,
      { change: jest.fn(), isOpen: true },
      makeCreditsState(makeCreditsModel(makeCreditsResponse(false, 175))),
      /* makeCodeRequiringFewerHelpersAndTestSetup() lol */
      275,
    );

    expect(component.toJSON()).toMatchSnapshot();
  });

  it('shows where did credits go when budget too low w/ credits, open/close credits info overlay', () => {
    let wrapper = makeComponent(
      mount,
      { change: jest.fn(), isOpen: true },
      makeCreditsState(makeCreditsModel(makeCreditsResponse(false, 175))),
      200, // budget low enough that they are not using all their credits
    );

    expect(wrapper.find('.where-did-the-credits-go').length).toEqual(1);
    let creditsClickableLineItem = wrapper.find('p.credits-this-month');

    let creditsOverlay = wrapper.find('.credits-overlay');
    expect(creditsOverlay.length).toEqual(0);

    creditsClickableLineItem.simulate('click');

    creditsOverlay = wrapper.find('.credits-overlay');
    expect(creditsOverlay.length).toEqual(1);

    const okGotIt = creditsOverlay.first().find('.credits-overlay-close');
    okGotIt.simulate('click');

    creditsOverlay = wrapper.find('.credits-overlay');
    expect(creditsOverlay.length).toEqual(0);

    /* onClick for the credits line does nothing when you have used all your credits */
    wrapper = makeComponent(
      mount,
      { change: jest.fn(), isOpen: true },
      makeCreditsState(makeCreditsModel(makeCreditsResponse(false, 175))),
      400, // using all credits
    );

    expect(wrapper.find('.where-did-the-credits-go').length).toEqual(0);
    creditsClickableLineItem = wrapper.find('p.credits-this-month');

    /* Credits overlay not present to start */
    creditsOverlay = wrapper.find('.credits-overlay');
    expect(creditsOverlay.length).toEqual(0);

    creditsClickableLineItem.simulate('click');

    /*  Clicking the line item does nothing */
    creditsOverlay = wrapper.find('.credits-overlay');
    expect(creditsOverlay.length).toEqual(0);
  });

  it('w/ credits, shows "-" for total cost and cover price if budget < coverPrice', () => {
    const wrapper = makeComponent(
      mount,
      { change: jest.fn(), isOpen: true },
      makeCreditsState(makeCreditsModel(makeCreditsResponse(false, 175))),
      0.5, // ridiculously low budget, would fail validation
    );

    const restaurantCost = wrapper.find('.restaurant-cost-with-credits');
    expect(restaurantCost.debug()).toMatchSnapshot();
  });

  /* Figure out how to get the slider to call its update function, or mock the slider TODO */
  it.skip('slider updates state and calls change prop w/ new value', () => {
    const change = jest.fn();
    const wrapper = makeComponent(
      mount,
      { change, isOpen: true },
      makeCreditsState(makeCreditsModel(makeCreditsResponse(false, 175))),
      100,
    );

    expect(change).not.toHaveBeenCalled();

    const slider = wrapper.find('.rc-slider').props();
    slider.onMouseDown({ clientX: '100' });

    // Fails
    expect(change).toHaveBeenCalled();
  });
});
