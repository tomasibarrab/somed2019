import { Button, Chevron } from 'gca-react-components';
import moment, { Moment } from 'moment';
import React from 'react';

import 'react-dates/initialize';
import Day from 'react-dates/lib/components/CustomizableCalendarDay.js';
import DayPicker from 'react-dates/lib/components/DayPickerSingleDateController.js';
import 'react-dates/lib/css/_datepicker.css';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { toISODate } from '../../../helpers/suppression-dates-manipulator';
import ModalMain from '../../Modal/ModalMain';
import './BlockedDatesPicker.scss';

import './../../Fields/DatePickerField.scss';
import ConfirmDefaultChange from './ConfirmDefaultChange';

interface OP {
  blocked: Map<string, DateAttributes>;
  setSuppressionDates: (datesMap: Map<string, DateAttributes>) => void;
}

export interface DateAttributes {
  id?: string;
  isBlocked: boolean;
  isDefault: boolean;
  isNew: boolean;
  label?: string;
}

interface DefaultConfirm {
  day: Moment | null;
  id: string;
  isBlocked: boolean;
}

interface Count {
  added: number;
  removed: number;
}

interface State {
  blocked: Map<string, DateAttributes>;
  count: Count;
  defaultConfirm: DefaultConfirm;
}

type Props = OP & InjectedIntlProps;

class BlockedDatesPicker extends React.Component<Props, State> {
  private defaultDayStyles = {
    defaultStyles: {
      border: '4px solid rgba(240, 150, 25, 0.3)',
    },
    highlightedCalendarStyles: {
      border: '4px solid #F09619',
    },
  };

  private now = moment();

  public constructor(props: any) {
    super(props);
    this.state = {
      blocked: props.blocked,
      count: { added: 0, removed: 0 },
      defaultConfirm: { day: null, id: '', isBlocked: false },
    };
  }

  public render() {
    const { added, removed }: Count = this.getUpdatesCount();
    const total = added + removed;
    const { day, id, isBlocked } = this.state.defaultConfirm;
    return (
      <ModalMain className="blocked-dates-picker date-picker is-inline">
        {day &&
          id.length > 0 && (
            <ConfirmDefaultChange
              day={toISODate(day)}
              id={id}
              isBlocked={isBlocked}
              handleConfirm={this.handleConfirm}
              intlDate={this.props.intl.formatDate(day.toISOString())}
            />
          )}
        <DayPicker
          noBorder={true}
          date={null}
          daySize={41}
          hideKeyboardShortcutsPanel
          isDayBlocked={this.isDayInThePast}
          isDayHighlighted={(date: Moment) => this.isDayHighlighted(date)}
          numberOfMonths={1}
          onDateChange={this.onDateChange}
          renderCalendarDay={this.renderCalendarDay}
          renderDayContents={this.renderDayContents}
          navNext={<Chevron height="20" direction="right" color="#A8AFC3" />}
          navPrev={<Chevron height="20" direction="left" color="#A8AFC3" />}
        />
        <Button
          theme="primary"
          disabled={total === 0}
          onClick={() => this.props.setSuppressionDates(this.state.blocked)}
        >
          <FormattedMessage id="guestcampaigns.list.blockdays.button.done" tagName="span" />
          {total > 0 && '('}
          {added > 0 && (
            <FormattedMessage id="guestcampaigns.list.blockdays.button.add_n" values={{ added }} tagName="span" />
          )}
          {removed > 0 && (
            <FormattedMessage id="guestcampaigns.list.blockdays.button.remove_n" values={{ removed }} tagName="span" />
          )}
          {total === 1 && <FormattedMessage id="guestcampaigns.list.blockdays.button.day" tagName="span" />}
          {total > 1 && <FormattedMessage id="guestcampaigns.list.blockdays.button.days" tagName="span" />}
          {total > 0 && ')'}
        </Button>
      </ModalMain>
    );
  }

  private renderDayContents = (day: Moment) => {
    const elements = [<p key="date">{day.format('D')}</p>];
    const attributes = this.getDayAttributes(day);
    if (attributes) {
      const { isBlocked, isDefault } = attributes;
      let span;
      if (isDefault && !isBlocked) {
        span = <span key="unblocked-default" className="disabled" />;
      }
      if (isBlocked) {
        span = <span key="blocked" />;
      }
      if (span) {
        elements.unshift(span);
      }
    }
    return elements;
  };

  private isDayInThePast = (day: Moment): boolean => day.isBefore(this.now, 'day');

  private getUpdatesCount = (): Count => {
    const count: Count = { added: 0, removed: 0 };
    this.state.blocked.forEach(attrs => {
      const { isNew, isBlocked } = attrs;
      if (isNew && isBlocked) {
        count.added = count.added + 1;
      }
      if (!isNew && !isBlocked) {
        count.removed = count.removed + 1;
      }
    });
    return count;
  };

  private getDayAttributes = (day: Moment): DateAttributes | undefined => {
    return this.state.blocked.get(toISODate(day));
  };

  private renderCalendarDay = (props: any) => {
    const { day } = props;
    if (day) {
      const attributes = this.getDayAttributes(day);
      if (attributes && attributes.isDefault) {
        return <Day {...props} {...this.defaultDayStyles} />; // add active || inactive border to default days
      }
    }
    return <Day {...props} />;
  };

  private isDayHighlighted = (day: Moment): boolean => {
    if (day) {
      const attributes = this.getDayAttributes(day);
      if (attributes && attributes.isBlocked) {
        return true;
      }
    }
    return false;
  };

  private onDateChange = (day: Moment | null): void => {
    if (day) {
      const blocked = this.state.blocked;
      const isoDate = toISODate(day);
      const attributes = this.getDayAttributes(day);
      if (attributes) {
        const { isBlocked, ...rest } = attributes;
        if (rest.isDefault) {
          this.setState({
            defaultConfirm: {
              day,
              id: rest.id || '',
              isBlocked,
            },
          });
        } else {
          blocked.set(isoDate, { isBlocked: !isBlocked, ...rest });
        }
      } else {
        blocked.set(isoDate, { isBlocked: true, isDefault: false, isNew: true });
      }
      this.setState({ blocked });
    }
  };

  private handleConfirm = (day?: string, isCustom?: boolean) => {
    const { blocked } = this.state;
    if (day) {
      const { isBlocked, ...rest }: DateAttributes = blocked.get(day)!;
      if (isCustom === true) {
        blocked.set(day, {
          isBlocked: true,
          isDefault: false,
          isNew: true,
        });
      } else {
        blocked.set(day, {
          isBlocked: !isBlocked,
          ...rest,
        });
      }
    }
    this.setState({ blocked, defaultConfirm: { day: null, id: '', isBlocked: false } });
  };
}

export default injectIntl(BlockedDatesPicker);
