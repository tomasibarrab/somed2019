import { Button, Checkbox, Chevron, Input } from 'gca-react-components';
import { selectors, User } from 'gca-react-components/src/redux-modules/currentContext';
import React, { Component, SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { Field, InjectedFormProps, reduxForm } from 'redux-form';
import { CreditsModel } from 'store/customPromotions/customPromotions.types';
import { State } from '../../store/types';
import { LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1, TERMS_AND_CONDITIONS_FORM_NAME } from '../constants';
import ReadOnlyDraftCampaign from './ReadOnlyDraftCampaign';
import './TermsAndConditions.scss';
import { validate } from './validate-terms';


interface TermsFormValues {
  name: string;
  email: string;
  restaurantLegalName: string;
}

interface FormProps extends InjectedFormProps<TermsFormValues> {}

export type TermsFVWithBrowserInfo = TermsFormValues & { browserInfo: string };

interface SP {
  user: User;
}

interface OP {
  confirm: (formAndBrowserData: TermsFVWithBrowserInfo) => void;
  credits: CreditsModel;
  detailsOpen?: boolean;
  formValuesSnapshot: any;
}

type Props = SP & OP;

interface ComponentState {
  detailsOpen: boolean;
}

export class TermsAndConditions extends Component<Props, ComponentState> {
  private form: any;

  constructor(props: Props) {
    super(props);
    this.state = {
      detailsOpen: props.detailsOpen || false,
    };
    this.form = makeDecoratedForm(this.addBrowserInfoAndConfirm);
  }

  public toggle = () => {
    this.setState(prevState => ({
      detailsOpen: !prevState.detailsOpen,
    }));
  };

  public render() {
    const { user, credits, formValuesSnapshot } = this.props;
    const { detailsOpen } = this.state;
    const userEmail = user.userName;
    /* i18n nightmare next line */
    const userFullName = `${user.firstName} ${user.lastName}`;
    const initialValues = {
      agreed: false,
      email: userEmail,
      name: userFullName,
    };
    return (
      <>
        <div className="toggle-readonly-campaign-details" onClick={this.toggle}>
          <FormattedMessage id="guestcampaigns.terms.campaign_details" />
          <Chevron direction={detailsOpen ? 'up' : 'down'} />
        </div>
        {detailsOpen && <ReadOnlyDraftCampaign formValuesSnapshot={formValuesSnapshot} credits={credits} />}
        <this.form initialValues={initialValues} />
      </>
    );
  }

  private addBrowserInfoAndConfirm = (formValues: TermsFormValues) => {
    const platform = require('platform');
    const { name, version, layout, os, description }: any = platform;
    const browserInfo = JSON.stringify({ name, version, layout, os, description });
    const withBrowserInfo = { ...formValues, browserInfo };
    this.props.confirm(withBrowserInfo);
  };
}

const mapState = (state: State) => ({
  user: selectors.user(state),
});

export default connect<SP, {}, OP>(mapState)(TermsAndConditions);

const TermsAndConditionsForm: SFC<FormProps> = ({ handleSubmit, valid }) => {
  const clientHasRead = (
    <>
      <FormattedMessage
        id="guestcampaigns.terms.client_has_read.1"
        values={{
          'opentable-client-agreement-link': (
            <a href={LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1} target="_blank">
              <FormattedMessage id="guestcampaigns.terms.opentable_client_agreement" />
            </a>
          ),
        }}
      />
      <FormattedMessage id="guestcampaigns.terms.client_has_read.2" />
    </>
  );

  return (
    <form onSubmit={handleSubmit} className="terms-and-conditions-form">
      <Field
        name="name"
        component={renderInputFieldAndLabel as any}
        props={{ className: 'name', messageIdSuffix: 'your_name', includeSublabel: true } as any}
      />
      {/* Add 'email' div back here when ready for desktop */}
      <Field
        name="restaurantLegalName"
        component={renderInputFieldAndLabel as any}
        props={{ className: 'restaurant-legal-name', messageIdSuffix: 'restaurant_legal_name' } as any}
      />
      <Field
        name="agreed"
        component={renderCheckboxAndLabel as any}
        type="checkbox"
        props={{ className: 'agreed', label: clientHasRead } as any}
      />
      <Button theme="publish" type="button" htmlType="submit" className="agree-and-publish" disabled={!valid}>
        <FormattedMessage id="guestcampaigns.terms.publish_campaign" />
      </Button>
    </form>
  );
};

const makeDecoratedForm = (onSubmit: (formValues: TermsFormValues) => void) =>
  reduxForm<TermsFormValues>({
    form: TERMS_AND_CONDITIONS_FORM_NAME,
    onSubmit,
    validate,
  })(TermsAndConditionsForm);

const renderInputFieldAndLabel = ({ meta, input, className, disabled, messageIdSuffix, includeSublabel }: any) => {
  const { touched, error } = meta;

  return (
    <div className={className}>
      <FormattedMessage id={`guestcampaigns.terms.${messageIdSuffix}`} tagName="label" />
      {includeSublabel && <FormattedMessage id={`guestcampaigns.terms.${messageIdSuffix}.sublabel`} tagName="span" />}
      <Input {...input} autoComplete="off" disabled={disabled} valid={!(touched && error)} />
    </div>
  );
};

const renderCheckboxAndLabel = ({ input, className, label }: any) => {
  const { onChange, value } = input;
  return <Checkbox onClick={onChange} checked={value || false} className={className} label={label} />;
};
