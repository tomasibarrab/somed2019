import classnames from 'classnames';
import { Chevron } from 'gca-react-components';
import moment from 'moment';
import React, { SFC } from 'react';
import 'react-dates/initialize';
import DayPicker from 'react-dates/lib/components/DayPickerSingleDateController.js';
import { FormattedMessage } from 'react-intl';
import { Field } from 'redux-form';
import { dateFormat } from '../constants';
import './DatePickerField.scss';

const daySizes = Object.freeze({
  inModal: 47,
  inline: 41,
});

interface Props {
  name: string;
  disableBefore?: string;
  isInline?: boolean; // Default to No
}

const DatePickerField: SFC<Props> = props => {
  const { name, disableBefore, isInline } = props;
  return (
    <Field
      name={name}
      component={renderDatePicker}
      parse={(value: any) => value.format(dateFormat.MOMENT)}
      format={(value: any) => (value ? moment(value) : undefined)}
      props={{ disableBefore, isInline } as any}
    />
  );
};

const renderDatePicker = (props: any) => {
  const { input, meta: { submitFailed, error }, disableBefore, isInline } = props;
  const daySize = isInline ? daySizes.inline : daySizes.inModal;
  const noBorder = !!isInline;
  return (
    <div className={classnames({ 'date-picker': true, 'is-inline': isInline, 'in-modal': !isInline })}>
      <DayPicker
        date={input.value}
        daySize={daySize}
        noBorder={noBorder}
        hideKeyboardShortcutsPanel
        isDayBlocked={(day: any) => (disableBefore ? moment(disableBefore) : moment()).isAfter(day)}
        navNext={<Chevron height="20" direction="right" color="#A8AFC3" />}
        navPrev={<Chevron height="20" direction="left" color="#A8AFC3" />}
        onDateChange={input.onChange}
      />
      {submitFailed && error && <FormattedMessage id="guestcampaigns.specials.form.enddate.invalid" />}
    </div>
  );
};

export default DatePickerField;
