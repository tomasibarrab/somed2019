import classnames from 'classnames';
import { Button } from 'gca-react-components';
import React, { Component, ComponentType, ReactNode } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { FormSection, getFormSyncErrors, hasSubmitFailed } from 'redux-form';
import { change } from 'redux-form';
import { State } from '../../store/types';
import { ChildComponentProps } from '../commonTypes';
import './SteppedFormSection.scss';

interface OP {
  onDone: () => void;
  disabled: boolean;
  defaultDone?: boolean;
  component: ComponentType<ChildComponentProps>;
  name: string;
  form: string;
  onClickNext?: () => void;
}

interface SP {
  fullSyncErrors: any;
  syncErrors: any;
  submitFailed: boolean;
}

interface DP {
  change: typeof change;
}

type Props = SP & DP & OP;

interface ComponentState {
  done: boolean;
  triedFinishingInvalid: boolean;
  visited: boolean;
}

export class SteppedFormSection extends Component<Props, ComponentState> {
  constructor(props: Props) {
    super(props);

    this.state = {
      done: props.defaultDone || false,
      triedFinishingInvalid: false,
      visited: props.defaultDone || false,
    };
  }

  public render() {
    const { disabled, name, submitFailed, syncErrors, onClickNext } = this.props;
    const { done, visited, triedFinishingInvalid } = this.state;

    const onClick = () => {
      if (typeof onClickNext === 'function') {
        onClickNext();
      }
      this.props.onDone();
      return this.setDone(false);
    };

    return (
      <div className={classnames({ disabled, 'stepped-form-section': true })}>
        {done ? (
          <div
            onClick={() => {
              this.setDone(false);
            }}
            className="edit-button"
            tabIndex={0}
          >
            <FormattedMessage id="guestcampaigns.custom_promotions.form.edit" />
          </div>
        ) : (
          visited && (
            <div
              onClick={() => {
                this.setDone(true);
              }}
              tabIndex={0}
              className={classnames({ 'done-button': true, 'btn-disabled': syncErrors })}
            >
              <FormattedMessage id="guestcampaigns.custom_promotions.form.done" />
            </div>
          )
        )}
        <FormSection name={name}>
          <this.props.component
            showValidationErrors={triedFinishingInvalid || submitFailed}
            isOpen={!this.state.done}
            change={this.innerChange}
          />
        </FormSection>
        {!done && onClickNext &&
          (
            <Button
              theme="primary"
              onClick={onClick}
              className="bottom next"
              disabled={!!syncErrors}
              tabIndex={0}
            >
              <FormattedMessage id="guestcampaigns.custom_promotions.form.next" />
            </Button>
          )
        }
      </div>
    );
  }

  /* returns the new value of done, which will match the argument if successful */
  private setDone(value: boolean) {
    /* This will call props.onDone if the values contained in the child form inputs
      are all valid. Otherwise it will not collapse/finish the section, instead it will
      give showValidationErrors={true} to the child to notify the user they must fix any
      errors before continuing.

      WIP r.e. vailation stuff
    */

    if (value) {
      if (this.props.syncErrors) {
        this.setState({ triedFinishingInvalid: true });
        return false;
      } else {
        this.setState({ done: true, visited: true });
        return true;
      }
    } else {
      this.setState({ done: false });
      return false;
    }
  }

  private innerChange = (fieldName: string, value: any): void => {
    this.props.change(this.props.form, `${this.props.name}.${fieldName}`, value);
  };
}

const mapState = (state: State, ownProps: OP): SP => {
  const syncErrors = getFormSyncErrors(ownProps.form)(state) as any;
  return {
    fullSyncErrors: syncErrors,
    submitFailed: hasSubmitFailed(ownProps.form)(state),
    syncErrors: syncErrors[ownProps.name],
  };
};

const mapDispatch = {
  change,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(SteppedFormSection);
