import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import messages from '../../i18n/custom-promotions';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../constants';
import SteppedFormSectionContainer from './SteppedFormSectionContainer';

/* Allows us to use enzyme to look at the props given to each SteppedFormSection without
  having to
  1. Render entire SteppedFormSections, with all the redux-form stuff that goes with that
  2. Use `.props()` and look at the props directly of the SteppedFormSection
  */
jest.mock('./SteppedFormSection', () => ({ defaultDone, disabled, onDone, name, component, renderButton }: any) => {
  // tslint:disable:no-shadowed-variable
  const React = require.requireActual('react');
  const classnames = require.requireActual('classnames');
  // tslint:enable:no-shadowed-variable

  return (
    <div
      className={classnames({
        defaultDone,
        disabled,
        mock: true,
        [name]: true,
      })}
      onClick={onDone}
    >
      Mock Stuff
      <div className="child-component">{component}</div>
      {renderButton && renderButton()}
    </div>
  );
});

describe('SteppedFormSectionContainer', () => {
  const makeComponent = (
    renderer: (component: any) => any, config: any, state: any, endComponent?: any) => {
    const store = configureMockStore([])(state);
    return {
      component: renderer(
        <IntlProvider messages={messages} locale="en-US">
          <Provider store={store}>
            <SteppedFormSectionContainer
              form={CUSTOM_PROMOTIONS_FORM_NAME}
              config={config}
              endComponent={endComponent}
            />
          </Provider>
        </IntlProvider>,
      ),
      store,
    };
  };

  const makeConfig = (defaultDones: boolean[]): any[] =>
    defaultDones.map((defaultDone: boolean, index: number) => ({
      defaultDone,
      name: index.toString(),
      sectionComponent: `the child component ${index}`,
    }));

  const unwrapChildComponents = sections =>
    sections
      .children()
      .slice(0, -1)
      .map(sectionWrapper => sectionWrapper.childAt(0));

  it('should disable all sections after first section if progress percentage <=50', () => {
    const config = makeConfig([false, false, true, true]);
    const state = {
      customPromotions: {
        progressPercentage: 50,
      },
    };
    const { component: wrapper } = makeComponent(mount, config, state);
    const sections = wrapper.find('.stepped-form-sections');

    /* Allow for the end component */
    expect(sections.children().length).toEqual(config.length + 1);

    /* Get the mock that has a representation of all the passed props out of the "<Component ... >" holding it */
    const childComponents = unwrapChildComponents(sections);

    expect(childComponents[0].hasClass('disabled')).toBeFalsy();
    expect(childComponents[1].hasClass('disabled')).toBeTruthy();
    expect(childComponents[2].hasClass('disabled')).toBeTruthy();
  });

  it('should disable first section if progress percentage > 50', () => {
    const config = makeConfig([false, false, true, true]);
    const state = {
      customPromotions: {
        progressPercentage: 75,
      },
    };
    const { component: wrapper } = makeComponent(mount, config, state);
    const sections = wrapper.find('.stepped-form-sections');

    /* Allow for the end component */
    expect(sections.children().length).toEqual(config.length + 1);

    /* Get the mock that has a representation of all the passed props out of the "<Component ... >" holding it */
    const childComponents = unwrapChildComponents(sections);

    expect(childComponents[0].hasClass('disabled')).toBeTruthy();
    expect(childComponents[1].hasClass('disabled')).toBeFalsy();
    expect(childComponents[2].hasClass('disabled')).toBeFalsy();
  });

  it('should initialize progress percentage and update progress bar when onDone called', () => {
    const config = makeConfig([false, false, true, true]);
    const state = {
      customPromotions: {
        progressPercentage: 50,
      },
    };

    const { component: wrapper, store } = makeComponent(mount, config, state);
    const getSections = currentWrapper => currentWrapper.find('.stepped-form-sections');

    const childComponents = unwrapChildComponents(getSections(wrapper));

    let actions = store.getActions();

    expect(actions.length).toEqual(1); // First setProgress was fired on construction
    const firstActionPayload = actions[0].payload;
    expect(firstActionPayload.percentage).toEqual(50);

    childComponents[0].simulate('click'); // fire onDone
    actions = store.getActions();
    expect(actions.length).toEqual(2);
    const secondActionPayload = actions[1].payload;
    expect(secondActionPayload.percentage).toEqual(75);
  });
});
