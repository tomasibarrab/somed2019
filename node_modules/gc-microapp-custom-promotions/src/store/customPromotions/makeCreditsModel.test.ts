import { makeCreditsResponse } from '../../../internals/testing/helpers/creditsHelpers';
import makeCreditsModel from './makeCreditsModel';

describe('makeCreditsModel', () => {
  const makeExpectedExtra = (
    defaultCovers: number,
    shouldShowCredits: boolean,
    coverPrice?: number,
    currencySymbol?: string,
  ) => ({
    currencySymbol: currencySymbol || '$',
    defaultBudget: defaultCovers * (coverPrice || 2.75),
    defaultCovers,
    formattedCoverPrice: `${currencySymbol || '$'}${coverPrice || 2.75}`,
    shouldShowCredits,
  });

  const scenarios = [
    {
      description: 'has shouldShowCredits false when activeCustomPromotion === true',
      expectedExtra: makeExpectedExtra(100, false),
      input: makeCreditsResponse(true, 10),
    },
    {
      description: 'has shouldShowCredits false when creditAmount === 0',
      expectedExtra: makeExpectedExtra(100, false),
      input: makeCreditsResponse(false, 0),
    },
    {
      description: 'has defaultCovers 10 using 17.50 of credits, 27.50 budget, showing credits',
      expectedExtra: makeExpectedExtra(10, true),
      input: makeCreditsResponse(false, 17.5),
    },
    {
      description: 'has defaultCovers 11 using 19.00 of credits, 30.25 budget, showing credits',
      expectedExtra: makeExpectedExtra(11, true),
      input: makeCreditsResponse(false, 19),
    },
    {
      description: 'has dollars ($) for unknown currency cod3',
      expectedExtra: makeExpectedExtra(10, true, 3.25, '$'),
      input: makeCreditsResponse(false, 22.5, 3.25, 'GBP'),
    },
  ];

  scenarios.forEach(({ description, input, expectedExtra }) => {
    it(description, () => {
      const output = makeCreditsModel(input);
      expect(output).toEqual({ ...input, ...expectedExtra });
    });
  });
});
