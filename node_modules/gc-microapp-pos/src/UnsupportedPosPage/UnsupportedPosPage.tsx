import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import { Restaurant, selectors, User } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { AsyncStatus } from '../store/AsyncState';
import { selectors as onBoardSelector, updateDisplayState } from '../store/onboarding/onboarding';
import { submitLeadGen } from '../store/onboarding/unsupportedPosbrands';
import { fetchUnsupportedPosBrands } from '../store/onboarding/unsupportedPosBrandsData';
import { LeadGenFormData, OnboardingDisplayStateName, State, UnsupportedPosBrand } from '../store/types';
import { LeadGenForm } from './LeadGenForm';

import { gaTrackTypes } from '../constants';
import './UnsupportedPostPage.scss';

interface StateProps {
  user: User;
  restaurant: Restaurant;
  unsupportedPosBrands: UnsupportedPosBrand[];
  unsupportPosStatus: AsyncStatus;
}

interface DispatchProps {
  fetchUnsupportedPosBrands: (payload: null) => void;
  submitLeadGen: (payload: LeadGenFormData) => void;
  updateDisplayState: (state: OnboardingDisplayStateName) => void;
}

type Props = InjectedIntlProps & StateProps & DispatchProps;

class UnsupportedPosPage extends React.Component<Props, LeadGenFormData> {
  private initialFormValue: LeadGenFormData;

  constructor(props: Props) {
    super(props);

    this.initialFormValue = {
      Company: props.restaurant.name,
      Country: 'United States',
      CurrencyISOCode: 'USD',
      Disqualification_Reason__c: 'Unsupported POS Brand',
      Email: props.user.userName,
      FirstName: props.user.firstName,
      LastName: props.user.lastName,
      LeadSource: 'GCA',
      POS_Brand__c: '',
      Phone: props.restaurant.billingPhoneNumber,
      Product_Type__c: 'POS',
      RID__c: '271468',
      RecordTypeID: '01230000000jw7a',
      Restaurant_or_parent__c: 'Restaurant',
      Status: 'Disqualified',
    };
  }

  public componentDidMount() {
    const { props } = this;
    props.fetchUnsupportedPosBrands(null);
  }

  public render() {
    const { unsupportedPosBrands } = this.props;

    return (
      <div className="unsupportedPosContainer">
        <Button type="button" theme="bare" className="pos-select__btn__unsupported" onClick={this.back}>
          <FormattedMessage id="unsupportedPos.back" />
        </Button>

        <FormattedMessage id="unsupportedPos.title" tagName="h1" />

        <Form
          onSubmit={this.submitLeadGen}
          initialValues={this.initialFormValue}
          render={({ handleSubmit }) => (
            <LeadGenForm handleSubmit={handleSubmit} unsupportedPosBrands={unsupportedPosBrands} />
          )}
        />
      </div>
    );
  }

  private back = () => {
    this.props.updateDisplayState('posSelect');
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.nagivate,
      category: gaTrackTypes.category,
      label: `unsupported-pos:back`,
    });
  };
  private submitLeadGen = (values: LeadGenFormData) => {
    this.props.submitLeadGen(values);
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.submit,
      category: gaTrackTypes.category,
      label: `unsupported-pos:pos-brand-id:${values.POS_Brand__c}`,
    });
  };
}

const mapState = (state: State): StateProps => ({
  restaurant: selectors.restaurant(state),
  unsupportPosStatus: state.onBoarding.fetchUnsupportedPosBrandsStatus.status,
  unsupportedPosBrands: onBoardSelector.getUnsupportedPosBrands(state),
  user: selectors.user(state),
});

const mapDispatch = {
  fetchUnsupportedPosBrands: fetchUnsupportedPosBrands.started,
  submitLeadGen: submitLeadGen.started,
  updateDisplayState,
};

export default connect<{}, {}, {}>(
  mapState,
  mapDispatch,
)(injectIntl<{}>(UnsupportedPosPage));
export { Props, UnsupportedPosPage as PureUnsupportedPosPage };
