import { shallow } from 'enzyme';
import React from 'react';
import LandingPage from '../LandingPage/LandingPage';
import NextStepsPage from '../NextStepsPage/NextStepsPage';
import PosSelectPage from '../PosSelectPage/PosSelectPage';
import PosStatusPage from '../PosStatusPage/PosStatusPage';
import { OnboardingDisplayStateName } from '../store/types';
import SubmittedLeadGenPage from '../SubmittedLeadGenPage/SubmittedLeadGenPage';
import UnsupportedPosPage from '../UnsupportedPosPage/UnsupportedPosPage';
import OnboardingDisplayState, { Props } from './OnboardingDisplayState';

describe('<OnboardingDisplayState />', () => {
  const setup = (displayKey: OnboardingDisplayStateName) => {
    const props: Props = {
      displayKey,
    };

    const displayState = shallow(<OnboardingDisplayState {...props} />);

    return { displayState, props };
  };

  it('when display key is "landing" it should return the landing page component', () => {
    const { displayState } = setup('landing');

    expect(displayState.find(LandingPage).length).toBe(1);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display the landing page if there are an invalid key', () => {
    const { displayState } = setup(null);

    expect(displayState.find(LandingPage).length).toBe(1);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display the posSelect page component when display key is "posSelect"', () => {
    const { displayState } = setup('posSelect');

    expect(displayState.find(LandingPage).length).toBe(0);
    expect(displayState.find(PosSelectPage).length).toBe(1);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display the next steps page when display key is "nextSteps"', () => {
    const { displayState } = setup('nextSteps');

    expect(displayState.find(LandingPage).length).toBe(0);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(1);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display the Unsupported Pos Page when the display key is "unsupportedPos"', () => {
    const { displayState } = setup('unsupportedPos');

    expect(displayState.find(LandingPage).length).toBe(0);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(1);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display pos status page when display key is "active"', () => {
    const { displayState } = setup('active');

    expect(displayState.find(LandingPage).length).toBe(0);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(1);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(0);
  });

  it('should display submitted lead gen page when display key is "submittedLeadGen"', () => {
    const { displayState } = setup('submittedLeadGen');

    expect(displayState.find(LandingPage).length).toBe(0);
    expect(displayState.find(PosSelectPage).length).toBe(0);
    expect(displayState.find(NextStepsPage).length).toBe(0);
    expect(displayState.find(UnsupportedPosPage).length).toBe(0);
    expect(displayState.find(PosStatusPage).length).toBe(0);
    expect(displayState.find(SubmittedLeadGenPage).length).toBe(1);
  });
});
