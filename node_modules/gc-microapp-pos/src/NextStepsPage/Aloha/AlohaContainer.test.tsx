import { shallow } from 'enzyme';
import { AsyncContent } from 'gca-react-components';
import React from 'react';
import { AsyncStatus } from '../../store/AsyncState';
import { Props, PureAlohaContainer as AlohaContainer } from './AlohaContainer';
import AlohaSteps from './AlohaSteps';
import AlohaWaiting from './AlohaWaiting';

describe('<AlohaContainer />', () => {
  const setup = (override = {}) => {
    const { sentHaspKeyStatus = 'init', getHaspKeyStatus = 'init' } = override as Props;
    const props: Props = {
      getHaspKey: jest.fn(),
      getHaspKeyStatus,
      rid: 1701,
      sentHaspKeyStatus,
    };
    const alohaContainer = shallow(<AlohaContainer {...props} />);

    return { alohaContainer, props };
  };

  it('should get the hasp key when the component mounts', () => {
    const { props } = setup();

    expect(props.getHaspKey).toHaveBeenCalledWith(props.rid);
  });

  it('should be loading while getting hasp key', () => {
    const { alohaContainer } = setup({ getHaspKeyStatus: 'started' });

    expect(alohaContainer.find(AsyncContent).props().isLoading).toBe(true);
  });

  it('should show AlohaSteps if sentHaspKeyStatus is not done', () => {
    const { alohaContainer } = setup();

    expect(alohaContainer.find(AlohaSteps).length).toBe(1);
    expect(alohaContainer.find(AlohaWaiting).length).toBe(0);
  });

  it('should show AlohaWaiting if sentHaspKeyStatus is done', () => {
    const { alohaContainer } = setup({ sentHaspKeyStatus: 'done' });

    expect(alohaContainer.find(AlohaSteps).length).toBe(0);
    expect(alohaContainer.find(AlohaWaiting).length).toBe(1);
  });

  it('should show alohaWaiting if there is a haspKey from the getHaspkey api', () => {
    const { alohaContainer } = setup({ getHaspKeyStatus: 'done' });

    expect(alohaContainer.find(AlohaSteps).length).toBe(0);
    expect(alohaContainer.find(AlohaWaiting).length).toBe(1);
  });
});
