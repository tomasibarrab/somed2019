import { Button } from '@buffet/button';
import { shallow } from 'enzyme';
import React from 'react';
import { InputFinalField } from 'shared-react-atomic-ui/finalform-fields';
import { Props, UpserveLinkForm } from './UpserveLinkForm';

describe('<UpserveLinkForm/>', () => {
  const setup = (statusCode = 0) => {
    const props: Props = {
      handleSubmit: jest.fn(),
      intl: { formatMessage: jest.fn(translation => translation.id) } as any,
      statusCode,
    } as any;

    const upserveLinkForm = shallow(<UpserveLinkForm {...props} />);

    return { props, upserveLinkForm };
  };

  it('have a form', () => {
    const { upserveLinkForm, props } = setup();

    const form = upserveLinkForm.find('form');
    const formProps = form.props();

    expect(form.length).toBe(1);
    expect(formProps.onSubmit).toBe(props.handleSubmit);
    expect(formProps.id).toBe('upserveUrlForm');

    const input = upserveLinkForm.find(InputFinalField);
    const button = upserveLinkForm.find(Button);
    const inputProps = input.props();

    expect(input.length).toBe(1);
    expect(button.length).toBe(1);
    expect(button.props().htmltype).toEqual('submit');
    expect(inputProps.className).toBe('field');
  });

  describe('verify button', () => {
    it('should be enabled by default', () => {
      const { upserveLinkForm, props } = setup(0);
      const button = upserveLinkForm.find(Button);

      expect(button.props().disabled).toBeFalsy();
    });

    it('should be disabled when verify returns error', () => {
      const { upserveLinkForm, props } = setup(500);
      const button = upserveLinkForm.find(Button);

      expect(button.props().disabled).toBeTruthy();
    });
  });

  describe('error messaging', () => {
    it('should not display a message if there are no errors', () => {
      const { upserveLinkForm, props } = setup(0);

      const message = upserveLinkForm.find(InputFinalField);
      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe(' ');
      expect(message.props().className).toBe('field');
    });

    it('should not display a message if there is a status code of 200', () => {
      const { upserveLinkForm, props } = setup(200);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe(' ');
      expect(message.props().className).toBe('field');
    });

    it('should display the a generic message if there is an unknown error', () => {
      const { upserveLinkForm, props } = setup(2);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('app.error.general');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 400 message', () => {
      const { upserveLinkForm, props } = setup(400);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.400');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 403 message', () => {
      const { upserveLinkForm, props } = setup(403);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.403');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 404 message', () => {
      const { upserveLinkForm, props } = setup(404);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.404');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 409 message', () => {
      const { upserveLinkForm, props } = setup(409);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.409');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 412 message', () => {
      const { upserveLinkForm, props } = setup(412);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.412');
      expect(message.props().className).toBe('field danger');
    });

    it('should display the 503 message', () => {
      const { upserveLinkForm, props } = setup(503);

      const message = upserveLinkForm.find(InputFinalField);

      const statusTextMessage = message.props().statusText.props.id;
      expect(statusTextMessage).toBe('nextSteps.upserve.message.503');
      expect(message.props().className).toBe('field danger');
    });
  });
});
