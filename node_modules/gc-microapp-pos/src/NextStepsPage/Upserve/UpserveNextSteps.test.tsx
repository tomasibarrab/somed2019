import { shallow } from 'enzyme';
import React from 'react';
import { Form } from 'react-final-form';

import { Button } from '@buffet/button';
import { AjaxError } from 'rxjs/observable/dom/AjaxObservable';
import { CompareAddresses } from './CompareAddresses';
import { Props, PureUpserrveNextSteps as UpserveNextSteps } from './UpserveNextSteps';

describe('<UpserveNextSteps />', () => {
  const setup = (override = {}) => {
    const { linkData, linkStatus = 'init' } = override as Props;

    const props: Props = {
      checkUpserveLink: jest.fn(),
      linkData,
      linkStatus,
      rid: 2001,
      sendUpserveLink: jest.fn(),
    };
    const upserveNextSteps = shallow(<UpserveNextSteps {...props} />);

    return { props, upserveNextSteps };
  };

  it('should have a react-final-form', () => {
    const { upserveNextSteps } = setup();

    const finalForm = upserveNextSteps.find(Form);
    const finalFormProps = finalForm.props();

    expect(finalForm.length).toBe(1);
    expect(finalFormProps.onSubmit).toBe(upserveNextSteps.instance().handleUpserveCheck);
  });

  describe('handleUpserveCheck', () => {
    it('should send the link on Verify', () => {
      const { props, upserveNextSteps } = setup();

      const link = 'http://upserve.com/something';

      upserveNextSteps.instance().handleUpserveCheck({ upserveLink: link });
      expect(props.checkUpserveLink).toHaveBeenCalledWith({ rid: 2001, link });
      expect(upserveNextSteps.state().link).toEqual(link);
    });
  });

  describe('compare addresses', () => {
    it('should not appear before verify is successful', () => {
      const { props, upserveNextSteps } = setup({ linkStatus: 'init' });

      expect(upserveNextSteps.find(CompareAddresses).length).toBe(0);
    });

    it('should appear when verify is successful', () => {
      const { props, upserveNextSteps } = setup({ linkStatus: 'done' });

      expect(upserveNextSteps.find(CompareAddresses).length).toBe(1);
    });
  });

  describe('activate button', () => {
    it('should invoke activate upserve actions', () => {
      const { upserveNextSteps, props } = setup();

      const buffetButton = upserveNextSteps.find(Button);
      expect(buffetButton.props().busy).toEqual(false);

      upserveNextSteps.setState({ link: 'Goodest String' });
      buffetButton.simulate('click');
      expect(props.sendUpserveLink).toHaveBeenCalledWith({ rid: 2001, link: 'Goodest String' });
    });

    it('should be disabled when link not verified', () => {
      const { upserveNextSteps } = setup({ linkStatus: 'init' });

      const buffetButton = upserveNextSteps.find(Button);
      expect(buffetButton.props().disabled).toEqual(true);
    });

    it('should be enabled when verified', () => {
      const { upserveNextSteps } = setup({ linkStatus: 'done' });

      const buffetButton = upserveNextSteps.find(Button);
      expect(buffetButton.props().disabled).toEqual(false);
    });

    it('should be busy while submitting the form data', () => {
      const { upserveNextSteps } = setup({ linkStatus: 'started' });

      const buffetButton = upserveNextSteps.find(Button);
      expect(buffetButton.props().disabled).toEqual(true);
      expect(buffetButton.props().busy).toEqual(true);
    });
  });
});
