import eventTracker from '@buffet/event-tracker';
import React from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { gaTrackTypes, SUPPORT_LINK } from '../constants';
import { State, SupportedPosBrandsIds } from '../store/types';
import AlohaContainer from './Aloha/AlohaContainer';
import DefaultWaiting from './Default/DefaultWaiting';
import DoshiiWaiting from './Doshii/DoshiiWaiting';
import ToastContainer from './Toast/ToastContainer';
import UpserveNextSteps from './Upserve/UpserveNextSteps';

import './NextStepsPage.scss';

interface NextStepsProps {
  brandId: SupportedPosBrandsIds;
}

class NextStepsPage extends React.Component<NextStepsProps> {
  private translationLinks = {
    faqLink: (
      <a
        href="https://support.opentable.com/s/article/GuestCenter-POS-Integration-FAQs"
        target="_blank"
        onClick={this.gaFaqHandler}
      >
        <FormattedMessage id={'nextsteps.gethelp.faq'} />
      </a>
    ),
    supportLink: (
      <a href={`mailto:${SUPPORT_LINK}`} target="_blank" onClick={this.gaMailHelpHandler}>
        {SUPPORT_LINK}
      </a>
    ),
  };

  public render() {
    const { brandId } = this.props;
    return (
      <div className="nextsteps-page">
        <div className="help-container">
          <FormattedMessage id="nextsteps.needhelp" />
          <FormattedMessage id="nextsteps.gethelp" values={this.translationLinks} />
        </div>
        {this.stepsComponent(brandId)}
      </div>
    );
  }

  private stepsComponent(brandId: SupportedPosBrandsIds) {
    switch (brandId) {
      case SupportedPosBrandsIds.Aloha:
        return <AlohaContainer />;
      case SupportedPosBrandsIds.Toast:
        return <ToastContainer />;
      case SupportedPosBrandsIds.Upserve:
        return <UpserveNextSteps />;
      case SupportedPosBrandsIds['H&L']:
      case SupportedPosBrandsIds.Impos:
        return <DoshiiWaiting />;
      default:
        return <DefaultWaiting />;
    }
  }

  private gaFaqHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'next-steps:support-faqs',
    });
  }

  private gaMailHelpHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'next-steps:mail-help',
    });
  }
}

const mapState = (state: State): NextStepsProps => ({
  brandId: state.onBoarding.selectedPos.Id,
});

export default connect<NextStepsProps, {}, {}>(mapState)(NextStepsPage);

export { NextStepsPage as PureNextStepsPage, NextStepsProps };
