import { SimpleRadioButtonGroup } from '@buffet/radio-button';
import { RadioButton } from '@buffet/radio-button';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { CategoryStatus } from './../store/types';

interface StateProps {
  countsPerFilter: { [id: string]: number };
  selectedStatus: number;
  selectedCategoryBucket: 'unassigned' | 'appetizer' | 'entree' | 'dessert' | 'other' | 'all';
  statusList: CategoryStatus[];
}

interface DispatchProps {
  selectStatusBucket: (option: string) => void;
}

export type Props = DispatchProps & StateProps & InjectedIntlProps;

class CategoryFilters extends React.Component<Props, {}> {
  public render() {
    const { formatMessage } = this.props.intl;
    const countsPerFilter = this.props.countsPerFilter;
    return (
      <div className="status-filter">
        <SimpleRadioButtonGroup
          onChange={this.props.selectStatusBucket}
          selectedValue={this.props.selectedCategoryBucket}
          className="filter-button-group"
        >
          {this.getAllBucketNames().map((status: CategoryStatus) => {
            const count: number = countsPerFilter[status.status] || countsPerFilter[String(status.id)] || 0;

            const label = formatMessage({ id: `tablestatus.categoryFilters.${status.status}` });
            return (
              <RadioButton
                className={`filter-button ${
                  status.status === this.props.selectedCategoryBucket ? 'selected-filter-button' : ''
                }`}
                value={status.status}
                label={`${label} (${count})`}
                key={status.status}
              />
            );
          })}
        </SimpleRadioButtonGroup>
      </div>
    );
  }
  private getAllBucketNames(): CategoryStatus[] {
    const unassigned: CategoryStatus = { id: -1, status: 'unassigned', rank: -1 };
    const all: CategoryStatus = { id: -2, status: 'all', rank: -2 };
    return [unassigned, ...this.props.statusList, all];
  }
}

export default injectIntl(CategoryFilters);
export { CategoryFilters as PureCategoryFilters };
