import { shallow } from 'enzyme';
import React from 'react';

import { SimpleRadioButtonGroup } from '@buffet/radio-button';
import { RadioButton } from '@buffet/radio-button';
import { DropdownSelect } from '@buffet/select';
import ReactDOM from 'react-dom';
import { intlShape } from 'react-intl';
import { Category } from './../store/types';
import CategoryFilters from './CategoryFilters';
import { FlatCategoryDisplay } from './FlatCategoryDisplay';
import { HierarchicalCategoryDisplay } from './HierarchicalCategoryDisplay';
import { Props, PurePosTableStatusPage as PosTableStatusPage } from './PosTableStatusPage';
import StatusSelector from './StatusSelector';
import { Toggle } from './Toggle';

describe('<PosTableStatusPage />', () => {
  const setup = (propOverride = {}) => {
    // Mocks
    const mockCategory: Category = {
      category_id: 'Starship',
      checked: true,
      level: 1701,
      name: 'USS Enterprise',
      parent_category_id: 'Constitution',
      status_id: null,
    };

    // default state props and overrides
    const {
      publishSuccess = false,
      readyToPublish = false,
      isSelectMode = false,
      isFlatCategory = false,
      visibleCategories = [mockCategory],
    } = propOverride as Props;

    const props: Props = {
      categories: [mockCategory],
      categoriesCheckedCount: 0,
      checkCategory: jest.fn(),
      clearCategorySelection: jest.fn(),
      fetchData: jest.fn(),
      getStatuses: jest.fn(),
      intl: {
        formatMessage: jest.fn().mockReturnValue('Your table status have been saved'),
      } as any,
      isFlatCategory,
      isSelectMode,
      parentCategoriesDictionary: {},
      publishStatus: jest.fn(),
      publishSuccess,
      readyToPublish,
      rid: 0,
      selectStatus: jest.fn(),
      selectStatusBucket: jest.fn(),
      statusDictionary: {
        0: {
          id: 123,
          rank: 2,
          status: 'mock',
        },
        42: {
          id: 42,
          rank: 1,
          status: 'meaning of life',
        },
      },
      tableStatusChangeEnabled: true,
      toggleTableStatusChangeEnabled: jest.fn(),
      updateCategories: jest.fn(),
      visibleCategories,
    };

    const pointOfSalesComponent = shallow(<PosTableStatusPage {...props} />);

    return { props, pointOfSalesComponent };
  };

  describe('componentDidMount', () => {
    it('should make api requests to set state and set unload handler', () => {
      expect(window.onbeforeunload).toBeNull();

      const { props } = setup();

      expect(window.onbeforeunload).toBeDefined();
      expect(props.fetchData).toHaveBeenCalled();
    });
  });

  describe('TableStatus', () => {
    it('should have a toggle button that fires toggleTableStatusChangeEnabled action', () => {
      const { pointOfSalesComponent, props } = setup({});

      expect(pointOfSalesComponent.find(Toggle).length).toBe(1);
      expect(pointOfSalesComponent.find(Toggle).props().onClick).toBe(props.toggleTableStatusChangeEnabled);
    });

    it('should display publish success message if publishSuccess is true', () => {
      const { pointOfSalesComponent, props } = setup({
        publishSuccess: true,
      });
      // props.intl.formatMessage = jest.fn();
      // props.intl.formatMessage.mockReturnValueOnce('success');
      expect(pointOfSalesComponent.find('.publish-success-message').text()).toBe('Your table status have been saved');
    });

    it('should disable the save button when readyToPublish is false', () => {
      const { pointOfSalesComponent, props } = setup({
        readyToPublish: false,
      });

      const publishButton = pointOfSalesComponent.find('.publish-button');

      const publishButtonProps = publishButton.props();

      expect(publishButtonProps.disabled).toBe(true);

      expect(publishButton.props().onClick).toBe(props.publishStatus);
    });

    it('should enable the save button when readyToPublish is true', () => {
      const { pointOfSalesComponent, props } = setup({
        readyToPublish: true,
      });

      const publishButton = pointOfSalesComponent.find('.publish-button');

      const publishButtonProps = publishButton.props();

      expect(publishButtonProps.disabled).toBe(false);

      expect(publishButton.props().onClick).toBe(props.publishStatus);
    });

    describe('action panel', () => {
      it('should display status selector if isSelectMode is true', () => {
        (global as any).scrollTo = jest.fn();
        const { pointOfSalesComponent, props } = setup({
          isSelectMode: true,
        });

        expect(pointOfSalesComponent.find(StatusSelector).length).toBe(1);
      });
    });

    describe('categories rendering', () => {
      it('should render a message saying its empty', () => {
        const { pointOfSalesComponent } = setup({
          visibleCategories: [],
        });

        expect(pointOfSalesComponent.find('.empty-categories').length).toBe(1);
      });

      it('should FlatCategoryDisplay if isFlatCategory is true', () => {
        const { pointOfSalesComponent } = setup({
          isFlatCategory: true,
        });

        expect(pointOfSalesComponent.find(FlatCategoryDisplay).length).toBe(1);
      });

      it('should display HierachicalCategoryDisplay if isFlatCategory is false', () => {
        const { pointOfSalesComponent } = setup({
          isFlatCategory: false,
        });

        expect(pointOfSalesComponent.find(HierarchicalCategoryDisplay).length).toBe(1);
      });
    });
  });
});
