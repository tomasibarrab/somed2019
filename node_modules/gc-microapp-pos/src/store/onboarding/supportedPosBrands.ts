import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { AsyncState } from '../../store/AsyncState';
import { Epic, SupportedPosBrand } from '../types';

// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const fetchSupportedPosBrands = actionCreator.async<null, SupportedPosBrand[], any>(
  'FETCH_SUPPORTED_POS_BRANDS',
);

// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------
export const fetchSupportedPosBrandsEpic: Epic = (action$, store, { api }) =>
  action$.filter(fetchSupportedPosBrands.started.match).mergeMap(() =>
    api
      .fetchQualifiedPosBrands()
      .map(result => fetchSupportedPosBrands.done({ params: null, result }))
      .catch(err => [fetchSupportedPosBrands.failed({ params: null, error: err })]),
  );

// ---------------------------------------------------------------------------------------------------------------------
// reducers
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: AsyncState<SupportedPosBrand[]> = {
  data: undefined,
  status: 'init',
};

export const fetchSupportedPosBrandsReducer = reducerWithInitialState(initialState as AsyncState<SupportedPosBrand[]>)
  .case(fetchSupportedPosBrands.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(fetchSupportedPosBrands.done, (state, { result }) => ({
    data: result,
    status: 'done',
  }))
  .case(fetchSupportedPosBrands.failed, (state, { error }) => ({
    data: error,
    status: 'failed',
  }));
