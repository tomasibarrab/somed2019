import { UASAgreementDTO } from '@buffet/user-agreement';
import { CurrentContext } from 'gca-react-components/src/redux-modules/currentContext';
import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import { InitState } from '../AsyncState';
import {
  LeadGenFormData,
  OnBoardingState,
  RideResponse,
  State,
  SupportedPosBrand,
  SupportedPosBrandsIds,
  UpserveVerifyResponse,
} from '../types';

import '../commonRxjs';

export const rid = 1701;

const initalAsyncState: InitState = { data: undefined, status: 'init' };

export const setupState = (onboardStateOverride = {}, currentContextOverride = {}): State => {
  const {
    fetchSupportedPosStatus = initalAsyncState,
    fetchPosRideDataStatus = initalAsyncState,
    fetchUserAgreementStatus = initalAsyncState,
  } = onboardStateOverride as OnBoardingState;
  const { isFetching = false } = currentContextOverride as CurrentContext;

  return {
    currentContext: {
      isFetching,
      restaurant: {
        rid,
      } as any,
    } as any,
    featureToggles: {} as any,
    language: null,
    onBoarding: {
      activateUpserveLinkStatus: initalAsyncState,
      displayState: 'landing',
      fetchAlohaHaspKeyStatus: initalAsyncState,
      fetchPosRideDataStatus,
      fetchSupportedPosStatus,
      fetchUnsupportedPosBrandsStatus: initalAsyncState,
      fetchUserAgreementStatus,
      savePosBrandStatus: initalAsyncState,
      selectedPos: null,
      sendAlohaHaspKeyStatus: initalAsyncState,
      submitLeadGenStatus: initalAsyncState,
      verifyUpserveLinkStatus: initalAsyncState,
    },
    tableStatus: {
      categories: [],
      isFetchingRestaurantInfo: true,
      isFlatCategory: true,
      posType: '',
      publishSuccess: false,
      readyToPublish: false,
      rid: -1,
      selectedStatusBucket: 'unassigned',
      status: 'empty',
      statusList: [],
      tableStatusChangeEnabled: false,
    },
  };
};

export const posUpserveMock: SupportedPosBrand = {
  Id: SupportedPosBrandsIds.Upserve,
  Name: 'Upserve',
};

export const posBrandMocks: SupportedPosBrand[] = [
  { Id: SupportedPosBrandsIds.Aloha, Name: 'Aloha' },
  { Id: SupportedPosBrandsIds.Toast, Name: 'Toast' },
  { Id: SupportedPosBrandsIds['Micros 3700'], Name: 'Micros 3700' },
  { Id: SupportedPosBrandsIds.POSitouch, Name: 'POSitouch' },
  { Id: SupportedPosBrandsIds.Squirrel, Name: 'Squirrel' },
  { Id: SupportedPosBrandsIds.Dinerware, Name: 'Dinerware' },
  { Id: SupportedPosBrandsIds['Micros Simphony First Edition'], Name: 'Micros Simphony First Edition' },
  { Id: SupportedPosBrandsIds['H&L'], Name: 'H&L' },
  { Id: SupportedPosBrandsIds.Impos, Name: 'Impos' },
  posUpserveMock,
];

// to confirm list is sorted as expected
export const sortedPosBrandMocks: SupportedPosBrand[] = [
  { Id: SupportedPosBrandsIds.Aloha, Name: 'Aloha' },
  { Id: SupportedPosBrandsIds.Dinerware, Name: 'Dinerware' },
  { Id: SupportedPosBrandsIds['H&L'], Name: 'H&L' },
  { Id: SupportedPosBrandsIds.Impos, Name: 'Impos' },
  { Id: SupportedPosBrandsIds['Micros 3700'], Name: 'Micros 3700' },
  { Id: SupportedPosBrandsIds['Micros Simphony First Edition'], Name: 'Micros Simphony First Edition' },
  { Id: SupportedPosBrandsIds.POSitouch, Name: 'POSitouch' },
  { Id: SupportedPosBrandsIds.Squirrel, Name: 'Squirrel' },
  { Id: SupportedPosBrandsIds.Toast, Name: 'Toast' },
  posUpserveMock,
];

export const mockUserAgreementResponse: UASAgreementDTO = {
  agreementDetails: {
    assignedUser: 'vchuri@opentable.com',
    context: 'urn:ot.restaurants:188878',
    creationDateUTC: '2019-02-03:18:55:05Z',
    id: 'cebcafae-5c6b-4152-adeb-3c466b800032',
    lastUpdatedDateUTC: '2019-02-03:18:55:05Z',
    legalEntity: 'Red Restaurant LLC',
    locale: 'en-US',
    signingDetails: {
      firstName: 'Keivan',
      ipAddress: '10.0.0.0',
      lastName: 'Bagheri',
      signedDateUTC: '2019-02-03:18:55:05Z',
      title: 'Manager',
      userEmail: 'keivan@opentable.com',
    },
    state: 'Signed',
    termsAndConditions: [
      {
        content: 'TermsAndConditions test content',
        locale: 'en-US',
        termsId: 12,
        title: 'test',
        version: 1,
      },
    ],
    type: {
      agreeTextId: 1,
      intentTextId: 1,
      name: 'pos_integration',
    },
  },
  isSigned: true,
  source: 'UAS',
};

export function createMockState(
  selectedPos: SupportedPosBrand = { Id: SupportedPosBrandsIds.unselected, Name: '' },
): State {
  const initalState = setupState();
  return {
    ...initalState,
    currentContext: {
      isFetching: true,
      productType: 'Guest_Center',
      restaurant: {
        rid,
      } as any,
    } as any,
    onBoarding: {
      ...initalState.onBoarding,
      fetchPosRideDataStatus: {
        data: { isPosActive: false, ride: rideResponseMock },
        status: 'done',
      },
      selectedPos,
    },
  };
}

export function createAsyncMockStore(
  api: { [key: string]: () => Observable<any> } | null,
  anEpic: (action$, store, dependencies) => Observable<{}>,
  selectedPos?: SupportedPosBrand,
) {
  const mockState = createMockState(selectedPos);
  const dependencies = { api };
  const rootEpic = (action$, store) => anEpic(action$, store, dependencies);
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);
  return mockStore(mockState);
}

export const leadGenFormMock: LeadGenFormData = {
  Company: 'test co',
  Country: 'United States',
  CurrencyISOCode: 'USD',
  Disqualification_Reason__c: 'Unsupported POS Brand',
  Email: 'test@opentable.com',
  FirstName: 'Test',
  LastName: 'User',
  LeadSource: 'GCA',
  POS_Brand__c: 'a4y0c000000UpisAAC',
  Phone: '5128315711',
  Product_Type__c: 'POS',
  RID__c: '271468',
  RecordTypeID: '01230000000jw7a',
  Restaurant_or_parent__c: 'Restaurant',
  Status: 'Disqualified',
};

export const rideResponseMock: RideResponse = {
  accountStatus: 'Active Customer',
  city: 'Graeagle',
  country: 'United States',
  countryCode: 'US',
  creationDate: null,
  currencyVal: 'USD',
  customer: true,
  financeId: 'FS132838',
  financeSystemsDatabase: 'OTNEW',
  group: false,
  groupId: null,
  id: 1234,
  inventoryPartner: null,
  inventoryPartnerSiteId: null,
  lastChangedDate: '2019-02-15T19:58:19.192+0000',
  lastUpdatedDate: '2019-02-15T19:58:19.192+0000',
  latestSalesforceEventDate: '2019-02-15T19:58:19.008Z',
  legalEntity: 'test legal entity',
  migratedFromErbToGcp: false,
  migratedToAffiliation: false,
  migratedToGroups: false,
  onboardingId: null,
  outOfBusiness: false,
  parentId: null,
  posBrandId: SupportedPosBrandsIds.Toast,
  posBrandName: 'Toast',
  posVersion: '1234ABC',
  postalCode: '96103',
  primaryLanguage: 'en-US',
  primaryProduct: 'Guest Center',
  prospect: false,
  province: null,
  recordCreateDate: null,
  recordSource: 'SALESFORCE',
  relationshipType: 'Customer',
  reservationPhone: '(530) 836-0000',
  restaurantEmail: 'test@hotmail.com',
  restaurantName: 'Test Bar & Grill',
  rid: 12345,
  romsId: 6543,
  salesforceId: '0013000000rWTOoAAO',
  sequenceNumber: null,
  skus: {
    COVERS014: 'Hibernated',
    COVERS015: 'Hibernated',
    MSL022: 'Active',
    SAC012: 'Active',
    SYS010: 'Hibernated',
  },
  street1: '402 Poplar Valley Rd',
  street2: null,
  supportedProducts: 'Guest Center',
  testRestaurant: false,
  unpaidCustomer: false,
};

export const upserveVerifySimilarAddressesMock: UpserveVerifyResponse = {
  opentable_restaurant_details: {
    city: 'san francisco',
    country: 'USA',
    name: 'Steaks And More',
    state: 'CA',
    street1: '123 Kearny',
    street2: 'suite 700',
    zip: '1234',
  },
  partner_restaurant_details: {
    city: 'san francisco',
    country: 'USA',
    name: 'restaurant name',
    state: 'CA',
    street1: '123 Kearny',
    street2: 'suite 700',
    zip: '1234',
  },
};
