import { Observable } from 'rxjs/Observable';

import { AgreementDetails, UASAgreementDTO } from '@buffet/user-agreement';
import { ajaxGetJSON, ajaxPatch, ajaxPost, ajaxPut } from 'rxjs/observable/dom/AjaxObservable';
import { getAgreementContext } from '../constants';
import './commonRxjs';
import {
  AgreementType,
  AlohaHaspData,
  AlohaHaspKeyResponse,
  CategoriesDTO,
  Category,
  CategoryStatusesDTO,
  CreateUserAgreementApiParams,
  LeadGenFormData,
  PosActiveStatusResponse,
  PrimaryProductsResponse,
  RestaurantInfoDTO,
  RideResponse,
  SupportedPosBrand,
  SupportedPosBrandsIds,
  UnsupportedPosBrand,
  UpserveLinkData,
  UpserveVerifyResponse,
  UserAgreementApiParams,
} from './types';

const defaultAjaxOptions = { 'Content-Type': 'application/json' };

export const fetchQualifiedPosBrands = (): Observable<SupportedPosBrand[]> =>
  ajaxGetJSON(`/gateway/proxies/partnerServices/api/v1/pos/brands?qualified=true`);

export const fetchUnqualifiedPosBrands = (): Observable<UnsupportedPosBrand[]> =>
  ajaxGetJSON(`/gateway/proxies/partnerServices/api/v1/pos/brands?qualified=false`);

export const getPrimaryActive = (rid: number): Observable<PrimaryProductsResponse> =>
  ajaxGetJSON(`/gateway/proxies/rideService/api/v1/productline/restaurants/${rid}/primary_products`);

export const getPosActiveStatus = (rid: number): Observable<PosActiveStatusResponse> =>
  ajaxGetJSON(`/gateway/proxies/partnerServices/api/v1/restaurants/${rid}`);

export const getUserAgreement = ({ rid, agreementType }: UserAgreementApiParams): Observable<UASAgreementDTO> =>
  ajaxGetJSON(
    `/gateway/proxies/userAgreementService/v1/user-agreement/agreements/${agreementType}/${getAgreementContext(rid)}`,
  );

export const createUserAgreement
  = ({ rid, agreementType, restaurantName }: CreateUserAgreementApiParams)
  : Observable<{ response: AgreementDetails }> =>
    ajaxPost(
      `/gateway/proxies/userAgreementService/v1/user-agreement/agreements`,
      {
        context: getAgreementContext(rid),
        contextName: restaurantName,
        type: agreementType,
      },
      defaultAjaxOptions,
    );

export const submitLeadGen = (payload: LeadGenFormData) =>
  ajaxPost(`/gateway/proxies/partnerServices/api/v1/pos/${payload.RID__c}/lead`, payload, defaultAjaxOptions);

export const getRestaurantData = (rid: number): Observable<RideResponse> =>
  ajaxGetJSON(`/gateway/proxies/rideService/api/v1/restaurant/${rid}`);

export const getAlohaHaspKey = (rid: number): Observable<AlohaHaspKeyResponse> =>
  ajaxGetJSON(`/gateway/proxies/umamiPosListener/api/v1/restaurants/${rid}/hasp_key`);

export const postAlohaHasp = ({ rid, haspKey, reseller }: AlohaHaspData) =>
  ajaxPost(
    `/gateway/proxies/umamiPosListener/api/v1/restaurants/${rid}/hasp_key`,
    { hasp_key: +haspKey, reseller },
    defaultAjaxOptions,
  );

export const postSelectedPos = (salesForceId: string, posBrandId: SupportedPosBrandsIds) =>
  ajaxPost(
    `/gateway/proxies/umamiPosListener/api/v1/pos/${salesForceId}/posbrand`,
    { pos_brand_id: posBrandId },
    defaultAjaxOptions,
  );

export const cancelPosActivation = (rid: number) =>
  ajaxPut(
    `/gateway/proxies/umamiPosListener/api/v1/pos/restaurants/${rid}/onboarding/reset`,
    null,
    defaultAjaxOptions,
  );

export const verifyUpserveLink = ({ rid, link }: UpserveLinkData): Observable<{ response: UpserveVerifyResponse }> =>
  ajaxPost(
    `/gateway/proxies/umamiPosListener/api/v1/pos/restaurants/${rid}/onboarding/verify`,
    { pos_brand: 'upserve', url_identifier: link },
    defaultAjaxOptions,
  );

export const activateUpserveLink = ({ rid, link }: UpserveLinkData) =>
  ajaxPost(
    `/gateway/proxies/umamiPosListener/api/v1/pos/restaurants/${rid}/onboarding/activate`,
    { pos_brand: 'upserve', url_identifier: link },
    defaultAjaxOptions,
  );

export function fetchCategories({ rid }: { rid: number }): Observable<CategoriesDTO> {
  return ajaxGetJSON(`/gateway/proxies/partnerServices/api/v1/restaurants/${rid}/menucategory`);
}

export function fetchStatuses(): Observable<CategoryStatusesDTO> {
  return ajaxGetJSON(`/gateway/proxies/partnerServices/api/v1/category_status`);
}

export function publishStatus(rid: number, categories: Category[]) {
  return ajaxPatch(
    `/gateway/proxies/partnerServices/api/v1/restaurants/${rid}/menucategory`,
    JSON.stringify({ categories }),
    { 'Content-Type': 'application/json' },
  );
}

export function getRestaurantInfo(rid: number): Observable<RestaurantInfoDTO> {
  return ajaxGetJSON(`/gateway/proxies/partnerServices/api/admin/pos/restaurants/${rid}`);
}

export function updateRetaurantTableStatusChangeEnabled(rid: number, enabled: boolean) {
  return ajaxPatch(`/gateway/proxies/partnerServices/api/admin/pos/restaurants/${rid}/${enabled}`);
}
