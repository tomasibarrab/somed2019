/**
 * Combine all reducers in this file and export the combined reducers.
 * If we were to do this in store.js, reducers wouldn't be hot reloadable.
 */
import { currentContextReducer } from 'gca-react-components/src/redux-modules/currentContext';
import { featureTogglesReducer } from 'gca-react-components/src/redux-modules/featureToggles';
import {
  createReducer as createLanguageReducer,
  LangLocale,
} from 'gca-react-components/src/redux-modules/languageProvider';
import get from 'lodash/get';
import { combineReducers } from 'redux';
import { notificationReducer } from 'shared-react-smart-ui/NotificationCenter';
import { tableStatusReducer } from '../store/tablestatus/tablestatus';
import {
  activateUpserveLinkReducer,
  getAlohaHaspKeyReducer,
  sendAlohaHaspKeyReducer,
  verifyUpserveLinkReducer,
} from './onboarding/nextStepsData';
import { displayStateReducer, selectPosBrandReducer } from './onboarding/onboarding';
import { cancelPosActivationReducer, fetchPosRideDataReducer } from './onboarding/posStatus';
import { savePosBrandReducer } from './onboarding/savePosBrand';
import { fetchSupportedPosBrandsReducer } from './onboarding/supportedPosBrands';
import { submitLeadGenReducer } from './onboarding/unsupportedPosbrands';
import { fetchUnsupportedPosBrandsReducer } from './onboarding/unsupportedPosBrandsData';
import { fetchUserAgreementReducer } from './onboarding/userAgreement';
import { OnBoardingState, State } from './types';

const locale: LangLocale = get(window, ['gcaConfig', 'i18n', 'primaryLocale']);

/**
 * Creates the main reducer with the asynchronously loaded ones
 */
export default function createReducer() {
  return combineReducers<State>({
    currentContext: currentContextReducer,
    featureToggles: featureTogglesReducer,
    language: createLanguageReducer({ locale: locale || 'en-us' }),
    notifications: notificationReducer,
    onBoarding: combineReducers<OnBoardingState>({
      activateUpserveLinkStatus: activateUpserveLinkReducer,
      cancelPosActivationStatus: cancelPosActivationReducer,
      displayState: displayStateReducer,
      fetchAlohaHaspKeyStatus: getAlohaHaspKeyReducer,
      fetchPosRideDataStatus: fetchPosRideDataReducer,
      fetchSupportedPosStatus: fetchSupportedPosBrandsReducer,
      fetchUnsupportedPosBrandsStatus: fetchUnsupportedPosBrandsReducer,
      fetchUserAgreementStatus: fetchUserAgreementReducer,
      savePosBrandStatus: savePosBrandReducer,
      selectedPos: selectPosBrandReducer,
      sendAlohaHaspKeyStatus: sendAlohaHaspKeyReducer,
      submitLeadGenStatus: submitLeadGenReducer,
      verifyUpserveLinkStatus: verifyUpserveLinkReducer,
    }),
    tableStatus: tableStatusReducer,
  });
}
