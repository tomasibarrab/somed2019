import { CurrentContext } from 'gca-react-components/src/redux-modules/currentContext';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { LanguageProvider } from 'gca-react-components/src/redux-modules/languageProvider';
import { Dispatch as ReduxDispatch, Store as ReduxStore } from 'redux';
import { ActionsObservable } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import { NotificationState } from 'shared-react-smart-ui/NotificationCenter';
import { Action as FsaAction } from 'typescript-fsa';
import { Dependencies } from './store';

import { AsyncState } from './AsyncState';

export type OnboardingDisplayStateName =
  | 'landing'
  | 'posSelect'
  | 'nextSteps'
  | 'active'
  | 'unsupportedPos'
  | 'submittedLeadGen';

export enum SupportedPosBrandsIds {
  'Aloha' = 'a4y0c000000UphzAAC',
  'Toast' = 'a4y0c000000Upi0AAC',
  'Micros 3700' = 'a4y0c000000Upi1AAC',
  'POSitouch' = 'a4y0c000000Upi2AAC',
  'Squirrel' = 'a4y0c000000Upi3AAC',
  'Dinerware' = 'a4y0c000000Upi4AAC',
  'Micros Simphony First Edition' = 'a4y0c000000Upi5AAC',
  'H&L' = 'a4y0c000000Upi7AAC',
  'Impos' = 'a4y0c000000Upi8AAC',
  'SMS' = 'a4y0c000000LZ0fAAG',
  'Upserve' = 'a4y0c000000UpiDAAS',
  'unselected' = '',
}

export interface SupportedPosBrand {
  Id: SupportedPosBrandsIds;
  Name: string;
}

export interface UnsupportedPosBrand {
  Id: string;
  Name: string;
}

export interface OnBoardingState {
  activateUpserveLinkStatus: AsyncState<undefined>;
  verifyUpserveLinkStatus: AsyncState<UpserveVerifyResponse>;
  displayState: OnboardingDisplayStateName;
  fetchAlohaHaspKeyStatus: AsyncState<AlohaHaspKeyResponse>;
  fetchPosRideDataStatus: AsyncState<PosRideData>;
  fetchSupportedPosStatus: AsyncState<SupportedPosBrand[]>;
  fetchUnsupportedPosBrandsStatus: AsyncState<UnsupportedPosBrand[]>;
  fetchUserAgreementStatus: AsyncState<boolean>;
  savePosBrandStatus: AsyncState<undefined>;
  selectedPos: SupportedPosBrand;
  sendAlohaHaspKeyStatus: AsyncState<undefined>;
  submitLeadGenStatus: AsyncState<undefined>;
}

export interface State extends NotificationState {
  currentContext: CurrentContext;
  featureToggles: FeatureToggles;
  language: LanguageProvider;
  onBoarding: OnBoardingState;
  tableStatus: TableStatus;
}

export type Action = FsaAction<any>;
export type Store = ReduxStore<State>;
export type Dispatch = ReduxDispatch<Action>;
export type Epic = (action$: ActionsObservable<Action>, store: Store, options: Dependencies) => Observable<Action>;

export interface PrimaryProduct {
  product: string;
  status: 'Active' | 'Inactive' | 'Pending Active' | 'Pending Inactive';
}

export interface PrimaryProductsResponse {
  rid: number;
  primaryProducts: PrimaryProduct[];
}

export interface LeadGenFormData {
  Company: string; // user company
  Country: 'United States';
  CurrencyISOCode: 'USD';
  Disqualification_Reason__c: 'Unsupported POS Brand';
  Email: string; // user email
  FirstName: string; // user first name
  LastName: string; // user last name
  LeadSource: 'GCA';
  POS_Brand__c: string; // user pos id
  Phone: number | string; // user phone number
  Product_Type__c: 'POS';
  RID__c: string; // resturant rid
  RecordTypeID: '01230000000jw7a';
  Restaurant_or_parent__c: 'Restaurant';
  Status: 'Disqualified';
}

export interface RideResponse {
  id: number;
  rid: number;
  onboardingId: null;
  salesforceId: string;
  romsId: number;
  financeId: string;
  restaurantName: string;
  primaryProduct: string;
  reservationPhone: string;
  restaurantEmail: string;
  street1: string;
  street2: null;
  city: string;
  province: null;
  postalCode: string;
  country: string;
  currencyVal: string;
  testRestaurant: boolean;
  outOfBusiness: boolean;
  unpaidCustomer: boolean;
  parentId: null;
  relationshipType: string;
  recordCreateDate: null;
  recordSource: string;
  sequenceNumber: null;
  migratedToGroups: boolean;
  migratedToAffiliation: boolean;
  groupId: null;
  latestSalesforceEventDate: string;
  inventoryPartner: null;
  inventoryPartnerSiteId: null;
  creationDate: null;
  lastUpdatedDate: string;
  financeSystemsDatabase: string;
  accountStatus: string;
  countryCode: string;
  primaryLanguage: string;
  supportedProducts: string;
  migratedFromErbToGcp: boolean;
  skus: {
    MSL022: string;
    COVERS014: string;
    SAC012: string;
    SYS010: string;
    COVERS015: string;
  };
  prospect: boolean;
  group: boolean;
  customer: boolean;
  lastChangedDate: string;
  legalEntity: string;
  posBrandId: SupportedPosBrandsIds;
  posBrandName: keyof typeof SupportedPosBrandsIds;
  posVersion: string;
}

export interface AlohaHaspData {
  rid: number;
  haspKey: string;
  reseller: string;
}

export interface AlohaHaspKeyResponse {
  hasp_key: number;
}

export interface UserAgreementData {
  isSigned: boolean;
  displayState: OnboardingDisplayStateName;
}

export interface SubmitPosBrandPayload {
  salesForceId: string;
  posBrandId: SupportedPosBrandsIds;
}

export interface PosRideData {
  isPosActive: boolean;
  ride: RideResponse;
}

export enum AgreementType {
  omnivore = 'pos_integration',
  generic = 'pos_integration_generic',
}

export interface FetchAgreementDetailsParams {
  rid: number;
  agreementTypes: AgreementType[];
}

export interface UpserveLinkData {
  rid: number;
  link: string; // a url
}

export interface TableStatus {
  categories: Category[];
  selectedStatusBucket: string;
  status: 'loading' | 'done' | 'error' | 'empty';
  readyToPublish: boolean;
  publishSuccess: boolean;
  isFlatCategory: boolean;
  tableStatusChangeEnabled: boolean;
  posType: string;
  rid: number;
  isFetchingRestaurantInfo: boolean;
  statusList: CategoryStatus[];
}

export interface Category {
  name: string;
  parent_category_id: null | string;
  category_id: string;
  status_id: null | number;
  checked: boolean;
  level: number;
}

export interface CategoryStatusesDTO {
  statuses: CategoryStatus[];
}

export interface CategoryStatus {
  id: number;
  status: CategoryStatusEnum;
  rank: number;
}

export type CategoryStatusEnum = 'appetizer' | 'entree' | 'dessert' | 'other' | 'unassigned' | 'all';

export interface CategoryStatusOption {
  id: number;
  status: CategoryStatusEnum;
  rank: number;
  label: CategoryStatusEnum;
  value: CategoryStatusEnum;
}

export interface CategoryDTO {
  name: string;
  parent_category_id: null | string;
  category_id: string;
  status_id: null | number;
  checked: boolean;
  level: number;
}

export interface CategoriesDTO {
  categories: CategoryDTO[];
}

export interface RestaurantInfoDTO {
  table_status_change_enabled: boolean;
  pos_type: string;
}

export interface RestaurantAddress {
  name: string;
  street1: string;
  street2: string;
  city: string;
  state: string;
  country: string;
  zip: string;
}

export interface UpserveVerifyResponse {
  partner_restaurant_details: RestaurantAddress;
  opentable_restaurant_details: RestaurantAddress;
}

export interface PosActiveStatusResponse {
  pos_integration_enabled: boolean;
}

export interface UserAgreementApiParams {
  rid: number;
  agreementType: AgreementType;
}

export interface CreateUserAgreementApiParams extends UserAgreementApiParams {
  restaurantName: string;
}
