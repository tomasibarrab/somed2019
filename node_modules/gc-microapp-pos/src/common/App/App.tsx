/**
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import eventTracker from '@buffet/event-tracker';
import { FeatureToggle } from 'gca-react-components';
import { AsyncContent, Layout } from 'gca-react-components';
import { selectors as contextSelectors } from 'gca-react-components/src/redux-modules/currentContext';
import { selectors as ftSelectors } from 'gca-react-components/src/redux-modules/featureToggles';
import { initializeGcScope } from 'gca-react-components/src/redux-modules/initializeApp';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';
import NotificationCenter from 'shared-react-smart-ui/NotificationCenter';
import { GcScope, getGcScope } from 'shared-utils/gcScope';
import PosOnboarding from '../../PosOnboarding/PosOnboarding';
import PosTableStatusPage from '../../PosTableStatusPage/PosTableStatusPage';
import { selectors } from '../../store/onboarding/onboarding';
import { State } from '../../store/types';

import PosNav from '../PosNav/PosNav';
import './App.scss';

interface SP {
  error: boolean;
  loading: boolean;
}

interface DP {
  initializeGcScope: (payload: GcScope) => void;
}

type Props = SP & DP & InjectedIntlProps;

class App extends React.Component<Props, {}> {
  public render() {
    const { formatMessage } = this.props.intl;

    return (
      <Layout title={formatMessage({ id: 'app.title' })}>
        {this.posNav()}
        <section className="app-content">
          <NotificationCenter />
          <AsyncContent
            isLoading={this.props.loading}
            isError={this.props.error}
            errorTitle={formatMessage({ id: 'app.errorTitle' })}
            errorMessage={formatMessage({ id: 'app.errorMessage' })}
          >
            <Switch>
              <Route exact path="/table-status" component={this.tableStatus} />
              <Route exact path="/" component={this.posOnboarding} />
              <Redirect to="/" />
            </Switch>
          </AsyncContent>
        </section>
      </Layout>
    );
  }

  public posNav() {
    return (
      <FeatureToggle featureId="transientGCAPOSTableStatus">
        <PosNav />
      </FeatureToggle>
    );
  }

  public componentDidMount() {
    this.props.initializeGcScope(getGcScope(window));
    eventTracker.enable();
  }

  private posOnboarding() {
    return (
      <FeatureToggle featureId="transientPosNewOnboarding">
        <PosOnboarding />
      </FeatureToggle>
    );
  }

  private tableStatus() {
    return (
      <FeatureToggle featureId="transientGCAPOSTableStatus">
        <PosTableStatusPage />
      </FeatureToggle>
    );
  }
}

const mapState = (state: State): SP => ({
  error: contextSelectors.currentContext(state).fetchFailed,
  loading: selectors.isAppLoading(state) || ftSelectors.featureToggles(state).isFetching,
});

const mapDispatch = {
  initializeGcScope,
};

const Connected = connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(injectIntl<Props>(App));

export default Connected;
export { App as PureApp, Props };
