import { Button } from '@buffet/button';
import Modal, { ModalType } from '@buffet/modal';
import { shallow } from 'enzyme';
import * as React from 'react';
import { FormattedMessage } from 'react-intl';
import BackButton from 'shared-react-atomic-ui/BackButton';
import { PureChangePosButton as ChangePosBtn } from './ChangePosBtn';

describe('<ChangePosBtn/>', () => {
  const setup = (showConfirmation = false) => {
    const cancelPosActivation = jest.fn(() => null;
    const props = {
      cancelPosActivation,
      intl: { formatMessage: jest.fn(({ id }) => id) } as any,
      showConfirmation,
    };
    return {
      cancelPosActivation,
      changePosBtn: shallow(
        <ChangePosBtn
          {...props}
        />,
      ),
    };
  };

  it('should have an id of "show-confirmation" for show confirmation', () => {
    const { changePosBtn } = setup(true);

    expect(changePosBtn.find(Button).props().testId).toEqual('show-confirmation');
    expect(changePosBtn.find(Modal).props().type).toEqual(ModalType.prompt);
  });

  it('should have an id of "change-pos" for not showing confirmation', () => {
    const { changePosBtn } = setup();

    expect(changePosBtn.find(BackButton).props().testId).toEqual('change-pos');
    expect(changePosBtn.find(Modal)).toHaveLength(0);
  });

  it('should trigger cancel action directly without confirmation', () => {
    const { changePosBtn, cancelPosActivation } = setup();

    expect(changePosBtn.find(BackButton).props().testId).toEqual('change-pos');
    changePosBtn.find(BackButton).simulate('click');
    expect(cancelPosActivation).toHaveBeenCalled();
  });

  it('should not show modal by default', () => {
    const { changePosBtn } = setup(true);

    expect(changePosBtn.find(Modal).props().open).toEqual(false);
  });

  it('should show modal when prompt is clicked', () => {
    const { changePosBtn } = setup(true);

    changePosBtn.find(Button).simulate('click');
    expect(changePosBtn.find(Modal).props().open).toEqual(true);
  });

  it('should render children', () => {
    const { changePosBtn } = setup();

    expect(changePosBtn.find(FormattedMessage).length).toBe(1);
  });
});
