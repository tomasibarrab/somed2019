import { createMixpanelMiddleware } from 'gca-react-components';
// tslint:disable-next-line:max-line-length
import { createMixpanelDispatcher } from 'gca-react-components/src/redux-middleware/mixpanel-redux-middleware';
import {
  actionNames,
  createActionEvent,
  createLoadPageEvent,
  createPublishEvent,
  eventNames } from 'gca-react-components/src/redux-modules/mixpanel';
import { actions, FormData, UserDTO } from './myProfile/myProfile';
import { Action, State } from './types';

const app: string = 'MyProfile';
const defaultProps = {
  app,
};

const mixpanelDispatcher = createMixpanelDispatcher(defaultProps);

export const STARTED = 'started';
export const SUCCESS = 'success';
export const FAILURE = 'failure';

interface PublishProps {
  changedFields: string[];
  feature: string;
  action: string;
  info: string;
}

const trackedActions = {
  [actions.fetchUser.done.type]: createLoadPageEvent({ feature: app, props: { info: SUCCESS } }),
  [actions.fetchUser.failed.type]: createLoadPageEvent({ feature: app, props: { info: FAILURE } }),
  // tracking on started because might end up redirecting on done, and want to make sure these changes are tracked
  [actions.updateUser.started.type]: {
    event: eventNames.PUBLISH,
    props: (state: State, action: Action): PublishProps => {
      let changedFields: string[] = [];
      const user: UserDTO | null = state.myProfile.user;
      const formData: FormData = action.payload;

      if (user) {
        changedFields = Object.keys(formData).reduce((changed: string[], fieldName: string) => {
          if (user[fieldName] !== formData[fieldName]) {
            changed.push(fieldName);
          }

          return changed;
        },
        []);

        changedFields.forEach((fieldName: string) => mixpanelDispatcher(eventNames.CUSTOM_ACTION, {
          action: 'Field changed',
          feature: app,
          fieldName,
        }));
      }

      return { changedFields, feature: app, action: actionNames.UPDATE, info: STARTED };
    },
  },
  [actions.updateUser.failed.type]: createPublishEvent({
    action: actionNames.UPDATE,
    feature: app,
    props: { info: FAILURE },
  }),
};

export default createMixpanelMiddleware({
  defaultProps,
  trackedActions,
});
