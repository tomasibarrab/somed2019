import { shallow } from 'enzyme';
import React from 'react';

import { UICard, UICardProps } from './UICard';

describe('<UICard />', () => {

  const setup = (propOverrides: any = null): { cardProps: UICardProps; renderedUICard: any } => {
    const defaultCardProps = {
      cta: 'Click your cta',
      ctaOpenTab: false,
      ctaUrl: '/restaurant/{rid}/reporting/reservations',
      description: 'Test card description',
      imageComponent: null,
      linkable: false,
      title: 'This is a test card',
    };
    const cardProps = { ...defaultCardProps, ...propOverrides };

    const renderedUICard = shallow(<UICard {...cardProps} />);

    return { cardProps, renderedUICard };
  };

  it('should display card in default unlinkable state', () => {
    const { cardProps, renderedUICard } = setup();

    expect(renderedUICard).toBeDefined();
    const cta = renderedUICard.find('.card-call-to-action').text();
    expect(cta).toBe(cardProps.cta);
    const description = renderedUICard.find('.card-description').text();
    expect(description).toBe(cardProps.description);
    const title = renderedUICard.find('.card-title').text();
    expect(title).toBe(cardProps.title);

    // not linkable by default
    const linkable = renderedUICard.find('.uicard.enabled');
    expect(linkable.length).toBe(0);
  });

  it('should display generic card, in linkable state', () => {
    const { renderedUICard } = setup({ linkable: true });

    // is now linkable
    const linkable = renderedUICard.find('.uicard.enabled');
    expect(linkable.length).toBe(1);
  });

  it('should call click handler for linkable card and not open in new tab', () => {
    window.open = jest.fn();
    const clickCallback = jest.fn();

    const { cardProps, renderedUICard } = setup({
      clickCallback,
      linkable: true,
    });

    // window.open was clicked and callback clicked
    const linkable = renderedUICard.find('.uicard.enabled');
    linkable.at(0).simulate('click');
    expect(window.open).toHaveBeenCalledWith(cardProps.ctaUrl, '_self');
    expect(clickCallback).toHaveBeenCalled();
  });

  it('should call click handler for linkable card and open in new tab', () => {
    window.open = jest.fn();
    const clickCallback = jest.fn();

    const { cardProps, renderedUICard } = setup({
      clickCallback,
      ctaOpenTab: true,
      linkable: true,
    });

    // window.open was clicked and callback clicked
    const linkable = renderedUICard.find('.uicard.enabled');
    linkable.at(0).simulate('click');
    expect(window.open).toHaveBeenCalledWith(cardProps.ctaUrl, '_blank');
    expect(clickCallback).toHaveBeenCalled();
  });

  it('should not call click handler for non-linkable card', () => {
    window.open = jest.fn();
    const clickCallback = jest.fn();

    const { cardProps, renderedUICard } = setup({
      clickCallback,
    });

    // nothing happens when clicked
    const linkable = renderedUICard.find('.uicard');
    linkable.at(0).simulate('click');
    expect(window.open).not.toHaveBeenCalled();
    expect(clickCallback).not.toHaveBeenCalled();
  });
});
