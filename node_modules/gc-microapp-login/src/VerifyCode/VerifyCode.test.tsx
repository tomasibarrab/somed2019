// tslint:disable:object-literal-sort-keys
import {
  cleanup,
  render,
} from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { MemoryRouter } from 'react-router';
import VerifyCode from './VerifyCode';

jest.mock('../common/api');
import * as messages from '../translations/json/en-us.json';

export default function getIntl() {
  // Create the IntlProvider to retrieve context for wrapping around.
  const intlProvider = new IntlProvider({ locale: 'en-us', messages }, {});
  return intlProvider.getChildContext().intl;
}

afterEach(cleanup)

// tslint:disable-next-line
const consoleError = console.error;
beforeAll(() => {
  jest.spyOn(console, 'error').mockImplementation((...args) => {
    if (!args[0].includes('Warning: An update to %s inside a test was not wrapped in act')) {
      consoleError(...args);
    }
  });
});


describe('VerifyCode component', () => {

  const props = {
    cellphone: '18005552222',
    inProgress: false,
    intl: getIntl(),
    handleConnectionFail: jest.fn(),
    handleLogin: jest.fn(),
    handleLoginResponse: jest.fn(),
    loginCredentials: { username: 'user@ail.com', password: 'secret' },
    message: undefined,
    setMessage: jest.fn(),
  };

  const renderTree = (node) => {
    return <IntlProvider locale="en" messages={messages}>
      <MemoryRouter initialEntries={['/register-phone']} >
        {node}
      </MemoryRouter>
    </IntlProvider>
  };

  const rendererWithIntl = node => render(renderTree(node));

  test('UI elements are displayed when the page is loaded', () => {
    const { getByTestId } = rendererWithIntl(<VerifyCode {...props} />);
    expect(getByTestId('verify-code-input')).toBeDefined();
    expect(getByTestId('submit-button')).toBeDefined();
    expect(getByTestId('resend-code-button')).toBeDefined();
  });
});
