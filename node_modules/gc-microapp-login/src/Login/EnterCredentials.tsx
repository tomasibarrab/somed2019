// tslint:disable:object-literal-sort-keys
import React from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { NavLink } from 'react-router-dom';
import { InputFinalField } from 'shared-react-atomic-ui/finalform-fields';
import * as validate from 'shared-utils/validate';
import LoginContainer from '../common/LoginContainer/LoginContainer'

import { Routes } from '../common/App/routes';
import { SubmitButton } from '../common/App/SubmitButton';
import { MessagePanel } from '../common/MessagePanel/MessagePanel';
import { LoginRequest, Message } from '../common/types';

interface EnterCredentialsOwnProps {
  inProgress: boolean;
  handleLogin: (request: LoginRequest) => void;
  message: Message | undefined;
}

type EnterCredentialsProps = EnterCredentialsOwnProps & InjectedIntlProps;

export function EnterCredentials({
  inProgress,
  intl,
  message,
  handleLogin,
}: EnterCredentialsProps) {

  const validateUser = React.useCallback(validate.create({
    username: validate.email(intl.formatMessage({ id: 'EnterValidEmailMessage' })),
    password: validate.required(intl.formatMessage({ id: 'ErrorEmptyUsernamePassword' })),
  }), []);

  return (
    <LoginContainer>
      <Form
        onSubmit={handleLogin}
        initialValues={{ username: '', password: '' }}
        validate={validateUser}
        render={(p) => (
          <form onSubmit={p.handleSubmit}>
            <div className="login-content login-content--spacing-xxlarge">
              <MessagePanel message={message} />
              <InputFinalField
                name="username"
                label={intl.formatMessage({ id: 'Email' })}
                data-testid="user-name-text-input"
              />
              <InputFinalField
                name="password"
                type="password"
                label={intl.formatMessage({ id: 'Password' })}
                data-testid="password-text-input"
              />
              <SubmitButton
                onSubmit={p.handleSubmit}
                inProgress={inProgress}
                label={intl.formatMessage({ id: 'SignIn' })}
                data-testid="submit-button"
              />
            </div>
            <div className="login-footer">
              <NavLink to={{ pathname: Routes.ForgotPassword, state: { email: p.values.username } }}>
                <FormattedMessage id="ForgotPassword" />
              </NavLink>
            </div>
          </form>
        )}
      />
    </LoginContainer>
  );
}

export default injectIntl(EnterCredentials);
