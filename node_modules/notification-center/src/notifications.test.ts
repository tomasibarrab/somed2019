import { Notification } from '../types';
import { addNotification, notificationReducer, removeNotification, removeNotificationById } from './notifications';

describe('actions', () => {
  describe('add Notification', () => {
    it('should take a notification to add to the array', () => {
      const payload: Notification = {
        message: 'Human sacrifice, dogs and cats living together... mass hysteria!',
      };
      const actual = addNotification(payload);

      expect(actual).toEqual({ payload, type: 'ADD_NOTIFICATION' });
    });
  });
  describe('remove Notification', () => {
    it('should take an index of which notification to remove', () => {
      const payload: number = 1;
      const actual = removeNotification(payload);

      expect(actual).toEqual({ payload, type: 'REMOVE_NOTIFICATION' });
    });
  });

  describe('remove Notification By Id', () => {
    it('should take a symbol to remove a nofication', () => {
      const payload: symbol = Symbol();
      const actual = removeNotificationById(payload);

      expect(actual).toEqual({ payload, type: 'REMOVE_NOTIFICATION_BY_ID' });
    });
  });
});

describe('notification reducer', () => {
  describe('add notification', () => {
    it('should add a notification to the array', () => {
      const payload1 = { message: 'Im Henry the eighth I am' };
      const action1 = addNotification(payload1);
      const actual1 = notificationReducer([], action1);

      const expected1 = [payload1];
      expect(actual1).toEqual(expected1);

      const payload2 = { message: 'Henry the eighth I am I am' };
      const action2 = addNotification(payload2);
      const actual2 = notificationReducer(actual1, action2);

      const expected2 = [payload2, payload1];
      expect(actual2).toEqual(expected2);

      expect(actual1).not.toEqual(actual2);
    });

    it('should remove a notification if the id is already there, and add the new one to the end', () => {
      const not1Id = Symbol();
      const not1 = { message: 'apple', id: not1Id };
      const not2 = { message: 'banana' };
      const not3 = { message: 'orange' };

      const testState = [not3, not2, not1];

      const updatedNot1 = { message: 'tomato', id: not1Id };

      const actual = notificationReducer(testState, addNotification(updatedNot1));

      expect(actual).toEqual([updatedNot1, not3, not2]);
    });
  });

  it('should remove a notification from the array', () => {
    const notification1 = { message: 'Im her eighth old man, Im Henry' };
    const notification2 = { message: 'Henry the eighth I am' };
    const notification3 = { message: 'Second verse, same as the first' };
    const notification4 = { message: 'Im Henry the eighth I am' };
    const testState = [notification1, notification2, notification3, notification4];

    const action1 = removeNotification(2);
    const actual1 = notificationReducer(testState, action1);

    expect(actual1).toEqual([notification1, notification2, notification4]);

    const actual2 = notificationReducer(actual1, removeNotification(0));
    expect(actual2).toEqual([notification2, notification4]);

    expect(actual1).not.toEqual(actual2);
  });

  describe('remove notification by id', () => {
    it('should remove a notification by symbol id', () => {
      const id = Symbol();

      const notification1 = { message: 'What makes you think she is a witch?', id };
      const notification2 = { message: 'She turned me into a newt.' };
      const notification3 = { message: 'A newt?' };
      const notification4 = { message: 'Well I got better.' };

      const testState = [notification1, notification2, notification3, notification4];

      const actual = notificationReducer(testState, removeNotificationById(id));

      expect(actual).toEqual([notification2, notification3, notification4]);
    });

    it('should return state if it cannot find the id', () => {
      const id = Symbol();

      const notification1 = { message: 'What makes you think she is a witch?' };
      const notification2 = { message: 'She turned me into a newt.' };
      const notification3 = { message: 'A newt?' };
      const notification4 = { message: 'Well I got better.' };

      const testState = [notification1, notification2, notification3, notification4];

      const actual = notificationReducer(testState, removeNotificationById(id));

      expect(actual).toBe(testState);
    });
  });
});
