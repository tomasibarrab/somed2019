module.exports = (BundlesReader, ManifestReader, TranslationPaths, HTTPService, HTTPLogging, TranslationsDownload, TranslationsUpload, TranslationsImport, WriterStream, _, Promise) ->

  HTTPService.setGlobalPlugins([HTTPLogging])
  #Logger.useWinston()

  class TranslationsClient

    @upload: (rootPath, manifestFile, bundlesFolder) ->
      TranslationPaths.setRoot(rootPath)
      TranslationPaths.setManifestFile(manifestFile)
      TranslationPaths.setBundlesFolder(bundlesFolder)
      (new TranslationsClient()).upload()

    @download: (rootPath, manifestFile, bundlesFolder, supportingFilesFolder) ->
      TranslationPaths.setRoot(rootPath)
      TranslationPaths.setManifestFile(manifestFile)
      TranslationPaths.setBundlesFolder(bundlesFolder)
      TranslationPaths.setSupportingFilesFolder(supportingFilesFolder)
      (new TranslationsClient()).download()

    constructor: ->
      @bundlesReader = new BundlesReader(TranslationPaths.bundlesPath())
      @manifestReader = new ManifestReader(TranslationPaths.manifestPath())

    upload: ->
      @getManifest()
        .then(@getBundles)
        .then(@uploadBundles)
        .then(@importLocaleMappings)

    download: ->
      @getManifest()
        .then(@downloadBundles)
        .then(@processWriters)

    getManifest: =>
      @manifestReader
        .getManifest()
        .then (@manifest) =>

    getBundles: =>
      @bundlesReader
        .getBundles()
        .then (@bundles) =>

    uploadBundles: =>
      TranslationsUpload.upload(@bundles)

    importLocaleMappings: =>
      TranslationsImport.import(@manifest, @bundles)

    downloadBundles: =>
      TranslationsDownload.download(@manifest)

    processWriters: (results) =>
      Promise.all _.flatten _.map(results, (result) =>
        WriterStream.run(@manifest, result))
