import cloneDeep from 'lodash/cloneDeep';
import {
  getAmount,
  getCancellationPenalty,
  getDays,
  initialValuesSelector,
  isDayOfReservationCutoffPenalty,
  promoFormDefaults,
} from './promoForm';
import { initialState } from './promos';

const basePromo = {
  creditCardDay: {
    Specification: {
      schemaVersion: 1,
      specification: {
        cancellationPenalty: {
          amount: 25,
          dayOfReservationCutoff: {
            time: '19:00',
          },
          isStrict: true,
        },
      },
    },
    createdBy: 'aselbie@opentable.com',
    createdDateTime: '2017-03-23 17:17:29.923',
    effectiveDate: '2017-12-25',
    endTime: '22:30:00',
    partySize: 1,
    startTime: '16:30:00',
    version: 1,
  },
  id: 5,
  promo: {
    DisplayLinkEndDate: '2017-12-25T00:00:00',
    DisplayLinkStartDate: '2017-10-17T00:00:00',
    EventEndDate: '2017-12-25T00:00:00',
    EventStartDate: '2017-12-24T00:00:00',
    ShortTitle: 'Special Christmas Eve Reservations',
    ThumbnailImage: 'Carousel_XmasEve2017.jpg',
    liveNow: true,
    type: 'Seasonal',
  },
  promoRestaurant: {
    isActive: true,
    language: 'en-US',
    message: 'We are offering an awesome Christmas Eve dinner!',
    rank: 1,
    updatedBy: 'aselbie@opentable.com',
    updatedOn: '2017-04-17T00:00:00',
  },
};

const baseState = {
  promos: {
    ...initialState,
    currentPromoId: 5,
    promos: {
      5: basePromo,
    },
  },
};

describe('promosForm', () => {
  test('promoFormDefaults', () => {
    expect(promoFormDefaults({})).toMatchSnapshot();
  });

  test('isDayOfReservationCutoffPenalty', () => {
    expect(
      isDayOfReservationCutoffPenalty(basePromo.creditCardDay.Specification.specification.cancellationPenalty),
    ).toEqual(true);
  });

  test('getCancellationPenalty', () => {
    expect(getCancellationPenalty(basePromo)).toMatchSnapshot();
  });

  test('getDays', () => {
    expect(getDays(basePromo)).toEqual(0);
  });

  test('getAmount', () => {
    expect(getAmount(basePromo)).toEqual(25);
  });

  describe('initialValuesSelector', () => {
    test('base case', () => {
      expect(initialValuesSelector(baseState)).toMatchSnapshot();
    });

    test('timeSpanCutoff', () => {
      const state = cloneDeep(baseState);
      delete state.promos.promos[5].creditCardDay.Specification.specification.cancellationPenalty
        .dayOfReservationCutoff;
      state.promos.promos[5].creditCardDay.Specification.specification.cancellationPenalty.timeSpanCutoff = {
        days: 8,
      };

      expect(initialValuesSelector(state).days).toEqual(8);
    });
  });
});
