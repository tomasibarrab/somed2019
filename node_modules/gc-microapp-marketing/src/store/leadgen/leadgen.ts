import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import { Action, actionCreatorFactory } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import '../commonRxjs';
import { Epic, State, Store } from '../types';
import { GuestCampaignLead, LeadGen, LeadGenType, SalesForceLead, Status } from './leadgen.types';
import { LeadGenForm } from './leadgenForm';

interface SalesForceLeadConstants {
  Marketing_ID__c: string;
  Product_Type__c: string;
}

const SalesForceLeadConstants: { [type: string]: SalesForceLeadConstants } = {
  [LeadGenType.GuestCampaign]: {
    Marketing_ID__c: 'CS_GCA_GCAMP',
    Product_Type__c: 'Promoted Results',
  },
  [LeadGenType.PrivateDining]: {
    Marketing_ID__c: 'CS_GCA_PD',
    Product_Type__c: 'Private Dining',
  },
};

// --------------------------------- //
// Actions
// --------------------------------- //

const createAction = actionCreatorFactory('SALESFORCE_LEAD');

interface LeadGenStarted {
  type: LeadGenType;
  user: LeadGenForm;
}

export const createSalesForceLead = createAction.async<LeadGenStarted, {}>('CREATE');
// --------------------------------- //
// Reducer
// --------------------------------- //
const initialState: LeadGen = {
  requested: {},
  status: Status.Init,
};

export const reducer = reducerWithInitialState(initialState)
  .case(createSalesForceLead.started, (state: LeadGen) => ({ ...state, status: Status.Started }))
  .case(createSalesForceLead.done, (state: LeadGen, payload) => ({
    ...state,
    requested: { ...state.requested, [payload.params.type]: true },
    status: Status.Done,
  }))
  .case(createSalesForceLead.failed, (state: LeadGen) => ({ ...state, status: Status.Failed }));

const buildSFLeadBody = (state: State, user: LeadGenForm, leadConstants: SalesForceLeadConstants) => {
  const restaurant = selectors.restaurant(state);
  const { email, firstName, lastName, phone } = user;

  return {
    ...leadConstants,
    Company: restaurant.name,
    Country: restaurant.address.country || '',
    CurrencyISOCode: '',
    Email: email,
    FirstName: firstName,
    LastName: lastName,
    LeadSource: 'GCA',
    MobilePhone: phone,
    RID__c: selectors.rid(state),
    RecordTypeID: '01230000000jw7a',
    Restaurant_or_parent__c: 'Restaurant',
  };
};

// --------------------------------- //
// Epics
// --------------------------------- //

export const postSalesForceLeadEpic: Epic = (action$, store, { api }) =>
  action$.ofType(createSalesForceLead.started.type).switchMap(({ payload }: Action<LeadGenStarted>) => {
    const state = store.getState();
    const leadConstants = SalesForceLeadConstants[payload.type];

    const rid: number = selectors.rid(state);
    const body: SalesForceLead = buildSFLeadBody(state, payload.user, leadConstants);
    return api
      .postSalesForceLead({ rid, body })
      .map(() => createSalesForceLead.done({ result: payload.type, params: payload }))
      .catch(() => [createSalesForceLead.failed({ error: {}, params: payload })]);
  });
