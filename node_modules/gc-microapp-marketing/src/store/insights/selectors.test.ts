import { cloneDeep } from 'lodash';
import { CampaignType } from '../campaigns/campaigns.types';
import { CoverTypes } from './insights.types';
import { mockCoverTypesDoneAction } from './mockCoverTypesDone';
import {
  getCampaignDetails,
  getCampaignTotals,
} from './selectors';

describe('selectors', () => {
  const expectedTransformedFromFullMockResponse = [
    {
      campaignId: 438647,
      covers: 4,
    },
    {
      campaignId: 438644,
      covers: 2,
    },
  ];

  const emptyCoverTypes = {
    domain: [],
    range: {},
  };

  const mockCoverTypesApiResponse = mockCoverTypesDoneAction.payload.result;

  describe('getCampaignTotals', () => {

    const makeCoverTypesState = (coverTypes: CoverTypes) => ({
      insights: {
        coverTypes: {
          data: coverTypes,
        },
      },
    });

    it('returns an empty array if domain is an empty array', () => {
      const state = makeCoverTypesState(emptyCoverTypes);

      const actual = getCampaignTotals(state as any);
      const expected = [];
      expect(actual).toEqual(expected);
    });

    it('translates normal api response to array of campaign totals', () => {
      const state = makeCoverTypesState(mockCoverTypesApiResponse);

      const actual = getCampaignTotals(state as any);
      expect(actual).toEqual(expectedTransformedFromFullMockResponse);
    });

    it('handles empty array of dates in a campaign time series section of api response', () => {
      const mockResponseWithEmptyDatesInOneSection = cloneDeep(mockCoverTypesApiResponse);
      mockResponseWithEmptyDatesInOneSection.range['PAID250-438644'].domain = [];

      const state = makeCoverTypesState(mockResponseWithEmptyDatesInOneSection);
      const actual = getCampaignTotals(state as any);
      const expected = expectedTransformedFromFullMockResponse.slice(0, 1);
      expect(actual).toEqual(expected);
    });

    it('does not emit any campaignTotals without campaign ID (e.g. bonus pts or OTReso_FP)', () => {
      const mockResponseWithOnePartMissingCampaignId = cloneDeep(mockCoverTypesApiResponse);

      mockResponseWithOnePartMissingCampaignId.range['PAID250-438644'].range['2019-02-03'].campaign_id = null;
      const state = makeCoverTypesState(mockResponseWithOnePartMissingCampaignId);

      const actual = getCampaignTotals(state as any);
      const expected = expectedTransformedFromFullMockResponse.slice(0, 1);
      expect(actual).toEqual(expected);
    });
  });

  describe('getCampaignDetails', () => {
    const mockCampaigns = [
      {
        campaignId: 438647,
        covers: 4,
        pricingTier: {
          price: 2.5,
        },
        uuidCampaignId: 'abcdef-000000-123456',
      },
      {
        campaignId: 438644,
        covers: 2,
        pricingTier: {
          price: 2.5,
        },
        uuidCampaignId: 'fedcba-999999-654321',
      },
    ];

    const makeCoverTypeAndCampaignState = (coverTypes: CoverTypes, campaigns: CampaignType[]) => ({
      insights: {
        campaigns: {
          data: campaigns,
        },
        coverTypes: {
          data: coverTypes,
        },
      },
    });

    it('returns an empty array if campaign totals and fetched campaigns are different lengths', () => {
      let state = makeCoverTypeAndCampaignState(emptyCoverTypes, mockCampaigns as any);

      let actual = getCampaignDetails(state as any);
      expect(actual).toEqual([]);

      state = makeCoverTypeAndCampaignState(mockCoverTypesApiResponse, []);
      actual = getCampaignDetails(state as any);

      expect(actual).toEqual([]);
    });

    it('returns an array of matched up campaigns and campaign totals including days and times ' +
    'when both are same length', () => {
      const state = makeCoverTypeAndCampaignState(mockCoverTypesApiResponse, mockCampaigns as any);

      const actual = getCampaignDetails(state as any);
      expect(actual).toMatchSnapshot();
    });
  });
});
