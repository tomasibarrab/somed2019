import { initializeForm, postVisibilitySettings, reducer } from './flexiblepricing';

import {
  createEmptyFormSettings,
  createEmptyIncreaseSettings,
  createEmptyVisibilitySettings,
} from './createEmptyFormSettings';
import { FlexiblePricingPageType } from './flexiblepricing.types';
import { mockDiscoveryPrices } from './makeMockState';

describe('reducer', () => {
  describe('handles initializeForm', () => {
    it('puts into state a complete schedule with all optional parts enabled', () => {
      const settings = {
        increase: createEmptyIncreaseSettings(mockDiscoveryPrices.increase),
        reduce: createEmptyVisibilitySettings(mockDiscoveryPrices.reduce),
      };

      settings.increase.monthlyBudget.amount = 5;
      settings.increase.schedule.monday.morning = true;
      settings.reduce.schedule.monday.morning = true;

      /* Might be nice to construct the minimal starting state needed to
        have the reducer test work - this way the test also telegraphs the
        information that the reducer case needs to function, and it is easier
        to recognize what changed in the snapshots. */
      const state = {
        pricingInfo: {
          data: {
            discovery: {
              increasePrice: {
                amount: 2.75,
                currencyCode: 'USD',
              },
            },
          },
        },
      };

      const actual = reducer(state, initializeForm(settings));
      expect(actual).toMatchSnapshot();
    });

    it('adds increase and reduce to the schedule if not present, but leaves them disabled', () => {
      const settings = {};

      const state = {
        pricingInfo: {
          data: {
            discovery: {
              decreasePrice: {
                amount: 0.75,
                currencyCode: 'USD',
              },
              increasePrice: {
                amount: 2.75,
                currencyCode: 'USD',
              },
            },
          },
        },
      };

      const actual = reducer(state, initializeForm(settings));

      expect(actual).toMatchSnapshot();
    });

    it('passes through and enables an increased schedule w/o budget, adds budget but leaves budget disabled', () => {
      const settings = {
        increase: createEmptyIncreaseSettings(mockDiscoveryPrices.increase),
      };

      settings.increase.monthlyBudget = undefined;

      const state = {
        pricingInfo: {
          data: {
            discovery: {
              decreasePrice: {
                amount: 0.75,
                currencyCode: 'USD',
              },
              increasePrice: {
                amount: 2.75,
                currencyCode: 'USD',
              },
            },
          },
        },
      };

      const actual = reducer(state, initializeForm(settings));

      expect(actual).toMatchSnapshot();
    });
  });

  describe('handles postVisiblitySettings', () => {
    test('lifecycle, first run', () => {
      const state = {};

      const startedAction = postVisibilitySettings.started({});

      const stateAfterStarted = reducer(state, startedAction);
      expect(stateAfterStarted).toEqual({ sendingSettings: true });

      const doneAction = postVisibilitySettings.done({ params: { isEdit: false } });
      const stateAfterDone = reducer(stateAfterStarted, doneAction);

      expect(stateAfterDone).toEqual({ sendingSettings: false, pageType: FlexiblePricingPageType.SuccessSignup });
    });

    test('done, isEdit === true', () => {
      const state = {};

      const doneAction = postVisibilitySettings.done({ params: { isEdit: true } });
      const stateAfterDone = reducer(state, doneAction);

      expect(stateAfterDone).toEqual({ sendingSettings: false, pageType: FlexiblePricingPageType.SuccessEdit });
    });
  });
});
