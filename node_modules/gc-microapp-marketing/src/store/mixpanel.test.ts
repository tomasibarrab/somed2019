import moment from 'moment';
import configureMockStore from 'redux-mock-store';
import { actions } from './campaigns/campaigns';
import middleware, { formatPathAsPageName } from './mixpanel';

class Mixpanel {
  public events = [];
  private time = moment();

  public track(event, props) {
    this.events.push({ time: this.time, name: event, props });
  }
}

describe('middleware', () => {
  const scenarios = [
    {
      action: () =>
        actions.clickCallToAction({ name: 'Create Custom Promotion', page: 'Custom Promotions Landing Page' }),
      description: 'click "Learn More" call to action',
    },
    {
      action: () => actions.closeCreationTermsModal(),
      description: 'close creation terms modal',
    },
    {
      action: () => actions.fetchCampaigns.done({ params: { pageType: 'CustomPromotions' } } as any),
      description: 'fetch campaigns',
    },
    {
      action: () => actions.createCampaign.done({ params: { formValues: { type: 'happy_hour' } } } as any),
      description: 'create special',
    },
    {
      action: () => actions.openCreationTermsModal({} as any),
      description: 'open creation terms modal',
    },
    {
      action: () => actions.openModal({ type: 2 } as any),
      description: 'open modal',
    },
    {
      action: () => actions.patchCampaign.done({ params: { state: 'paused' } } as any),
      description: 'patch campaign',
    },
    {
      action: () => actions.putSuppressionDates.done({} as any),
      description: 'put suppression dates',
    },
  ];

  scenarios.forEach(({ action, description }) => {
    test(description, () => {
      const mixpanel = new Mixpanel();
      Object.assign(global, { mixpanel }); // facepalm !?!
      const store = configureMockStore([middleware])({
        currentContext: {
          user: {
            userName: 'user@example.com',
          },
        },
        restaurantPIProperties: {
          data: {
            availableCPApproval: true,
            availableFlexPricing: true,
            hasActiveCP: true,
            hasActivePR: true,
            hasFlexPricing: true,
            hasInactiveCP: true,
            hasInactivePR: true,
            hasPendingCPApproval: false,
            isTestRid: false,
          },
          loading: false,
        },
      });
      store.dispatch(action());
      expect(mixpanel.events[0]).toMatchSnapshot();
    });
  });
});

test('formatPathAsPageName', () => {
  expect(formatPathAsPageName('/seasonal')).toEqual('Seasonal');
  expect(formatPathAsPageName('/account-balance/current')).toEqual('Account Balance: Current');
  expect(formatPathAsPageName('/privatedining')).toEqual('Privatedining');
  expect(formatPathAsPageName('/')).toEqual('');
});
