import classNames from 'classnames';
import { get } from 'lodash';
import moment from 'moment';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { Days, Times, VisibilitySettings, VisibilityType } from '../../../store/flexiblepricing/flexiblepricing.types';
import OTKitIcon from '../Shared/OTKitIcon';
import styles from './Schedule.module.css';

interface OP {
  shifts: string[];
  days: string[];
  settings: VisibilitySettings;
  fillNoDiscovery: boolean;
}

type Props = OP & InjectedIntlProps;

const getVisibilityForDayShift = (
  day: Days,
  shift: Times,
  settings: VisibilitySettings,
): { [visType in VisibilityType]: boolean } => {
  const visibility = {
    [VisibilityType.Increase]: false,
    [VisibilityType.Reduce]: false,
    [VisibilityType.Standard]: false,
  };
  Object.values(VisibilityType).forEach((type: VisibilityType) => {
    if (settings[type]) {
      visibility[type] = get<any, any, any>(settings, `${type}.schedule.${day}.${shift}`, false) === true;
    }
  });
  return visibility;
};

const getClassNameForSlot = (day: any, shift: any, settings: VisibilitySettings, fillNoDiscovery: boolean) => {
  const { noDiscovery, increasedExposure } = styles;
  const { increase, standard } = getVisibilityForDayShift(day, shift, settings);
  if (increase) {
    return classNames({ [increasedExposure]: true });
  }
  if (!standard && !fillNoDiscovery) {
    return classNames({ [noDiscovery]: true });
  }
  return classNames({});
};

const renderSlot = (day: any, shift: any, settings: VisibilitySettings, fillNoDiscovery: boolean) => {
  const className = getClassNameForSlot(day, shift, settings, fillNoDiscovery);
  return (
    <td className={className} key={day}>
      {className === styles.increasedExposure && <OTKitIcon fill="white" name="icMetricChangeUp" />}
    </td>
  );
};

const Schedule: SFC<Props> = ({ shifts, days, intl, settings, fillNoDiscovery }) => (
  <table className={styles.flexiblePricingSchedule}>
    <FormattedMessage id="flexiblepricing.visibilitysettings.panel_title" tagName="caption" />
    <thead>
      <tr>
        {days.map(day => (
          <th scope="col" key={day}>
            {moment()
              .isoWeekday(day)
              .format('ddd')}
          </th>
        ))}
        <th scope="col">&nbsp;</th>
      </tr>
      <tr>
        <th className={styles.dayUnderline} colSpan={7} />
      </tr>
    </thead>
    <tbody>
      {shifts.map(shift => (
        <tr key={shift}>
          {days.map(day => renderSlot(day, shift, settings, fillNoDiscovery))}
          <th className={styles.shiftTitle} scope="row">
            <FormattedMessage id={`times.${shift.toLowerCase()}.name`} tagName="span" />
          </th>
        </tr>
      ))}
    </tbody>
  </table>
);

export default injectIntl(Schedule);
