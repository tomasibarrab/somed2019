import './EducationPage.scss';

import classNames from 'classnames';
import { Button } from 'gca-react-components';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { get } from 'lodash';
import React, { ReactElement, SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';

import { actions } from '../../../store/flexiblepricing/flexiblepricing';
import { Price, VisibilityTypePrices } from '../../../store/flexiblepricing/flexiblepricing.types';
import {
    getDifference, getExpectedDiscoveryPrices,
} from '../../../store/flexiblepricing/selectors';
import { ClickOrInteractPayload } from '../../../store/gifts/gifts.types';
import { State } from '../../../store/types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';
import { Routes } from '../FlexiblePricing';
import BillDetailContent from './EducationPages/BillDetailContent';
import DiscoveryExplanationContent from './EducationPages/DiscoveryExplanationContent';
import IntroPricesContent from './EducationPages/IntroPricesContent';

export enum EducationPageType {
  BillDetail = 'bill-detail',
  DiscoveryExplanation = 'discovery-explanation',
  IntroPrices = 'intro-prices',
  Unknown = 'unknown',
}

const makeTitle = (type: EducationPageType, price: Price) => {
  if (type === EducationPageType.BillDetail) {
    return <FormattedMessage id="flexiblepricing.educationpage.billdetail.title" />;
  }
  if (type === EducationPageType.DiscoveryExplanation) {
    return <FormattedMessage id="flexiblepricing.educationpage.discoveryexplanation.title" />;
  }
  return <FormattedMessage id="flexiblepricing.educationpage.introprices.title" />;
};

const makeSubTitle = (type: EducationPageType, priceFrom: Price, priceTo: Price, difference: Price) => {
  if (type === EducationPageType.BillDetail) {
    return '';
  }
  if (type === EducationPageType.DiscoveryExplanation) {
    // console.log(this.props.discoveryPrices, this.props.featureToggles);
    return (
      <FormattedMessage
        id="flexiblepricing.educationpage.discoveryexplanation.subtitle"
        values={{
          priceFrom: formatCurrency(priceFrom.amount, priceFrom.currencyCode),
          priceTo: formatCurrency(priceTo.amount, priceTo.currencyCode),
        }}
      />
    );
  }

  // This is rounded so we don't want to show them "save up to $0" in the case their savings < 0.5
  const savesMoney = difference.amount >= 1;

  const introPricesMessageSuffix = savesMoney ? 'save_up_to' : 'optimize_your_covers';
  const introPricesMessageProps = savesMoney
    ? { values: { price: formatCurrency(difference.amount, difference.currencyCode, true) } }
    : {};
  return (
    <FormattedMessage
      id={`flexiblepricing.educationpage.introprices.subtitle.${introPricesMessageSuffix}`}
      {...introPricesMessageProps}
    />
  );
};

interface NextButtonInfo {
  content: ReactElement;
  surroundWithLinkTo?: string;
}

const makeNextButtonContent = (type: EducationPageType): NextButtonInfo => {
  if (type === EducationPageType.BillDetail) {
    return {
      content: <FormattedMessage id="flexiblepricing.educationpage.billdetail.buttonnexttitle" />,
    };
  }
  if (type === EducationPageType.DiscoveryExplanation) {
    return {
      content: <FormattedMessage id="flexiblepricing.educationpage.discoveryexplanation.buttonnexttitle" />,
      surroundWithLinkTo: Routes.Settings,
    };
  }
  return {
    content: <FormattedMessage id="flexiblepricing.educationpage.introprices.buttonnexttitle" />,
  };
};

interface SP {
  difference: Price;
  discoveryPrices: VisibilityTypePrices;
  featureToggles: FeatureToggles;
}

interface DP {
  clickOrInteract: (payload: ClickOrInteractPayload) => void;
}

interface OP {
  onClickNext: () => void;
  onClickPrevious: () => void;
  type: EducationPageType;
}

type Props = SP & DP & OP;

const nextBtnNameMap = {
  [EducationPageType.IntroPrices]: 'See my bill [Next btn on 1st screen]',
  [EducationPageType.BillDetail]: 'Show me how [Next btn on 2nd screen]',
  [EducationPageType.DiscoveryExplanation]: 'Set my exposure [Next btn on 3rd screen]',
  [EducationPageType.Unknown]: 'Unknown',
};

const prevBtnNameMap = {
  [EducationPageType.BillDetail]: 'Back btn on Bill Details [2nd screen]',
  [EducationPageType.DiscoveryExplanation]: 'Back btn on Discovery Explanation [3rd screen]',
  [EducationPageType.Unknown]: 'Unknown',
};

const EducationPage: SFC<Props> = ({
  clickOrInteract,
  difference,
  discoveryPrices,
  featureToggles,
  onClickNext,
  onClickPrevious,
  type,
}) => {
  const featureGcaPiFlexiblePricingReduceVisibility = get(
    featureToggles,
    'features.featureGcaPiFlexiblePricingReduceVisibility',
    false,
  );
  const priceFrom: Price = featureGcaPiFlexiblePricingReduceVisibility
    ? discoveryPrices.reduce
    : discoveryPrices.standard;
  const priceTo: Price = discoveryPrices.increase;

  const { content: nextButtonContent, surroundWithLinkTo: linkAddress } = makeNextButtonContent(type);

  const nextButton = (
    <Button
      data-testid="btnNext"
      onClick={() => {
        clickOrInteract({ action: 'Click', props: { name: 'Next', page: type } });
        onClickNext();
      }}
      theme="primary"
      name={nextBtnNameMap[type]}
    >
      {nextButtonContent}
    </Button>
  );

  return (
    <div className={classNames('education-page', type)}>
      <h1>{makeTitle(type, difference)}</h1>
      <h2 className="subtitle">{makeSubTitle(type, priceFrom, priceTo, difference)}</h2>
      {type === EducationPageType.BillDetail && <BillDetailContent />}
      {type === EducationPageType.DiscoveryExplanation && <DiscoveryExplanationContent />}
      {type === EducationPageType.IntroPrices && <IntroPricesContent />}
      <div className="buttons">
        <div className="dots">
          <span className={classNames('dot', { on: type === EducationPageType.IntroPrices })} />
          <span className={classNames('dot', { on: type === EducationPageType.BillDetail })} />
          <span className={classNames('dot', { on: type === EducationPageType.DiscoveryExplanation })} />
        </div>
        {linkAddress ? (
          <Link className="set-my-visibility" to={linkAddress}>
            {nextButton}
          </Link>
        ) : (
          nextButton
        )}
        {type !== EducationPageType.IntroPrices && (
          <Button
            data-testid="btnPrevious"
            onClick={() => {
              clickOrInteract({ action: 'Click', props: { name: 'Previous', page: type } });
              onClickPrevious();
            }}
            theme="link"
            name={prevBtnNameMap[type]}
          >
            <FormattedMessage id="flexiblepricing.educationpage.buttonprevioustitle" />
          </Button>
        )}
      </div>
    </div>
  );
};

const mapState = (state: State) => ({
  difference: getDifference(state),
  discoveryPrices: getExpectedDiscoveryPrices(state),
  featureToggles: state.featureToggles,
});

const mapDispatch = {
  clickOrInteract: actions.clickOrInteract,
};

export default connect<SP, DP, OP>(
  mapState,
  mapDispatch,
)(EducationPage);
