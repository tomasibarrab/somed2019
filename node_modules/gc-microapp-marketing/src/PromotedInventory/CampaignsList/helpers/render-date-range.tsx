import moment from 'moment';
import React from 'react';
import { FormattedDate, FormattedMessage } from 'react-intl';
import { EndDateType } from '../../../store/campaigns/campaigns.types';

const renderDateRange = (startDate?: string, endDate?: string, endDateType?: EndDateType): JSX.Element[] => {
  let endDateDescription;
  let elements: JSX.Element[] = [
    <FormattedDate value={moment(startDate).toDate()} month="short" day="numeric" year="numeric" key="a" />,
  ];

  if (!endDate || !moment(startDate).isSame(moment(endDate), 'day')) {
    switch (endDateType) {
      case EndDateType.Campaign:
        endDateDescription = <FormattedMessage id="guestcampaigns.list.bookingwindow.noenddate" key="c" />;
        break;
      case EndDateType.Reservation:
        endDateDescription = <FormattedMessage id="guestcampaigns.list.seatingwindow.noenddate" key="c" />;
        break;
      default:
        endDateDescription = <FormattedMessage id="guestcampaigns.list.noenddate" key="c" />;
        break;
    }

    elements = elements.concat([
      <span key="b">&mdash;</span>,
      endDate ? (
        <FormattedDate value={moment(endDate).toDate()} month="short" day="numeric" year="numeric" key="c" />
      ) : (
        endDateDescription
      ),
    ]);
  }

  return elements;
};

export default renderDateRange;
