// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BlockedDatesPicker /> <DayPicker /> should attach styles to default days 1`] = `
<withStyles(CustomizableCalendarDay)
  ariaLabelFormat="dddd, LL"
  day={null}
  daySize={39}
  isFocused={false}
  isOutsideDay={false}
  modifiers={Set {}}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  phrases={
    Object {
      "chooseAvailableDate": [Function],
      "dateIsUnavailable": [Function],
    }
  }
  renderDayContents={null}
  tabIndex={-1}
/>
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should attach styles to default days 2`] = `
<withStyles(CustomizableCalendarDay)
  ariaLabelFormat="dddd, LL"
  day={"2017-11-28T12:00:00.000Z"}
  daySize={39}
  isFocused={false}
  isOutsideDay={false}
  modifiers={Set {}}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  phrases={
    Object {
      "chooseAvailableDate": [Function],
      "dateIsUnavailable": [Function],
    }
  }
  renderDayContents={null}
  tabIndex={-1}
/>
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should attach styles to default days 3`] = `
<withStyles(CustomizableCalendarDay)
  ariaLabelFormat="dddd, LL"
  day={"2017-11-26T12:00:00.000Z"}
  daySize={39}
  defaultStyles={
    Object {
      "border": "4px solid rgba(240, 150, 25, 0.3)",
    }
  }
  highlightedCalendarStyles={
    Object {
      "border": "4px solid #F09619",
    }
  }
  isFocused={false}
  isOutsideDay={false}
  modifiers={Set {}}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  phrases={
    Object {
      "chooseAvailableDate": [Function],
      "dateIsUnavailable": [Function],
    }
  }
  renderDayContents={null}
  tabIndex={-1}
/>
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should render a strikethrough span if blocked 1`] = `
Array [
  <span />,
  <p>
    25
  </p>,
]
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should render a strikethrough span if blocked 2`] = `
Array [
  <span
    className="disabled"
  />,
  <p>
    26
  </p>,
]
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should render a strikethrough span if blocked 3`] = `
Array [
  <span />,
  <p>
    27
  </p>,
]
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should render a strikethrough span if blocked 4`] = `
Array [
  <p>
    28
  </p>,
]
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should render a strikethrough span if blocked 5`] = `
Array [
  <p>
    7
  </p>,
]
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should update state.blocked onDateChange 1`] = `
Object {
  "blocked": Map {
    "2017-11-25" => Object {
      "isBlocked": true,
      "isDefault": true,
    },
    "2017-11-26" => Object {
      "id": "mock_holiday",
      "isBlocked": false,
      "isDefault": true,
    },
    "2017-11-27" => Object {
      "isBlocked": true,
      "isDefault": false,
    },
    "2017-11-28" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should update state.blocked onDateChange 2`] = `
Object {
  "blocked": Map {
    "2017-11-25" => Object {
      "isBlocked": true,
      "isDefault": true,
    },
    "2017-11-26" => Object {
      "id": "mock_holiday",
      "isBlocked": false,
      "isDefault": true,
    },
    "2017-11-27" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
    "2017-11-28" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should update state.blocked onDateChange 3`] = `
Object {
  "blocked": Map {
    "2017-11-25" => Object {
      "isBlocked": true,
      "isDefault": true,
    },
    "2017-11-26" => Object {
      "id": "mock_holiday",
      "isBlocked": false,
      "isDefault": true,
    },
    "2017-11-27" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
    "2017-11-28" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should update state.blocked onDateChange 4`] = `
Object {
  "blocked": Map {
    "2017-11-25" => Object {
      "isBlocked": true,
      "isDefault": true,
    },
    "2017-11-26" => Object {
      "id": "mock_holiday",
      "isBlocked": false,
      "isDefault": true,
    },
    "2017-11-27" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
    "2017-11-28" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> <DayPicker /> should update state.blocked onDateChange 5`] = `
Object {
  "blocked": Map {
    "2017-11-25" => Object {
      "isBlocked": true,
      "isDefault": true,
    },
    "2017-11-26" => Object {
      "id": "mock_holiday",
      "isBlocked": false,
      "isDefault": true,
    },
    "2017-11-27" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
    "2017-11-28" => Object {
      "isBlocked": false,
      "isDefault": false,
    },
    "2017-12-07" => Object {
      "isBlocked": true,
      "isDefault": false,
      "isNew": true,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> should render (add 1) button 1`] = `
<main
  className="gca-modal-main blocked-dates-picker"
>
  <button
    className="gca-button primary"
    onClick={[Function]}
    type="button"
  >
    <span
      className="button-content"
    >
      <span>
        Done
      </span>
      (
      <span>
        Add 1
      </span>
      <span>
        Blocked day
      </span>
      )
    </span>
  </button>
</main>
`;

exports[`<BlockedDatesPicker /> should render (add 1, remove 1) button 1`] = `
<main
  className="gca-modal-main blocked-dates-picker"
>
  <button
    className="gca-button primary"
    onClick={[Function]}
    type="button"
  >
    <span
      className="button-content"
    >
      <span>
        Done
      </span>
      (
      <span>
        Add 1
      </span>
      <span>
        Remove 1
      </span>
      <span>
        Blocked days
      </span>
      )
    </span>
  </button>
</main>
`;

exports[`<BlockedDatesPicker /> should render confirm default change when confirmation needed 1`] = `
<ModalMain
  className="blocked-dates-picker"
>
  <mock-confirm-default-change
    day="2017-11-27"
    handleConfirm={[Function]}
    id="test"
    intlDate="11/27/2017"
    isBlocked={true}
  />
  <DayPickerSingleDateController
    date={null}
    daySize={47}
    enableOutsideDays={false}
    firstDayOfWeek={null}
    focused={false}
    hideKeyboardShortcutsPanel={true}
    initialVisibleMonth={null}
    isDayBlocked={[Function]}
    isDayHighlighted={[Function]}
    isFocused={false}
    isOutsideRange={[MockFunction]}
    isRTL={false}
    keepOpenOnDateSelect={false}
    monthFormat="MMMM YYYY"
    navNext={
      <wrappedIcon
        color="#A8AFC3"
        direction="right"
        height="20"
      />
    }
    navPrev={
      <wrappedIcon
        color="#A8AFC3"
        direction="left"
        height="20"
      />
    }
    noBorder={false}
    numberOfMonths={1}
    onBlur={[MockFunction]}
    onClose={[MockFunction]}
    onDateChange={[Function]}
    onFocusChange={[MockFunction]}
    onNextMonthClick={[MockFunction]}
    onOutsideClick={null}
    onPrevMonthClick={[MockFunction]}
    orientation="horizontal"
    phrases={
      Object {
        "calendarLabel": "Calendar",
        "chooseAvailableDate": [MockFunction],
        "chooseAvailableEndDate": [MockFunction],
        "chooseAvailableStartDate": [MockFunction],
        "dateIsUnavailable": [MockFunction],
        "enterKey": "Enter key",
        "escape": "Escape key",
        "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
        "homeEnd": "Home and end keys",
        "jumpToNextMonth": "Move forward to switch to the next month.",
        "jumpToPrevMonth": "Move backward to switch to the previous month.",
        "keyboardShortcuts": "Keyboard Shortcuts",
        "leftArrowRightArrow": "Right and left arrow keys",
        "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
        "moveFocusByOneMonth": "Switch months.",
        "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
        "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
        "openThisPanel": "Open this panel.",
        "pageUpPageDown": "page up and page down keys",
        "questionMark": "Question mark",
        "returnFocusToInput": "Return to the date input field.",
        "selectFocusedDate": "Select the date in focus.",
        "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
        "upArrowDownArrow": "up and down arrow keys",
      }
    }
    renderCalendarDay={[Function]}
    renderCalendarInfo={null}
    renderDayContents={[Function]}
    renderMonth={null}
    showKeyboardShortcuts={false}
    verticalHeight={null}
    weekDayFormat="dd"
    withPortal={false}
  />
  <Button
    disabled={true}
    htmlType="button"
    onClick={[Function]}
    theme="primary"
    type="button"
  >
    <FormattedMessage
      id="guestcampaigns.list.blockdays.button.done"
      tagName="span"
      values={Object {}}
    />
  </Button>
</ModalMain>
`;

exports[`<BlockedDatesPicker /> should update state when confirming or cancelling 1`] = `
Object {
  "blocked": Map {
    "2017-11-27" => Object {
      "id": "mock_default_id",
      "isBlocked": true,
      "isDefault": true,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> should update state when confirming or cancelling 2`] = `
Object {
  "blocked": Map {
    "2017-11-27" => Object {
      "id": "mock_default_id",
      "isBlocked": false,
      "isDefault": true,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;

exports[`<BlockedDatesPicker /> should update state when confirming or cancelling 3`] = `
Object {
  "blocked": Map {
    "2017-11-27" => Object {
      "isBlocked": true,
      "isDefault": false,
      "isNew": true,
    },
  },
  "count": Object {
    "added": 0,
    "removed": 0,
  },
  "defaultConfirm": Object {
    "day": null,
    "id": "",
    "isBlocked": false,
  },
}
`;
