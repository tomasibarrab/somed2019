import { mount, shallow } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { CampaignTypes, ModalType } from '../../../store/campaigns/campaigns.types';
import { keys } from '../../../translations/bundles/marketing.json';
import ModalPicker from './ModalPicker';

describe('<ModalPicker />', () => {
  const commonProps = {
    campaign: {
      campaignId: 'ee15add5-aced-c0a1-5a55-d0dd1e5fade5',
    },
    closeModal: jest.fn(),
    fetchCampaignsRequest: jest.fn(),
    patchCampaignRequest: jest.fn(),
    putSuppressionDates: jest.fn(),
  };

  const scenarios = [
    {
      description: 'render pause modal',
      props: Object.assign({}, commonProps, { modalType: ModalType.Pause }),
    },
    {
      description: 'render end modal',
      props: Object.assign({}, commonProps, { modalType: ModalType.End }),
    },
    {
      description: 'render blocked dates modal',
      props: Object.assign({}, commonProps, { modalType: ModalType.EditBlockedDays }),
    },
    {
      description: 'render nothing',
      props: Object.assign({}, commonProps, { modalType: 'Something else' }),
    },
    {
      description: 'render approve modal',
      props: Object.assign({}, commonProps, { modalType: ModalType.Approve }),
    },
    {
      description: 'render request change modal',
      props: Object.assign({}, commonProps, { modalType: ModalType.RequestChange }),
    },
  ];

  scenarios.map(({ description, props }) => {
    it(`${description} to match snapshot`, () => {
      const wrapper = shallow(<ModalPicker {...props} />);
      const tree = wrapper.debug();
      expect(tree).toMatchSnapshot();
    });
  });

  it("child's closeModal(true) should refetch campaigns on success", () => {
    const props = {
      campaign: commonProps.campaign,
      closeModal: jest.fn(),
      fetchCampaignsRequest: jest.fn(),
      modalType: ModalType.Pause,
      patchCampaignRequest: jest.fn(),
    };

    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <ModalPicker {...props} />
      </IntlProvider>,
    );
    /* The first button is the "X" button to close the modal */
    const confirmButton = wrapper.find('Button').at(1);
    expect(props.closeModal).not.toHaveBeenCalled();
    expect(props.patchCampaignRequest).not.toHaveBeenCalled();
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();

    confirmButton.simulate('click');
    expect(props.patchCampaignRequest).toHaveBeenCalled();
    /* Do not fetch until we close the modal */
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();

    const closeButton = wrapper.find('Button').first();
    closeButton.simulate('click');
    expect(props.closeModal).toHaveBeenCalled();
    /* Now fetch */
    expect(props.fetchCampaignsRequest).toHaveBeenCalled();
  });

  it("child's closeModal(false) should not refetch campaigns on failure/cancel", () => {
    const props = {
      campaign: commonProps.campaign,
      closeModal: jest.fn(),
      fetchCampaignsRequest: jest.fn(),
      modalType: ModalType.Pause,
      patchCampaignRequest: jest.fn(),
    };

    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <ModalPicker {...props} />
      </IntlProvider>,
    );
    /* Close the modal without success. */
    const closeButton = wrapper.find('Button').first();
    expect(props.closeModal).not.toHaveBeenCalled();
    expect(props.patchCampaignRequest).not.toHaveBeenCalled();
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();

    closeButton.simulate('click');
    expect(props.patchCampaignRequest).not.toHaveBeenCalled();
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();
  });

  it("end modal's confirm should call patchCampaignRequest with refetchCampaigns: true", () => {
    const props = {
      campaign: commonProps.campaign,
      closeModal: jest.fn(),
      fetchCampaignsRequest: jest.fn(),
      modalType: ModalType.End,
      patchCampaignRequest: jest.fn(),
    };

    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <ModalPicker {...props} />
      </IntlProvider>,
    );
    /* Close the modal without success. */
    const endButton = wrapper.find('Button').at(1);
    expect(props.closeModal).not.toHaveBeenCalled();
    expect(props.patchCampaignRequest).not.toHaveBeenCalled();
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();

    endButton.simulate('click');
    expect(props.patchCampaignRequest.mock.calls).toMatchSnapshot();
    expect(props.fetchCampaignsRequest).not.toHaveBeenCalled();
  });

  it('end modal with Special campaign should show Specials-specific strings', () => {
    const props = {
      campaign: {
        ...commonProps.campaign,
        incentives: [{ name: 'Happy Hour' }],
        type: CampaignTypes.Special,
      },
      closeModal: jest.fn(),
      fetchCampaignsRequest: jest.fn(),
      modalType: ModalType.End,
      patchCampaignRequest: jest.fn(),
    };

    const component = create(
      <IntlProvider locale="en-US" messages={keys}>
        <ModalPicker {...props} />
      </IntlProvider>,
    );

    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });
});
