import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { CampaignState, DiscardActionTypes } from '../../../store/campaigns/campaigns.types';
import { keys } from '../../../translations/bundles/marketing.json';
import { CHANGE_OR_REMOVE_FORM_NAME } from '../../constants';
import ChangeOrRemoveModal from './ChangeOrRemoveModal';

const createComponent = (render, formState, campaign, confirm, close) => {
  const fullState = {
    form: {
      [CHANGE_OR_REMOVE_FORM_NAME]: formState,
    },
  };

  const store = configureMockStore()(fullState);

  return {
    component: render(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <ChangeOrRemoveModal close={close} confirm={confirm} campaign={campaign} />
        </IntlProvider>
      </Provider>,
    ),
    store,
  };
};

describe('ChangeOrRemoveModal', () => {
  /* tslint:disable:object-literal-key-quotes */

  const mockCampaignId = 'mock-campaignid';
  const campaign = {
    campaignId: mockCampaignId,
  };

  test('to match snapshot', () => {
    const close = jest.fn();
    const confirm = jest.fn();

    const { component } = createComponent(create, {}, campaign, confirm, close);
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('Click change w/o text, button is disabled. click x to close w/o success', () => {
    const close = jest.fn();
    const confirm = jest.fn();

    const { component: wrapper, store } = createComponent(
      mount,
      {
        fields: {
          description: {
            touched: true,
          },
        },
        syncError: {
          description: true,
        },
        values: {
          action: DiscardActionTypes.RequestChange,
          description: '',
        },
      },
      campaign,
      confirm,
      close,
    );

    wrapper.update();

    const requestChangeButton = wrapper.find('[data-testid="send_change_request_btn"]').first();

    expect(requestChangeButton.props().disabled).toEqual(true);

    const xButton = wrapper.find('.gca-modal-header .gca-button');

    xButton.simulate('click');

    expect(close).toHaveBeenCalledWith(false);
  });

  test('Click change w/ text, fires confirm, then click "got it" to close(success)', () => {
    const close = jest.fn();
    const confirm = jest.fn();
    const description = 'Turn it on for EVERY SHIFT!';

    const { component: wrapper, store } = createComponent(
      mount,
      {
        values: {
          action: DiscardActionTypes.RequestChange,
          description,
        },
      },
      campaign,
      confirm,
      close,
    );

    wrapper.update();

    const requestChangeButton = wrapper.find('[data-testid="send_change_request_btn"]').first();

    expect(requestChangeButton.props().disabled).toEqual(false);

    requestChangeButton.simulate('click');

    const changeAction = store.getActions().pop();
    expect(changeAction.type).toEqual('@@redux-form/CHANGE');
    expect(changeAction.meta.field).toEqual('action');
    expect(changeAction.payload).toEqual(DiscardActionTypes.RequestChange);

    /* The browser actually fires the submit as well when you click it, but enzyme does not */
    requestChangeButton.simulate('submit');

    const expectedConfirmPayload = {
      campaignDiscardInfo: {
        action: DiscardActionTypes.RequestChange,
        description,
      },
      campaignId: mockCampaignId,
      refetchCampaigns: false,
      state: CampaignState.Discarded,
    };

    expect(confirm).toHaveBeenCalledWith(expectedConfirmPayload);
    expect(close).not.toHaveBeenCalled();

    const gotItButton = wrapper.find('[data-testid="got_it_changed"]').first();
    gotItButton.simulate('click');

    expect(close).toHaveBeenCalledWith(true);

    const modalMain = wrapper.find('.request-changes-modal-main').first();
    expect(modalMain).toMatchSnapshot();
  });

  test('Click remove w/o text, fires confirm, then click "got it" to close(success)', () => {
    const close = jest.fn();
    const confirm = jest.fn();

    const { component: wrapper, store } = createComponent(
      mount,
      {
        values: {
          action: DiscardActionTypes.Remove,
          description: '',
        },
      },
      campaign,
      confirm,
      close,
    );

    wrapper.update();

    const removeButton = wrapper.find('[data-testid="remove_btn"]').first();

    removeButton.simulate('click');

    /* button's onClick changes the discard action */
    const changeAction = store.getActions().pop();
    expect(changeAction.type).toEqual('@@redux-form/CHANGE');
    expect(changeAction.meta.field).toEqual('action');
    expect(changeAction.payload).toEqual(DiscardActionTypes.Remove);

    removeButton.simulate('submit');

    const expectedConfirmPayload = {
      campaignDiscardInfo: {
        action: DiscardActionTypes.Remove,
        description: '',
      },
      campaignId: mockCampaignId,
      refetchCampaigns: false,
      state: CampaignState.Discarded,
    };

    expect(confirm).toHaveBeenCalledWith(expectedConfirmPayload);
    expect(close).not.toHaveBeenCalled();

    const gotItButton = wrapper.find('[data-testid="got_it_removed"]').first();
    gotItButton.simulate('click');

    expect(close).toHaveBeenCalledWith(true);

    const modalMain = wrapper.find('.request-changes-modal-main').first();
    expect(modalMain).toMatchSnapshot();
  });
});
