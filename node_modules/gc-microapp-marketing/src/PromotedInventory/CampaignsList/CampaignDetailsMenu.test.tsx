import { mount, shallow } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { CampaignType, ModalType } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import CampaignDetailsMenu, { Menu } from './CampaignDetailsMenu';

describe('<CampaignDetailsMenu />', () => {
  const campaignId = '1ead1e55-a1a5-face-ba1d-b0b51edce110';
  const commonProps = {
    openModal: jest.fn(),
    patchCampaignRequest: jest.fn(),
  };

  const scenarios = [
    {
      description: 'render items for live short-term campaign',
      props: Object.assign({}, commonProps, {
        campaign: { campaignId, state: 'live', isShortTerm: true } as CampaignType,
      }),
    },
    {
      description: 'render items for live long-term campaign',
      props: Object.assign({}, commonProps, {
        campaign: { campaignId, state: 'live', isShortTerm: false } as CampaignType,
      }),
    },
    {
      description: 'render items for paused campaign',
      props: Object.assign({}, commonProps, {
        campaign: { campaignId, state: 'paused', isShortTerm: false } as CampaignType,
      }),
    },
    {
      description: 'render items for draft campaign',
      props: Object.assign({}, commonProps, {
        campaign: { campaignId, state: 'draft', isShortTerm: false } as CampaignType,
      }),
    },
  ];

  scenarios.map(({ description, props }) => {
    it(`${description} to match snapshot`, () => {
      const wrapper = mount(
        <IntlProvider locale="en-US" messages={keys}>
          <CampaignDetailsMenu {...props} />
        </IntlProvider>,
      );

      // Open the menu
      const menu = wrapper.find('div').first();
      menu.simulate('click');

      const tree = wrapper.debug();
      expect(tree).toMatchSnapshot();
    });
  });

  describe('open and close', () => {
    const props = {
      campaign: {
        campaignId,
        isShortTerm: true,
        state: 'live',
      },
      openModal: jest.fn(),
      patchCampaignRequest: jest.fn(),
    };

    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <CampaignDetailsMenu {...props} />
      </IntlProvider>,
    );

    const menuDiv = wrapper.find('div').first();

    it('should open and close menu', () => {
      expect(wrapper.find('li').exists()).toBe(false);
      menuDiv.simulate('click');
      expect(wrapper.find('li').exists()).toBe(true);
      menuDiv.simulate('click');
      expect(wrapper.find('li').exists()).toBe(false);
    });
  });
});

describe('<Menu />', () => {
  const actions = {
    handleCopyLink: jest.fn(),
    handleEnd: jest.fn(),
    handlePause: jest.fn(),
    handleResume: jest.fn(),
    handleStart: jest.fn(),
  };

  const commonProps = {
    intl: {
      formatMessage: ({ id }) => <span id={id}>Menu Item</span>,
    },
    openModal: jest.fn(),
    patchCampaignRequest: jest.fn(),
    setMenuRef: jest.fn(),
  };

  const scenarios = [
    {
      action: actions.handleEnd,
      campaign: {
        isShortTerm: true,
        state: 'live',
      },
      description: 'End Campaign',
      menuItemId: 'guestcampaigns.list.end_campaign',
    },
    {
      action: actions.handleCopyLink,
      campaign: {
        isShortTerm: false,
        state: 'live',
      },
      description: 'Copy Link to Campaign',
      menuItemId: 'guestcampaigns.list.copy_link',
    },
    {
      action: actions.handlePause,
      campaign: {
        isShortTerm: false,
        state: 'live',
      },
      description: 'Pause Campaign',
      menuItemId: 'guestcampaigns.list.pause_campaign',
    },
    {
      action: actions.handleResume,
      campaign: {
        isShortTerm: false,
        state: 'paused',
      },
      description: 'Resume Campaign',
      menuItemId: 'guestcampaigns.list.resume_campaign',
    },
  ];

  scenarios.forEach(({ action, description, menuItemId, campaign }) => {
    it(`should ${description}`, () => {
      const allProps = Object.assign({}, commonProps, { campaign }, { actions });

      const wrapper = mount(<Menu {...allProps} />);
      expect(action).not.toHaveBeenCalled();

      // Open Menu
      const menuItem = wrapper.find(`[id="${menuItemId}"]`).first();
      menuItem.simulate('click');
      expect(action).toHaveBeenCalled();
    });
  });

  // TODO: Test the CampaignDetailsMenu's actions given to Menu
});
