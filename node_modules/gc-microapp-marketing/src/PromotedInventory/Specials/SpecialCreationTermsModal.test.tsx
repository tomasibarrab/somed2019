import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { Pages } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import { LINK_TO_SPECIALS_TERMS_V1, TERMS_AND_CONDITIONS_FORM_NAME } from '../constants';
import SpecialCreationTermsModal from './SpecialCreationTermsModal';

const createComponent = (render, state, formValuesSnapshot, confirm, close) => {
  const store = configureMockStore()(state);

  return render(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={keys}>
        <SpecialCreationTermsModal close={close} confirm={confirm} formValuesSnapshot={formValuesSnapshot} />
      </IntlProvider>
    </Provider>,
  );
};

describe('SpecialCreationTermsModal', () => {
  /* tslint:disable:object-literal-key-quotes */
  const formValuesSnapshot = {
    'blocked-days': {
      custom: {},
      default: {
        christmas_day: false,
        christmas_eve: false,
        mothers_day_us: false,
        new_years_day: false,
        new_years_eve: false,
        thanksgiving_day_us: true,
        valentines_day: false,
      },
    },
    daysAndTimes: [
      {
        days: ['WEDNESDAY', 'THURSDAY', 'FRIDAY', 'TUESDAY'],
        times: {
          end: '16:15',
          start: '14:45',
        },
      },
    ],
    description: 'Test Description',
    name: 'Test Title',
    startDate: '2018-04-16',
    type: 'complimentary_drink',
  };

  const state = {
    currentContext: { user: { firstName: 'John', lastName: 'Doe', userName: 'john.doe@email.com' } },
    form: {
      [TERMS_AND_CONDITIONS_FORM_NAME]: {
        values: {
          agreed: false,
        },
      },
    },
  };

  test('to match snapshot', () => {
    const close = jest.fn();
    const confirm = jest.fn();

    const component = createComponent(create, state, formValuesSnapshot, confirm, close);
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  test('confirm function passed to TAndC adds linkToTerms to approval info, and calls this.props.confirm', () => {
    const close = jest.fn();
    const confirm = jest.fn();

    const wrapper = createComponent(mount, state, formValuesSnapshot, confirm, close);

    const tAndC = wrapper.find('TermsAndConditions').first();

    const termsFormValuesWithBrowserInfo = {
      browserInfo: '{ "os": "The operating system" }',
      email: 'jest@example.com',
      name: 'Name',
      restaurantLegalName: 'The Restaurant Legal Name',
    };

    tAndC.props().confirm(termsFormValuesWithBrowserInfo);

    const expectedConfirmationPayload = {
      approvalInfo: { ...termsFormValuesWithBrowserInfo, linkToTerms: LINK_TO_SPECIALS_TERMS_V1 },
      formValues: formValuesSnapshot,
      refetchCampaigns: Pages.Specials,
    };

    expect(confirm).toHaveBeenCalledWith(expectedConfirmationPayload);
  });
});
