import { validate, ValidationErrors } from './validate-create-specials-form';

/* only contains the form values that we look at in the validator */
const validFormValues = {
  daysAndTimes: [
    {
      days: ['THURSDAY'],
      times: {
        end: '17:00',
        start: '15:00',
      },
    },
  ],
  description: 'All Beer $4 only!',
  name: 'Thirsty Thursdays',
  type: 'happy_hour',
};

const hasNoErrors = errors => {
  const { type, name, description, daysAndTimes } = errors;
  return !(type || name || description || Object.keys(daysAndTimes).length);
};

describe('validate', () => {
  it('should not have any errors for valid values', () => {
    const errors = validate(validFormValues);
    expect(hasNoErrors(errors)).toBeTruthy();
  });

  it('should have Required for simple fields that are missing', () => {
    const missingTypeNameDesc = { daysAndTimes: validFormValues.daysAndTimes };
    const errors = validate(missingTypeNameDesc);
    expect(errors.type).toEqual(ValidationErrors.Required);
    expect(errors.name).toEqual(ValidationErrors.Required);
    expect(errors.description).toEqual(ValidationErrors.Required);
  });

  it('should require endDate to be equal to or after startDate, if endDate exists', () => {
    const endDateBeforeStart = {
      ...validFormValues,
      endDate: '2018-01-01',
      startDate: '2018-02-01',
    };

    const errors = validate(endDateBeforeStart);
    expect(errors.endDate).toEqual(ValidationErrors.EndDateAfterStartDate);
  });

  it('should require one or more days on each { days, times } w/o days', () => {
    const missingDaysOnTwoGroups = {
      ...validFormValues,
      daysAndTimes: [
        ...validFormValues.daysAndTimes,
        {
          days: [],
          times: {
            end: '17:00',
            start: '15:00',
          },
        },
        {
          times: {
            end: '17:00',
            start: '15:00',
          },
        },
        {
          days: ['FRIDAY'],
          times: {
            end: '17:00',
            start: '15:00',
          },
        },
      ],
    };

    const errors = validate(missingDaysOnTwoGroups);
    expect(errors.daysAndTimes).toEqual({
      [1]: { days: ValidationErrors.OneOrMoreDays },
      [2]: { days: ValidationErrors.OneOrMoreDays },
    });
  });

  it('should require start time to be before end time, and be able to register both day/time errors at once', () => {
    const outOfOrderTimesOnTwoGroups = {
      ...validFormValues,
      daysAndTimes: [
        ...validFormValues.daysAndTimes,
        {
          days: ['TUESDAY'],
          times: {
            end: '13:00',
            start: '15:00',
          },
        },
        {
          days: [],
          times: {
            end: '02:00',
            start: '12:00',
          },
        },
      ],
    };

    const errors = validate(outOfOrderTimesOnTwoGroups);
    expect(errors.daysAndTimes).toEqual({
      [1]: { times: ValidationErrors.StartTimeBeforeEndTime },
      [2]: { days: ValidationErrors.OneOrMoreDays, times: ValidationErrors.StartTimeBeforeEndTime },
    });
  });
});
