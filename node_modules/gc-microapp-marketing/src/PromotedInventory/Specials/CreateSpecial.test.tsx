import { mount, shallow } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { keys } from '../../translations/bundles/marketing.json';
import CreateSpecial from './CreateSpecial';

const createComponent = (state, renderer) => {
  const store = configureMockStore([])(state);
  return {
    component: renderer(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <MemoryRouter>
            <CreateSpecial />
          </MemoryRouter>
        </IntlProvider>
      </Provider>,
    ),
    store,
  };
};

describe('CreateSpecial', () => {
  const formRenderedState = {
    campaigns: {
      create: {
        pending: false,
      },
    },
  };
  const completeRenderedState = {
    campaigns: {
      create: {
        pending: false,
        success: true,
      },
    },
  };
  const scenarios = [
    {
      description: 'render Form if campaign not yet created successfully, with header buttons',
      state: formRenderedState,
    },
    {
      description: 'render CreateSpecialCompleted if created: { pending: false, success: true }',
      state: completeRenderedState,
    },
  ];

  scenarios.forEach(({ description, state }) => {
    it(`should ${description}`, () => {
      const { component } = createComponent(state, create);

      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  it('cancel button opens modal, click stay closes it, cancel again, and then leave (push list location)', () => {
    const { component: wrapper } = createComponent(formRenderedState, mount);

    const headerButtons = wrapper.find('.gca-button');
    const cancelButton = headerButtons.first();
    let modal = wrapper.find('Modal');
    expect(modal.length).toEqual(0);

    cancelButton.simulate('click');

    /* Modal is open */
    modal = wrapper.find('Modal');
    expect(modal.length).toEqual(1);
    expect(modal.first().debug()).toMatchSnapshot();

    const stayButton = modal
      .first()
      .find('Button.gca-modal-button')
      .at(1);

    stayButton.simulate('click');
    wrapper.update();
    /* Modal is not open */
    expect(wrapper.find('Modal').length).toEqual(0);

    cancelButton.simulate('click');

    /* Modal is open */
    const leaveButton = wrapper
      .find('Modal')
      .first()
      .find('Button.gca-modal-button')
      .first();
    leaveButton.simulate('click');
  });

  it('publish button pushes redux form submit action', () => {
    const { component: wrapper, store } = createComponent(formRenderedState, mount);

    const publishButton = wrapper.find('.gca-button').at(1);
    publishButton.simulate('click');
    const actions = store.getActions();
    expect(actions.pop()).toMatchSnapshot();
  });
});
