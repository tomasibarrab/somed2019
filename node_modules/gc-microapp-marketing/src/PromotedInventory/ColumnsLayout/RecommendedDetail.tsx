import './RecommendedDetail.scss';

import { Button } from 'gca-react-components';
import moment from 'moment';
import React, { SFC } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';

import { actions } from '../../store/campaigns/campaigns';
import {
    CampaignType, ModalType, OpenModalPayload, Pages, Recommendation,
} from '../../store/campaigns/campaigns.types';
import SuppressionDates from '../CampaignsList/DetailLines/SuppressionDates';
import { formatCurrency } from '../CampaignsList/helpers/format-number-locale';
import makeDaysAndTimes from '../CampaignsList/helpers/make-days-and-times';
import { scheduleDateFormat } from '../constants';
import isOpenTableEmail from '../isOpenTableEmail';

interface OP {
  campaign: CampaignType;
  handleClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;
  openModal: (payload: OpenModalPayload) => void;
  recommendation: Recommendation;
  currentUserEmail: string;
  pageType: Pages;
  clickCallToAction: typeof actions.clickCallToAction;
}

type Props = OP & InjectedIntlProps;

const RecommendedDetail: SFC<Props> = ({
  campaign,
  openModal,
  recommendation: { messageToRestaurant, recommendedBy },
  intl,
  currentUserEmail,
  pageType,
  clickCallToAction,
}) => {
  const {
    endDate,
    flexiblePricingVisibility,
    isShortTerm,
    monthlyBudget,
    pricingTier: { currencyCode, price },
    restaurantContactEmail,
    schedule,
    startDate,
    suppressionDates,
    type,
  } = campaign;

  let visibilityTypeStringId;
  if (flexiblePricingVisibility) {
    visibilityTypeStringId = `guestcampaigns.list.flexible_pricing.recommended.${flexiblePricingVisibility}`;
  }

  const canApprove = !isOpenTableEmail(currentUserEmail);

  return (
    <article className="pi-rec--recommended-detail">
      <p>
        <span>{messageToRestaurant}</span>
        <FormattedMessage
          id="guestcampaigns.list.custom_promotions.recommended.sender_attribution"
          tagName="span"
          values={{
            'sender-name': recommendedBy,
          }}
        />
      </p>
      <div className="details">
        {/* column 1 */}
        <div className="details__info">
          <FormattedMessage id="guestcampaigns.list.campaigndates" tagName="h3" />
          <ul>{makeDaysAndTimes(schedule, type, isShortTerm, startDate, endDate)}</ul>
        </div>
        {/* column 2 */}
        <div className="details__info">
          {pageType === Pages.FlexiblePricing && visibilityTypeStringId && (
            <>
              <FormattedMessage id="guestcampaigns.list.flexible_pricing.recommended.exposure" tagName="h3" />
              <FormattedMessage
                id={visibilityTypeStringId}
                tagName="p"
                values={{
                  price: formatCurrency(price, currencyCode),
                }}
              />
            </>
          )}
          <FormattedMessage id="guestcampaigns.list.cover_price" tagName="h3" />
          <FormattedMessage
            id="guestcampaigns.terms.cost_per_seated_cover"
            tagName="p"
            values={{
              price: formatCurrency(price, currencyCode),
            }}
          />
          {monthlyBudget && (
            <>
              <FormattedMessage id="guestcampaigns.list.monthly_budget" tagName="h3" />
              <p>{formatCurrency(monthlyBudget, currencyCode)}</p>
            </>
          )}
        </div>
        {/* column 3 */}
        <div className="details__info">
          <div>
            <FormattedMessage id="guestcampaigns.list.start_date" tagName="h3" />
            <p>{intl.formatDate(moment(startDate).toDate(), scheduleDateFormat)}</p>
            <FormattedMessage id="guestcampaigns.list.end_date" tagName="h3" />
            {endDate ? (
              <p>{intl.formatDate(moment(endDate).toDate(), scheduleDateFormat)}</p>
            ) : (
              <FormattedMessage id="guestcampaigns.list.noenddate" tagName="p" />
            )}
          </div>
        </div>
        {/* column 4 */}
        <div className="details__info">
          <SuppressionDates
            messageIdSuffix="blockeddates"
            intl={intl}
            suppressionDates={suppressionDates}
            editListItem={null}
          />
        </div>

        {/* bottom row */}
        {/* column 1 */}
        <div className="details__actions" />
        {/* column 2 */}
        <div className="details__actions" />
        {/* column 3 */}
        <div className="details__actions">
          <Button
            data-testid="btnChangeOrRemoveCampaign"
            onClick={() => {
              clickCallToAction({
                feature: 'Approve campaign',
                name: 'Reject campaign',
                page: 'CP campaigns list',
              });
              openModal({
                campaign,
                type: ModalType.RequestChange,
              });
            }}
            type="button"
          >
            <FormattedMessage id="guestcampaigns.list.draft.change_or_remove" />
          </Button>
        </div>
        {/* column 4 */}
        <div className="details__actions">
          {canApprove && (
            <>
              {restaurantContactEmail === currentUserEmail ? (
                <Button
                  className="details__actions--approve-button"
                  data-testid="btnApproveCampaign"
                  onClick={() => {
                    clickCallToAction({
                      feature: 'Approve campaign',
                      name: 'Approve campaign',
                      page: 'CP campaigns list',
                    });
                    openModal({
                      campaign,
                      type: ModalType.Approve,
                    });
                  }}
                  type="button"
                >
                  <FormattedMessage id="guestcampaigns.list.draft.approve_campaign" />
                </Button>
              ) : (
                <>
                  <Button
                    className="details__actions--approve-button"
                    data-testid="btnApproveCampaignDisabled"
                    type="button"
                    disabled
                  >
                    <FormattedMessage id="guestcampaigns.list.draft.approve_campaign" />
                  </Button>
                  <p className="details__actions--approve-button-message">
                    <FormattedMessage
                      id="guestcampaigns.list.log_in_email_to_approve"
                      values={{ 'email-address': restaurantContactEmail }}
                    />
                  </p>
                </>
              )}
            </>
          )}
        </div>
      </div>
    </article>
  );
};

export default injectIntl(RecommendedDetail);
export { RecommendedDetail };
