import { mount } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';

import {
    CampaignState, CampaignTypes, ModalType, Pages,
} from '../../store/campaigns/campaigns.types';
import { VisibilityType } from '../../store/flexiblepricing/flexiblepricing.types';
import { keys } from '../../translations/bundles/marketing.json';
import CampaignsList from './CampaignsList';

jest.mock('../CampaignsList/Modals/ModalPicker', () => 'ModalPicker');

const campaign = {
  approvedByEmail: 'jest@example.com',
  campaignId: 'string',
  ccEmails: [],
  changedByUser: 'string',
  changedTimestamp: moment().toDate(),
  createdByEmail: 'string',
  createdChannel: 'string',
  createdTimestamp: moment().toDate(),
  currentVersion: 'string',
  draftTimestamp: moment().toDate(),
  endDate: moment().add(1, 'day'),
  endTimestamp: null,
  incentives: [],
  isShortTerm: false,
  liveTimestamp: moment()
    .add(-1, 'day')
    .toDate(),
  pauseUntil: moment().toDate(),
  restaurantContactEmail: 'string',
  restaurantContactName: 'string',
  rid: 1,
  schedule: [],
  startDate: moment(),
  state: CampaignState.Live,
  suppressionDates: {
    custom: [
      {
        endDate: moment()
          .add(1, 'day')
          .toDate(),
        label: 'test label',
        startDate: moment().toDate(),
      },
    ],
    default: ['thanksgiving_day_us'],
  },
  type: 'promoted_results',
};

const incentive = {
  description: 'desc',
  name: 'special name',
  noteToDiners: '',
};

const featureToggles = {
  features: {
    featureGcaPiApproveCustomPromotion: false,
    featureGcaPiCreateCustomPromotion: false,
  },
};

const currentContext = {
  user: {
    userName: 'jdoe@otenv.com',
  },
};

describe('<CampaignsList />', () => {
  describe('render', () => {
    const scenarios = [
      {
        description: 'Campaigns list when loading',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [],
            loading: true,
            pageType: Pages.PromotedResults,
            success: false,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Campaigns list when only inactive campaigns',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, { state: CampaignState.Discarded, campaignId: 'a' }),
              Object.assign({}, campaign, { state: CampaignState.Ended, campaignId: 'b' }),
            ],
            loading: false,
            pageType: Pages.PromotedResults,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Campaigns list when one of each campaign',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              campaign,
              Object.assign({}, campaign, { state: CampaignState.Draft, campaignId: 'a' }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                pauseUntil: moment()
                  .add(2, 'day')
                  .toISOString(),
                state: CampaignState.Paused,
              }),
              Object.assign({}, campaign, { state: CampaignState.Discarded, campaignId: 'c' }),
              Object.assign({}, campaign, { state: CampaignState.Ended, campaignId: 'd' }),
            ],
            loading: false,
            pageType: Pages.PromotedResults,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Campaigns list when modal open',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              campaign,
              Object.assign({}, campaign, { state: CampaignState.Draft, campaignId: 'a' }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                pauseUntil: moment()
                  .add(2, 'day')
                  .toISOString(),
                state: CampaignState.Paused,
              }),
              Object.assign({}, campaign, { state: CampaignState.Discarded, campaignId: 'c' }),
              Object.assign({}, campaign, { state: CampaignState.Ended, campaignId: 'd' }),
            ],
            loading: false,
            modal: {
              campaignId: 'a',
              type: ModalType.Pause,
            },
            pageType: Pages.PromotedResults,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Specials List when page type is Specials',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                campaignId: 'a',
                incentives: [incentive],
                state: CampaignState.Live,
                type: CampaignTypes.Special,
              }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                incentives: [incentive],
                state: CampaignState.Ended,
                type: CampaignTypes.Special,
              }),
            ],
            loading: false,
            pageType: Pages.Specials,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Custom Promotions List when page type is Custom Promotions',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                campaignId: 'a',
                state: CampaignState.Live,
                type: CampaignTypes.CustomPromotions,
              }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                state: CampaignState.Ended,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Custom Promotions List when only inactive',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [Object.assign({}, campaign, { state: CampaignState.Ended, type: CampaignTypes.CustomPromotions })],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Custom Promotions List when only Draft, non-decision maker campaigns shows Education page',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                needsDecisionMakerApproval: false,
                state: CampaignState.Draft,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles,
        },
      },
      {
        description: 'Custom Promotions List when create feature on',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                campaignId: 'a',
                state: CampaignState.Live,
                type: CampaignTypes.CustomPromotions,
              }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                state: CampaignState.Ended,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext: Object.assign({}, currentContext, {
            restaurant: {
              rid: 268852,
            },
          }),
          featureToggles: { features: { featureGcaPiCreateCustomPromotion: true } },
        },
      },
      {
        description: 'Custom Promotions List when one decisionMaker draft, one ISR draft (latter not shown)',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                campaignId: 'a',
                needsDecisionMakerApproval: true,
                pricingTier: {
                  currencyCode: 'USD',
                  price: 2.75,
                },
                state: CampaignState.Draft,
                type: CampaignTypes.CustomPromotions,
              }),
              Object.assign({}, campaign, {
                campaignId: 'b',
                state: CampaignState.Draft,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles: {
            features: {
              ...featureToggles.features,
              featureGcaPiApproveCustomPromotion: true,
            },
          },
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'Custom Promotions List when one ISR draft does not render empty "pending" section',
        state: {
          campaigns: {
            error: undefined,
            failed: false,
            list: [Object.assign({}, campaign, { state: CampaignState.Draft, type: CampaignTypes.CustomPromotions })],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles: {
            features: {
              ...featureToggles.features,
              featureGcaPiApproveCustomPromotion: true,
            },
          },
        },
      },
      {
        description: 'Custom Promotions List when one decisionMaker draft, feature OFF',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                needsDecisionMakerApproval: true,
                pricingTier: {
                  currencyCode: 'USD',
                  price: 2.75,
                },
                recommendation: {
                  messageToRestaurant: 'Test message',
                  recommendedBy: 'Jane Doe',
                },
                restaurantContactEmail: 'jdoe@otenv.com',
                state: CampaignState.Draft,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.CustomPromotions,
            success: true,
          },
          currentContext,
          featureToggles,
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'Flexible Pricing List when recommended campaign',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                flexiblePricingVisibily: VisibilityType.Standard,
                needsDecisionMakerApproval: true,
                pricingTier: {
                  currencyCode: 'USD',
                  price: 2.75,
                },
                recommendation: {
                  messageToRestaurant: 'Test message',
                  recommendedBy: 'Jane Doe',
                },
                restaurantContactEmail: 'jdoe@otenv.com',
                state: CampaignState.Draft,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.FlexiblePricing,
            success: true,
          },
          currentContext,
          featureToggles,
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'Flexible Pricing List when active campaign',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                flexiblePricingVisibily: VisibilityType.Standard,
                needsDecisionMakerApproval: false,
                pricingTier: {
                  currencyCode: 'USD',
                  price: 2.75,
                },
                recommendation: {
                  messageToRestaurant: 'Test message',
                  recommendedBy: 'Jane Doe',
                },
                restaurantContactEmail: 'jdoe@otenv.com',
                state: CampaignState.Live,
                type: CampaignTypes.CustomPromotions,
              }),
            ],
            loading: false,
            pageType: Pages.FlexiblePricing,
            success: true,
          },
          currentContext,
          featureToggles,
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'Flexible Pricing List when no campaigns',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [],
            loading: false,
            pageType: Pages.FlexiblePricing,
            success: true,
          },
          currentContext,
          featureToggles,
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'show notification popup',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [campaign],
            loading: false,
            pageType: Pages.FlexiblePricing,
            showNotifyPopup: true,
            success: true,
          },
          currentContext,
          featureToggles,
          language: {
            locale: 'en-us',
          },
        },
      },
      {
        description: 'hide edit budget link when budget is zero',
        state: {
          campaigns: {
            error: false,
            failed: false,
            list: [
              Object.assign({}, campaign, {
                monthlyBudget: 10,
                pricingTier: {
                  price: 3,
                },
              }),
            ],
            loading: false,
            pageType: Pages.FlexiblePricing,
            success: true,
          },
          currentContext,
          featureToggles: {
            featureGcaPiEditBudget: true,
          },
          language: {
            locale: 'en-us',
          },
        },
      },
    ];

    scenarios.map(({ description, state }) => {
      test(`${description} should match snapshot`, () => {
        const store = configureMockStore([])(state);
        const component = create(
          <Provider store={store}>
            <IntlProvider locale="en-US" messages={keys}>
              <MemoryRouter>
                <CampaignsList type={state.campaigns.pageType} />
              </MemoryRouter>
            </IntlProvider>
          </Provider>,
        );
        const tree = component.toJSON();
        expect(tree).toMatchSnapshot();
      });
    });
  });

  describe('CTA', () => {
    const scenarios = [
      {
        description: 'click Create Custom Promotion',
        pageType: Pages.CustomPromotions,
        testId: 'btnCreateCustomPromotion',
      },
      {
        description: 'click Create Special',
        pageType: Pages.Specials,
        testId: 'btnCreateSpecial',
      },
      {
        description: 'click Edit Budget',
        pageType: Pages.CustomPromotions,
        testId: 'btnEditBudgetLink',
      },
    ];

    scenarios.forEach(({ description, pageType, testId }) => {
      test(description, () => {
        const state = {
          campaigns: {
            list: [
              Object.assign({}, campaign, {
                monthlyBudget: 1000,
                pricingTier: {
                  price: 3,
                },
              }),
            ],
            pageType,
          },
          currentContext,
          featureToggles: {
            features: {
              featureGcaPiCreateCustomPromotion: true,
              featureGcaPiEditBudget: true,
            },
          },
        };

        const store = configureMockStore([])(state);
        const wrapper = mount(
          <Provider store={store}>
            <IntlProvider locale="en-US" messages={keys}>
              <MemoryRouter>
                <CampaignsList type={state.campaigns.pageType} />
              </MemoryRouter>
            </IntlProvider>
          </Provider>,
        );

        const button = wrapper.find(`[data-testid="${testId}"]`).first();
        button.simulate('click');

        expect(store.getActions()).toMatchSnapshot();
      });
    });
  });
});
