import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';

import { keys } from '../../translations/bundles/marketing.json';
import InsightsExportButton from './InsightsExportButton';

describe('<InsightsExportButton />', () => {
  it('should be clicked and match screenshot', () => {
    const convertToCsvEncodedString = require('./helpers/convertToCsvEncodedString');
    const spy = jest.spyOn(convertToCsvEncodedString, 'default');

    const formattedCampaigns = [
      {
        displayValues: {
          covers: 3,
          daysAndTimes: 'Mon-Fri',
          endDate: '2020-10-13',
          firstTimeGuests: 2,
          outOfTownGuests: 1,
          price: 1.5,
          startDate: '2020-07-13',
          totalSpend: 200,
          type: 'Promoted Results',
        },
      },
    ];

    const formattedTotals = {
      sumCovers: 3,
      sumFirstTimeGuests: 2,
      sumOutOfTownGuests: 1,
      sumTotalSpend: 200,
    };

    const store = configureMockStore([])({
      insights: {
        coverTrends: {
          error: false,
          loading: false,
        },
      },
    });

    const columns = [
      { id: 'campaign-type', name: 'Campaign type' },
      { id: 'price', name: 'Price' },
      { id: 'start-date', name: 'Start date' },
      { id: 'end-date', name: 'End date' },
      { id: 'days-and-times', name: 'Days & times' },
      { id: 'total-spend', name: 'Total spend' },
      { id: 'covers', name: 'Covers' },
    ];

    const intlProvider = new IntlProvider({ locale: 'en', messages: keys }, {});
    const intl = intlProvider.getChildContext().intl;

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en" messages={keys}>
          <InsightsExportButton
            formattedCampaigns={formattedCampaigns as []}
            formattedTotals={formattedTotals}
            isGuestColumnsEnabled={false}
            columns={columns}
            intl={intl}
          />
        </IntlProvider>
      </Provider>,
    );

    expect(wrapper.debug()).toMatchSnapshot();

    const button = wrapper.find('button').first();
    button.simulate('click');

    const expectedClick = [
      ['Campaign type', 'Price', 'Start date', 'End date', 'Days & times', 'Total spend', 'Covers'],
      ['Promoted Results', 1.5, '2020-07-13', '2020-10-13', 'Mon-Fri', 200, 3],
      ['Total', '', '', '', '', 200, 3],
    ];

    expect(spy).toHaveBeenCalledWith(expectedClick);
  });
});
