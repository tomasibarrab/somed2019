import { Modal, ModalHeader, ModalMain } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { Field, GenericFieldHTMLAttributes, WrappedFieldProps } from 'redux-form';
import { Photo } from '../../../store/privatedining/privatedining.types';
import Crop from './Crop';
import Select from './Select';
import PhotoView, { Status as PhotoStatus } from './View';

import './Photo.scss';

interface BaseProps {
  height: number;
  width: number;
}

type ReduxFormProps = WrappedFieldProps & GenericFieldHTMLAttributes;
type Props = BaseProps & ReduxFormProps & InjectedIntlProps;

const enum ModalState {
  Closed,
  Select,
  Crop,
}

interface ClosedState {
  modalState: ModalState.Closed;
}

interface SelectState {
  modalState: ModalState.Select;
}

interface CropState {
  modalState: ModalState.Crop;
  selectedFile: File;
}

type State = ClosedState | SelectState | CropState;

class PhotoController extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);

    this.state = {
      modalState: ModalState.Closed,
    };
  }

  public render() {
    const photoStatus = this.getPhotoStatus();
    const url = this.getUrl();
    const modalTitleId =
      this.state.modalState === ModalState.Crop
        ? 'privatedining.enabled.v2.photo.modal.crop.title'
        : 'privatedining.enabled.v2.photo.modal.add.title';
    const modalTitle = this.props.intl.formatMessage({ id: modalTitleId });

    return (
      <div>
        <PhotoView
          url={url}
          status={photoStatus}
          onSelectClick={this.select}
          width={this.props.width}
          height={this.props.height}
        />

        {this.state.modalState !== ModalState.Closed && (
          <Modal onClose={this.cancel} modalClass="photo-modal">
            <ModalHeader onClose={this.cancel} title={modalTitle} />
            <ModalMain>
              {this.state.modalState === ModalState.Select && (
                <Select onSelect={this.onSelect} minHeight={this.props.height} minWidth={this.props.width} />
              )}
              {this.state.modalState === ModalState.Crop && (
                <Crop
                  onCrop={this.onCrop}
                  file={this.state.selectedFile}
                  height={this.props.height}
                  width={this.props.width}
                />
              )}
            </ModalMain>
          </Modal>
        )}
      </div>
    );
  }

  private getUrl = () => {
    const value: Photo = this.props.input.value;

    return value.localUrl || value.pendingUrl || value.liveUrl || null;
  };

  private getPhotoStatus = () => {
    const value: Photo = this.props.input.value;
    const url = this.getUrl();

    if (value.loading) {
      return PhotoStatus.Loading;
    } else if (value.error) {
      return PhotoStatus.Error;
    } else if (url !== null) {
      return PhotoStatus.Success;
    }

    return PhotoStatus.Empty;
  };

  private select = () => {
    this.setState({ modalState: ModalState.Select });
  };

  private cancel = () => {
    this.setState({ modalState: ModalState.Closed });
  };

  private onSelect = (file: File) => {
    this.setState(() => ({ modalState: ModalState.Crop, selectedFile: file }));
  };

  private onCrop = (localUrl: string) => {
    const { onChange, value } = this.props.input;

    // Set local state of this component.
    this.setState(() => ({ modalState: ModalState.Closed }));

    // Invoke the Redux Form handler to update the real form value.
    onChange({
      ...value,
      localUrl,
    });
  };
}

export default injectIntl<BaseProps>(PhotoController);
