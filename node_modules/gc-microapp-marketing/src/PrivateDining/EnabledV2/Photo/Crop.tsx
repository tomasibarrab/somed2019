import { Button } from 'gca-react-components';
import { Cropper, CropperJSInstance } from 'gca-react-components/src/components/Cropper/Cropper';
import React, { Component } from 'react';
import { FormattedMessage } from 'react-intl';

import './Crop.scss';

interface Props {
  file: File;
  height: number;
  width: number;
  onCrop(url: string): void;
}

class Crop extends Component<Props> {
  private cropper: CropperJSInstance;

  public render() {
    const { file, height, width } = this.props;

    return (
      <div className="crop-photo">
        <Cropper
          cropperRef={(cropper: any) => (this.cropper = cropper)}
          src={window.URL.createObjectURL(file)}
          aspectRatio={1}
          minRelativeWidth={width}
          minRelativeHeight={height}
          cropperHeight={300}
          cropperWidth={392}
        />

        <Button theme="primary" onClick={this.crop}>
          <FormattedMessage id="privatedining.enabled.v2.photo.save" />
        </Button>
      </div>
    );
  }

  private crop = () => {
    const { height, width } = this.props;
    const canvas = this.cropper.getCroppedCanvas({ height, width });

    // Microsoft browsers have a different API for toBlob.
    if (canvas.hasOwnProperty('msToBlob')) {
      this.props.onCrop(window.URL.createObjectURL((canvas as any).msToBlob('image/jpeg')));
    } else {
      canvas.toBlob(
        (blob: Blob) => {
          this.props.onCrop(window.URL.createObjectURL(blob));
        },
        'image/jpeg',
        0.8,
      );
    }
  };
}

export default Crop;
