import { AsyncContent, Panel } from 'gca-react-components';
import * as React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { IntlShape } from 'react-intl';
import { connect } from 'react-redux';
import {
  editPromo,
  ensurePromos,
  featuredPromos,
  isFeaturedString,
  PromoType,
  seasonalPromos,
  Status,
} from '../store/promos/promos';
import { RestaurantPromo } from '../store/promos/promos.types';
import { Dispatch, State } from '../store/types';
import EditPromoModal from './EditPromo/EditPromoModal';
import Flash from './Flash';
import PromoList from './PromoList/PromoList';
import './Promos.scss';

interface OP {
  promoType: PromoType;
}

interface SP {
  currentPromoId: null | number;
  joinedPromos: RestaurantPromo[];
  unjoinedPromos: RestaurantPromo[];
  status: Status;
}

interface DP {
  editPromo: (id: number) => void;
  ensurePromos: () => void;
}

type Props = OP & SP & DP & InjectedIntlProps;

/*
 * return fragment for joined list for seasonal/featured
 *  returns null if no joined promos
 * @returns: html component OR null
 */
function joinedListElement(props: Props) {
  if (!props.joinedPromos.length) {
    return null;
  }

  const joinedTitleId = isFeaturedString(props.promoType) ? 'featured.joined.subtitle' : 'seasonal.joined.subtitle';

  return (
    <div className="list-wrapper">
      <h3 className="list-title">{props.intl.formatMessage({ id: joinedTitleId })}</h3>
      <PromoList promos={props.joinedPromos} />
    </div>
  );
}

/*
 * return fragment for unjoined list for seasonal/featured
 *  returns null if no unjoined promos
 * @returns: html component OR null
 */
function unjoinedListElement(props: Props) {
  if (!props.unjoinedPromos.length) {
    return null;
  }

  const unjoinedTitleId = isFeaturedString(props.promoType)
    ? 'featured.unjoined.subtitle'
    : 'seasonal.unjoined.subtitle';

  return (
    <div className="list-wrapper">
      <h3 className="list-title">{props.intl.formatMessage({ id: unjoinedTitleId })}</h3>
      <PromoList promos={props.unjoinedPromos} />
    </div>
  );
}

class Promos extends React.Component<Props, {}> {
  public render() {
    const panelTitleId = isFeaturedString(this.props.promoType) ? 'featured.title' : 'seasonal.title';
    const panelSubTitleId = isFeaturedString(this.props.promoType) ? 'featured.subtitle' : 'seasonal.subtitle';

    const joinedPromos = joinedListElement(this.props);
    const unjoinedPromos = unjoinedListElement(this.props);

    return (
      <Panel title={this.props.intl.formatMessage({ id: panelTitleId })} headerContent={<Flash />}>
        <AsyncContent
          isLoading={this.props.status === 'open'}
          isError={this.props.status === 'failure'}
          errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
          errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
        >
          <section className="promos-body">
            <p className="promo-intro">
              <FormattedMessage id={panelSubTitleId} />
            </p>

            {joinedPromos}

            {unjoinedPromos}

            <EditPromoModal />
          </section>
        </AsyncContent>
      </Panel>
    );
  }

  public componentDidMount() {
    // fetch the promos..cache: trigger ensureFetch and check there if loaded or not
    this.props.ensurePromos();
  }
}

const mapState = (state: State, { promoType }: OP) => {
  // create lists of joined and unjoined promos for display
  const promos = isFeaturedString(promoType) ? featuredPromos(state) : seasonalPromos(state);

  return {
    currentPromoId: state.promos.currentPromoId,
    ...promos,
    status: state.promos.fetchStatus,
  };
};

const mapDispatch = {
  editPromo,
  ensurePromos,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl(Promos));

export { Promos as PurePromos };
