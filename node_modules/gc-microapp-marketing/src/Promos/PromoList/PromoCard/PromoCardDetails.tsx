import addYears from 'date-fns/add_years';
import getYear from 'date-fns/get_year';
import isFuture from 'date-fns/is_future';
import get from 'lodash/get';
import * as React from 'react';
import { FormattedDate, FormattedMessage } from 'react-intl';
import { PromoType } from '../../../store/promos/promos';
import { RestaurantPromo } from '../../../store/promos/promos.types';

interface Props {
  promo: RestaurantPromo;
  isActive: boolean;
}

function PromoCardContent(props: Props) {
  const { isActive, promo: { id, promo: { displayLinkDates, eventDates, liveNow, type } } } = props;

  const startDate = liveNow ? (
    <span>
      <span className="active-dot" />
      <FormattedMessage id="promos.card.liveNow" />
    </span>
  ) : (
    <FormattedDate value={new Date(displayLinkDates.start)} weekday="short" month="short" day="numeric" />
  );

  const endDate = (
    <FormattedDate value={new Date(eventDates.end)} weekday="short" month="long" day="numeric" year="numeric" />
  );

  const dateText = isFuture(eventDates.end) ? (
    <span>
      {startDate} - {endDate}
    </span>
  ) : (
    <FormattedMessage id="promos.card.unavailable" values={{ year: getYear(addYears(eventDates.start, 1)) }} />
  );

  return (
    <div className="column-details">
      <div className="details-row">
        <span className="date">{type === PromoType.Seasonal && dateText}</span>
      </div>
      <div className="description">
        {isActive && get(props, ['promo', 'promoRestaurant', 'message'])}
        {!isActive && type === PromoType.Featured && props.promo.promo.selfServeDetails.details}
      </div>
    </div>
  );
}

export default PromoCardContent;
