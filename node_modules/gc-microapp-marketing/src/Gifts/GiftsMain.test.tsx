import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { keys } from '../translations/bundles/marketing.json';
import GiftsMain from './GiftsMain';

describe('<GiftsMain />', () => {
  const currentContext = {
    user: {
      firstName: 'John',
      lastName: 'Doe',
      userName: 'john.doe@example.com',
    },
  };

  const scenarios = [
    {
      containerClass: 'cancel-and-publish',
      description: 'cancel without existing URL',
      newUrl: undefined,
      state: {
        gifts: {
          url: undefined,
        },
      },
      submit: false,
    },
    {
      containerClass: 'cancel-and-publish',
      description: 'publish without existing URL',
      newUrl: 'http://new.example.com/',
      state: {
        gifts: {
          modal: {},
          url: undefined,
        },
      },
      submit: true,
    },
    {
      containerClass: 'save',
      description: 'edit an existing URL',
      newUrl: 'http://edited.example.com/',
      state: {
        gifts: {
          url: 'http://existing.example.com/',
        },
      },
      submit: true,
    },
  ];

  scenarios.forEach(({ description, state, containerClass, submit, newUrl }) => {
    it(`should ${description}`, () => {
      const store = configureMockStore()({
        ...state,
        ...{ currentContext },
      });
      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <GiftsMain />
          </IntlProvider>
        </Provider>,
      );
      const container = wrapper.find('.gifts-header-buttons');
      expect(container.length).toEqual(1);
      expect(container.hasClass(containerClass)).toEqual(true);

      if (newUrl) {
        const input = wrapper.find('input[name="url"]');
        input.instance().value = newUrl;
        input.simulate('change');
      }

      if (!state.gifts.url && submit) {
        const button = wrapper.find('button').at(1);
        button.simulate('click');
      } else {
        const button = wrapper.find('button').first();
        button.simulate('click');
      }

      expect(store.getActions()).toMatchSnapshot();
    });
  });

  it('handle toast upon gift url update', () => {
    const state = {
      gifts: {
        patchPending: false,
        url: 'http://existing.example.com/',
      },
    };

    const store = configureMockStore()({
      ...state,
      ...{ currentContext },
    });

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <GiftsMain />
        </IntlProvider>
      </Provider>,
    );

    const toastSelector = 'div[data-testid="gifts-url-toast"]';

    expect(wrapper.find(toastSelector).length).toEqual(0);

    const button = wrapper.find('button[data-testid="save-btn"]');
    button.simulate('click');

    expect(wrapper.find(toastSelector).length).toEqual(1);

    expect(wrapper.find(toastSelector).debug()).toMatchSnapshot();

    const close = wrapper.find('div[data-testid="gifts-url-toast__close"]');
    close.simulate('click');

    expect(wrapper.find(toastSelector).length).toEqual(0);
  });
});
