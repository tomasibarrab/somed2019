import { Button } from '@buffet/button';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';

import { Permission, Role } from '../store/types';
import interspercer from '../utils/intersperser';


interface RolePermissionListOwnProps {
  info: Role;
  permissions: Permission[];
  type: string;
  editable: boolean;
  onEdit: (id: string) => void;
}

type RolePermissionListProps = RolePermissionListOwnProps & InjectedIntlProps;

export class RolePermissionListImpl extends React.Component<RolePermissionListProps> {

  public render() {
    const { type, info, intl } = this.props;
    const simpleId = info.urn.split(':')[2];

    if (type === 'group') {
      return this.renderSeparatePermissionsList();
    }

    return (
      <div id={`role-restaurant-features-${simpleId}`}  className="view" key={`view-${info.urn}`}>
        <p className="permissions" key={`permissions-${info.urn}`}>
          {interspercer(
            info.permissions.map(p => (
              <span className="perm-name" key={p}>
                {intl.formatMessage({ id: p })}
              </span>
            )),
          )}
        </p>
        {this.renderRolesControls(simpleId)}
      </div>
    );
  }


  /**
   * Renders two comma separated list of Active permission for the Access Type (Role)
   * One list for group permissions and one for restaurant permissions
   */
  private renderSeparatePermissionsList() {
    const { info } = this.props;
    const simpleId = info.urn.split(':')[2];
    const restPermissions = info.permissions.filter(p => p.startsWith('urn:ot.rest'));
    const groupPermissions = info.permissions.filter(p => p.startsWith('urn:ot.group'));

    return (
      <div id={`role-group-features-${simpleId}`} className="view">
        {this.renderPermissionListSection(groupPermissions, 'manageRoles.group.features', 'perm-group')}
        {this.renderPermissionListSection(restPermissions, 'manageRoles.rest.features', 'perm-restaurant')}
        {this.renderRolesControls(simpleId)}
      </div>
    );
  }

  private renderPermissionListSection(
    groupPermissions: string[], titleId: string, className?: string): React.ReactNode {
    const { intl } = this.props;

    return groupPermissions.length > 0
      ? <p className={`permissions ${className}`}>
          <span className="feature-types">{intl.formatMessage({ id: titleId })}:</span>
          {interspercer(
            groupPermissions.map(p =>
              (<span className={`perm-name ${className}`} key={p}>{intl.formatMessage({ id: p })}</span>)),
          )}
        </p>
      : null;
  }

  /**
   * Render the controls for a Role section when not in editing mode.
   * @param simpleId HTML unique id used in the button.
   */
  private renderRolesControls(simpleId: string) {
    const { intl, info, onEdit, editable } = this.props;
    if (!editable) {
      return (null);
    }
    return (
      <p key={`roles-controls-${info.urn}`}>
        <Button
          type="button"
          theme="hollow"
          size="small"
          className={`${simpleId}_edit_bt`}
          onClick={() => onEdit(info.urn)}
        >
          {info.isDefault
            ? intl.formatMessage({ id: 'manageRoles.bt.role.customize' })
            : intl.formatMessage({ id: 'manageRoles.bt.role.edit' })
          }
        </Button>
      </p>
    );
  }
}

export const RolePermissionList = injectIntl<RolePermissionListOwnProps>(RolePermissionListImpl);
