import actionCreatorFactory, { Action} from 'typescript-fsa';

import { getContextUrn } from '../../utils/appUtils';
import { isGroupContext, isRestaurantContext } from '../../utils/contextHelpers';
import { GuestCenterScope } from '../types';


// ========================= Helpers =============================
function getAppBasename(gcScope: GuestCenterScope): string {
  switch (gcScope.type) {
    case 'restaurant':
      return `/admin/user-accounts/${gcScope.rid || gcScope.id}`;
    case 'group':
      return `/group-settings/user-accounts/${gcScope.id}`;
    default:
      return '';
  }
}

function getCommonApiBasename(gcScope: GuestCenterScope): string {
  return `/group-settings/api/${getContextUrn(gcScope)}`;
}

// TODO: this will become obsolete soon; it's only used for restaurant api calls to create and remove a user
// everything should use the common Api path defined above in getCommonApiBasename()
function getApiBasename(gcScope: GuestCenterScope): string {
  if (gcScope.type === 'restaurant') {
    return `/admin/api/restaurant/${gcScope.rid || gcScope.id}`;
  }

  return '';
}

// ========================= Actions =============================

const createAction = actionCreatorFactory();

const resetOriginalScope = createAction<any>('SET_SCOPE_FROM_WINDOW_OBJECT');
const setScopeFromContextUrn = createAction<string>('SET_SCOPE_FROM_CONTEXT');


export const actions = {
  resetOriginalScope,
  setScopeFromContextUrn,
};

export const scopeCreator = (bareScope: any, includeAppBase: boolean = false): GuestCenterScope => ({
  ...bareScope,
  apiBasename: getApiBasename(bareScope as any),
  apiBasenameCommon: getCommonApiBasename(bareScope as any),
  context: getContextUrn(bareScope as GuestCenterScope),
  ...(includeAppBase && { appBasename: getAppBasename(bareScope) }),
});

export const reducer = (scope: GuestCenterScope | undefined, action: Action<any>) => {
  switch (action.type) {
    // given a contextUrn, set the actual scope object for the app
    case setScopeFromContextUrn.type:
      const context = action.payload;
      let type;

      if (isGroupContext(context)) {
        type = 'group';
      } else if (isRestaurantContext(context)) {
        type = 'restaurant';
      }

      if (type) {
        return scopeCreator({
          ...scope,
          id: context.substring(context.lastIndexOf(':') + 1),
          type,
        });
      }
      break;
    // reset the scope to the original values from the window object
    case resetOriginalScope.type:
      const originalScope = (window as any).gcScope || {};
      if (!scope || scope.type !== originalScope.type || scope.id !== originalScope.id) {
        return scopeCreator((window as any).gcScope);
      }
      break;
    default:
      // no-op
  }

  return scope || {};
};
