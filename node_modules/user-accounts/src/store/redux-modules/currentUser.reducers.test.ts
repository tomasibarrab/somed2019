
import {
  actions,
  initialState,
  reducer as currentUserReducer,
} from './currentUser';

describe('currentUser reducers', () => {
  it('should return initialState', () => {
    const actual = currentUserReducer(undefined, {});
    expect(actual).toEqual(initialState);
  });

  it('actions.addNewUser.started should set status to save==="started"', () => {
    const actual = currentUserReducer(initialState, actions.addNewUser.started({}));
    expect(actual.status.save).toBe('started');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  });

  it('actions.updateExistingUser.started should set status to save==="started"', () => {
    const actual = currentUserReducer(initialState, actions.updateExistingUser.started({}));
    expect(actual.status.save).toBe('started');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  });

  it('actions.addNewUser.failed should set status to save==="failed"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.addNewUser.failed({ params: {} , error: 'fakeError' }),
    );
    expect(actual.status.save).toBe('failed');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  });

  it('actions.updateExistingUser.failed should set status to save==="failed"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.updateExistingUser.failed({ params: {} , error: 'fakeError' }),
    );
    expect(actual.status.save).toBe('failed');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  });


  it('actions.updateExistingUser.done should set status to save==="update-done"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.updateExistingUser.done({ result: { id: '123'}}),
    );
    expect(actual.status.save).toBe('update-done');
    expect(actual.user).toEqual({ id: '123'});
    expect(actual.id).toEqual('123');
  });

  it('actions.addNewUser.done should set status to save==="create-done"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.addNewUser.done({ result: { id: '123'}}),
    );
    expect(actual.status.save).toBe('create-done');
    expect(actual.user).toEqual({ id: '123'});
    expect(actual.id).toEqual('123');
  });

  it('fetchCurrentUser.started should set status to fetch==="started"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.fetchCurrentUser.started('123'),
    );
    expect(actual.status.fetch).toBe('started');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  });

  it('fetchCurrentUser.started should set status to fetch==="done"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.fetchCurrentUser.done({ result: { id: '123'}}),
    );
    expect(actual.status.fetch).toBe('done');
    expect(actual.user).toEqual({ id: '123'});
    expect(actual.id).toEqual('123');
  });

  it('fetchCurrentUser.failed should set status to fetch==="failed"', () => {
    const actual = currentUserReducer(
      initialState,
      actions.fetchCurrentUser.failed({ params: {} , error: 'fakeError' }),
    );
    expect(actual.status.fetch).toBe('failed');
    expect(actual.user).toEqual({});
    expect(actual.id).toEqual('');
  })

});

// describe('currentUser selectors', () => {
// });
