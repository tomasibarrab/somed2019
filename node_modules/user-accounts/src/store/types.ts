import { Dispatch as ReduxDispatch, Store as ReduxStore } from 'redux';
import { ActionsObservable } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import { Action as FsaAction, ActionCreator } from 'typescript-fsa';

import { CurrentContext } from 'gca-react-components/src/redux-modules/currentContext';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { LanguageProvider } from 'gca-react-components/src/redux-modules/languageProvider';

// import { ModalsState } from './store/modals/modals';

import { Dependencies } from './store';

export const RANK_PROP_URN = 'urn:ot.gc:rank';
export const HIDDEN_PROP_URN = 'urn:ot.gc:hidden';
export const CUSTOMIZABLE_PROP_URN = 'urn:ot.gc:customizable';
export const DEFAULTS_PROP_URN = 'urn:ot.gc:defaults';
export const ROLE_TYPE = 'urn:ot.gc:type';


export type UserProfileSource = 'self' | 'parent' | 'child';

export interface UserProfile {
  context: string;
  inactive: boolean | null; // This will be fixed to be just boolean
  email: string;
  enable2fa: string;
  phone: string;
  roles: string[];
  source?: UserProfileSource;
  title: string;
}

export interface User {
  id: string;
  urn: string;
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  role: string;
  roles?: string[];
  title: string;
  lastActive: string;
  newUser: boolean;
  enable2FA: boolean;
  gdprNotificationReceiver: boolean;
  profiles?: UserProfile[];
  restaurants?: RestaurantInstance[];
  groups?: GroupInstance[];
  // set by backend api on some calls
  contextUrn?: string;
  // copied from profiles
  context?: string;
}

export interface ContextInstance {
  id: number;
  name: string;
  urn: string;
}

export interface GroupInstance extends ContextInstance {
  type: 'Core'; // TODO: add more group types here
  hierarchyLevel: number;
}

export interface RestaurantInstance extends ContextInstance {
  type: 'Restaurant';
}

export type ContextType = 'group' | 'restaurant';

export interface UserContextType {
  type: ContextType;
}

export interface UserPayload extends User {
  countryCode: string;
  product: string;
  rid: number;
}

export interface UserSearchResponse {
  totalCount: number;
  users: User[];
}

export interface AnyUser extends User {
  rid: number;
}

export interface RoleEdit {
  urn: string;
  set: boolean;
  permissions: Permission[];
}

// Used for editing in the react-final-form
export interface UserData extends User {
  rolesSet: RoleEdit[];
  rolesNotEditable: string[];  // Non editable access type that must be preserved when editing a user
}

export type SortOrder = 'asc' | 'desc';

export interface SortParameters {
  sort: string;
  order: SortOrder;
}

export type ajaxSaveOpStatus = 'failed' | 'update-done' | 'create-done' | 'started';
export type ajaxFetchOpStatus = 'failed' | 'done' | 'started';

export interface UsersState {
  fetchStatus?: 'failed' | 'done' | 'started';
  updateStatus?: 'failed' | 'done' | 'started';
  users: User[];
  totalUsers: number;
  pageSize: number;
  currentPage: number;
  currentSort: any;
  searchQuery?: string;
  intl?: ReactIntl.InjectedIntl; // This is needed for searching on translated content
  isCreating: boolean;
  currentUserId?: string;
}

export interface AjaxStatuses {
  fetch?: ajaxFetchOpStatus;
  save?: ajaxSaveOpStatus;
}

export interface UserState<T extends User> {
  status: AjaxStatuses;
  user: Partial<T>;
  id: string;
}

export interface ModalsState {
  currentModal: any | null;
  modalPayload: any;
}

export type AsyncOperations = 'fetchingRoles' | 'fetchingPermissions' | 'savingRole' | 'fetchingDefaultPermissions';

export type InProgressOps = {[o in AsyncOperations]?: 'inprogress' | 'error' | undefined };

export interface RolesState {
  defPermissions: Role[];
  permissions: PermissionWithMetadata[];
  roles: Role[];
  inProgress: InProgressOps;
}

export interface GuestCenterScope {
  type: ContextType;
  id?: string;
  rid?: string;
  authToken?: string;
  appBasename: string;
  apiBasename: string;
  apiBasenameCommon: string;
  context: string;
}
export interface State {
  appScope: GuestCenterScope;
  scope: GuestCenterScope;
  language: LanguageProvider;
  currentContext: CurrentContext;
  users: UsersState;
  modals: ModalsState;
  featureToggles: FeatureToggles;
  appRoles: RolesState;
  profileRoles: RolesState;
  currentUser: UserState<User>;
  availableUser: UserState<AnyUser>;
}

export type Action = FsaAction<any>;

export type Store = ReduxStore<State>;

export type Dispatch = ReduxDispatch<Action>;
export type Epic = (action$: ActionsObservable<Action>, store: Store, options: Dependencies) => Observable<Action>;

export type   Permission = string;

export interface Metadata {
  [key: string]: string;
}

export interface WithMetadata {
  properties: Metadata;
}

export interface PermissionWithMetadata extends WithMetadata {
  urn: Permission;
}

export interface Role extends WithMetadata {
  editingPermissions?: Permission[];
  hiddenPermissions?: Permission[];
  urn: string; // This is a Universal Resource Name (urn)
  isDefault?: boolean;
  permissions: Permission[];
  status?: 'editing' | 'saving' | 'saved' | 'view' | 'error';
}

export type RolesFor = 'appRoles' | 'profileRoles';

export type SaveStatus = 'none' | 'started' | 'failed' | 'update-done' | 'create-done';

export interface AsyncNextAction<T> {
  params?: any;
  nextAction?: ActionCreator<T>;
  nextPayload?: T;
}

export interface UserAccountsWindow extends Window {
  gcaConfig: {
    csrfToken: string;
  };
}
