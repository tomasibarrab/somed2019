import 'whatwg-fetch';

/* Interfaced */
interface FeatureStatus {
  enabled: boolean;
}

interface FeatureToggles {
  [key: string]: boolean;
}

/* Helper function to capitalize a string */
function capitalize(name: string) {
  if (!name) { return name; }
  return name[0].toUpperCase() + name.slice(1);
}

// Cache feature toggles in order to not make the call each time.
const featureToggles: FeatureToggles = {};

// Cache Feature Toggle requests and reuse them
const featureToggleRequests: { [key: string]: any } = {};

export type CheckGlobalToggle = (feature: string) => Promise<boolean>;


function fetchAndCacheFeatureToggle(feature: string) {
  return fetch(
    `/gateway/proxies/featureManager/v3/api/globalToggle/global${capitalize(feature)}`,
    {
      credentials: 'same-origin',
    },
  )
    .then((response) => {
      // throw any 400 or 500
      if (response.status >= 400) {
        throw response;
      }
      return response.json();
    })
    .then((response: FeatureStatus) => {
      // cache the value to prevent further requests
      featureToggles[feature] = response.enabled;
    });
}

/**
 * This function will call the Feature Manager API and will either resolve with the value of the feature,
 * or it will throw in case of errors.
 * If the value was previously cached, it will immediately resolve with the cached value.
 *
 * This function is also exported as a default.
 *
 * @param feature string
 */
export const checkGlobalToggle: CheckGlobalToggle = (feature) => {
  // return cached value of requested feature toggle
  if (typeof featureToggles[feature] !== 'undefined') {
    return Promise.resolve(featureToggles[feature]);
  }

  // if no request is in progress, start one
  if (typeof featureToggleRequests[feature] === 'undefined') {
    featureToggleRequests[feature] = fetchAndCacheFeatureToggle(feature)
      .then(() => {
        // clear the fetching resource
        featureToggleRequests[feature] = undefined;
      });
  }

  return featureToggleRequests[feature]
    .then(() => featureToggles[feature]);
};

// also make available as a default
export default checkGlobalToggle;


export type MergeWithGlobalToggle = <F extends string>(feature: F) =>
  <T extends {}>(obj: T) => Promise<T & {[key in F]: boolean}>;

/**
 * This function will fetch a global feature toggle and it will merge it as a prop with the next passed object.
 * @param feature
 */
export const mergeWithGlobalToggle: MergeWithGlobalToggle = feature => obj =>
    checkGlobalToggle(feature)
      .then(isToggleOn => ({
        ...obj,
        [feature]: isToggleOn,
      }));
