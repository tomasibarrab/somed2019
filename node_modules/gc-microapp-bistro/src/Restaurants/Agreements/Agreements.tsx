// tslint:disable: object-literal-sort-keys

import * as React from 'react';
import { RouteComponentProps, withRouter } from 'react-router-dom';

import { Button } from '@buffet/button';
import { Input } from '@buffet/input';
import { Panel } from '@buffet/panel';

import { AsyncProgress, AsyncStatus } from 'shared-react-utils/useAsync';

import * as api from '../../api';
import DataDisplay from '../../common/DataDisplay/DataDisplay';
import DataTableDisplay from '../../common/DataDisplay/DataTableDisplay';
import strings from '../../strings';

import './Agreements.scss';

type Props = RouteComponentProps<any>;

// Typescript has forced us to model this awkwardly
interface State {
  apiStatus: AsyncStatus,
  data: any;
  email: string | null;
  emailInput: string;
  emailTouched: boolean;
  rid: string | null;
  ridInput: string;
  ridTouched: boolean;
}

const initState: State = {
  apiStatus: { progress: AsyncProgress.Init },
  data: undefined,
  email: null,
  emailInput: '',
  emailTouched: false,
  rid: null,
  ridInput: '',
  ridTouched: false,
};

class AgreementsImpl extends React.Component<Props, State> {

  // public static propTypes: { location: any, history: any };

  constructor(props: any) {
    super(props);
    this.state = initState;
  }

  public componentDidMount() {
    const { match } = this.props;
    const rid = match.params.rid;
    if (rid) {
      this.fetchAgreementByRid(rid);
    }
  }

  public render() {
    const { apiStatus, data } = this.state;
    // set state of refresh:false
    // when need to rerender, set to true
    return (
      <Panel title={strings['agreements.title']}>
        <div className="agreements-dashboard">
          <div className="search-container">
            <div className="search-item">
              <Input
                valid={this.validateRid()}
                disabled={apiStatus.progress === AsyncProgress.Started}
                id={`rid-input`}
                placeholder={strings['agreements.input.rid']}
                type="text"
                onChange={this.handleRidChanged}
                onKeyPress={this.handleRidKeyPress}
                value={this.state.ridInput ? this.state.ridInput : ''}
              />
              <Button
                type="button"
                theme="primary"
                disabled={apiStatus.progress === AsyncProgress.Started}
                onClick={this.handleRidSubmit}>
                {strings['agreements.button.search']}
              </Button>
            </div>

            <div className="search-item">
              <Input
                valid={this.validateEmail()}
                disabled={apiStatus.progress === AsyncProgress.Started}
                id={`email-input`}
                placeholder={strings['agreements.input.email']}
                type="text"
                onChange={this.handleEmailChanged}
                onKeyPress={this.handleEmailKeyPress}
                value={this.state.emailInput ? this.state.emailInput : ''}
              />

              <Button
                type="button"
                theme="primary"
                disabled={apiStatus.progress === AsyncProgress.Started}
                onClick={this.handleEmailSubmit}>
                {strings['agreements.button.search']}
              </Button>
            </div>
          </div>
          <hr className="separator-style" />
          <DataDisplay status={apiStatus}>
            <DataTableDisplay data={data} />
          </DataDisplay>
        </div>
      </Panel>
    );
  }

  private fetchAgreementByRid(rid: string) {
    this.setState((state: State) => ({
      apiStatus: { progress: AsyncProgress.Started },
      email: '',
      emailInput: '',
      emailTouched: false,
      rid,
      ridInput: rid,
    }));
    api.searchAgreementByRid(rid)
      .then(this.setData)
  }

  private fetchAgreementByEmail(email: string) {
    this.setState((state: State) => ({
      apiStatus: { progress: AsyncProgress.Started },
      email,
      emailInput: email,
      rid: '',
      ridInput: '',
      ridTouched: false,
    }));
    api.searchAgreementByEmail(email)
      .then(this.setData)
  }

  private setData = (data: any) => {
    if (data.statusCode >= 400) {
      this.setState({
        apiStatus: {
          progress: AsyncProgress.Failed,
          error: new Error(data.message || `Unknown error (#${data.statusCode})`) },
        },
      );
    } else {
      this.setState({
        apiStatus: { progress: AsyncProgress.Done },
        data,
      });
    }
  };

  private validateRid() {
    return !this.state.ridTouched || !isNaN(parseInt(this.state.ridInput, 10));
  }

  private validateEmail() {
    // tslint:disable-next-line:max-line-length
    const emailRegEx: RegExp = /^(([^<>()[\]{}'^?\\.,!|//#%*-+=&;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
    return !this.state.emailTouched || emailRegEx.test(this.state.emailInput);
  }

  private handleRidSubmit = () => {
    this.fetchAgreementByRid(this.state.ridInput)
    this.props.history.replace(`?rid=${this.state.ridInput}`);
  };

  private handleRidKeyPress: React.KeyboardEventHandler<HTMLInputElement> = e => {
    if (e.charCode === 13) {
      this.setState(state => ({ rid: state.ridInput }));
      this.handleRidSubmit();
    }
  };

  private handleRidChanged = ({ target: { value } }: any) => {
    this.setState({ ridInput: value, ridTouched: true });
  };

  private handleEmailSubmit = () => {
    this.fetchAgreementByEmail(this.state.emailInput)
    this.props.history.replace(`?email=${this.state.emailInput}`);
  };

  private handleEmailKeyPress: React.KeyboardEventHandler<HTMLInputElement> = e => {
    if (e.charCode === 13) {
      this.setState(state => ({ email: state.emailInput }));
      this.handleEmailSubmit();
    }
  };

  private handleEmailChanged = ({ target: { value } }: any) => {
    this.setState({ emailInput: value, emailTouched: true });
  };
}

export const Agreements = withRouter(AgreementsImpl);
