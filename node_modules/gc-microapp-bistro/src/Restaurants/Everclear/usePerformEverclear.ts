import React from 'react';

import { AsyncProgress, AsyncStatus, useAsync } from 'shared-react-utils/useAsync/useAsync';

import {
  bulkDeleteStart,
  bulkDeleteStatus,
} from '../../api';
import { GCEventStatus } from '../../types';

export interface EverClearProgress {
  statusEverclearCheck: Readonly<AsyncStatus>;
  statusEverclearProgress: GCEventStatus | undefined;
  triggerEverclear: () => void;
};

/**
 * Custom hook (used by RestaurantEverclear) returning a tuple with 3 items:
 * 1 - A AsyncStatus object with status info on when the hook makes async calls
 * 2 - A status object reporting the progress status of the bulkDelete operation.
 * 3 - A async call to begin everclear on the given ID
 * This hook will keep polling for status information and update the status
 * until the operation reaches the 'Complete' status.
 * https://wiki.otcorp.opentable.com/pages/viewpage.action?pageId=43749530
 * @param rid
 */
export function usePerformEverclear(rid: string, pollingInterval = 2000): EverClearProgress {
  const [ status, setStatus] = React.useState<GCEventStatus>()
  const [ bulkDeleteStartState, bulkDelete ] = useAsync(bulkDeleteStart);
  const [ bulkDeleteCheckState, getBulkDeleteStatus ] = useAsync(bulkDeleteStatus);

  const triggerEverclear = React.useCallback(() => {
    bulkDelete(rid)
      .then(setStatus);
  }, [rid]);

  React.useEffect(() => {
    const timer = setTimeout( () => {
      if (status && status.status !== 'Complete') {
        getBulkDeleteStatus(rid, status.id)
          .then(setStatus);
      }
    }, pollingInterval);
    return () => clearInterval(timer);
  }, [rid, status])

  return {
    statusEverclearCheck: bulkDeleteStartState.progress === AsyncProgress.Done
      ? bulkDeleteCheckState
      : bulkDeleteStartState,
    statusEverclearProgress: status,
    triggerEverclear,
  };
}
