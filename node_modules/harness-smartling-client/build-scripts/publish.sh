#!/bin/bash

set -o errexit -o nounset

DEFAULT_VERSION_TYPE="patch"
DEFAULT_SKIP_TAGGING=""

# Other options [major | minor | patch | premajor | preminor | prepatch | prerelease]
VERSION_TYPE=${1-$DEFAULT_VERSION_TYPE}

# Will skip if the value "skip-tagging" is provided
SKIP_TAGGING=${2-$DEFAULT_SKIP_TAGGING}

# ---------------------------

source /app/build-scripts/_functions.sh

cd /app

# ---------------------------

tc_start "NPM version"

# Current Version
CURRENT_PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g')

echo "Current version: $CURRENT_PACKAGE_VERSION"

COMMIT_MESSAGE="v%s: Incrementing '$VERSION_TYPE' version for npm publish"

# Uptick the version
npm version $VERSION_TYPE -m "$COMMIT_MESSAGE"

NEW_PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g')
NEW_PACKAGE_VERSION="$(echo -e ${NEW_PACKAGE_VERSION} |  tr -d '[[:space:]]')"

echo "New version: $NEW_PACKAGE_VERSION"

tc_end "NPM version"

# ---------------------------

tc_start "NPM Publish"

# Publish to artifactory
npm publish --registry http://artifactory.otenv.com/artifactory/api/npm/npm-local .

tc_end "NPM Publish"

# ---------------------------

if [ "$SKIP_TAGGING" == "skip-tagging" ]
  then
    tc_message "Skipping GitHub Tagging"
  else
    tc_start "Pushing new version to git"

    # Push the tag
    VERSION_TAG="v$NEW_PACKAGE_VERSION"

    git push origin $VERSION_TAG

    # Push to master
    git push origin master

    tc_end "Pushing new version to git"
fi
