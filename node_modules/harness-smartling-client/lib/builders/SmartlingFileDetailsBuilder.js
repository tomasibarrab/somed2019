"use strict";function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}module.exports = function (Utils, fsPromise, path, Promise, _) {var
  SmartlingFileDetailsBuilder = function () {
    function SmartlingFileDetailsBuilder(sourceDirectoryPath, destinationDirectoryPath, fileUri) {_classCallCheck(this, SmartlingFileDetailsBuilder);
      this.sourceDirectoryPath = sourceDirectoryPath;
      this.destinationDirectoryPath = destinationDirectoryPath;
      this.fileUri = fileUri;
      this.directoryNames = null;
      this.fileDetails = null;
    }SmartlingFileDetailsBuilder.

    build = function build(sourceDirectoryPath, destinationDirectoryPath, fileUri) {
      return new SmartlingFileDetailsBuilder(sourceDirectoryPath, destinationDirectoryPath, fileUri).build();
    };SmartlingFileDetailsBuilder.prototype.

    build = function build() {
      return Utils.promiseQueue([
      this._setValidDirectoryNames.bind(this),
      this._setFileDetails.bind(this),
      this._getFileDetails.bind(this)]);

    };SmartlingFileDetailsBuilder.prototype.

    _setValidDirectoryNames = function _setValidDirectoryNames() {var _this = this;
      return fsPromise.readdirAsync(this.sourceDirectoryPath).
      filter(this._filterInvalidDirectory.bind(this)).
      then(function (directoryNames) {
        _this.directoryNames = directoryNames;
      }).
      catch(function () {return false;});
    };SmartlingFileDetailsBuilder.prototype.

    _filterInvalidDirectory = function _filterInvalidDirectory(entry) {var _this2 = this;
      var entryPath = path.join(this.sourceDirectoryPath, entry);

      return fsPromise.statAsync(entryPath).
      then(function (entryStats) {return entryStats && entryStats.isDirectory();}).
      then(function (isDirectory) {
        if (!isDirectory) {
          return false;
        }

        return _this2._filterInvalidFile(entryPath);
      }).
      catch(function () {return false;});
    };SmartlingFileDetailsBuilder.prototype.

    _filterInvalidFile = function _filterInvalidFile(entryPath) {
      var filePath = path.join(entryPath, this.fileUri);
      return fsPromise.statAsync(filePath).
      then(function (fileEntryStats) {return fileEntryStats && fileEntryStats.isFile();});
    };SmartlingFileDetailsBuilder.prototype.

    _setFileDetails = function _setFileDetails() {var _this3 = this;
      if (_.isEmpty(this.directoryNames)) {
        return Promise.reject("'" + this.sourceDirectoryPath + "' did not have any valid directories.");
      }

      return Promise.map(this.directoryNames, this._mapFileDetail.bind(this)).
      then(function (fileDetails) {
        _this3.fileDetails = fileDetails;
      });
    };SmartlingFileDetailsBuilder.prototype.

    _mapFileDetail = function _mapFileDetail(directoryName) {
      var directoryEntryPath = path.join(this.sourceDirectoryPath, directoryName);
      var localeName = directoryName.toLowerCase();

      return {
        locale: localeName,
        directory: {
          name: directoryName,
          path: directoryEntryPath },

        sourceFile: path.join(directoryEntryPath, this.fileUri),
        destinationFile: path.join(this.destinationDirectoryPath, localeName + ".json") };

    };SmartlingFileDetailsBuilder.prototype.

    _getFileDetails = function _getFileDetails() {
      return this;
    };return SmartlingFileDetailsBuilder;}();


  return SmartlingFileDetailsBuilder;
};
//# sourceMappingURL=SmartlingFileDetailsBuilder.js.map