'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}module.exports = function (SmartlingBaseService, SmartlingConstants, HTTPService, HTTPLogging) {var
  SmartlingAuthenticateService = function (_SmartlingBaseService) {_inherits(SmartlingAuthenticateService, _SmartlingBaseService);function SmartlingAuthenticateService() {_classCallCheck(this, SmartlingAuthenticateService);return _possibleConstructorReturn(this, _SmartlingBaseService.apply(this, arguments));}SmartlingAuthenticateService.

    fetch = function fetch(userIdentifier, userSecret) {
      return new SmartlingAuthenticateService().fetch(userIdentifier, userSecret);
    };SmartlingAuthenticateService.prototype.

    fetch = function fetch(userIdentifier, userSecret) {
      return HTTPService.post(this.getRequestUrl()).
      set('Content-Type', 'application/json').
      send({
        userIdentifier: userIdentifier,
        userSecret: userSecret }).

      plugin(HTTPLogging).
      promiseBody().
      then(this.validateResponse);
    };SmartlingAuthenticateService.prototype.

    getRequestUrl = function getRequestUrl() {
      return SmartlingConstants.host + '/auth-api/v2/authenticate';
    };return SmartlingAuthenticateService;}(SmartlingBaseService);


  return SmartlingAuthenticateService;
};
//# sourceMappingURL=SmartlingAuthenticateService.js.map