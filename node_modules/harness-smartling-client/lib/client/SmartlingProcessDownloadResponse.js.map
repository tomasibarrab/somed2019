{"version":3,"sources":["../../src/client/SmartlingProcessDownloadResponse.js"],"names":["module","exports","SmartlingFileDetailsBuilder","fsPromise","Promise","path","Utils","fs","SmartlingProcessDownloadResponse","buffer","options","saveTo","tempId","process","promiseQueue","_checkDirectoryExist","bind","_createTempDirectory","_saveBufferToFile","_extractContents","_moveContentsToFinalDestination","finally","_cleanUpTemporaryFiles","statAsync","then","stats","isDirectory","Error","resolve","reject","_getTempDirectoryPath","err","fileUri","archivePath","_getTempFilePath","writeFileSync","tempFilePath","unzipExtractor","Extract","on","createReadStream","pipe","build","result","fileDetails","length","each","entry","renameAsync","sourceFile","destinationFile","catch","_unlinkPath","assetPath","unlinkAsync","join","_getFileName"],"mappings":"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","file":"SmartlingProcessDownloadResponse.js","sourcesContent":["/* eslint-disable new-cap */\n\nimport uuidV4 from 'uuid/v4';\nimport unzip from 'unzip2';\nimport mkdirp from 'mkdirp';\nimport del from 'del';\n\nmodule.exports = function (SmartlingFileDetailsBuilder, fsPromise, Promise, path, Utils, fs) {\n  class SmartlingProcessDownloadResponse {\n    constructor(buffer, options, saveTo) {\n      this.buffer = buffer;\n      this.options = options;\n      this.saveTo = saveTo;\n\n      // To be used as the name of the temp directory.\n      this.tempId = uuidV4();\n    }\n\n    static process(buffer, options, saveTo) {\n      return new SmartlingProcessDownloadResponse(buffer, options, saveTo).process();\n    }\n\n    process() {\n      return Utils.promiseQueue([\n        this._checkDirectoryExist.bind(this),\n        this._createTempDirectory.bind(this),\n        this._saveBufferToFile.bind(this),\n        this._extractContents.bind(this),\n        this._moveContentsToFinalDestination.bind(this)\n      ])\n      // Make sure to try and clean up even if there is a failure\n      .finally(this._cleanUpTemporaryFiles.bind(this));\n    }\n\n    _checkDirectoryExist() {\n      return fsPromise.statAsync(this.saveTo)\n        .then((stats) => {\n          if (!stats.isDirectory()) {\n            throw new Error(`'${this.saveTo}' directory does not exist`);\n          }\n\n          return stats;\n        });\n    }\n\n    _createTempDirectory() {\n      return new Promise((resolve, reject) => {\n        mkdirp(this._getTempDirectoryPath(), (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n\n    _saveBufferToFile() {\n      if (!this.options.fileUri) {\n        return Promise.reject(new Error('fileUri is not defined in the download options.'));\n      }\n\n      const archivePath = this._getTempFilePath();\n\n      return Promise.resolve(fsPromise.writeFileSync(archivePath, this.buffer, 'binary'));\n    }\n\n    _extractContents() {\n      return new Promise((resolve, reject) => {\n        const tempFilePath = this._getTempFilePath();\n\n        const unzipExtractor = unzip.Extract({ path: this._getTempDirectoryPath() });\n\n        unzipExtractor.on('error', reject);\n        unzipExtractor.on('close', resolve);\n        unzipExtractor.on('end', resolve);\n\n        fs.createReadStream(tempFilePath).pipe(unzipExtractor);\n      });\n    }\n\n    _moveContentsToFinalDestination() {\n      return SmartlingFileDetailsBuilder.build(this._getTempDirectoryPath(), this.saveTo, this.options.fileUri)\n        .then((result) => {\n          const fileDetails = result.fileDetails;\n\n          if (!fileDetails || fileDetails.length < 1) {\n            throw new Error('No file details were loaded.');\n          }\n\n          return Promise.each(fileDetails, (entry) => fsPromise.renameAsync(entry.sourceFile, entry.destinationFile));\n        });\n    }\n\n    _cleanUpTemporaryFiles() {\n      return new Promise((resolve, reject) => {\n        del([\n          this._getTempFilePath(),\n          this._getTempDirectoryPath()\n        ])\n        .then(resolve)\n        .catch(reject);\n      });\n    }\n\n    _unlinkPath(assetPath) {\n      return fsPromise.unlinkAsync(assetPath);\n    }\n\n    _getTempFilePath() {\n      return path.join(this.saveTo, `${this._getFileName()}`);\n    }\n\n    _getTempDirectoryPath() {\n      return path.join(this.saveTo, `temp-${this.tempId}`);\n    }\n\n    _getFileName() {\n      return `${this.tempId}.zip`;\n    }\n  }\n\n  return SmartlingProcessDownloadResponse;\n};\n"]}