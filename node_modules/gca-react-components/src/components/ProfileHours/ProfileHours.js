import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';

import Button from '../Button/Button';
import ProfileHour from './ProfileHour';

import { ShiftErrorPropTypes, LabelPropTypes, StandardShiftPropTypes, ShiftPropTypes } from './ProfileHoursPropTypes';

/**
 * A compound component for managing the MLP team's "Business Hours" message specification.
 */
export class ProfileHours extends React.Component {
  static defaultProps = {
    countryCode: 'us',
    disabled: false,
    locale: 'en-us',
    errors: [],
  };

  onChange = index => shift => {
    const start = this.props.shifts.slice(0, index);
    const end = this.props.shifts.slice(index + 1);
    this.props.onChange(start.concat([shift]).concat(end));
  };

  onRemove = index => () => {
    const start = this.props.shifts.slice(0, index);
    const end = this.props.shifts.slice(index + 1);
    this.props.onChange(start.concat(end));
  };

  addShift = e => {
    e.preventDefault();
    this.props.onChange(
      this.props.shifts.concat([
        {
          standardShiftName: { id: '' },
          shiftStarts: '',
          shiftEnds: '',
          days: [],
        },
      ]),
    );
  };

  render() {
    const { disabled, errors, labels, locale } = this.props;
    return (
      <div className={classnames('gca-profile-hours', { disabled })} >
        {/* eslint-disable react/no-array-index-key */}
        {/*
          because our list is never sorted, we can safely use
          index as key despite dynmaic create/delete
        */}
        {this.props.shifts.map((shift, index) => (
          <ProfileHour
            countryCode={this.props.countryCode}
            disabled={disabled}
            disableRemove={this.props.shifts.length <= 1}
            errors={errors[index] || {}}
            key={index}
            labels={labels}
            locale={locale.toLowerCase()}
            onChange={this.onChange(index)}
            onRemove={this.onRemove(index)}
            shift={shift}
            standardShifts={this.props.standardShifts}
            forceDirty={this.props.forceDirty}
          />
        ))}
        <Button
          className="remove-shift"
          disabled={!this.props.valid || disabled}
          onClick={this.addShift}
          theme="link"
          type="button"
        >
          ï¼‹ {labels.addShift}
        </Button>
      </div>
    );
  }
}

ProfileHours.propTypes = {
  /** countryCode indicating location of restaurant. Shows lastSeating option if 'JP' */
  countryCode: PropTypes.string.isRequired,
  /** an array of objects containing keys which hold localized error messages */
  errors: PropTypes.arrayOf(ShiftErrorPropTypes).isRequired,
  /** all other pre-localized labels (start, end, to, add, remove) */
  labels: LabelPropTypes,
  /**
   * Locale used when fetching shift names from API
   * Browser's lang-locale is preferred, although a country code will also work
   * */
  locale: PropTypes.string.isRequired,
  /** top-level change handler which is called with the entire list of shifts when any value changes */
  onChange: PropTypes.func.isRequired,
  /**
   * the primary data of the component, an array of shift objects
   * (must match schemaVersion 1 of business hours message spec)
   * */
  shifts: PropTypes.arrayOf(ShiftPropTypes).isRequired,
  /** the list of standard shifts (id and localized label), should be fetched from RAS api */
  standardShifts: StandardShiftPropTypes,
  /** overall valid state of component based on message spec rules */
  valid: PropTypes.bool.isRequired,
  /** controllable prop for overriding internal pristine state  */
  forceDirty: PropTypes.bool,
  /** Is it disabled? */
  disabled: PropTypes.bool,
};

export default ProfileHours;
