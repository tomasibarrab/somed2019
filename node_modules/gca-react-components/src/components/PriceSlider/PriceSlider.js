import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { Range } from 'rc-slider';
import './PriceSlider.scss';

import { getConfig } from './localeConfigs';

// library props, so no need to write our own prop types
/* eslint-disable react/prop-types */
const handleLabel = (config, currencyCode, locale) => props => {
  const { vertical, offset, value } = props;
  const positionStyle = vertical ? { bottom: `${offset}%` } : { left: `${offset}%` };
  const formatCurrency = amount =>
    new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currencyCode,
      currencyDisplay: 'symbol',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);

  const getLabelText = (valueToFormat, min, max) => {
    if (valueToFormat === min) {
      return `< ${formatCurrency(min + config.step)}`;
    }
    if (valueToFormat === max) {
      return `> ${formatCurrency(max - config.step)}`;
    }
    return `${formatCurrency(valueToFormat)}`;
  };

  return (
    <div key={props.index} className="gca-range-slider-handle" style={positionStyle}>
      <p className="handle-label">{getLabelText(value, config.min, config.max)}</p>
    </div>
  );
};
/* eslint-enable react/prop-types */

export class PriceSlider extends React.Component {
  static propTypes = {
    config: PropTypes.shape({
      min: PropTypes.number.isRequired,
      max: PropTypes.number.isRequired,
      step: PropTypes.number.isRequired,
    }),
    disabled: PropTypes.bool,
    locale: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    valid: PropTypes.bool,
    value: PropTypes.shape({
      minValue: PropTypes.number,
      maxValue: PropTypes.number,
      currencyCode: PropTypes.string,
    }),
    defaultValue: PropTypes.shape({
      minValue: PropTypes.number,
      maxValue: PropTypes.number,
      currencyCode: PropTypes.string,
    }),
  };

  static defaultProps = {
    disabled: false,
    valid: true,
  };

  constructor(props) {
    super(props);

    this.config = getConfig(this.props.value.currencyCode);
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.value.currencyCode !== nextProps.value.currencyCode) {
      this.config = getConfig(nextProps.value.currencyCode);
    }
  }

  getChangeHandler = currencyCode => ([minValue, maxValue]) =>
    this.props.onChange({ minValue, maxValue, currencyCode });

  render() {
    const { value, defaultValue, valid, locale, disabled } = this.props;
    const config = this.props.config || this.config;

    const resolvedValues = Object.assign({}, defaultValue, value);
    const { minValue, maxValue, currencyCode } = resolvedValues;

    return (
      <Range
        className={classnames('gca-price-slider', { invalid: !valid, disabled })}
        min={config.min}
        max={config.max}
        disabled={disabled}
        step={config.step}
        value={[minValue, maxValue]}
        onChange={this.getChangeHandler(currencyCode)}
        allowCross
        pushable={config.step}
        handle={handleLabel(config, currencyCode, locale)}
      />
    );
  }
}

export default PriceSlider;
