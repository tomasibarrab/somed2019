import { mount } from 'enzyme';
import React from 'react';

import PriceSlider from './PriceSlider';

describe('PriceSlider', () => {
  const props = {
    value: {
      minValue: 19,
      maxValue: 81,
      currencyCode: 'USD',
    },
    locale: 'en-us',
    onChange: jest.fn(),
  };

  it('should render a slider with the correct values', () => {
    expect(mount(<PriceSlider {...props} />)).toMatchSnapshot();
  });

  it('should render a disabled slider', () => {
    expect(mount(<PriceSlider {...props} disabled />)).toMatchSnapshot();
  });

  it('should render a slider with the correct USD values', () => {
    const localProps = Object.assign({}, props, {
      locale: 'en-US',
      value: {
        minValue: 30,
        maxValue: 50,
        currencyCode: 'USD',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the correct GBP values', () => {
    const localProps = Object.assign({}, props, {
      locale: 'en-GB',
      value: {
        minValue: 25,
        maxValue: 40,
        currencyCode: 'GBP',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the correct EUR values', () => {
    const localProps = Object.assign({}, props, {
      locale: 'de-DE',
      value: {
        minValue: 25,
        maxValue: 75,
        currencyCode: 'EUR',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the correct CAD values', () => {
    const localProps = Object.assign({}, props, {
      locale: 'en-CA',
      value: {
        minValue: 25,
        maxValue: 75,
        currencyCode: 'CAD',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the correct JPY values', () => {
    const localProps = Object.assign({}, props, {
      locale: 'ja-JP',
      value: {
        minValue: 4500,
        maxValue: 15000,
        currencyCode: 'JPY',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the correct CAD values viewed in a DE locale', () => {
    const localProps = Object.assign({}, props, {
      locale: 'de-DE',
      value: {
        minValue: 25,
        maxValue: 75,
        currencyCode: 'CAD',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should render a slider with the values at their min and max', () => {
    const localProps = Object.assign({}, props, {
      locale: 'ja-JP',
      value: {
        minValue: 3400,
        maxValue: 16100,
        currencyCode: 'JPY',
      },
    });
    expect(mount(<PriceSlider {...localProps} />)).toMatchSnapshot();
  });

  it('should allow the user to override the default configs', () => {
    expect(
      mount(
        <PriceSlider
          {...props}
          config={{
            min: 20,
            max: 1000,
            step: 20,
          }}
        />,
      ),
    ).toMatchSnapshot();
  });
});
