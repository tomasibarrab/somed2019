/* eslint-disable max-len */

import { shallow } from 'enzyme';
import React from 'react';

import { TextAreaField } from './TextAreaField';

const longValue =
  'While modernist critical theory (as described above) concerns itself with "forms of authority and injustice that accompanied the evolution of industrial and corporate capitalism as a political-economic system," postmodern critical theory politicizes social problems "by situating them in historical and cultural contexts, to implicate themselves in the process of collecting and analyzing data, and to relativize their findings". Meaning itself is seen as unstable due to the rapid transformation in social structures. As a result, the focus of research is centered on local manifestations, rather than broad generalizations.';

const baseProps = {
  className: 'my-extra-class',
  max: 100,
  min: 100,
  name: 'criticalTheoryDescription',
  placeholder: 'Tell us a little about the difference between modern and postmodern critical theory...',
  rows: 10,
};

describe('<TextAreaField />', () => {
  it('Should pass baseProps on to <Field>', () => {
    expect(shallow(<TextAreaField {...baseProps} />)).toMatchSnapshot();
  });

  it('Should bind validator functions to min and max', () => {
    const wrapper = shallow(<TextAreaField {...baseProps} />);
    const [validateMin, validateMax] = wrapper.props().validate;

    expect(validateMin('')).toEqual('Must be at least 100');
    expect(validateMin(longValue)).toEqual(undefined);

    expect(validateMax('')).toEqual(undefined);
    expect(validateMax(longValue)).toEqual('Must be less than 100');
  });

  it('Should concat additional validator functions', () => {
    const wrapper = shallow(<TextAreaField {...baseProps} validate={jest.fn()} />);
    const validate = wrapper.props().validate;

    expect(validate.length).toEqual(3);
  });

  it('Should concat additional validator functions', () => {
    const wrapper = shallow(<TextAreaField {...baseProps} validate={[jest.fn(), jest.fn()]} />);
    const validate = wrapper.props().validate;

    expect(validate.length).toEqual(4);
  });
});
