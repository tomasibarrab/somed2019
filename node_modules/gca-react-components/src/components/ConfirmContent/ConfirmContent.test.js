import { shallow } from 'enzyme';
import React from 'react';
import { ConfirmContent } from './ConfirmContent';

const CompA = onClick => <button onClick={onClick}>A</button>;
const CompB = onClick => <button onClick={onClick}>B</button>;

describe('<ConfirmContent />', () => {
  let doThing;
  let onStateChange;

  beforeEach(() => {
    doThing = jest.fn();
    onStateChange = jest.fn();
  });

  it('should match initial snapshot', () => {
    expect(
      shallow(
        <ConfirmContent onConfirm={doThing}>
          {({ showConfirm, onInitial, onConfirm }) =>
            showConfirm ? <CompB onClick={onConfirm} /> : <CompA onClick={onInitial} />
          }
        </ConfirmContent>,
      ),
    ).toMatchSnapshot();
  });

  it('should match confirm snapshot', () => {
    expect(
      shallow(
        <ConfirmContent showConfirm onConfirm={doThing}>
          {({ showConfirm, onInitial, onConfirm }) =>
            showConfirm ? <CompB onClick={onConfirm} /> : <CompA onClick={onInitial} />
          }
        </ConfirmContent>,
      ),
    ).toMatchSnapshot();
  });

  it('initial content should not be bound the onClick function', () => {
    const wrapper = shallow(
      <ConfirmContent onConfirm={doThing}>
        {({ showConfirm, onInitial, onConfirm }) =>
          showConfirm ? <CompB onClick={onConfirm} /> : <CompA onClick={onInitial} />
        }
      </ConfirmContent>,
    );

    wrapper.simulate('click');

    expect(doThing).not.toHaveBeenCalled();
  });

  it('Confirm content should be bound to onClick function', () => {
    const wrapper = shallow(
      <ConfirmContent showConfirm onConfirm={doThing} onStateChange={onStateChange}>
        {({ showConfirm, onInitial, onConfirm }) =>
          showConfirm ? <CompB onClick={onConfirm} /> : <CompA onClick={onInitial} />
        }
      </ConfirmContent>,
    );

    wrapper.simulate('click');

    expect(doThing).toHaveBeenCalled();
  });
});
