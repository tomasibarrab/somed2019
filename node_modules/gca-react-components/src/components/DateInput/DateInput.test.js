import { shallow } from 'enzyme';
import React from 'react';

import { DateInput, toISO, fromISO, processKeyStroke } from './DateInput';

const onChange = jest.fn();

describe('<DateInput />', () => {
  describe('toISO', () => {
    it('well-formed dates', () => expect(toISO('07/02/17')).toEqual('2017-07-02'));
    it('missing year', () => expect(toISO('07/02')).toEqual('20-07-02'));
    it('trailing slash after day', () => expect(toISO('07/02/')).toEqual('20-07-02'));
    it('missing day', () => expect(toISO('07')).toEqual('20-07-'));
    it('trailing slash after month', () => expect(toISO('07/')).toEqual('20-07-'));
  });

  describe('fromISO', () => {
    it('well-formed dates', () => expect(fromISO('2017-07-02')).toEqual('07/02/17'));
    it('missing year', () => expect(fromISO('-07-02')).toEqual('07/02/'));
    it('missing month', () => expect(fromISO('2017--02')).toEqual(''));
    it('missing day', () => expect(fromISO('2017-07-')).toEqual('07/'));
    it('missing year and month', () => expect(fromISO('--02')).toEqual(''));
    it('missing year and day', () => expect(fromISO('-07-')).toEqual('07/'));
    it('missing month and day', () => expect(fromISO('2017--')).toEqual(''));
    it('missing year, month and day', () => expect(fromISO('--')).toEqual(''));
    it('should ignore time values', () => expect(fromISO('2017-07-02T00:43:38+00:00')).toEqual('07/02/17'));
  });

  describe('processKeyStroke', () => {
    it('backspace', () => expect(processKeyStroke('07/02/17', 8)).toEqual('07/02/1'));
    it('delete', () => expect(processKeyStroke('07/02/17', 46)).toEqual('07/02/1'));
    it('backspace at the second slash', () => expect(processKeyStroke('07/02/', 8)).toEqual('07/0'));
    it('backspace at the first slash', () => expect(processKeyStroke('07/', 8)).toEqual('0'));
    it('number key when string is maxed', () => expect(processKeyStroke('07/02/17', 49)).toEqual('07/02/17'));
    it('Slash key with a single digit day', () => expect(processKeyStroke('07/2', 191)).toEqual('07/02/'));
    it('Slash key with a single digit month', () => expect(processKeyStroke('7', 191)).toEqual('07/'));
    it('Normal number entry', () => expect(processKeyStroke('', 49)).toEqual('1'));
    it('Normal number entry', () => expect(processKeyStroke('1', 49)).toEqual('11/'));
    it('Normal number entry', () => expect(processKeyStroke('11/', 49)).toEqual('11/1'));
    it('Normal number entry', () => expect(processKeyStroke('11/1', 49)).toEqual('11/11/'));
  });

  describe('component', () => {
    it('default snapshot', () => {
      const wrapper = shallow(<DateInput value="2017-01-01" valid invalidMessage="Invalid date" onChange={onChange} />);

      expect(wrapper).toMatchSnapshot();
    });

    it('invalid snapshot', () => {
      const wrapper = shallow(
        <DateInput value="201-01-01" valid={false} invalidMessage="Invalid date" onChange={onChange} />,
      );

      expect(wrapper).toMatchSnapshot();
    });

    it('focus should invoke the onFocus if passed', () => {
      const onFocus = jest.fn();
      const wrapper = shallow(
        <DateInput
          onFocus={onFocus}
          value="201-01-01"
          valid={false}
          invalidMessage="Invalid date"
          onChange={onChange}
        />,
      );

      wrapper.find('input').simulate('focus');

      expect(onFocus).toHaveBeenCalled();
    });

    it('Blur should invoke the onBlur if passed', () => {
      const onBlur = jest.fn();
      const wrapper = shallow(
        <DateInput onBlur={onBlur} value="201-01-01" valid={false} invalidMessage="Invalid date" onChange={onChange} />,
      );

      wrapper.find('input').simulate('blur');

      expect(onBlur).toHaveBeenCalled();
    });

    it('Component with empty (unset) value', () => {
      const wrapper = shallow(<DateInput value="" invalidMessage="Invalid date" />);
      expect(wrapper).toMatchSnapshot();
    });
  });
});
