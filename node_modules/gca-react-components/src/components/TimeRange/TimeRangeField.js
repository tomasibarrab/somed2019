import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { FormattedMessage } from 'react-intl';
import { Field } from 'redux-form';
import { TimeSelectAdaptor } from '../TimeSelect/TimeSelectAdaptor';
import './TimeRangeField.scss';

export class TimeRangeField extends React.PureComponent {
  constructor(props) {
    super(props);

    this.validateTimes = this.validateTimes.bind(this);
  }

  validateTimes(value, allValues) {
    const startTime = allValues[this.props.startName];
    const endTime = allValues[this.props.endName];

    return startTime < endTime ? undefined : this.props.labels.invalid;
  }

  render() {
    const {
      startRange,
      endRange,
      increment,
      labels,
      validator,
      outputWithSeconds,
      locale,
      startName,
      endName,
      className,
      ...rest
    } = this.props;

    const { _reduxForm: { syncErrors: errors } } = this.context;
    const invalid = !!(errors[startName] || errors[endName]);

    const customValidators = Array.isArray(validator) ? validator : [validator];
    const validate = [this.validateTimes].concat(customValidators);

    return (
      <div className={classnames('gca-time-range', className)}>
        <div className="time-range-select-container">
          <Field
            name={startName}
            component={TimeSelectAdaptor}
            {...rest}
            placeholder={<FormattedMessage id={labels.start} />}
            start={startRange}
            end={endRange}
            increment={increment}
            outputWithSeconds={outputWithSeconds}
            locale={locale}
            validate={validate}
          />
          <p className="time-range-divider">{labels.to}</p>
          <Field
            component={TimeSelectAdaptor}
            name={endName}
            {...rest}
            placeholder={<FormattedMessage id={labels.end} />}
            start={startRange}
            end={endRange}
            increment={increment}
            outputWithSeconds={outputWithSeconds}
            locale={locale}
            validate={validate}
          />
        </div>
        {invalid ? <p className="invalid-message">{labels.invalid}</p> : null}
      </div>
    );
  }
}

/**
 * Using context here because we have a "dumb" component sandwiched between
 * two "smart" (connected) components, and this component needs access to
 * syncErrors in the redux form store. Favoring this over extra props, or
 * complicated implementation.
 */

TimeRangeField.contextTypes = {
  _reduxForm: PropTypes.shape({
    syncErrors: PropTypes.obj,
  }),
};

TimeRangeField.propTypes = {
  className: PropTypes.string,
  startName: PropTypes.string.isRequired,
  endName: PropTypes.string.isRequired,
  startRange: PropTypes.string.isRequired,
  endRange: PropTypes.string.isRequired,
  increment: PropTypes.number,
  outputWithSeconds: PropTypes.bool,
  locale: PropTypes.string,
  labels: PropTypes.shape({
    start: PropTypes.string,
    end: PropTypes.string,
    to: PropTypes.string,
    invalid: PropTypes.string,
  }),
  validator: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),
};

TimeRangeField.defaultProps = {
  outputWithSeconds: false,
  locale: 'en-us',
  labels: {
    start: 'Start',
    end: 'End',
    to: 'to',
    invalid: 'Please select a start time that is before your end time.',
  },
  validator: [],
};

export default TimeRangeField;
