import { ActionsObservable } from 'redux-observable';

export const enum CurrentContextAsyncStatus {
  Request = 'gca/currentContext/FETCH_CURRENT_CONTEXT_REQUEST',
  Success = 'gca/currentContext/FETCH_CURRENT_CONTEXT_SUCCESS',
  Failure = 'gca/currentContext/FETCH_CURRENT_CONTEXT_FAILURE',
}

export const FETCH_CURRENT_CONTEXT_REQUEST: string;
export const FETCH_CURRENT_CONTEXT_SUCCESS: string;
export const FETCH_CURRENT_CONTEXT_FAILURE: string;

export const FETCH_CONTEXT_USER_REQUEST: string;
export const FETCH_CONTEXT_USER_SUCCESS: string;
export const FETCH_CONTEXT_USER_FAILURE: string;

export const FETCH_CONTEXT_RID_REQUEST: string;
export const FETCH_CONTEXT_RID_SUCCESS: string;
export const FETCH_CONTEXT_RID_FAILURE: string;

export const FETCH_CONTEXT_GROUP_REQUEST: string;
export const FETCH_CONTEXT_GROUP_SUCCESS: string;
export const FETCH_CONTEXT_GROUP_FAILURE: string;

export interface User {
  userName: string;
  firstName: string;
  lastName: string;
  role: string;
  rid: number;
  shardedRID: number;
  id: string;
}

export interface Address {
  street1?: string;
  street2?: string;
  city?: string;
  province?: string;
  provinceCode?: string;
  country?: string;
  countryCode?: string;
  postalCode?: number;
}

export interface WizardStep {
  stepName: string;
  topLevelErrorCodes: number[];
  errorCodes: {};
  stepHasErrors: boolean
}

export interface WizardSteps {
  floorPlan: WizardStep;
  combinations: WizardStep;
  shift: WizardStep;
  calendar: WizardStep;
  publish: WizardStep;
}

export interface SetupWizard {
  wizardSteps: WizardSteps
}

export interface Restaurant {
  largePartyEnabled: boolean;
  shardedRID: number;
  rid: number;
  name: string;
  locale: string;
  timeZone: string;
  productType: string;
  restaurantStatus: null;
  bookingInterval: number;
  restaurantSetupId: string;
  lastPublishDate: string;
  lastPublishStatus: string;
  isTestRestaurant: boolean;
  passcodeEnabled: boolean;
  lockoutEnabled: boolean;
  billingPhoneNumber: string;
  passcodeSettings: null;
  isUncreated: boolean;
  hasUnpublishedChanges: boolean;
  firstModifiedDateSinceLastPublish: string;
  timeElapsedSinceLastPublishMinutes: number;
  hasRestaurantGoneLive: boolean;
  isAnalyticsEnabled: boolean;
  isOffline: boolean;
  isGuestCenterRestaurant: boolean;
  isConnectRestaurant: boolean;
  isRestaurantApi: boolean;
  isEssentials: boolean;
  isClaimedListing: boolean;
  creationDate: string;
  createdBy: string;
  lastUpdatedDate: string;
  lastUpdatedBy: string;
  timestamp: number;
  advancedAvailabilityEnabled: boolean;
  hasDefaultShiftFloorPlanTableNameError: boolean;
  hasOverrideShiftFloorPlanTableNameError: boolean;
  dateTimeAtRestaurant: string;
  startDateForIncludingOverrides: string;
  largePartyMinSize: number;
  id: string;

  address: Address;
  setupWizard: SetupWizard
}

export interface Account {
  userName: string;
  rememberCredentials: boolean;
  rid: number
}

export interface CurrentContext {
  isFetching: boolean;
  fetchFailed: boolean;
  error: null | {};
  requestId: string;
  sessionId: string;
  webAuthToken: string;
  payload: string;
  authenticationState: number;
  restaurantStatus: number;
  lockoutStatus: number;
  productType: string;

  account: Account;
  user: User;
  restaurant: Restaurant;
}

interface Selectors {
  rid: (state: any) => number;
  currentContext: (state: any) => CurrentContext;
  user: (state: any) => User;
  restaurant: (state: any) => Restaurant;
  isFetching: (state: any) => boolean;
  fetchFailed: (state: any) => boolean;
}

export interface FetchCurrentContextRequest { type: CurrentContextAsyncStatus.Request; }
export interface FetchCurrentContextSuccess { type: CurrentContextAsyncStatus.Success; payload: CurrentContext; }
export interface FetchCurrentContextError { type: CurrentContextAsyncStatus.Failure; error: string; }

export type CurrentContextAction = FetchCurrentContextRequest | FetchCurrentContextError | FetchCurrentContextSuccess;

export const selectors: Selectors;

interface Actions {
  fetchCurrentContext: (...params: any[]) => any;
  fetchCurrentContextSucceeded: () => { type: string, payload: any };
}

export const actions: Actions;
export const initialState: CurrentContext;
export function currentContextReducer(state: CurrentContext, action: any): CurrentContext
export function currentContextEpic(action$: ActionsObservable<any>, store: any, deps: any): ActionsObservable<any>;
export function userContextEpic(action$: ActionsObservable<any>) : ActionsObservable<any>;
export function ridContextEpic(action$: ActionsObservable<any>) : ActionsObservable<any>;
export function groupContextEpic(action$: ActionsObservable<any>) : ActionsObservable<any>;

