import React from 'react';
import orderComponents, { resolveLocale } from './orderComponents';

describe('orderComponents', () => {
  const orderMap = {
    'en-US': ['fieldA', 'fieldB'],
    'abc': ['fieldA', 'fieldB'],
    'def': ['fieldB', 'fieldA'],
  };

  const fieldA = <span>fieldA</span>;
  const fieldB = <span>fieldB</span>;

  it('abc locale should have regular order', () => {
    expect(orderComponents(orderMap)({ fieldA, fieldB }, 'abc')).toEqual([fieldA, fieldB]);
  });

  it('def locale should have reverse order', () => {
    expect(orderComponents(orderMap)({ fieldA, fieldB }, 'def')).toEqual([fieldB, fieldA]);
  });

  it('xxx locale should fallback to fallbackLocale', () => {
    expect(orderComponents(orderMap, 'def')({ fieldA, fieldB }, 'xxx')).toEqual([fieldB, fieldA]);
  });

  it('xxx locale should fallback to en-US order if fallback not specified', () => {
    expect(orderComponents(orderMap)({ fieldA, fieldB }, 'xxx')).toEqual([fieldA, fieldB]);
  });
});

describe(('resolveLocale'), () => {
  const orderMap = {
    'en-us': 'n/a',
    'abc': 'n/a',
    'def': 'n/a',
  };

  it('should use locale if it exists in map', () => {
    expect(resolveLocale(orderMap, 'abc', 'en-us')).toEqual('abc');
  });
  it('should use fallbackLocale if it exists in map', () => {
    expect(resolveLocale(orderMap, 'xyz', 'def')).toEqual('def');
  });
  it('should throw if fallbackLocale is not in map', () => {
    const testFunc = () => resolveLocale(orderMap, 'en-us', 'xys');
    expect(testFunc).toThrow();
  });
});
