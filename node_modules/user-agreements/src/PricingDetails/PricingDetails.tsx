import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import AgreementFooter from '../AgreementFooter/AgreementFooter';
import { State } from '../store/types';
import { actions, selectors } from '../store/userAgreements/userAgreements';
import {
  AgreementState,
  ContactInfo,
  EntityInfo,
  PricingItemCategories,
  UpdateUserAgreementDTO,
} from '../store/userAgreements/userAgreements.types';
import '../UserAgreements/UserAgreements.scss';
import PricingTable from './PricingTable';

import AsyncStatus from '../AsyncStatus';
import Sidebar from '../Sidebar/Sidebar';

import '../NavBar/NavBar.scss';
import './PricingDetails.scss';

interface DP {
  updateAgreementState: (payload: UpdateUserAgreementDTO) => void;
}

interface SP {
  agreementId: string;
  agreementState: AgreementState;
  createdDate: string;
  customerInfo: ContactInfo;
  pricingByCategory: PricingItemCategories;
  entityInfo: EntityInfo;
  feeNotes: string;
  browserLocale: string;
  updateStatus: AsyncStatus;
  numberOfSteps: number;
}

type Props = SP & DP & InjectedIntlProps;

class PricingDetails extends React.Component<Props, {}> {
  constructor(props: Props) {
    super(props);
    this.handlePublishClick = this.handlePublishClick.bind(this);
  }

  public render() {
    const {
      agreementState,
      customerInfo,
      createdDate,
      entityInfo,
      numberOfSteps,
      pricingByCategory,
      browserLocale,
      updateStatus,
      intl,
    } = this.props;
    const agreementUpdated = agreementState === AgreementState.AgreementUpdated;
    const formattedCreatedDate = createdDate
      ? new Intl.DateTimeFormat(browserLocale).format(new Date(createdDate))
      : '';

    return (
      <>
        <div className="page-content pricing-details" id="pricingDetails" data-qa="uaf-pricing-page">
          <div className="nav-item">
            <FormattedMessage id="agreements.step" values={{ currentStepNumber: 1, numberOfSteps }} />
          </div>
          <h1>
            <FormattedMessage id="pricingDetails.welcome" values={{ name: customerInfo.firstName }} />
          </h1>

          {agreementUpdated && formattedCreatedDate ? (
            <div className="updated-date">
              <FormattedMessage
                id="pricingDetails.updated"
                values={{
                  formattedDate: formattedCreatedDate,
                }}
              />
            </div>
          ) : null}

          <table className="entity-table">
            <thead>
              <tr>
                <th className="column-main label-text">
                  <FormattedMessage id="pricingDetails.entity.restaurantName" />
                </th>
                <th className="column-legal-entity label-text">
                  <FormattedMessage id="pricingDetails.entity.legalEntity" />
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>{entityInfo.restaurantName}</td>
                <td>{entityInfo.legalEntity}</td>
              </tr>
            </tbody>
          </table>
          <hr />

          <PricingTable pricingByCategory={pricingByCategory} browserLocale={browserLocale} />
          <hr />

          {this.props.feeNotes ? (
            <>
              <div className="extra-info-item">
                <div className="label-text">
                  <FormattedMessage id="pricingDetails.feeNotes.title" />
                </div>
                <div>{this.props.feeNotes}</div>
              </div>
              <hr />
            </>
          ) : null}
          <div className="extra-info-item">
            <div className="label-text">
              <FormattedMessage id="pricingDetails.billingCycleNote.title" />
            </div>
            <div>
              <FormattedMessage id="pricingDetails.billingCycleNote.body" />
            </div>
          </div>
        </div>
        <Sidebar />
        <AgreementFooter
          busy={updateStatus === AsyncStatus.Started}
          buttonText={intl.formatMessage({ id: 'pricingDetails.confirmPricing' })}
          onButtonClick={this.handlePublishClick}
        />
      </>
    );
  }

  private handlePublishClick() {
    this.props.updateAgreementState({
      agreementId: this.props.agreementId,
      agreementState: AgreementState.PricingAccepted,
    });
  }
}

const mapStateToProps = (state: State): SP => ({
  agreementId: selectors.getAgreementId(state),
  agreementState: state.userAgreements.userAgreement.agreementState,
  browserLocale: state.language.locale,
  createdDate: state.userAgreements.userAgreement.createdDate,
  customerInfo: state.userAgreements.userAgreement.customerInfo,
  entityInfo: state.userAgreements.userAgreement.entityInfo,
  feeNotes: state.userAgreements.userAgreement.pricingDetails.feeNotes,
  numberOfSteps: selectors.getNumberOfSteps(state),
  pricingByCategory: selectors.getPricingByCategory(state),
  updateStatus: state.userAgreements.updateStatus,
});

const mapDispatch = {
  updateAgreementState: actions.updateAgreementState.started,
};

export default connect<SP, DP, {}>(mapStateToProps, mapDispatch)(injectIntl(PricingDetails));
export { PricingDetails as PurePricingDetails };
