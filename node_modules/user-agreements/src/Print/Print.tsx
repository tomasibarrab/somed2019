import classNames from 'classnames';
import { Button } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { State } from '../store/types';
import { actions } from '../store/userAgreements/userAgreements';
import { selectors } from '../store/userAgreements/userAgreements';
import {
  EntityInfo,
  PricingItemCategories,
} from '../store/userAgreements/userAgreements.types';

import PricingTable from '../PricingDetails/PricingTable';
import '../TermsAndConditions/TermsAndConditions.scss';
import '../UserAgreements/UserAgreements.scss';
import './Print.scss';

interface SP {
  browserLocale: string;
  entityInfo: EntityInfo;
  feeNotes: string;
  isPrintView: boolean;
  pricingByCategory: PricingItemCategories;
  termsAndConditions: string;
}

interface DP {
  showPrintPage: (showPage: boolean) => void;
}

type Props = SP & DP & InjectedIntlProps;

class Print extends React.Component<Props, {}> {
  public onPrint = () => {
    document.title = 'OpenTable Client Intake Form';
    (window as any).print();
    document.title = '';
  };

  public onClose = () => {
    this.props.showPrintPage(false);
  };

  public render() {
    const {
      browserLocale,
      entityInfo,
      feeNotes,
      isPrintView,
      pricingByCategory,
      termsAndConditions,
    } = this.props;

    const rowLayout = classNames({
      'one-button-layout': !isPrintView,
      'page-header': true,
      'two-button-layout': isPrintView,
    });

    return <>
        <div data-qa="uaf-print-page">
          <div className={rowLayout}>
            {isPrintView ? <Button id="close" onClick={this.onClose} theme="hollow">
                <FormattedMessage id="print.close" />
              </Button> : null}
            <Button id="print" className="button-margin" onClick={this.onPrint} theme="hollow">
              <FormattedMessage id="print.agreement" />
            </Button>
          </div>
          <div id="print-content" className="page-content">
            <h1>Your agreement</h1>
            <div id="pricingDetails">
              <table className="entity-table pricing-details">
                <thead>
                  <tr>
                    <th className="column-main label-text">
                      <FormattedMessage id="pricingDetails.entity.restaurantName" />
                    </th>
                    <th className="column-legal-entity label-text">
                      <FormattedMessage id="pricingDetails.entity.legalEntity" />
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>{entityInfo.restaurantName}</td>
                    <td>{entityInfo.legalEntity}</td>
                  </tr>
                </tbody>
              </table>
              <hr />
              <PricingTable pricingByCategory={pricingByCategory} browserLocale={browserLocale} />
              <hr />
              {feeNotes ? <>
                  <div className="extra-info-item">
                    <div className="label-text">
                      <FormattedMessage id="pricingDetails.feeNotes.title" />
                    </div>
                    <div>{feeNotes}</div>
                  </div>
                  <hr />
                </> : null}
              <hr />
              <div className="extra-info-item">
                <div className="label-text">
                  <FormattedMessage id="pricingDetails.billingCycleNote.title" />
                </div>
                <div>
                  <FormattedMessage id="pricingDetails.billingCycleNote.body" />
                </div>
              </div>
            </div>
            <div className="terms-content">
              <div className="terms-text" dangerouslySetInnerHTML={{ __html: termsAndConditions }} />
            </div>
          </div>
        </div>
      </>;
  }
}

const mapState = (state: State): SP => ({
  browserLocale: state.language.locale,
  entityInfo: state.userAgreements.userAgreement.entityInfo,
  feeNotes: state.userAgreements.userAgreement.pricingDetails.feeNotes,
  isPrintView: state.userAgreements.printPage,
  pricingByCategory: selectors.getPricingByCategory(state),
  termsAndConditions: selectors.getTermsAndConditions(state)[0].content,
});

const mapDispatch = {
  showPrintPage: actions.showPrintPage,
};

export default connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl(Print));
export { Print as PurePrint };
