import { Modal, ModalType } from '@buffet/modal';
import { AsyncContent } from 'gca-react-components';
import React, { useEffect, useState } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { uploadFileSizeLimit, validFileTypes, validThumbnailLabel } from '../common/constants';
import { Photo, Thumbnail } from '../common/types';
import PhotoStory from '../PhotoStory/PhotoStory';
import Upload from '../Upload/Upload';
import './PhotoCollection.css';

interface Props {
  handleError: (error: Error) => void;
  rid: number;
}

function handleFetchedPhotos(photos: Array<{ pid: number; thumbnails: Thumbnail[] }>) {
  const selectedPhotos: Photo[] = [];
  photos.forEach(({ pid, thumbnails }: { pid: number; thumbnails: Thumbnail[] }) => {
    if (thumbnails) {
      const uri = thumbnails.find((thumbnail: Thumbnail) => thumbnail.label === validThumbnailLabel)!.uri;
      selectedPhotos.push({ pid, uri });
    }
  });

  return selectedPhotos;
}

function uploadPhoto(rid: number, file: File) {
  const formData = new FormData();
  formData.append('file', file);

  return fetch(`/gateway/proxies/photoUploadService/v1/photo/restaurant/${rid}`, {
    body: formData,
    method: 'POST',
  })
    .then(response => response.json())
    .then(({ pid }) => {
      if (!pid) {
        throw new Error('Response does not contain a pid');
      }
      return pid;
    })
    .catch((err: Error) => {
      throw new Error('Error from uploadPhoto: ' + err.message);
    });
}

function handlePhoto({ pid, thumbnails }: { pid: number; thumbnails: Thumbnail[] }) {
  if (thumbnails) {
    const uri = thumbnails.find((thumbnail: Thumbnail) => thumbnail.label === validThumbnailLabel)!.uri;
    return { pid, uri };
  }
  throw new Error('Photo does not have any thumbnails');
}

function getPhoto({ pid }: Photo) {
  return fetch(`/gateway/proxies/photoMetadataService/photos/${pid}`)
    .then(response => response.json())
    .then(handlePhoto)
    .catch((err: Error) => {
      throw new Error('Error from getPhoto: ' + err.message);
    });
}

function isFileValid(file: File) {
  return validFileTypes.includes(file.type) && file.size <= uploadFileSizeLimit;
}

function PhotoCollection({ handleError, intl, rid }: Props & InjectedIntlProps) {
  const [deletePid, setDeletePid] = useState<null | number>(null);
  const [loading, setLoading] = useState(true);
  const [photos, setPhotos] = useState<Photo[]>([]);

  const handleUpdatePhotos = (receivedPhoto: Photo) => {
    setPhotos(originalPhotos => [...originalPhotos, receivedPhoto]);
  };

  const onDeletePhoto = (pid: number) => {
    fetch(`/gateway/proxies/photoAdmin/photos/${pid}`, {
      method: 'DELETE',
    })
      .then(response => response.json())
      .then(() => {
        const updatedPhotos = photos.filter(photo => photo.pid !== pid);
        setPhotos(updatedPhotos);
        setDeletePid(null);
      })
      .catch((err: Error) => {
        handleError(err);
        setDeletePid(null);
      });
  };

  const handleUploadPhoto = (e: any) => {
    const files = e.target.files;
    const filteredFiles = [...files].filter((file: File) => isFileValid(file));

    filteredFiles.forEach(file => {
      uploadPhoto(rid, file)
        .then(getPhoto)
        .then(handleUpdatePhotos)
        .catch((err: Error) => {
          // throw error;
          handleError(err);
        });
    });
  };

  useEffect(() => {
    // tslint:disable-next-line:max-line-length
    const url = `/gateway/proxies/photoMetadataService/photos/restaurants/${rid}?pageNumber=1&foodspottingOptOut=true&instagramOptOut=true`;
    fetch(url, { headers: { 'Content-Type': 'application/json' } })
      .then(response => response.json())
      .then(({ photos: data }) => {
        const selectedPhotos: Photo[] = handleFetchedPhotos(data);
        setLoading(false);
        setPhotos(selectedPhotos);
      })
      .catch((err: Error) => {
        setLoading(false);
        handleError(err);
      });
  }, []);

  return (
    <>
      {loading ? (
        <AsyncContent isLoading={loading}>
          <div />
        </AsyncContent>
      ) : (
        <>
          <Upload photos={photos} handleUploadPhoto={handleUploadPhoto} />
          {photos.length > 0 && (
            <>
              <h1 className="num-photos">
                <FormattedMessage id="galleryPhotos.numPhotos" values={{ numPhotos: photos.length }} />
              </h1>
              <ul className="Grid">
                {photos.map((photo: Photo) => (
                  <PhotoStory photo={photo} setDeletePid={setDeletePid} />
                ))}
                <Modal
                  acknowledgeLabel={intl.formatMessage({ id: 'galleryPhotos.grid.deleteConfirmation' })}
                  dismissLabel={intl.formatMessage({ id: 'galleryPhotos.grid.deleteCancellation' })}
                  // tslint:disable-next-line:max-line-length
                  onAcknowledge={() => onDeletePhoto(deletePid || 0)} // using 0 as default pid due to Typescript
                  onCloseRequest={() => setDeletePid(null)}
                  open={deletePid !== null}
                  title={intl.formatMessage({ id: 'galleryPhotos.grid.deleteModal' })}
                  type={ModalType.prompt}
                />
              </ul>
            </>
          )}
        </>
      )}
    </>
  );
}

export default injectIntl(PhotoCollection);
