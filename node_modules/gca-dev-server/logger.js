/* eslint-disable no-console */

const chalk = require('chalk');
const ip = require('ip');
const path = require('path');

const divider = require('./scripts/helpers/divider');

/**
 * Logger middleware, you can customize it to make messages more personal
 */
const logger = {

  // Called whenever there's an error on the server we want to print
  error: (err) => {
    console.error(chalk.red(err));
  },

  // Called when express.js app starts on given port w/o errors
  appStarted: (port, tunnelStarted, argPath, config ) => {
    const appConfig = require(path.join(process.cwd(), config));
    console.log(`gc-dev-server started ${process.env.DEV_SERVER || ''} ${chalk.bold.green('✓')}`);

    // If the tunnel started, log that and the URL it's available at
    if (tunnelStarted) {
      console.log(`Tunnel initialized ${chalk.green('✓')}`);
    }

    console.log(`
Using configuration: ${chalk.bold(config)}\n
${chalk.bold('Access URLs:')}${divider}
Localhost: ${chalk.magenta(`http://localhost:${port}${appConfig.initialPath}`)}
      LAN: ${chalk.magenta(`http://${ip.address()}:${port}${appConfig.initialPath}`) +
(tunnelStarted ? `\n    Proxy: ${chalk.magenta(tunnelStarted)}` : '')}${divider}
${chalk.blue(`Press ${chalk.italic('CTRL-C')} to stop`)}
    `);
  },

  logRequest: ( method, argPath ) => {
    const tm = new Date();
    console.log( `${tm.getHours()}:${tm.getMinutes()}.${tm.getSeconds()}`, chalk.magenta(method), chalk.blue(argPath));
  }
};

module.exports = logger;
