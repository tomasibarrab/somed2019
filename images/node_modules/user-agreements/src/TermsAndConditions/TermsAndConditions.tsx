import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import AgreementFooter from '../AgreementFooter/AgreementFooter';
import NavBar from '../NavBar/NavBar';
import Sidebar from '../Sidebar/Sidebar';
import { State } from '../store/types';
import { actions, selectors } from '../store/userAgreements/userAgreements';
import { TermsAndConditionsItem } from '../store/userAgreements/userAgreements.types';
import TermsCallToAction, { ACCEPT_CTA_STATE, SCROLL_CTA_STATE } from './TermsCallToAction';

import AsyncStatus from '../AsyncStatus';

import '../NavBar/NavBar.scss';
import '../UserAgreements/UserAgreements.scss';
import './TermsAndConditions.scss';

interface SP {
  acceptStatus: AsyncStatus;
  isPageScrolledToBottom: boolean;
  numberOfSteps: number;
  termsAndConditions: TermsAndConditionsItem[];
}

interface DP {
  acceptTerms: () => void;
}

type Props = SP & DP & InjectedIntlProps;

class TermsAndConditions extends React.Component<Props, {}> {

  public render() {
    const { acceptStatus, intl, isPageScrolledToBottom, numberOfSteps, termsAndConditions } = this.props;

    return (
      <>
        <div className="page-content" data-qa="uaf-terms-page">
          <div className="nav-item">
          <FormattedMessage id="agreements.step" values={{ currentStepNumber: 2, numberOfSteps }} />
          </div>
          <h1>
            <FormattedMessage id="termsAndConditions.title" />
          </h1>
          <div className="terms-content">
            <h2><FormattedMessage id="termsAndConditions.productsAndServices" /></h2>
            <div
              className="terms-text"
              dangerouslySetInnerHTML={{ __html: termsAndConditions[0].content }}
            />
          </div>
        </div>
        <Sidebar>
          <TermsCallToAction ctaState={isPageScrolledToBottom ? ACCEPT_CTA_STATE : SCROLL_CTA_STATE}/>
        </Sidebar>

        <AgreementFooter
          busy={acceptStatus === AsyncStatus.Started}
          buttonText={intl.formatMessage({ id: 'termsAndConditions.acceptAndSign' })}
          disabled={!isPageScrolledToBottom}
          onButtonClick={this.handlePublishClick}
        />
      </>
    )
  }

  private handlePublishClick = () => {
    this.props.acceptTerms();
  }
}

const mapState = (state: State): SP => ({
  acceptStatus: state.userAgreements.acceptStatus,
  isPageScrolledToBottom: state.userAgreements.isPageScrolledToBottom,
  numberOfSteps: selectors.getNumberOfSteps(state),
  termsAndConditions: selectors.getTermsAndConditions(state),
});

const mapDispatch = {
  acceptTerms: actions.acceptTerms.started,
};

export default connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl(TermsAndConditions));
export { TermsAndConditions as PureTermsAndConditions };
