import AsyncStatus from '../../AsyncStatus';
import {
  actions,
  initialState,
  userAgreementsReducer,
} from './userAgreements';
import { initUserAgreements } from './userAgreements.fixture';
import { AgreementState, UserAgreementsDTO } from './userAgreements.types';

// tslint:disable-next-line:no-var-requires
const mockData: UserAgreementsDTO = require('../../../fixtures/UserAgreementsMock');
const initData: UserAgreementsDTO = initUserAgreements();

describe('User Agreements reducer', () => {
  it('should return initialState', () => {
    const actual = userAgreementsReducer(undefined, {type: actions.fetchUserAgreements});
    expect(actual).toEqual(initialState);
    expect(actual.agreementId).toEqual('576223ac-5af8-4470-9a08-e03beda84f2c');
  });

  it('fetchUserAgreements.started action should set fetchStatus to "started"', () => {
    const actual = userAgreementsReducer(initialState, actions.fetchUserAgreements.started({ agreementId: '123' }));
    expect(actual.fetchStatus.isStarted()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  })

  it('fetchUserAgreements.failed action should set fetchStatus to "failed"', () => {
    const actual = userAgreementsReducer(initialState, actions.fetchUserAgreements.failed({
        error: '404',
        params: { agreementId: '123' },
      }));
    expect(actual.fetchStatus.isFailed()).toBe(true);
    expect(actual.fetchError).toEqual('404');
    expect(actual.userAgreement).toEqual(initData);
  });

  it('fetchUserAgreements.done should set fetchStatus to "done"', () => {
    const actual = userAgreementsReducer(
      initialState,
      actions.fetchUserAgreements.done({ params: { agreementId: '123' }, result: mockData }));
    expect(actual.fetchStatus.isDone()).toBe(true);
    expect(actual.userAgreement).toEqual(mockData);
  });

  it('updateAgreements.started action should set updateStatus to "started"', () => {
    const actual = userAgreementsReducer(initialState, actions.updateAgreementState.started({
      agreementId: '123',
      agreementState: AgreementState.PricingAccepted,
    }));
    expect(actual.updateStatus.isStarted()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  })

  it('updateAgreements.failed action should set updateStatus to "failed"', () => {
    const actual = userAgreementsReducer(initialState, actions.updateAgreementState.failed({
        error: '404',
        params: { agreementId: '123', agreementState: AgreementState.PricingAccepted },
      }));
    expect(actual.updateStatus.isFailed()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  });

  it('updateAgreements.done should set updateStatus to "done"', () => {
    const actual = userAgreementsReducer(
      initialState,
      actions.updateAgreementState.done({
        params: { agreementId: '123', agreementState: AgreementState.PricingAccepted },
        result: {
          ...initialState.userAgreement,
          agreementState: AgreementState.PricingAccepted,
        },
      }));
    expect(actual.updateStatus.isDone()).toBe(true);
    expect(actual.userAgreement).toEqual(
      { ...initialState.userAgreement, agreementState: AgreementState.PricingAccepted },
    );
  });

  it('updateAppointmentScheduled.started action should set updateAppointmentScheduledStatus to "started"', () => {
    const actual = userAgreementsReducer(
      initialState,
      actions.updateAppointmentScheduled.started({ agreementId: '123' }));
    expect(actual.updateAppointmentScheduledStatus.isStarted()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  })

  it('updateAppointmentScheduled.failed action should set updateAppointmentScheduledStatus to "failed"', () => {
    const actual = userAgreementsReducer(initialState, actions.updateAppointmentScheduled.failed({
        error: '404',
        params: { agreementId: '123' },
      }));
    expect(actual.updateAppointmentScheduledStatus.isFailed()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  });

  it('updateAppointmentScheduled.done should set updateAppointmentScheduledStatus to "done"', () => {
    const actual = userAgreementsReducer(
      initialState,
      actions.updateAppointmentScheduled.done({
        params: { agreementId: '123' },
        result: {
          ...initialState.userAgreement,
          agreementState: AgreementState.PricingAccepted,
        },
      }));
    expect(actual.updateAppointmentScheduledStatus.isDone()).toBe(true);
  });

  it('acceptTerms.started action should set updateStatus to "started"', () => {
    const actual = userAgreementsReducer(initialState, actions.acceptTerms.started({ }));
    expect(actual.acceptStatus.isStarted()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  })

  it('acceptTerms.failed action should set updateStatus to "failed"', () => {
    const actual = userAgreementsReducer(initialState, actions.acceptTerms.failed({
        error: '404',
        params: {},
      }));
    expect(actual.acceptStatus.isFailed()).toBe(true);
    expect(actual.userAgreement).toEqual(initData);
  });

  it('acceptTerms.done should set updateStatus to "done"', () => {
    const actual = userAgreementsReducer(
      initialState,
      actions.acceptTerms.done({
        params: { },
        result: {
          ...initialState.userAgreement,
          agreementState: AgreementState.TermsAccepted,
        },
      }));
    expect(actual.acceptStatus.isDone()).toBe(true);
    expect(actual.userAgreement).toEqual(
      { ...initialState.userAgreement, agreementState: AgreementState.TermsAccepted },
    );
  });

  it('resetUserAgreements should reset statuses to "initial"', () => {
    const state = {
      ...initialState,
      acceptStatus: AsyncStatus.Failed,
      updateStatus: AsyncStatus.Failed,
    };

    const actual = userAgreementsReducer(
      state,
      actions.resetUserAgreements(),
    );

    expect(actual).toEqual(initialState);
  });

  it('pageScrolledToBottom should set isPageScrolledToBottom to true', () => {
    const state = {
      ...initialState,
      isPageScrolledToBottom: true,
    };

    const actual = userAgreementsReducer(
      state,
      actions.pageScrolledToBottom(),
    );

    expect(actual).toEqual(state);
  });
});
