import React, { useContext } from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { RouteComponentProps } from 'react-router-dom';
import { InputFinalField } from 'shared-react-atomic-ui/finalform-fields';

import { AsyncProgress, useAsync } from 'shared-react-utils/useAsync/useAsync';
import * as validate from 'shared-utils/validate';

import * as api from '../common/api';
import { ConnectionLostCtx } from '../common/App/App';
import { Routes } from '../common/App/routes';
import { SubmitButton } from '../common/App/SubmitButton';
import LoginContainer from '../common/LoginContainer/LoginContainer';
import { MessagePanel } from '../common/MessagePanel/MessagePanel';
import { ChangePasswordRequest, Message, MessageType } from '../common/types';

import { Button } from '@buffet/button';

type Props = InjectedIntlProps & RouteComponentProps<any>;

// Validation regex for password
const validPasswordRegEx = /^(?=.*?[A-Za-z])(?=.*?[0-9]).{6,}$/;

export function ChangePassword({ intl, history, match }: Props) {

  const [message, setMessage] = React.useState<Message>();
  const showConnectionLostModal = useContext(ConnectionLostCtx);
  const [requestStatus, changePassword] = useAsync(api.changePassword);

  const handleChange = React.useCallback((values: ChangePasswordRequest) => {
    setMessage(undefined);
    values.token = match.params.token;
    changePassword(values)
      .then(data => {
        if (data.errorMessages) {
          setMessage({ text: data.errorMessages[0], type: MessageType.error });
        } else {
          history.push(Routes.Login, {
            message: {
              text: intl.formatMessage({ id: 'EnterNewPasswordMessage' }),
              type: MessageType.success,
            },
          });
        }
      })
      .catch(err => {
        showConnectionLostModal();
      });
  }, [changePassword, match.params.token]);

  const validatePassword = React.useCallback(validate.create({
    password: validate.regEx(
      validPasswordRegEx,
      intl.formatMessage({ id: 'NotValidPasswordLengthAndCombination' }),
    ),
    passwordConfirm: validate.matchField('password', intl.formatMessage({ id: 'NotMatchingPasswords' })),
  }), []);

  const isSubmitted = requestStatus.progress === AsyncProgress.Started;

  return (
    <LoginContainer>
      <Form onSubmit={handleChange}
        initialValues={{}}
        validate={validatePassword}
        render={(p) => (
          <form onSubmit={p.handleSubmit}>
            <div className="login-content login-content--spacing-large">
              <MessagePanel message={message} />
              <div className="login-content login-font--title">
                <FormattedMessage id="ChangePassword" />
              </div>
              <div className="login-content">
                <FormattedMessage id="EnterNewPasswordMessage" />
              </div>
            </div>
            <div className="login-content">
              <InputFinalField
                name="password"
                type="password"
                label={intl.formatMessage({ id: 'Password' })}
                data-testid="password-text-input"
              />
              <InputFinalField
                name="passwordConfirm"
                type="password"
                label={intl.formatMessage({ id: 'ConfirmPassword' })}
                data-testid="confirm-password-text-input"
              />
              <SubmitButton
                onSubmit={p.handleSubmit}
                inProgress={isSubmitted}
                label={intl.formatMessage({ id: 'Send' })}
                data-testid="submit-button"
              />
            </div>
            <div className="login-footer">
              <Button
                type="link"
                theme="link"
                to={Routes.Login}>
                <FormattedMessage id="BackToSignIn" />
              </Button>
            </div>
          </form>
        )
        }
      />
    </LoginContainer>
  );
}

export default injectIntl(ChangePassword);
