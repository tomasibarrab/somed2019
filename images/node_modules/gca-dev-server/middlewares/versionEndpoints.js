/**
 * Standard version endpoints
 */
const express = require('express');
const path = require('path');
const url = require('url');

const cdnPath = path.resolve(__dirname, '../../../dist/');
const router = express.Router();

// Standard endpoints ?
router.use(
  '/microapps/:env/:appName/:appVersion/',
  express.static(cdnPath)
);

router.use(
  '/gc-microapps/:env/:appName/:appVersion/',
  express.static(cdnPath)
);

router.use(
  '/gc-microapps/:env/:appName/:appVersion/translations/:locale',
  express.static(cdnPath)
);

router.use(
  '/admin/user-accounts/:rid/microapps/:env/:appName/:appVersion/',
  express.static(cdnPath)
);


// Feature Toggle
const features = [
  'featureGcaRespondToReviews',
  'gcaBusinessHours',
  'gcaProfilePhotos',
  'navigationRedesign',
  'rebrandingFonts',
  'featureGcaPiCreateCustomPromotion',
  'featureGcaPiCreateCustomPromotionImageDatePicker'
];

router.get('/setup/api/featureToggles', (req, res) => {
  const featuresObj = features.reduce((acc, curr) => {
    acc[curr] = true; // eslint-disable-line no-param-reassign
    return acc;
  }, {});
  res.json(featuresObj);
});

router.get('/gateway/proxies/gcBohApi/api/restaurant/:rid/featureToggles', (req, res) => {
  res.json(features);
});


const replyWithCurrentContext = (req, res) => {
  const pathname = url.parse(req.originalUrl).pathname;
  const regexp = /\/(\d+)\/?/
  const match = regexp.exec(pathname || req.headers.referer);
  const id = match != null ? match[1] : 241;

  const user = {
    id: '54efd1d76f8435051cca9877',
    role: 'Internal_User',
    userName: 'john.doe@guestcenter.opentable.com',
    firstName: 'John',
    lastName: 'Doe',
  };

  const restaurant = {
    rid: id,
    name: 'A Test Restaurant',
    isClaimedListing: true,
    address: {
      street1: null,
      street2: null,
      city: 'San Francisco',
      province: 'California',
      provinceCode: 'CA',
      country: 'United States',
      countryCode: 'US',
      postalCode: null,
    },
  };

  res.json({
    productType: 'Guest_Center',
    user,
    restaurant,
  });
};

router.get('/setup/api/currentContext', replyWithCurrentContext);
router.get('/gateway/proxies/gcBohApi/setup/api/restaurant/:rid/currentContext', replyWithCurrentContext);

module.exports = router;
