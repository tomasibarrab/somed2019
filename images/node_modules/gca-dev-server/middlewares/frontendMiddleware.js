/* eslint-disable global-require */
/* eslint-disable import/no-dynamic-require */
/* eslint-disable import/newline-after-import */
const express = require('express');
const path = require('path');
const url = require('url');
const compression = require('compression');
const chalk = require('chalk');
const jsonwebtoken = require('jsonwebtoken');
const divider = require('../scripts/helpers/divider');
const pkg = require(path.resolve(process.cwd(), 'package.json'));
const proxy = require('http-proxy-middleware');
const fs = require('fs');
const mocksEndpoints = require('./mocksEndpoints.js');
const versionEndpoints = require('./versionEndpoints');
const logger = require('../logger');
const ejs = require('ejs');

/**
 * Production middleware
 */
const addProxyMiddlewares = (app, options) => {
  const appConfig = require(path.join(process.cwd(), options.config));
  const preProdHost = 'https://gc-pp-sf.otenv.com';

  const preProdProxies = [
    '/login',
    '/postlogin',
    '/gateway/proxies',
    '/gateway/long-proxies',
    '/setup/api',
    '/gateway/api',
    '/gateway/v1/api',
    '/restaurant-search',
  ];

  const micrositeProxies = {
    '/admin/api' : 9000,
    '/group-settings/api': 9000,
    '/profile/api': 9000,
    ...appConfig.proxyRoutes || {}  // Accept custom routes for app configuration.
  };

  // Setup microsite API proxy to redirect to localhost or custom host when in dev mode.
  Object.keys(micrositeProxies).forEach(path => {
    let target = micrositeProxies[path];

    if (process.env.NODE_ENV === 'production') {
      target = preProdHost;
    } else if (typeof micrositeProxies[path] == 'number') {
      target = `http://localhost:${micrositeProxies[path]}`;
    }

    app.use(path, proxy(path, { target, changeOrigin: true }));
  });

  preProdProxies.forEach(path => {
    app.use(path, proxy(path, { target: preProdHost, changeOrigin: true }));
  });

};

const getScopeFromPath = (pathname, { gcScopePatterns, type }) => {
  const fallbackType = type || 'restaurant';
  const fallbackId = 241;

  // get list of path patterns
  const paths = Object.keys(gcScopePatterns || {});

  for (let i = 0; i < paths.length; i++) {
    // strip {id} from path pattern
    const pathMatchReplace = paths[i].replace('{id}', '');
    // strip this from actual pathname
    const pathStripped = pathname.replace(pathMatchReplace, '');
    // get the number from the start of the remaining path
    const match = /^\/?(\d+)\/?/.exec(pathStripped);

    if (match !== null) {
      return {
        id: match[1] || fallbackId,
        type: gcScopePatterns[paths[i]] || fallbackType,
      };
    }
  }

  // default to simple /{id}/ matching in pathname (or 241)
  const regexp = /\/(\d+)\/?/;
  const match = regexp.exec(pathname);
  return {
    id: match !== null && match[1] || fallbackId,
    type: fallbackType,
  };
};

/**
 * Standard middleware and handlers to resolve static files
 */
const addSharedMiddlewares = (app, options) => {
  const port = options ? options.port || 3000 : 3000;
  const publicPath = (options && options.publicPath) || '';
  const outputPath = path.resolve(process.cwd(), 'dist');
  const appConfig = require(path.join(process.cwd(), options.config));

  const templatePath =
    process.env.NODE_ENV === 'production'
      ? path.join(process.cwd(), 'dist/index.html')
      : path.join(__dirname, '../index.dev.html');

  app.get(/gcaCommon\.dll\.dev\.js/, (req, res) => {
    res.sendFile(require.resolve('gca-common-dll/dist/gcaCommon.dll.dev.js'));
  });

  app.get(/gcaCommon\.dll\.prod\.js/, (req, res) => {
    res.sendFile(require.resolve('gca-common-dll/dist/gcaCommon.dll.prod.js'));
  });

  app.get(`${publicPath}main.css`, express.static(outputPath));

  if (options.static) {
    console.log(chalk.bold(divider), `\nStatic Mode ${chalk.bold.green('âœ“')}`, chalk.bold(divider));
    app.use('/:version', express.static(outputPath));
  } else {
    app.get('*', (req, res) => {
      const pathname = url.parse(req.originalUrl).pathname;
      const locale = (req.query.locale || 'en-us').toLowerCase();

      const gcScope = getScopeFromPath(pathname || req.headers.referer, appConfig);
      const tokenSecret = 'test-secret';
      const csrfToken = jsonwebtoken.sign(gcScope, tokenSecret, { expiresIn: 60 * 20 });

      fs.readFile(templatePath, err => {
        if (err) {
          res.sendStatus(404);
        } else {
          res.render(templatePath, {
            withChrome: appConfig.template.withChrome,
            isResponsive: appConfig.template.isResponsive,
            hydronator: JSON.stringify({
              microapp: {
                lang: locale,
                csrfToken
              },
            }),
            microapp: {
              lang: locale,
              cdnPath: `http://localhost:${port}${publicPath}/`,
              buffetBundleVendorWebJs: 'https://gc-cdn.otstatic.com/buffet/gc-bundle-vendor/1.1.4/web.js',
              buffetBundleChromeWebJs: 'https://gc-cdn.otstatic.com/buffet/gc-bundle-chrome/1.0.53/web.js',
            },
            gcScope: JSON.stringify(gcScope),
            gcaConfig: JSON.stringify({
              i18n: {
                primaryLocale: locale,
              },
              schedulingUrl: 'https://calendly.com/test-group-3/test-group-event',
            }),
            buildVersion: '0',
            Mixpanel: {
              script: '',
            },
            GCAMixpanel: ''
          });
        }
      });
    });
  }
};

/**
 * Dev middleware
 */
const addDevMiddlewares = (app, webpackConfig, options) => {
  const publicPath = (options && options.publicPath) || '/';
  console.log(`Webpack dev-server watching ${publicPath}`);
  const webpack = require('webpack');
  const webpackHotMiddleware = require('webpack-hot-middleware');
  const compiler = webpack(webpackConfig);
  const webpackDevMiddleware = require('webpack-dev-middleware')(compiler, {
    publicPath: webpackConfig.output.publicPath,
    stats: 'errors-only',
    logLevel: 'debug',
  });

  app.use(webpackDevMiddleware);
  app.use(publicPath, webpackHotMiddleware(compiler));
};

/**
 *  Production middlewares
 */
const addProdMiddlewares = (app, options) => {
  const publicPath = (options && options.publicPath) || '/';
  const outputPath = options.outputPath || path.resolve(process.cwd(), 'dist');

  app.use(compression());
  app.use(publicPath, express.static(outputPath));
};

/**
 * Front-end middleware
 */
module.exports = (app, options) => {
  const isProd = process.env.NODE_ENV === 'production';
  const publicPath = (options && options.publicPath) || '/';

  app.set('view engine', 'ejs');
  app.engine('html', ejs.__express);

  app.use((req, res, next) => {
    logger.logRequest(req.method, req.originalUrl);
    next();
  });
  app.use(mocksEndpoints(options));
  app.use(versionEndpoints);
  addProxyMiddlewares(app, options);

  if (isProd) {
    addProdMiddlewares(app, options);
  } else {
    addDevMiddlewares(app, require('gca-webpack-config/webpack.dev.babel')({ publicPath }), options);
  }

  addSharedMiddlewares(app, options);
  return app;
};
