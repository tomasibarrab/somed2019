import {
  addReport,
  deleteReport,
  editNewReportToggle,
  editReportActiveUpdate,
  fetchReports,
  reportsReducer,
  updateReport,
} from './reports';

describe('reportsReducer', () => {
  it('fetch reports', () => {
    const action = { type: fetchReports.started.type };
    const initialState = { isFetching: false, fetchFailed: false };
    const expected = { isFetching: true, fetchFailed: false };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('fetch reports success', () => {
    const action = {
      payload: {
        result: [{ ReportId: 'a1' }],
      },
      type: fetchReports.done.type,
    };
    const initialState = {
      fetchFailed: false,
      isFetching: true,
      reportIds: [],
      reports: {},
    };

    const expected = {
      fetchFailed: false,
      isFetching: false,
      reportIds: ['a1'],
      reports: { a1: action.payload.result[0] },
    };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('fetch reports failure', () => {
    const action = { type: fetchReports.failed.type };
    const initialState = { isFetching: true, fetchFailed: false, reports: {} };
    const expected = { isFetching: false, fetchFailed: true, reports: {} };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should return correct state when add report is in progress', () => {
    const action = { type: addReport.started.type };
    const initialState = { isUpdating: false, updateFailed: false };
    const expected = { isUpdating: true, updateFailed: false };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should return correct state when update report is in progress', () => {
    const action = { type: updateReport.started.type };
    const initialState = { isUpdating: false, updateFailed: false };
    const expected = { isUpdating: true, updateFailed: false };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should return correct state for save (add or update) report success', () => {
    const payload = { result: { ReportId: 'testId', Frequency: 'Daily' } };

    const action = {
      payload,
      type: addReport.done.type,
    };

    const initialState = {
      editActiveId: null,
      isCreating: true,
      isUpdating: true,
      reportIds: ['a1'],
      reports: { a1: { ReportId: 'a1', Frequency: 'Weekly' } },
      updateFailed: false,
    };

    const expected = {
      editActiveId: null,
      isCreating: false,
      isUpdating: false,
      reportIds: ['testId', 'a1'],
      reports: { testId: payload.result, a1: { ReportId: 'a1', Frequency: 'Weekly' } },
      updateFailed: false,
    };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update state when save (add or update) report has failed', () => {
    const action = { type: addReport.failed.type };
    const initialState = { isUpdating: true, updateFailed: false };
    const expected = { isUpdating: false, updateFailed: true };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update state when delete has been requested', () => {
    const action = { type: deleteReport.started.type };
    const initialState = { isDeleting: false, deleteFailed: false };
    const expected = { isDeleting: true, deleteFailed: false };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update state when delete has succeeded', () => {
    const action = {
      payload: {
        params: {
          reportId: 'testId',
        },
      },
      type: deleteReport.done.type,
    };

    const initialState = {
      deleteFailed: false,
      isDeleting: true,
      reportIds: ['a1', 'testId'],
      reports: { a1: { ReportId: 'a1', Frequency: 'Weekly' } },
    };

    const expected = {
      deleteFailed: false,
      isDeleting: false,
      reportIds: ['a1'],
      reports: { a1: { ReportId: 'a1', Frequency: 'Weekly' } },
    };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update state when delete report has failed', () => {
    const action = { type: deleteReport.failed.type };
    const initialState = { isDeleting: true, deleteFailed: false };
    const expected = { isDeleting: false, deleteFailed: true };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update the edit id', () => {
    const initialState = { editActiveId: null };
    const action = { type: editReportActiveUpdate.type, payload: 'test-id-a' };
    const expected = { editActiveId: 'test-id-a' };

    expect(reportsReducer(initialState as any, action)).toEqual(expected);
  });

  it('should update the edit id', () => {
    const initialState = { editActiveId: 'test-id-a', isCreating: false };
    const action = { type: editNewReportToggle.type };

    const expectedOn = { editActiveId: null, isCreating: true };
    const expectedOff = { editActiveId: null, isCreating: false };

    const actualOn = reportsReducer(initialState as any, action);
    const actualOff = reportsReducer(expectedOn as any, action);

    expect(actualOn).toEqual(expectedOn);
    expect(actualOff).toEqual(expectedOff);
  });

  it('should return default state when no action matches', () => {
    const initialState = { testState: true };
    const actual = reportsReducer(initialState as any, { type: 'NO_MATCH' });

    expect(actual).toEqual(initialState);
  });

  it('should return state even when not defined', () => {
    expect(reportsReducer(undefined, {})).toBeDefined();
  });
});
