import moment from 'moment';
import 'rxjs/add/observable/from';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/switchMap';
import { actionCreatorFactory } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';

import { ReviewSummaryDTO } from '../../store/reviewSummary/reviewSummaryDTO';
import { Epic, State, Status } from '../../store/types';

// --------------------------------- //
// Types
// --------------------------------- //

interface DinersRecommendations {
  Count: number;
  Yes: number;
  No: number;
}

/**
 * Keys: ambience, food, noise, overall, service, value
 */
export interface Ratings {
  [key: string]: number;
}

export interface RatingsDistribution {
  [rating: number]: number;
}

interface LoadingState {
  status: Status.Started;
}

interface DoneState {
  status: Status.Done;
  ratings: Ratings;
  ratingsDistribution: RatingsDistribution;
  dinersRecommend: number;
  ratingPeriod: number;
}

interface EmptyState {
  status: Status.Empty;
}

interface FailedState {
  status: Status.Failed;
}

export type ReviewSummaryState = DoneState | LoadingState | FailedState | EmptyState;

// --------------------------------- //
// Actions
// --------------------------------- //

const actionCreator = actionCreatorFactory('REVIEW_SUMMARY');

export const fetchReviewSummary = actionCreator.async<{}, ReviewSummaryDTO>('FETCH');
export const fetchEmpty = actionCreator('FETCH_EMPTY');

// --------------------------------- //
// Reducer
// --------------------------------- //

export const initialState: ReviewSummaryState = {
  status: Status.Started,
};

// Based on https://github.com/opentable/oc-reviews-widgets/blob/master/components/oc-reviews-summary/server.js
function recommendedByPercent({ Count, Yes }: DinersRecommendations) {
  return Count > 0 ? Math.round(Yes * 100 / Count) : 0;
}

function getDaysSince(date: string) {
  const then = moment(date);
  const now = moment.utc();
  return now.diff(then, 'days');
}

export const reviewSummaryReducer = reducerWithInitialState<ReviewSummaryState>(initialState)
  .case(fetchReviewSummary.started, state => ({ status: Status.Started }))
  .case(fetchReviewSummary.done, (state, { result }) => {
    const ratings = result.RestaurantReviewSummary.Ratings;

    return {
      dinersRecommend: recommendedByPercent(ratings.DinersRecommendations),
      ratingPeriod: getDaysSince(result.RestaurantReviewSummary.StartDateUtc),
      ratings: {
        ambience: ratings.Ambience.Rating,
        food: ratings.Food.Rating,
        noise: ratings.Noise.Rating,
        overall: ratings.Overall.Rating,
        service: ratings.Service.Rating,
        value: ratings.Value.Rating,
      },
      ratingsDistribution: ratings.OverallRatingsDistribution,
      status: Status.Done,
    };
  })
  .case(fetchReviewSummary.failed, () => ({ status: Status.Failed }))
  .case(fetchEmpty, () => ({ status: Status.Empty }));

// --------------------------------- //
// Selectors
// --------------------------------- //

export const baseSelector = (state: State) => state.reviewSummary;

export const reviewSummarySelector = ({ reviewSummary }: State) => {
  if (reviewSummary.status === Status.Done && reviewSummary.ratings === null) {
    return { status: Status.Empty };
  }

  return reviewSummary;
};

// --------------------------------- //
// Epics
// --------------------------------- //

export const epic: Epic = (action$, store, { api }) =>
  action$.filter(fetchReviewSummary.started.match).switchMap(() => {
    const rid = store.getState().currentContext.restaurant.rid;

    return api
      .fetchReviewSummary({ rid })
      .map(result => {
        if (result.RestaurantReviewSummary === null || result.RestaurantReviewSummary.Ratings === null) {
          return fetchEmpty();
        }

        return fetchReviewSummary.done({ params: {}, result });
      })
      .catch(() => [fetchReviewSummary.failed({ params: {}, error: {} })]);
  });
