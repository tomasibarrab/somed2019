import { shallow } from 'enzyme';
import React from 'react';
import { AsyncContent } from './AsyncContent';

// http://airbnb.io/enzyme/docs/api/shallow.html

describe('<AsyncContent /> snapshot test', () => {
  it('loading', () => {
    const isLoading = true;
    const wrapper = shallow(
      <AsyncContent isLoading={isLoading}>
        <h1>Content should not render</h1>
      </AsyncContent>,
    );

    // console.log(wrapper.debug());

    // should render loading
    expect(wrapper).toMatchSnapshot();
  });

  it('error', () => {
    const isError = true;
    const wrapper = shallow(
      <AsyncContent isError={isError}>
        <h1>Content should not render</h1>
      </AsyncContent>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('success', () => {
    const wrapper = shallow(
      <AsyncContent isError={false} isLoading={false}>
        <h1>Content should render</h1>
      </AsyncContent>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  xit('custom error', () => {
    // you can pass a custom error component
    const isError = true;
    // const ErrorComponent = React.createElement('div', {className: 'customError'}, null);
    // const ErrorComponent = <div className="customError" />;
    const MyErrorComponent = () => <div className="customError" />;

    const wrapper = shallow(
      <AsyncContent isError={isError} errorComponent={MyErrorComponent}>
        <h1>Content should not render</h1>
      </AsyncContent>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('error and loading', () => {
    // should render the loading view in this case
    const isError = true;
    const isLoading = true;
    const wrapper = shallow(
      <AsyncContent isError={isError} isLoading={isLoading}>
        <h1>Content should not render</h1>
      </AsyncContent>,
    );

    expect(wrapper).toMatchSnapshot();
  });

  it('empty', () => {
    // should render the loading view in this case
    const empty = true;
    const wrapper = shallow(
      <AsyncContent empty={empty}>
        <h1>Content should not render</h1>
      </AsyncContent>,
    );

    expect(wrapper).toMatchSnapshot();
  });
});
