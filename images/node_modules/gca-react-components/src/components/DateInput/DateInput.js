import React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';

import './DateInput.scss';

export function toISO(date) {
  const month = date.substr(0, 2);
  const day = date.substr(3, 2);
  const year = date.substr(6, 2);

  return `20${year}-${month}-${day}`;
}

export function fromISO(dateTime) {
  if (!dateTime) {
    return '';
  }
  const date = dateTime.split('T')[0];
  const [year, month, day] = date.split('-');
  const shortYear = year.substr(2, 2);

  let result = month;

  if (month.length === 2) {
    result += '/';

    if (day.length > 0) {
      result += day;

      if (day.length === 2) {
        result += '/';
        result += shortYear;
      }
    }
  }

  return result;
}

export function processKeyStroke(value, keyCode) {
  const length = value.length;

  // Backspace or delete key
  if (keyCode === 8 || keyCode === 46) {
    if (length === 3) return value.substr(0, 1);
    if (length === 6) return value.substr(0, 4);

    return value.substr(0, length - 1);
  }

  // Ignore keystrokes past max length
  if (length === 8) return value.substr(0, 8);

  // Slash key
  if (keyCode === 191) {
    const month = value.substr(0, 2);
    const day = value.substr(3, 2);

    if (length === 1) return `0${month}/`;
    if (length === 4) return `${month}/0${day}/`;
  }

  // Number key
  if (keyCode >= 48 && keyCode <= 57) {
    const slash = length === 1 || length === 4 ? '/' : '';

    return `${value}${keyCode - 48}${slash}`;
  }

  return value;
}

export function DateInput(props) {
  function handleKeyDown(e) {
    const newValue = processKeyStroke(e.target.value, e.keyCode);

    if (newValue !== e.target.value) props.onChange(toISO(newValue));
  }

  const errorMessage = props.valid ? null : <p className="invalid-message">{props.invalidMessage}</p>;

  // const className = props.valid ? '' : 'invalid';

  return (
    <div className="gca-date-input">
      <input
        className={classnames('gca-input', props.className, { invalid: !props.valid })}
        type="text"
        placeholder="mm/dd/yy"
        value={fromISO(props.value)}
        onKeyDown={handleKeyDown}
        onFocus={props.onFocus}
        onBlur={props.onBlur}
      />
      {errorMessage}
    </div>
  );
}

DateInput.propTypes = {
  className: PropTypes.string,
  invalidMessage: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  valid: PropTypes.bool.isRequired,
  value: PropTypes.string.isRequired,
};

DateInput.defaultProps = {
  onBlur: () => {},
  onFocus: () => {},
};

export default DateInput;
