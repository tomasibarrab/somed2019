import React from 'react';
import PropTypes from 'prop-types';
import SimpleRadioButtonGroup from './SimpleRadioButtonGroup';
import RadioButton from './RadioButton';

/**
 * Container component and factory for `<RadioButton>` components. In fact this is effectively a
 * Higher Order Component which wraps a `<SimpleRadioButtonGroup>` and automatically generates the
 * `<RadioButton>` child components for it.
 *
 * A `RadioButtonGroup` expects to itself be managed, being provided a `selectedValue` property as
 * well as a `onChange` callback, which is invoked with the value of a "selected" radio button.
 */
export function RadioButtonGroup({ selectedValue, disabled, onChange, childProvider }) {
  return (
    <SimpleRadioButtonGroup onChange={onChange} selectedValue={selectedValue} disabled={disabled}>
      {childProvider.map(childProps => {
        const mergedProps = {
          ...childProps,
          onChange,
          checked: childProps.value === selectedValue,
          key: `rbg_${childProps.value}`,
        };
        return <RadioButton {...mergedProps} />;
      })}
    </SimpleRadioButtonGroup>
  );
}

RadioButtonGroup.propTypes = {
  /** Should be an array of objects with the form `{ value: string, label: string }` */
  childProvider: PropTypes.arrayOf(PropTypes.shape({ value: PropTypes.string, label: PropTypes.string })),
  /**
   * Callback provided to each radio button which should be invoked with `value` when the radio
   * wants to change state
   */
  onChange: PropTypes.func.isRequired,
  /** Expected to match the value of one of the enclosed radio buttons */
  selectedValue: PropTypes.string.isRequired,
  disabled: PropTypes.bool,
};

export default RadioButtonGroup;
