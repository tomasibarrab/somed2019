import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import './TextArea.scss';

/**
 * A fully managed textarea component with minimum character display, character count, and invalid state. Any props not explicitely called out here will be passed directly to the `<textarea>` component.
 */
export class TextArea extends React.Component {
  static defaultProps = {
    labels: {},
    max: Infinity,
    min: 0,
    showLabels: true,
  };

  constructor(props) {
    super(props);

    this.onChange = this.onChange.bind(this);
  }

  // eslint-disable-next-line no-undef
  onChange(e) {
    this.props.onChange(e.target.value);
  }

  render() {
    const { formatLabel, labels, min, max, valid, className, showLabels, value, ...rest } = this.props;
    const classNames = classnames('gca-text-area', className, {
      invalid: !valid,
    });
    const shouldShowMinChars = min > 0 && labels.minimum;

    return (
      <div className={classNames}>
        <textarea {...rest} value={value} onChange={this.onChange} />
        {showLabels && (
          <div className="label-row">
            <div className="min">{shouldShowMinChars ? formatLabel(labels.minimum, { chars: min }) : null}</div>
            <div className="counter">
              <span>{value.length}</span> / {max === Infinity ? 'âˆž' : max}
            </div>
          </div>
        )}
      </div>
    );
  }
}

TextArea.propTypes = {
  /** Class(es) will be assigned to the root element as a hook for style overrides. */
  className: PropTypes.string,
  labels: PropTypes.objectOf(PropTypes.string),
  formatLabel: PropTypes.func,
  /** Purely used for display. *Does not* enforce limit. */
  max: PropTypes.number,
  /** Purely used for display. *Does not* enforce limit. */
  min: PropTypes.number,
  /** Receives the updated value. You are responsible for updating the bound data source. */
  onChange: PropTypes.func.isRequired,
  /** Show the label row (Minimum characters, current/max characters). */
  showLabels: PropTypes.bool,
  /** Show the component as valid or invalid. Styling only. */
  valid: PropTypes.bool.isRequired,
  /** The text value of component. */
  value: PropTypes.string.isRequired,
};

export default TextArea;
