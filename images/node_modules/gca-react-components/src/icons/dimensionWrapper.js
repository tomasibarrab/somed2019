/**
 * @param {function} IconComponent - A react component whose root element is an svg
 * @return {function} - A new React functional component
 *
 * If neither height or width are passed: Assumes icon is square and provides default values
 * If one of height or width are passed: Calculates the missing dimension to maintain the correct aspect ratio
 * If both height and width are passed: Has no effect, just uses passed existing height and width
 */

import React from 'react';
import PropTypes from 'prop-types';

export function getViewBoxFromFunctionBody(f) {
  return f.toString().match(/viewBox[^"']*["']([^"']+)["']/)[1].split(' ');
}

export default function dimensionWrapper(IconComponent) {
  const viewBox = getViewBoxFromFunctionBody(IconComponent);
  const viewBoxWidth = viewBox[2];
  const viewBoxHeight = viewBox[3];

  const getDimensions = (width, height) => {
    if (width === undefined && height === undefined) return { width: 24, height: 24 };

    if (width === undefined) {
      return {
        width: (parseFloat(height) / viewBoxHeight) * viewBoxWidth,
        height: parseFloat(height),
      };
    }

    if (height === undefined) {
      return {
        width: parseFloat(width),
        height: (parseFloat(width) / viewBoxWidth) * viewBoxHeight,
      };
    }

    return { width: parseFloat(width), height: parseFloat(height) };
  };

  const getDimensionsStrings = (width, height) => {
    const dimensions = getDimensions(width, height);

    return { width: `${dimensions.width}`, height: `${dimensions.height}` };
  };

  function wrappedIcon(props) {
    const { width, height } = getDimensionsStrings(props.width, props.height);

    return (
      <IconComponent
        {...props}
        height={height}
        width={width}
      />
    );
  }

  wrappedIcon.propTypes = {
    height: PropTypes.string,
    width: PropTypes.string,
  };

  return wrappedIcon;
}
