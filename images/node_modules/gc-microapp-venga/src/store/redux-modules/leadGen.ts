import { actionCreatorFactory } from 'typescript-fsa';

import { AsyncState, asyncStateReducer } from 'shared-react-utils/asyncStateReducer';

import 'rxjs/add/observable/of';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/takeUntil';

import {
  Epic,
  LeadGenFormData,
} from '../types';


const createAction = actionCreatorFactory();
const submitLeadGen = createAction.async<LeadGenFormData, null, any>('LEAD_GEN_SUBMIT');

export const actions = {
  submitLeadGen,
};


/* EPICS */
const submitLeadGenEpic: Epic = (action$, store, { api }) =>
  action$
    .filter(submitLeadGen.started.match)
    .switchMap(({ payload }) =>
      api.sendLeadGen(payload)
        .flatMap(() => [
          submitLeadGen.done({ params: payload, result: null }),
        ])
        .catch(error => [
          submitLeadGen.failed({ params: payload, error }),
        ]),
    );

export const epics = {
  submitLeadGenEpic,
};


/* REDUCERS */
export type LeadGenState = AsyncState<undefined>;

export const reducer = asyncStateReducer(submitLeadGen, () => undefined);
