import { mount } from 'enzyme';
import React from 'react';

import { AsyncProgress } from 'shared-react-utils/useAsync';

import LoadingIcon from '../common/LoadingIcon/LoadingIcon';
import { SearchInfo, SearchInfoProps } from '../common/SearchInfo/SearchInfo';

interface TestData {
  name: string;
}

describe('SearchInfo', () => {

  const setup = (s: AsyncProgress, data: TestData[] ) => {
    const props: SearchInfoProps<TestData> = {
      result: {
        items: data,
        pageIndex: 0,
        pageSize: data.length,
        totalPages: 1,
        totalResults: data.length,
      },
      status: {
        progress: s,
      },
    };
    const displayState = mount(<SearchInfo {...props} />);
    return { displayState, props };
  };

  test('SearchInfo with Started status', () => {
    const { displayState } = setup(AsyncProgress.Done, []);
    expect(displayState.find(LoadingIcon).length).toBe(0);
  });

  test('SearchInfo with Started status', () => {
    const { displayState } = setup(AsyncProgress.Started, []);
    expect(displayState.find(LoadingIcon).length).toBe(1);
  })

  test('SearchInfo with None status', () => {
    const { displayState } = setup(AsyncProgress.Init, []);
    expect(displayState.find(LoadingIcon).length).toBe(0);
  })

  test('SearchInfo with Failed status', () => {
    const { displayState } = setup(AsyncProgress.Failed, []);
    expect(displayState.find(LoadingIcon).length).toBe(0);
  })

});
