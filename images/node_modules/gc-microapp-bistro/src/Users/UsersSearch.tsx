// tslint:disable: no-console

import React from 'react';
import { RouteComponentProps } from 'react-router-dom';

import { InfoIcon } from 'gca-react-components';

import { AlertMessage } from '@buffet/alert-message';
import { Button } from '@buffet/button';
import { LabeledCheckbox } from '@buffet/checkbox';
import { Notify } from '@buffet/notify';
import { Panel } from '@buffet/panel';

import { AsyncProgress, getAsyncError, useAsync } from 'shared-react-utils/useAsync';

import * as api from '../api';
import { Routes } from '../common/App/App';
import { useHistorySearch } from '../common/Hooks/usehistorysearch';
import { SearchInfo } from '../common/SearchInfo/SearchInfo';
import { SearchInput } from '../common/SearchInput/SearchInput';
import strings from '../strings';
import { headerButtonStyle } from '../styles';

import { UsersResult } from './UserResult';

const AddNewUser = ({ onClick }: {onClick: () => void}) => (
  <Button type="button" theme="primary" onClick={onClick} >
    {strings['users.add.user']}
  </Button>
);

type Props = RouteComponentProps<any>;

const defaultSearch = {
  external: 'false',
  internal: 'true',
  query: '',
}

export function UsersSearch(props: Props) {
  const [ search, setSearch ] = useHistorySearch(api.searchUser, defaultSearch, props);
  const [ setUserStateStatus, setUserState ] = useAsync(api.setUserState);
  const [ resetPasswordStatus, resetPassword ] = useAsync(api.resetPassword);

  function handleChange({ target: { value } }: any) {
    setSearch({ ...search.value, query: value });
  };

  function handleInternalCheck() {
    const { internal, external } = search.value;
    const newInternal = internal === 'false' ? 'true' : 'false';
    const newExternal = newInternal === 'false' ? 'true' : external;
    setSearch({ ...search.value, internal: newInternal, external: newExternal });
  }

  function handleExternalCheck() {
    const { internal, external } = search.value;
    const newExternal = external === 'false' ? 'true' : 'false';
    const newInternal = newExternal === 'false' ? 'true' : internal;
    setSearch({ ...search.value, external: newExternal, internal: newInternal });
  }

  function handleNewUserClick() {
    props.history.push(Routes.UserNew);
  }

  function handleDisableUser(urn: string, name: string) {
    if (confirm(`Are you sure you want to disable '${name}' from Guest Center?`)) {
      setUserState(urn, false)
      .then(() => setSearch(search.value))
    }
  }

  function handleResetPassword(email: string) {
    if (confirm(`Are you sure you want to reset the password for '${email}'?`)) {
      resetPassword(email);
    }
  }

  function handleEnableUser(urn: string, name: string) {
    setUserState(urn, true)
    .then(() => setSearch(search.value))
  }

  const inProgress =
    search.status.progress === AsyncProgress.Started ||
    setUserStateStatus.progress === AsyncProgress.Started ||
    resetPasswordStatus.progress === AsyncProgress.Started ;
  const actionFailed =
    setUserStateStatus.progress === AsyncProgress.Failed ||
    resetPasswordStatus.progress === AsyncProgress.Failed ;

  const actionError =
    getAsyncError(setUserStateStatus) ||
    getAsyncError(resetPasswordStatus);
  return (
    <Panel
      title={strings['users.title']}
      headerContent={<AddNewUser onClick={handleNewUserClick} />}
      customHeaderStyle={headerButtonStyle}
    >
      <Notify
        show={actionFailed}
        autohide={true}
        delay={5}
      >
        <AlertMessage
          id="enable-user-message"
          iconId="negative"
          message={actionError ? actionError.message : strings['action.error']}
          type="error" />
      </Notify>
      <SearchInput
        label={strings['users.search.label']}
        value={search.value.query}
        onChange={handleChange}
      />
      <SearchInfo status={search.status} result={search.result} >
        <LabeledCheckbox
          disabled={search.status.progress === AsyncProgress.Started}
          id="search-internal-check"
          checked={search.value.internal === 'true'}
          label="Internal Users"
          onClick={handleInternalCheck} />
        <LabeledCheckbox
          disabled={search.status.progress === AsyncProgress.Started}
          id="search-internal-check"
          checked={search.value.external === 'true'}
          label="External Users"
          onClick={handleExternalCheck} />
      </SearchInfo>
      {search.result &&
        <UsersResult
          users={search.result.items || []}
          onDisable={handleDisableUser}
          onEnable={handleEnableUser}
          onResetPassword={handleResetPassword}
        />}
    </Panel>
  );
}

