import get from 'lodash/get';
import { pathOr } from 'ramda';
import * as React from 'react';
import { ajaxPost } from 'rxjs/observable/dom/AjaxObservable';

import { Button } from 'gca-react-components';

import strings from '../../strings';

import 'common/DataDisplay/DataDisplay.scss';

export interface Props {
  data: any;
  id: string | null;
  idType: string;
  onSeedCompleted: () => void;
}

export default class DataPermissionDisplay extends React.Component<Props, any> {
  constructor(props: Props) {
    super(props);

    this.state = {
      status: null,
    };
  }

  public render() {
    const { data, id, idType } = this.props;

    // is the restaurant seeded with permissions
    const hasPermissions = get(data, 'permissions', []).length > 0;

    return (
      <div className="data-container">
        <h3>{strings[`${idType}.permissions`]}</h3>
        {hasPermissions ? (
          <div>
            <ul className="list">
              {data.permissions.map((permission: any, index: number) => (
                <li key={index}>{permission.urn}</li>
              ))}
            </ul>
            <span>
              This {idType} {id} is seeded. But if you want you can reseed.{' '}
            </span>
            <Button theme="primary" onClick={this.handleSeedRid}>
              {strings[`${idType}.button.seedThisId`]}
            </Button>
          </div>
        ) : (
          <div>
            <p>
              Oh oh. This {idType} {id} is not seeded.{' '}
            </p>
            <Button theme="primary" onClick={this.handleSeedRid}>
              {strings[`${idType}.button.seedThisId`]}
            </Button>
            <p>{this.state.status}</p>
          </div>
        )}
      </div>
    );
  }

  /*
   * call the endpoint to seed a rid and on success notify parent to refetch
   */
  public handleSeedRid = () => {
    const csrfheader = {
      'X-CSRF-TOKEN': pathOr('', ['hydronator', 'microapp', 'csrfToken'], window),
    };
    const post$ = ajaxPost(`/admin/api/bistro/permissions/${this.props.id}/seed`, null, csrfheader);
    const subscription = post$.subscribe(
      (data: any) => {
        this.setState({ status: 'Successfully Seeded' });

        // cleanup
        subscription.unsubscribe();

        // let parent know seed completed
        this.props.onSeedCompleted();
      },
      (e: Error) => this.setState({ status: 'Seeding Failed. You could Retry or Contact #ask-rlc on Slack.' }),
    );
  }
}
