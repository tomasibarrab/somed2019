import * as React from 'react';
import { ajaxGetJSON, ajaxPut } from 'rxjs/observable/dom/AjaxObservable';
import Rx, { Subject } from 'rxjs/Subject';

import 'rxjs/add/operator/switchMap';

import { AsyncProgress } from 'shared-react-utils/useAsync';

export interface Props {
  url: string;
  requestType?: 'get' | 'put' | null;
  children(status: AsyncProgress, data: any): React.ReactNode;
}

export default class DataProvider extends React.Component<Props, any> {
  private unsubscribe: any;
  private prop$: Subject<any>;

  constructor(props: Props) {
    super(props);

    this.state = {
      data: null,
      progress: AsyncProgress.Started,
    };
  }

  public componentDidMount() {
    this.prop$ = new Rx.Subject();

    const fetch$ = this.prop$.switchMap((url: string) =>
      this.props.requestType === 'put' ? ajaxPut(url) : ajaxGetJSON(url),
    );

    this.unsubscribe = fetch$.subscribe(
      (data: any) => {
        this.setState({ progress: AsyncProgress.Done, data });
      },
      (e: Error) => this.setState({ progress: AsyncProgress.Failed }),
    );

    this.prop$.next(this.props.url);
  }

  public componentWillReceiveProps(nextProps: Props) {
    if (nextProps.url !== this.props.url) {
      this.prop$.next(nextProps.url);
    }
  }

  public componentWillUnMount() {
    this.unsubscribe();
  }
  public render() {
    return this.props.children(this.state.progress, this.state.data);
  }
}
