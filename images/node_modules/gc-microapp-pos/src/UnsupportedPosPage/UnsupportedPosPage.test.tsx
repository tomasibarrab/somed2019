import { Button } from '@buffet/button';
import { shallow } from 'enzyme';
import { Restaurant, User } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { Form } from 'react-final-form';

import { Props, PureUnsupportedPosPage as UnsupportedPosPage } from './UnsupportedPosPage';

describe('<UnsupportedPage />', () => {
  const setup = (override = {}) => {
    const {
      user = {
        firstName: 'William',
        lastName: 'Riker',
        userName: 'wriker@enterprise.com',
      } as User,
      restaurant = {
        billingPhoneNumber: '1234567890',
        name: '10 Forward',
      } as Restaurant,
      unsupportedPosBrands = [],
      unsupportPosStatus = 'init',
    } = override as Props;

    const props: Props = {
      fetchUnsupportedPosBrands: jest.fn(),
      intl: { formatMessage: jest.fn() } as any,
      restaurant,
      submitLeadGen: jest.fn(),
      unsupportPosStatus,
      unsupportedPosBrands,
      updateDisplayState: jest.fn(),
      user,
    };

    const unsupportedPosPage = shallow(<UnsupportedPosPage {...props} />);

    return { props, unsupportedPosPage };
  };

  it('submitLeadGen should pass the lead gen data to the submitLeadGen action and update displayState', () => {
    const { unsupportedPosPage, props } = setup();

    const formData = unsupportedPosPage.instance().initialFormValue;

    unsupportedPosPage.instance().submitLeadGen(formData);

    expect(props.submitLeadGen).toHaveBeenCalledWith(formData);
  });

  describe('leadgen state', () => {
    it('should contain the lead gen form on state build', () => {
      const { unsupportedPosPage } = setup();

      expect(unsupportedPosPage.instance().initialFormValue).toEqual({
        Company: '10 Forward',
        Country: 'United States',
        CurrencyISOCode: 'USD',
        Disqualification_Reason__c: 'Unsupported POS Brand',
        Email: 'wriker@enterprise.com',
        FirstName: 'William',
        LastName: 'Riker',
        LeadSource: 'GCA',
        POS_Brand__c: '',
        Phone: '1234567890',
        Product_Type__c: 'POS',
        RID__c: '271468',
        RecordTypeID: '01230000000jw7a',
        Restaurant_or_parent__c: 'Restaurant',
        Status: 'Disqualified',
      });
    });

    it('should set the email, first name, and last name from the user context', () => {
      const { unsupportedPosPage } = setup({
        user: { firstName: 'Jean-Luc', lastName: 'Picard', userName: 'captain@enterprise.com' },
      });

      expect(unsupportedPosPage.instance().initialFormValue).toEqual({
        Company: '10 Forward',
        Country: 'United States',
        CurrencyISOCode: 'USD',
        Disqualification_Reason__c: 'Unsupported POS Brand',
        Email: 'captain@enterprise.com',
        FirstName: 'Jean-Luc',
        LastName: 'Picard',
        LeadSource: 'GCA',
        POS_Brand__c: '',
        Phone: '1234567890',
        Product_Type__c: 'POS',
        RID__c: '271468',
        RecordTypeID: '01230000000jw7a',
        Restaurant_or_parent__c: 'Restaurant',
        Status: 'Disqualified',
      });
    });

    it('should set the phone number and company name from the restaurant context', () => {
      const { unsupportedPosPage } = setup({ restaurant: { billingPhoneNumber: '0987654321', name: 'Battle Bridge' } });

      expect(unsupportedPosPage.instance().initialFormValue).toEqual({
        Company: 'Battle Bridge',
        Country: 'United States',
        CurrencyISOCode: 'USD',
        Disqualification_Reason__c: 'Unsupported POS Brand',
        Email: 'wriker@enterprise.com',
        FirstName: 'William',
        LastName: 'Riker',
        LeadSource: 'GCA',
        POS_Brand__c: '',
        Phone: '0987654321',
        Product_Type__c: 'POS',
        RID__c: '271468',
        RecordTypeID: '01230000000jw7a',
        Restaurant_or_parent__c: 'Restaurant',
        Status: 'Disqualified',
      });
    });
  });

  describe('lead gen form', () => {
    it('should be made from react-final-form', () => {
      const { unsupportedPosPage } = setup();

      const leadGenFormProps = unsupportedPosPage.find(Form).props();

      expect(leadGenFormProps.onSubmit).toBe(unsupportedPosPage.instance().submitLeadGen);
      expect(leadGenFormProps.initialValues).toBe(unsupportedPosPage.instance().initialFormValue);
    });
  });

  it('should have a back button that goes back to select pos', () => {
    const { unsupportedPosPage, props } = setup();

    unsupportedPosPage.find(Button).simulate('click');

    expect(props.updateDisplayState).toHaveBeenCalledWith('posSelect');
  });
});
