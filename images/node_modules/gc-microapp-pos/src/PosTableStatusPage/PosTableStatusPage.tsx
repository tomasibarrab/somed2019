import { Button } from '@buffet/button';
import { RadioButton } from '@buffet/radio-button';
import { SimpleRadioButtonGroup } from '@buffet/radio-button';
import { DropdownSelect } from '@buffet/select';
import { AsyncContent } from 'gca-react-components';
import React from 'react';
import { FormattedHTMLMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Option, OptionValues } from 'react-select';
import {
  actions,
  getCategoriesCheckedCount,
  getCountsPerFilter,
  getParentCategoriesDictionary,
  getStatusDictionary,
  getStatusList,
  getVisibleCategories,
  isSelectMode,
} from './../store/tablestatus/tablestatus';
import { Category, CategoryStatus, CategoryStatusOption, State } from './../store/types';
import CategoryFilters from './CategoryFilters';
import { FlatCategoryDisplay } from './FlatCategoryDisplay';
import { HierarchicalCategoryDisplay } from './HierarchicalCategoryDisplay';
import './PosTableStatusPage.scss';
import StatusSelector from './StatusSelector';
import { Toggle } from './Toggle';

interface SP {
  visibleCategories: Category[];
  statusDictionary: { [id: number]: CategoryStatus };
  statusList: CategoryStatusOption[];
  selectedStatus: number;
  selectedCategoryBucket: 'unassigned' | 'appetizer' | 'entree' | 'dessert' | 'other' | 'all';
  readyToPublish: boolean;
  publishSuccess: boolean;
  categoriesCheckedCount: number;
  isFlatCategory: boolean;
  parentCategoriesDictionary: { [id: string]: Category };
  isSelectMode: boolean;
  countsPerFilter: { [id: string]: number };
  tableStatusChangeEnabled: true;
  posType: string;
  rid: number;
}

interface DP {
  fetchCategories: () => void;
  checkCategory: (categoryId: string) => void;
  fetchStatuses: () => void;
  selectStatus: (optionId: number) => void;
  getStatuses: () => CategoryStatus[];
  publishStatus: () => void;
  selectStatusBucket: (option: string) => void;
  clearCategorySelection: () => void;
  toggleTableStatusChangeEnabled: () => void;
  fetchRestaurantInfo: () => void;
  fetchData: () => void;
}

export type Props = SP & DP & InjectedIntlProps;

class PosTableStatusPage extends React.Component<Props, {}> {
  public render() {
    return <AsyncContent isLoading={!this.props.posType}>{this.displayTableStatus()}</AsyncContent>;
  }

  public componentDidMount() {
    this.props.fetchData();
    this.setNavigateAwayWarning();
  }
  private onStatusSelect = (status: CategoryStatus) => {
    if (status) {
      this.props.selectStatus(status.id || 0);
      (window as any).topOfPage.scrollIntoView();
    }
  };

  private renderCategories(): React.ReactNode {
    if (this.props.visibleCategories.length === 0) {
      return this.renderEmptyCategories();
    }
    return this.props.isFlatCategory ? (
      <FlatCategoryDisplay
        categories={this.props.visibleCategories}
        statusDictionary={this.props.statusDictionary}
        onCheckCategory={this.props.checkCategory}
      />
    ) : (
      <HierarchicalCategoryDisplay
        categories={this.props.visibleCategories}
        parentCategoriesDictionary={this.props.parentCategoriesDictionary}
        statusDictionary={this.props.statusDictionary}
        onCheckCategory={this.props.checkCategory}
      />
    );
  }

  private renderEmptyCategories(): React.ReactNode {
    const { formatMessage } = this.props.intl;
    return (
      <p className="empty-categories">
        {formatMessage({
          id: `tablestatus.emptyCategories.${this.props.selectedCategoryBucket}`,
        })}
      </p>
    );
  }

  private isUpservePos(): boolean {
    return this.props.posType !== undefined && this.props.posType.toLowerCase() === 'upserve';
  }

  private displayTableStatus() {
    const { formatMessage } = this.props.intl;
    if (this.isUpservePos()) {
      return;
    }
    const learnMoreUrl = 'https://support.opentable.com/s/article/GuestCenter-POS-Integration-Automatic-Course-Status';
    return (
      <div className="main-app-panel">
        <div className="app-body">
          <div className={`overlay ${this.props.tableStatusChangeEnabled ? '' : 'overlay-enabled'}`} />
          <div
            className="caption"
            ref={el => {
              (window as any).topOfPage = el;
            }}
          >
            <div className="publish-wrapper">
              {this.props.publishSuccess && (
                <p className="publish-success-message">{formatMessage({ id: 'tablestatus.savedStatusSuccess' })}</p>
              )}
              <Button
                htmltype="button"
                type="button"
                className="publish-button"
                disabled={!this.props.readyToPublish}
                onClick={this.props.publishStatus}
                theme="primary"
              >
                {formatMessage({ id: 'tablestatus.saveTableStatus' })}
              </Button>
            </div>
            <h1 className="caption-title">{formatMessage({ id: 'tablestatus.captionTitle' })}</h1>
            <div className="pos-toggle">
              <Toggle
                onClick={this.props.toggleTableStatusChangeEnabled}
                enabled={this.props.tableStatusChangeEnabled}
                onText={formatMessage({ id: 'tablestatus.onToggle' })}
                offText={formatMessage({ id: 'tablestatus.offToggle' })}
              />
            </div>
            <div className="caption-body">
              {formatMessage({ id: 'tablestatus.captionBody' })}
              <a className="caption-learn-more" href={learnMoreUrl} target="_blank">
                {formatMessage({ id: 'tablestatus.captionLearnMore' })}
              </a>
            </div>
            <div className="caption-notice">
              <FormattedHTMLMessage id="tablestatus.captionNotice" />
            </div>
          </div>
          <div className="action-panel">
            {this.props.isSelectMode ? (
              <StatusSelector
                categoriesCheckedCount={this.props.categoriesCheckedCount}
                statusListOptions={this.props.statusList}
                selectedStatus={this.props.selectedStatus}
                clearCategorySelection={this.props.clearCategorySelection}
                onStatusSelect={this.onStatusSelect}
              />
            ) : (
              <CategoryFilters
                countsPerFilter={this.props.countsPerFilter}
                selectedStatus={this.props.selectedStatus}
                selectedCategoryBucket={this.props.selectedCategoryBucket}
                statusList={this.props.statusList}
                selectStatusBucket={this.props.selectStatusBucket}
              />
            )}
          </div>
          {this.renderCategories()}
        </div>
      </div>
    );
  }

  private setNavigateAwayWarning() {
    window.onbeforeunload = e => {
      if (this.props.readyToPublish) {
        return true;
      }
      return undefined;
    };
  }
}
export function mapStateToProps(state: State) {
  return {
    categoriesCheckedCount: getCategoriesCheckedCount(state),
    countsPerFilter: getCountsPerFilter(state),
    isFlatCategory: state.tableStatus.isFlatCategory,
    isSelectMode: isSelectMode(state),
    parentCategoriesDictionary: getParentCategoriesDictionary(state.tableStatus),
    posType: state.tableStatus.posType,
    publishSuccess: state.tableStatus.publishSuccess,
    readyToPublish: state.tableStatus.readyToPublish,
    rid: state.currentContext.restaurant.rid,
    selectedCategoryBucket: state.tableStatus.selectedStatusBucket,
    statusDictionary: getStatusDictionary(state.tableStatus),
    statusList: getStatusList(state.tableStatus),
    tableStatusChangeEnabled: state.tableStatus.tableStatusChangeEnabled,
    visibleCategories: getVisibleCategories(
      state.tableStatus.categories,
      state.tableStatus.selectedStatusBucket,
      getStatusDictionary(state.tableStatus),
      state.tableStatus.isFlatCategory,
    ),
  };
}

export const mapDispatchToProps = {
  checkCategory: actions.checkCategory.started,
  clearCategorySelection: actions.clearCategorySelection.started,
  fetchCategories: actions.fetchCategories.started,
  fetchData: actions.fetchData,
  fetchRestaurantInfo: actions.fetchRestaurantInfo.started,
  fetchStatuses: actions.fetchStatuses.started,
  publishStatus: actions.publishStatus.started,
  selectStatus: actions.selectStatus,
  selectStatusBucket: actions.selectStatusBucket,
  toggleTableStatusChangeEnabled: actions.toggleTableStatusChangeEnabled.started,
};

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(injectIntl(PosTableStatusPage));
export { PosTableStatusPage as PurePosTableStatusPage };
