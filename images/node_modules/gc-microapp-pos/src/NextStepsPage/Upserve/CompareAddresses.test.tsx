import { shallow } from 'enzyme';
import React from 'react';

import { upserveVerifySimilarAddressesMock } from '../../store/onboarding/onboarding.mocks';
import { CompareAddresses } from './CompareAddresses';

describe('CompareAddresses', () => {
  it('should display the full addresses given to it', () => {
    const props = { addresses: upserveVerifySimilarAddressesMock };
    const compareAddresses = shallow(<CompareAddresses {...props} />);

    // Opentable fields
    expect(compareAddresses.find('[data-testid="ot-city"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.city,
    );
    expect(compareAddresses.find('[data-testid="ot-country"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.country,
    );
    expect(compareAddresses.find('[data-testid="ot-name"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.name,
    );
    expect(compareAddresses.find('[data-testid="ot-state"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.state,
    );
    expect(compareAddresses.find('[data-testid="ot-street1"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.street1,
    );
    expect(compareAddresses.find('[data-testid="ot-street2"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.street2,
    );
    expect(compareAddresses.find('[data-testid="ot-zip"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.zip,
    );

    // Upserve fields
    expect(compareAddresses.find('[data-testid="partner-city"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.city,
    );
    expect(compareAddresses.find('[data-testid="partner-country"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.country,
    );
    expect(compareAddresses.find('[data-testid="partner-name"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.name,
    );
    expect(compareAddresses.find('[data-testid="partner-state"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.state,
    );
    expect(compareAddresses.find('[data-testid="partner-street1"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.street1,
    );
    expect(compareAddresses.find('[data-testid="partner-street2"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.street2,
    );
    expect(compareAddresses.find('[data-testid="partner-zip"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.zip,
    );
  });

  it('should not display street 2 if not provided', () => {
    const props = {
      addresses: {
        opentable_restaurant_details: {
          ...upserveVerifySimilarAddressesMock.opentable_restaurant_details,
          street2: '',
        },
        partner_restaurant_details: {
          ...upserveVerifySimilarAddressesMock.partner_restaurant_details,
          street2: '',
        },
      },
    };
    const compareAddresses = shallow(<CompareAddresses {...props} />);

    expect(compareAddresses.find('[data-testid="ot-street1"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.opentable_restaurant_details.street1,
    );
    expect(compareAddresses.find('[data-testid="ot-street2"]').length).toBe(0);

    expect(compareAddresses.find('[data-testid="partner-street1"]').text()).toEqual(
      upserveVerifySimilarAddressesMock.partner_restaurant_details.street1,
    );
    expect(compareAddresses.find('[data-testid="partner-street2"]').length).toBe(0);
  });
});
