import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import BookingsRevenueIcon from '../assets/BookingsRevenueIcon';
import KnowGuestsIcon from '../assets/KnowGuestsIcon';
import TableStatusIcon from '../assets/TableStatusIcon';
import { gaTrackTypes } from '../constants';
import { updateDisplayState } from '../store/onboarding/onboarding';
import { SimpleCard } from './SimpleCard';

import { OnboardingDisplayStateName, State } from '../store/types';

import './LandingPage.scss';

interface DispatchProps {
  updateDisplayState: (nextState: OnboardingDisplayStateName) => void;
}

type Props = DispatchProps & InjectedIntlProps;

class LandingPage extends React.Component<Props, {}> {
  public render() {
    const {
      intl: { formatMessage },
    } = this.props;

    return (
      <main className="onboarding-home-page">
        <div className="onboarding-content onboarding-content__upper">
          <h1 className="onboarding-content__upper__header">
            <FormattedMessage id="landing.header" />
          </h1>
          <p className="onboarding-content__message onboarding-content__upper__message">
            <FormattedMessage id="landing.message" />
          </p>
          <Button type="button" onClick={this.handleNavigateNext} theme="primary">
            <FormattedMessage id="landing.startBtn" />
          </Button>
        </div>
        <div className="onboarding-content onboarding-content__mid">
          <SimpleCard
            title={formatMessage({ id: 'landing.tile1.header' })}
            description={formatMessage({ id: 'landing.tile1.message' })}
          >
            <BookingsRevenueIcon className="onboarding-icon" />
          </SimpleCard>
          <SimpleCard
            title={formatMessage({ id: 'landing.tile2.header' })}
            description={formatMessage({ id: 'landing.tile2.message' })}
          >
            <TableStatusIcon className="onboarding-icon" />
          </SimpleCard>
          <SimpleCard
            title={formatMessage({ id: 'landing.tile3.header' })}
            description={formatMessage({ id: 'landing.tile3.message' })}
          >
            <KnowGuestsIcon className="onboarding-icon" />
          </SimpleCard>
        </div>
        <div className="onboarding-content onboarding-content__lower">
          <p>
            <FormattedMessage id="landing.quote.text" />
          </p>
          <p>
            <FormattedMessage id="landing.quote.attribution" />
          </p>
        </div>
      </main>
    );
  }

  private handleNavigateNext = () => {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.nagivate,
      category: gaTrackTypes.category,
      label: 'landing-page:start',
    });
    this.props.updateDisplayState('posSelect');
  };
}

const mapState = (state: State): {} => ({});

const mapDispatch = {
  updateDisplayState,
};

export default connect<{}, DispatchProps, {}>(
  mapState,
  mapDispatch,
)(injectIntl(LandingPage));

export { LandingPage as PureLandingPage, Props };
