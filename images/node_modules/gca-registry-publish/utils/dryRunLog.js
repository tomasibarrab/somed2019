const upperFirst = require('lodash/upperFirst');

const logPrefix = (actionName) => {
  return `[DRY RUN - ${upperFirst(actionName)}]`;
}

const dryExplanation = (actionName, shouldFail = false) => {
  console.log(logPrefix(actionName), `This step [${actionName}] would normally call an API to make a change.`);
  console.log(logPrefix(actionName), 'Because this is a dry run, this API call has been skipped.');
  console.log(logPrefix(actionName), 'The code will continue running as if this API call had returned with a status of: ', shouldFail ? 'FAILURE' : 'SUCCESS');
}

const mockApiResponse = ({ actionName, mockedResult, shouldFail = false, ...logItems }) => {
  dryExplanation(actionName, shouldFail);
  Object.keys(logItems).forEach((key) => {
    console.log(logPrefix(actionName), `${key}: ${JSON.stringify(logItems[key])}`);
  });
  if (shouldFail) {
    return Promise.reject({
      status: 404,
    });
  }
  return Promise.resolve(mockedResult);
};

module.exports = {
  dryExplanation,
  mockApiResponse,
};