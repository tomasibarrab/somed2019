const _ = require('lodash');
const Promise = require('bluebird');
const agent = require('superagent-promise')(require('superagent'), Promise);
const url = require('url');
const querystring = require('querystring');

const DEFAULT_TIMEOUT = { response: 10000 };

const getAllMicroapps = function ({ host }) {
  const path = `/api/micro-apps`;
  const uri = url.resolve(host, path);
  return agent
    .get(uri)
    .set('Content-Type', 'application/json')
    .timeout(DEFAULT_TIMEOUT)
    .end();
};

const microAppExists = function ({ appName, host }) {
  const path = `/api/micro-app/${appName}`;
  const uri = url.resolve(host, path);
  return agent
    .get(uri)
    .set('Content-Type', 'application/json')
    .timeout(DEFAULT_TIMEOUT)
    .end();
};

const microAppVersionExists = function ({ appName, host, deployVersion }) {
  const path = `/api/micro-app/${appName}/versions`;
  const uri = url.resolve(host, path);
  return agent
    .get(uri)
    .set('Content-Type', 'application/json')
    .end()
    .then(response => {
      const data = response.body;
      if (!_.isEmpty(data) && !_.isEmpty(_.find(data, { version: deployVersion }))) {
        console.info(`Version "${deployVersion}" exists for microapp "${appName}"`)
        return true;
      }

      throw new Error(`Version "${deployVersion}" not found in microapp "${appName}"`);
    });
};

const createMicroApp = function ({ appName, host, owner, creator }) {
  const path = `/api/micro-apps`;
  const uri = url.resolve(host, path);
  const data = {
    microAppId: appName,
    type: 'partial',
    creator,
    owner,
  };

  return agent
    .post(uri, data)
    .set('Content-Type', 'application/json')
    .end();
};

const createMicroAppVersion = function ({ appName, host, appPackageVersion, creator }) {
  const path = `/api/micro-app/${appName}/versions`;
  const uri = url.resolve(host, path);
  const data = { version: appPackageVersion, creator };

  return agent
    .post(uri, data)
    .set('Content-Type', 'application/json')
    .end();
};

const promoteMicroAppVersion = function ({ appName, host, environment, deployVersion, creator }) {
  const data = { microAppId: appName, environmentId: environment, version: deployVersion, creator };
  const path = `/api/webhooks/promote?${querystring.stringify(data)}`;
  const uri = url.resolve(host, path);
  return agent
    .get(uri)
    .set('Content-Type', 'application/json')
    .end();
};

module.exports = {
  getAllMicroapps,
  createMicroApp,
  microAppExists,
  microAppVersionExists,
  createMicroAppVersion,
  promoteMicroAppVersion,
};
