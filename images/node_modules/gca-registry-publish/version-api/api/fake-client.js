const _ = require('lodash');
const querystring = require('querystring');
const { mockApiResponse } = require('../../utils/dryRunLog');
const url = require('url');

const failureResponse404 = {
  mockedResult: { status: 404 },
  shouldFail: true,
}

const successResponse200 = {
  mockedResult: { status: 200 },
  shouldFail: false,
}

const microAppExists = function ({ appName, host }) {
  // To test create-version, use "...failureResponse404"
  // To test promote-version, use "...successResponse200"
  const path = `/api/micro-app/${appName}`;
  const uri = url.resolve(host, path);
  return mockApiResponse({
    actionName: 'microAppExists',
    method: 'GET',
    uri,
    ...successResponse200,
  });
};

const microAppVersionExists = function ({ appName, host, deployVersion }) {
  const path = `/api/micro-app/${appName}/versions`;
  const uri = url.resolve(host, path);
  return mockApiResponse({
    actionName: 'microAppVersionExists',
    method: 'GET',
    uri,
    ...successResponse200
  });
};

const createMicroApp = function ({ appName, host, owner, creator }) {
  const path = `/api/micro-apps`;
  const uri = url.resolve(host, path);
  const data = {
    microAppId: appName,
    type: 'partial',
    creator,
    owner,
  };

  return mockApiResponse({
    actionName: 'createMicroApp',
    method: 'POST',
    uri,
    data,
    ...successResponse200
  });
};

const createMicroAppVersion = function ({ appName, host, appPackageVersion, creator }) {
  const path = `/api/micro-app/${appName}/versions`;
  const uri = url.resolve(host, path);
  const data = { version: appPackageVersion, creator };

  return mockApiResponse({
    actionName: 'createMicroAppVersion',
    method: 'POST',
    uri,
    data,
    ...successResponse200
  });
};

const promoteMicroAppVersion = function ({ appName, host, environment, deployVersion, creator }) {
  const data = { microAppId: appName, environmentId: environment, version: deployVersion, creator };
  const path = `/api/webhooks/promote?${querystring.stringify(data)}`;
  const uri = url.resolve(host, path);
  return mockApiResponse({
    actionName: 'promoteMicroAppVersion',
    method: 'POST',
    uri,
    data,
    ...successResponse200
  });
};

module.exports = {
  createMicroApp,
  microAppExists,
  microAppVersionExists,
  createMicroAppVersion,
  promoteMicroAppVersion,
};
