import { selectors, User } from 'gca-react-components/src/redux-modules/currentContext';
import { combineEpics } from 'redux-observable';
import 'rxjs/add/observable/zip';
import { actionCreatorFactory } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import makeCampaignDTO from '../../helpers/makeCampaignDTO';
import { Epic } from '../types';
import {
  ClickOrInteractPayload,
  CreateCustomPromotionPayload,
  CreditsModel,
  CreditsResponse,
  CustomPromotionsState,
  OpenCreationTermsModalPayload,
  SetProgressPercentagePayload,
} from './customPromotions.types';
import makeCreditsModel from './makeCreditsModel';

// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory('CUSTOM_PROMOTIONS');
const openCustomPromotionsCreationTermsModal = actionCreator<OpenCreationTermsModalPayload>(
  'OPEN_CREATION_TERMS_MODAL',
);
const closeCustomPromotionsCreationTermsModal = actionCreator('CLOSE_CREATION_TERMS_MODAL');
const setProgressPercentage = actionCreator<SetProgressPercentagePayload>('SET_PROGRESS_PERCENTAGE');
const createCustomPromotion = actionCreator.async<CreateCustomPromotionPayload, any, any>('CREATE_CUSTOM_PROMOTION');
const getCredits = actionCreator.async<any, CreditsModel, any>('GET_CREDITS');
const setEducationPage = actionCreator<number>('SET_EDUCATION_PAGE');
const clickOrInteract = actionCreator<ClickOrInteractPayload>('CLICK_OR_INTERACT');

export const actions = {
  clickOrInteract,
  closeCustomPromotionsCreationTermsModal,
  createCustomPromotion,
  getCredits,
  openCustomPromotionsCreationTermsModal,
  setEducationPage,
  setProgressPercentage,
};

// ---------------------------------------------------------------------------------------------------------------------
// selectors
// ---------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------

export const createCustomPromotionEpic: Epic = (action$, store, { api }) =>
  action$.ofType(createCustomPromotion.started.type).switchMap(({ payload }) => {
    const { formValues, approvalInfo } = payload;
    const user: User = selectors.user(store.getState());
    const rid = selectors.rid(store.getState());
    /* Using an exclamation point below since we know that if you're creating a campaign,
    you've already loaded the credits info and it will be there. Maybe this is an opportunity
    to learn about more complex types in TS, such as the sure presence of one property if another
    is a certain value, e.g. making it non-optional. */
    const { coverPrice } = store.getState().customPromotions.credits.model!;
    const campaignDTO: any = makeCampaignDTO(formValues, user, rid, approvalInfo, coverPrice);

    return api
      .createCampaign(rid, campaignDTO)
      .map(() => createCustomPromotion.done({ params: payload, result: true }))
      .catch(() => [createCustomPromotion.failed({ params: payload, error: {} })]);
  });

export const getCreditsEpic: Epic = (action$, store, { api }) =>
  action$.ofType(getCredits.started.type).switchMap(({ payload }) => {
    const rid = payload.rid;
    return api
      .getCredits(rid)
      .map((response: CreditsResponse) => getCredits.done({ params: {}, result: makeCreditsModel(response) }))
      .catch(() => [getCredits.failed({ params: {}, error: {} })]);
  });

export const customPromotionsEpic = combineEpics(createCustomPromotionEpic, getCreditsEpic);

// ---------------------------------------------------------------------------------------------------------------------
// reducer
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: CustomPromotionsState = {
  create: {
    modal: false,
    pending: false,
  },
  credits: {
    pending: false,
  },
  educationPage: 1,
  progressPercentage: 0,
};

export const reducer = reducerWithInitialState(initialState)
  .case(openCustomPromotionsCreationTermsModal, (state, { formValuesSnapshot }) => ({
    ...state,
    create: {
      formValuesSnapshot,
      modal: true,
      pending: false,
    },
  }))
  .case(closeCustomPromotionsCreationTermsModal, state => ({
    ...state,
    create: {
      ...state.create,
      modal: false,
    },
  }))
  .case(getCredits.started, state => ({
    ...state,
    credits: {
      pending: true,
    },
  }))
  .case(getCredits.done, (state, payload) => ({
    ...state,
    credits: {
      model: payload.result,
      pending: false,
    },
  }))
  .case(getCredits.failed, state => ({
    ...state,
    credits: {
      pending: false,
    },
  }))
  .case(createCustomPromotion.started, state => ({
    ...state,
    create: {
      ...state.create,
      pending: true,
    },
  }))
  .case(createCustomPromotion.done, state => ({
    ...state,
    create: {
      ...state.create,
      pending: false,
      success: true,
    },
  }))
  .case(createCustomPromotion.failed, state => ({
    ...state,
    create: {
      ...state.create,
      pending: false,
      success: false,
    },
  }))
  .case(setEducationPage, (state, payload) => ({
    ...state,
    educationPage: payload,
  }))
  .case(setProgressPercentage, (state, { percentage }) => ({
    ...state,
    progressPercentage: percentage,
  }));
