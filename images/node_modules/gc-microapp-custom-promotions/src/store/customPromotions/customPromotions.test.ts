import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';
import { Observable } from 'rxjs';
import { of } from 'rxjs/observable/of';
import { actions, customPromotionsEpic, reducer } from './customPromotions';

jest.mock('../../helpers/makeCampaignDTO', () => (...args) => args);
jest.mock('./makeCreditsModel', () => response => response);

/* eslint-disable max-len */
describe('customPromotions redux-module', () => {
  const defaultState = {
    currentContext: {
      restaurant: {
        rid: 268852,
      },
      user: {
        firstName: 'Jest',
        lastName: 'Tester',
        userName: 'jest@example.com',
      },
    },
  };

  /* TODO: We should add selectors for the credits model */
  describe('customPromotions selectors', () => {
    it('should TODO', () => {
      const actual = true;
      const expected = true;
      expect(actual).toEqual(expected);
    });
  });

  describe('customPromotions reducer', () => {
    let initialState;
    beforeEach(() => {
      initialState = {
        create: {
          modal: false,
          pending: false,
        },
        credits: {
          pending: false,
        },
        educationPage: 1,
        progressPercentage: 0,
      };
    });

    it('should handle open and close terms modal', () => {
      const formValues = { startDate: '2018-01-01' };
      const openAction = actions.openCustomPromotionsCreationTermsModal({ formValuesSnapshot: formValues });
      let newState = reducer(initialState, openAction);
      const expectedOpen = {
        ...initialState,
        create: {
          formValuesSnapshot: formValues,
          modal: true,
          pending: false,
        },
      };
      expect(newState).toEqual(expectedOpen);

      const closeAction = actions.closeCustomPromotionsCreationTermsModal();
      newState = reducer(newState, closeAction);
      const expectedClosed = {
        ...initialState,
        create: {
          formValuesSnapshot: formValues,
          modal: false,
          pending: false,
        },
      };

      expect(newState).toEqual(expectedClosed);
    });

    it('should handle getCredits started and done', () => {
      const startedAction = actions.getCredits.started({});
      let newState = reducer(initialState, startedAction);

      // Don't need the entire payload to test the reducer, it's not used
      const doneAction = actions.getCredits.done({ result: { coverPrice: 5.5 } } as any);
      newState = reducer(newState, doneAction);
      const expectedDone = {
        ...initialState,
        credits: {
          model: { coverPrice: 5.5 },
          pending: false,
        },
      };

      expect(newState).toEqual(expectedDone);
    });

    it('should handle getCredits failed', () => {
      const failedAction = actions.getCredits.failed({ error: true, params: {} });
      const newState = reducer(initialState, failedAction);
      const expected = {
        ...initialState,
        credits: {
          pending: false,
        },
      };

      expect(newState).toEqual(expected);
    });

    it('should handle createCustomPromotion started and done', () => {
      const startedAction = actions.createCustomPromotion.started({ formValues: {}, approvalInfo: {} });
      let newState = reducer(initialState, startedAction);

      // Don't need the entire payload to test the reducer, it's not used
      const doneAction = actions.createCustomPromotion.done({ result: {}, params: {} } as any);
      newState = reducer(newState, doneAction);
      const expectedDone = {
        ...initialState,
        create: {
          modal: false,
          pending: false,
          success: true,
        },
      };

      expect(newState).toEqual(expectedDone);
    });

    it('should handle createCustomPromotion failed', () => {
      /* don't need the entire payload to test the reducer, it's not used */
      const failedAction = actions.createCustomPromotion.failed({ error: true, params: {} } as any);
      const newState = reducer(initialState, failedAction);
      const expected = {
        ...initialState,
        create: {
          modal: false,
          pending: false,
          success: false,
        },
      };

      expect(newState).toEqual(expected);
    });

    it('should handle setEducationPage', () => {
      const action = actions.setEducationPage(2);
      const newState = reducer(initialState, action);
      const expected = {
        ...initialState,
        educationPage: 2,
      };

      expect(newState).toEqual(expected);
    });

    it('should handle setProgressPercentage', () => {
      const action = actions.setProgressPercentage({ percentage: 50 });
      const newState = reducer(initialState, action);
      const expected = {
        ...initialState,
        progressPercentage: 50,
      };

      expect(newState).toEqual(expected);
    });
  });

  describe('epics', () => {
    let testStore;

    const state = {
      ...defaultState,
      customPromotions: {
        credits: {
          model: {
            coverPrice: 5.5,
          },
        },
      },
    };

    test('createCustomPromotionEpic calls makeCampaignDTO w/ formValues and state info, calls api', () => {
      const createCampaign = jest.fn(() => of({}));
      const dependencies = { api: { createCampaign } };
      const rootEpic = (action$, store) => customPromotionsEpic(action$, store, dependencies as any);
      const epicMiddleware = createEpicMiddleware(rootEpic);

      const mockStore = configureMockStore([epicMiddleware]);
      testStore = mockStore(state);
      testStore.dispatch(
        actions.createCustomPromotion.started({ formValues: 'formValues', approvalInfo: 'approvalInfo' }),
      );

      /* makeCampaignDTO mock returns an array of all of its args */
      expect(createCampaign).toHaveBeenCalledWith(268852, [
        'formValues',
        state.currentContext.user,
        268852,
        'approvalInfo',
        5.5,
      ]);
      expect(testStore.getActions()[1].type).toEqual('CUSTOM_PROMOTIONS/CREATE_CUSTOM_PROMOTION_DONE');
    });

    test('createCustomPromotionEpic emits FAILED action if api call fails', () => {
      const createCampaign = jest.fn(() => Observable.throw('error'));
      const dependencies = { api: { createCampaign } };
      const rootEpic = (action$, store) => customPromotionsEpic(action$, store, dependencies as any);
      const epicMiddleware = createEpicMiddleware(rootEpic);

      const mockStore = configureMockStore([epicMiddleware]);
      testStore = mockStore(state);
      testStore.dispatch(
        actions.createCustomPromotion.started({ formValues: 'formValues', approvalInfo: 'approvalInfo' }),
      );

      expect(testStore.getActions()[1].type).toEqual('CUSTOM_PROMOTIONS/CREATE_CUSTOM_PROMOTION_FAILED');
    });

    test('getCreditsEpic waits for getCredits.started, currentContext.success, calls makeCreditsModel', () => {
      const getCredits = jest.fn(() => of({ coverPrice: 5.0 }));
      const dependencies = { api: { getCredits } };
      const rootEpic = (action$, store) => customPromotionsEpic(action$, store, dependencies as any);
      const epicMiddleware = createEpicMiddleware(rootEpic);

      const mockStore = configureMockStore([epicMiddleware]);
      testStore = mockStore(state);
      testStore.dispatch(actions.getCredits.started({}));

      /* CUSTOM_PROMOTIONS/GET_CREDITS_STARTED & CUSTOM_PROMOTIONS/GET_CREDITS_DONE */
      expect(testStore.getActions().length).toEqual(2);
      expect(getCredits).toHaveBeenCalled();

      expect(testStore.getActions()[1].payload.result).toEqual({
        coverPrice: 5.0,
      });
      expect(testStore.getActions()).toMatchSnapshot();
    });

    test('getCreditsEpic emits FAILED action if api call fails', () => {
      const getCredits = jest.fn(() => Observable.throw('error'));
      const dependencies = { api: { getCredits } };
      const rootEpic = (action$, store) => customPromotionsEpic(action$, store, dependencies as any);
      const epicMiddleware = createEpicMiddleware(rootEpic);

      const mockStore = configureMockStore([epicMiddleware]);
      testStore = mockStore(state);
      testStore.dispatch(actions.getCredits.started({}));

      /* CUSTOM_PROMOTIONS/GET_CREDITS_STARTED & CUSTOM_PROMOTIONS/GET_CREDITS_DONE */
      expect(testStore.getActions().length).toEqual(2);
      expect(getCredits).toHaveBeenCalled();

      expect(testStore.getActions()[1].type).toEqual('CUSTOM_PROMOTIONS/GET_CREDITS_FAILED');
      expect(testStore.getActions()).toMatchSnapshot();
    });
  });
});
