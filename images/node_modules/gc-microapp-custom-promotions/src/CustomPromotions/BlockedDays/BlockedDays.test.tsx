import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import testShowingFieldsOrSummary from '../../../internals/testing/helpers/testShowSummary';
import messages from '../../i18n/custom-promotions';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../constants';
import BlockedDays from './BlockedDays';

jest.mock('../constants', () => {
  const actualConstants = require.requireActual('../constants');
  /* this has to be in here (or in another file completely, required into here, since jest hoists this
    mock call to the top of the file */
  /* tslint:disable */
  const mockDefaultSuppressionDates: { [index: string]: any } = {
    mothers_day_us: {
      checked: true,
      endDate: '2018-05-13',
      isDefault: true,
      label: "Mother's Day",
      startDate: '2018-05-13',
      varies: true,
    },
    thanksgiving_day_us: {
      checked: true,
      endDate: '2018-11-22',
      isDefault: true,
      label: 'Thanksgiving',
      startDate: '2018-11-22',
      varies: true,
    },
    christmas_eve: {
      checked: true,
      endDate: '2018-12-24',
      isDefault: true,
      label: 'Christmas Eve',
      startDate: '2018-12-24',
      varies: false,
    },
    christmas_day: {
      checked: true,
      endDate: '2018-12-25',
      isDefault: true,
      label: 'Christmas Day',
      startDate: '2018-12-25',
      varies: false,
    },
    new_years_eve: {
      checked: true,
      endDate: '2018-12-31',
      isDefault: true,
      label: "New Year's Eve",
      startDate: '2018-12-31',
      varies: false,
    },
    new_years_day: {
      checked: true,
      endDate: '2019-01-01',
      isDefault: true,
      label: "New Year's Day",
      startDate: '2019-01-01',
      varies: false,
    },
    valentines_day: {
      checked: true,
      endDate: '2019-02-14',
      isDefault: true,
      label: "Valentine's Day",
      startDate: '2019-02-14',
      varies: false,
    },
  };
  /* tslint:enable */

  return Object.assign({}, actualConstants, { defaultSuppressionDates: mockDefaultSuppressionDates });
});

jest.mock('../Modal/Modal', () => {
  return () => 'Modal';
});

jest.mock('./BlockedDaysSummary', () => () => 'BlockedDaysSummary');

const makeDecorated = () => {
  const options = {
    form: CUSTOM_PROMOTIONS_FORM_NAME,
  };
  return reduxForm<any, any>(options)(BlockedDays);
};

const renderComponent = (props: any, blockedDays: any) => {
  const Decorated = makeDecorated();
  const store = configureMockStore([])({
    form: {
      [CUSTOM_PROMOTIONS_FORM_NAME]: {
        values: {
          ...blockedDays,
        },
      },
    },
  });
  return {
    store,
    wrapper: mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={messages}>
          <Decorated {...props} />
        </IntlProvider>
      </Provider>,
    ),
  };
};

describe('<BlockedDays />', () => {
  test('Render 2 blocked default, 1 custom, and 1 unblocked default', () => {
    const { wrapper, store } = renderComponent(
      { isOpen: true },
      { default: { mothers_day_us: true, new_years_day: true, new_years_eve: false }, custom: { '2018-01-05': true } },
    );

    const enabledDefault = wrapper.find('.enabled-default li');
    expect(enabledDefault.length).toEqual(2);

    const enabledCustom = wrapper.find('.enabled-custom li.custom');
    expect(enabledCustom.length).toEqual(1);

    const disabledDefault = wrapper.find('.disabled-default li');
    expect(disabledDefault.length).toEqual(1);
  });

  test('Render no blocked defaults, no custom, and no unblocked default', () => {
    const { wrapper, store } = renderComponent({ isOpen: true }, { default: {}, custom: {} });

    const enabledDefault = wrapper.find('.enabled-default li');
    expect(enabledDefault.length).toEqual(0);

    const enabledCustom = wrapper.find('.enabled-custom li.custom');
    expect(enabledCustom.length).toEqual(0);

    const disabledDefault = wrapper.find('.disabled-default li');
    expect(disabledDefault.length).toEqual(0);
  });

  test('show show fields when isOpen, summary when !isOpen', () => {
    /* This test will throw an error about "Failed prop type: Invalid prop `component` supplied to `FormSection`."
      It is caused by our usage of React.Fragment in the component prop of (you guessed it) FormSection, and can
      be safely ignored. When the next redux form is released we can upgrade to it and it will go away.

      More info:
      https://github.com/erikras/redux-form/pull/3995
      */
    testShowingFieldsOrSummary(makeDecorated(), false, { custom: {}, default: {} });
    testShowingFieldsOrSummary(makeDecorated(), true, { custom: {}, default: {} });
  });

  test("click to open modal, calling Modal's close closes modal", () => {
    const { wrapper } = renderComponent({ isOpen: true }, { default: {}, custom: {} });

    const clickToOpen = wrapper.find('.enabled-custom li.action');

    let modal: any = wrapper.find('BlockedDatesPickerModal');
    expect(modal.length).toEqual(0);

    clickToOpen.simulate('click');

    modal = wrapper.find('BlockedDatesPickerModal');
    expect(modal.length).toEqual(1);

    modal.props().close();
    /* manually re-render the component since our close call is triggered outside of the knowledge of enzyme */
    wrapper.update();

    modal = wrapper.find('BlockedDatesPickerModal');
    expect(modal.length).toEqual(0);
  });

  test("opening modal translates suppression dates, confirming from Modal calls 'change' with new dates", () => {
    /* This test uses the store.getActions to verify the behavior of the `confirm` function passed
      to BlockedDatesPickerModal because the reduxForm function passes change as an action creator to the
      component it is decorating.

      Since it's being used directly in this test on the BlockedDays component,
      it will overwrite a passed 'change' jest.fn, though normally in the actual implementation, reduxForm wraps
      an ancestor component, not this one. */
    const customDates = ['2018-02-06', '2018-02-02', '2018-04-03'];
    const defaultDates = ['mothers_day_us', 'new_years_day', 'new_years_eve'];

    const enabledCustom = [
      { startDate: customDates[1], endDate: customDates[1] },
      { startDate: customDates[2], endDate: customDates[2] },
    ];
    const disabledCustom = [{ startDate: customDates[0], endDate: customDates[0] }];

    const { wrapper, store } = renderComponent(
      { isOpen: true },
      {
        custom: { [customDates[0]]: false, [customDates[1]]: true, [customDates[2]]: true },
        default: { [defaultDates[0]]: true, [defaultDates[1]]: true, [defaultDates[2]]: false },
      },
    );

    const clickToOpen = wrapper.find('.enabled-custom li.action');
    clickToOpen.simulate('click');

    const modal: any = wrapper.find('BlockedDatesPickerModal');
    const { suppressionDates, confirm } = modal.props();
    expect(suppressionDates.custom).toContainEqual(enabledCustom[0]);
    expect(suppressionDates.custom).toContainEqual(enabledCustom[1]);
    expect(suppressionDates.custom).not.toContainEqual(disabledCustom[0]);

    expect(suppressionDates.default).toContainEqual(defaultDates[0]);
    expect(suppressionDates.default).toContainEqual(defaultDates[1]);
    expect(suppressionDates.default).not.toContainEqual(defaultDates[2]);

    let actions = store.getActions();

    expect(actions[actions.length - 1].type).toEqual('@@redux-form/REGISTER_FIELD');

    confirm({ custom: enabledCustom, default: defaultDates.slice(0, 2) });

    actions = store.getActions();

    expect(actions[actions.length - 1].type).toEqual('@@redux-form/CHANGE');
    expect(actions[actions.length - 2].type).toEqual('@@redux-form/CHANGE');
  });
});
