import { Button } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import React, { SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { State } from 'store/types';
import { CreditsModel } from '../../store/customPromotions/customPromotions.types';
import { CAMPAIGNS_EMAIL } from '../constants';
import { DoneIcon } from '../images/DoneIcon';
import RestaurantName from '../RestaurantName/RestaurantName';
import ReadOnlyDraftCampaign from '../TermsAndConditions/ReadOnlyDraftCampaign';

import './FinishedPage.scss';

interface SP {
  credits: CreditsModel;
  formValuesSnapshot: any;
  userEmail: string;
  rid: number;
}

type Props = SP;

const FinishedPage: SFC<Props> = ({ credits, formValuesSnapshot, userEmail, rid }) => (
  <div className="finished-page">
    <DoneIcon />
    <FormattedMessage id="guestcampaigns.custom_promotions.finished.title" tagName="h3" />
    <div className="campaign-summary">
      <RestaurantName />
      <ReadOnlyDraftCampaign
        credits={credits}
        formValuesSnapshot={formValuesSnapshot}
        className={'finished-page-readonly-campaign'}
      />
    </div>
    <FormattedMessage
      id="guestcampaigns.custom_promotions.finished.weekly_email_reports"
      values={{ email: <span className="email">{userEmail}</span> }}
      tagName="span"
    />
    <FormattedMessage
      id="guestcampaigns.custom_promotions.finished.any_questions"
      // tslint:disable-next-line:object-literal-key-quotes
      values={{ 'campaigns-email': <a href={`mailto:${CAMPAIGNS_EMAIL}`}>{CAMPAIGNS_EMAIL}</a> }}
      tagName="span"
    />
    <a href={`/admin/marketing/${rid}/custom-promotions`} className="bottom-link got-it-link">
      <Button className="bottom got-it" theme="primary">
        <FormattedMessage id="guestcampaigns.custom_promotions.finished.ok_got_it" tagName="span" />
      </Button>
    </a>
  </div>
);

const mapState = (state: State) => ({
  credits: state.customPromotions.credits.model!,
  formValuesSnapshot: state.customPromotions.create.formValuesSnapshot,
  rid: selectors.rid(state),
  userEmail: selectors.user(state).userName,
});

export default connect<SP, {}, {}>(mapState, {})(FinishedPage);
