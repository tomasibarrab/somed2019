import React, { Component } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { ChildComponentProps } from '../commonTypes';
import { dayOrdering, days as daysInfo } from './constants';
import DayAndTimes from './DayAndTimes';
import './DaysAndTimes.scss';

interface State {
  days: { [index: string]: boolean };
}

type OP = ChildComponentProps;

type Props = OP & InjectedIntlProps;

class DaysAndTimesList extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      days: dayOrdering.reduce((accumulator: any, dayName) => {
        accumulator[dayName] = dayOrdering[1] === dayName;
        return accumulator;
      }, {}),
    };
  }

  public render() {
    const { days } = this.state;
    return (
      <ul>
        {dayOrdering.map((key: string) => (
          <DayAndTimes
            expanded={days[key]}
            key={key}
            label={daysInfo[key].label}
            onClickDay={value => this.onClickDay(key, value)}
          />
        ))}
      </ul>
    );
  }
  private onClickDay(key: string, value: boolean) {
    /* Safer to use functional setState and object spread to create
      a new state: using Object.assign on `days` doesn't deeply create new
      day objects, so modifying them and calling setState(// the new days)
      is really updating the state before React would have done it itself. */
    this.setState(prevState => ({
      days: {
        ...prevState.days,
        [key]: value,
      },
    }));
  }
}

export default DaysAndTimesList;
