import React from 'react';
import { render, fireEvent } from 'react-testing-library';
import { CheckboxFilter } from './CheckboxFilter';

const options = [
  {
    id: 'flat-unchecked',
    label: 'Flat Unchecked',
    state: 'unchecked'
  },
  {
    id: 'flat-checked',
    label: 'Flat Checked',
    state: 'checked'
  },
  {
    id: 'test-nested-partial',
    label: 'Test Nested Partial',
    state: 'partial',
    options: [
      {
        id: 'nested-unchecked',
        label: 'Nested Unchecked',
        state: 'unchecked'
      },
      {
        id: 'nested-checked',
        label: 'Nested Checked',
        state: 'checked'
      }
    ]
  }
];

async function renderScenario(scenarioProps: any = {}) {
  const defaultProps = {
    applyLabel: 'Apply',
    onApply: () => {},
    onClick: () => {}
  };

  const props = {
    ...defaultProps,
    ...scenarioProps
  };

  const toggleAllOptions = {
    isVisible: true,
    label: 'Global Label',
    toggleCount: 'selectedOfAll'
  };

  const result = render(<CheckboxFilter options={options} toggleAll={toggleAllOptions} {...props} />);

  return result;
}

test('Should render', async () => {
  const result = await renderScenario();
  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should return the correct data from apply', async () => {
  const spyApply = jest.fn();
  const { getByText } = await renderScenario({ onApply: spyApply });
  const ApplyButton = getByText('Apply').parentElement;

  if (!ApplyButton) throw new Error('No Apply Button');

  fireEvent.click(ApplyButton);

  const checkedIds = ['flat-checked', 'nested-checked'];

  expect(spyApply).toHaveBeenCalledTimes(1);
  expect(spyApply).toHaveBeenCalledWith(checkedIds, options);
});

test('Should render checkbox-filter with no search callback', async () => {
  const result = await renderScenario({
    searchable: true,
    searchPlaceholderText: 'Search'
  });
  const SearchBox = result.getByPlaceholderText('Search') as HTMLInputElement;

  fireEvent.change(SearchBox, {
    target: { value: 'Test' }
  });

  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render checkbox-filter with search callback', async () => {
  const searchCallback = jest.fn();
  const result = await renderScenario({
    searchable: true,
    searchPlaceholderText: 'Search',
    onSearchTextChange: searchCallback
  });
  const SearchBox = result.getByPlaceholderText('Search') as HTMLInputElement;

  fireEvent.change(SearchBox, {
    target: { value: 'Test' }
  });

  expect(searchCallback).toHaveBeenCalledTimes(1);
});
