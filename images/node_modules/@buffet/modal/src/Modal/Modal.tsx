import React from 'react';

// TODO: move these into standalone components
import ContentLayer, { StackingIndex } from '../utils/ContentLayer';

// local imports (sub-components)
import ModalOverlay from '../Overlay/Overlay';
import ModalWindow from '../Window/Window';
import ModalContent from '../Content/Content';
import ModalFooter, { ModalFooterProps } from '../Content/Footer';
import ModalHeader, { ModalHeaderProps } from '../Content/Header';

// utils
import useOpenClose from '../utils/useOpenClose';
import { ModalType } from '../types';


interface ModalProps {
  open: boolean; // prop to dictate the open state of the Modal
  onOpen?: () => void; // called after the opening animation
  onClose?: () => void; // called after the closing animation
  onCloseRequest: () => void; // request a closing from inside the Modal
  // styling props
  type?: ModalType;
  fullscreenAutoHeight?: boolean;
  // ...
  children?: any;
}

const Modal = ({
  open,
  onOpen,
  onClose,
  onCloseRequest,
  type = ModalType.default,
  fullscreenAutoHeight = false,
  preventClose = false,
  title,
  acknowledgeLabel,
  onAcknowledge,
  dismissLabel,
  onDismiss,
  children
}: ModalProps & ModalHeaderProps & ModalFooterProps) => {
  const { isOpen, isClosing, modalRef } = useOpenClose(open, onOpen, onClose);

  if (!isOpen) {
    return null;
  }

  return (
    <ContentLayer
      layerType={StackingIndex.Modal}
      global={true}
      globalId="modals"
    >
      <ModalWindow
        ref={modalRef}
        isClosing={isClosing}
        type={type}
        fullscreenAutoHeight={fullscreenAutoHeight}
      >
        {(title || !preventClose) && (
          <ModalHeader
            title={title}
            preventClose={preventClose}
            onCloseRequest={onCloseRequest}
            modalType={type}
          />
        )}

        <ModalContent modalType={type}>
          {children}
        </ModalContent>

        {(acknowledgeLabel || dismissLabel) && (
          <ModalFooter
            acknowledgeLabel={acknowledgeLabel}
            onAcknowledge={onAcknowledge || onCloseRequest}
            dismissLabel={dismissLabel}
            onDismiss={onDismiss || onCloseRequest}
            modalType={type}
          />
        )}
      </ModalWindow>
      <ModalOverlay
        isClosing={isClosing}
        requestClose={preventClose ? undefined : onCloseRequest}
      />
    </ContentLayer>
  );
};

export default Modal;
