import { boolean, select, text, withKnobs } from '@storybook/addon-knobs';
import { storiesOf } from '@storybook/react';
import React, { useCallback, useState } from 'react';
import { withReadme } from 'storybook-readme';

import README from './README.md';
import Modal, { ModalType } from './src';
import { ModalFooterProps } from './src/Content/Footer';
import { ModalHeaderProps } from './src/Content/Header';

interface StoryProps {
  type?: ModalType;
  autoHeight?: boolean;
  preventClose?: boolean;
  children: any;
}

function ModalStory({
  type = ModalType.default,
  autoHeight = false,
  preventClose = false,
  title,
  acknowledgeLabel,
  onAcknowledge,
  dismissLabel,
  children
}: StoryProps & ModalHeaderProps & ModalFooterProps) {
  const [isOpen, setIsOpen] = useState(true);

  const toggleModal = useCallback(() => {
    setIsOpen(!isOpen);
  }, [isOpen]);

  const closeModal = useCallback(() => {
    setIsOpen(false);
  }, []);

  const onModalOpen = useCallback(() => {
    console.log('Modal opened');
  }, []);

  const onModalClose = useCallback(() => {
    console.log('Modal closed');
  }, []);

  const acknowledgeModal = useCallback(() => {
    console.log('Acknowledged');
    closeModal();
  }, [closeModal]);

  const dismissModal = useCallback(() => {
    console.log('Dismissed');
    closeModal();
  }, [closeModal]);

  return (
    <div style={{ padding: '20px', maxWidth: '600px', backgroundColor: 'white' }}>
      <button onClick={toggleModal}>Open modal</button>

      <Modal
        open={isOpen}
        onCloseRequest={closeModal}
        onOpen={onModalOpen}
        onClose={onModalClose}
        type={type}
        preventClose={preventClose}
        fullscreenAutoHeight={autoHeight}
        title={title}
        {...(acknowledgeLabel || dismissLabel) && {
          acknowledgeLabel: acknowledgeLabel,
          onAcknowledge: onAcknowledge || acknowledgeModal,
          dismissLabel: dismissLabel,
          onDismiss: dismissModal,
        }}
      >
        {children}
      </Modal>
    </div>
  );
}

function NestedModalStory() {
  const [nested, setNested] = useState(true);

  const openNested = useCallback(() => {
    setNested(true);
  }, []);
  const closeNested = useCallback(() => {
    setNested(false);
  }, []);

  return (
    <ModalStory
      type={ModalType.prompt}
      acknowledgeLabel="Open nested modal"
      onAcknowledge={openNested}
      dismissLabel="Cancel"
    >
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
      <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
      <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
      <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
      <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>

      <Modal
        open={nested}
        onCloseRequest={closeNested}
        type={ModalType.prompt}
        title="Nested modal"
        acknowledgeLabel="Ok, close it"
      >
        <p>Second Modal triggered from the main one.</p>
      </Modal>
    </ModalStory>
  );
}

storiesOf('Modal', module)
  .addDecorator(withReadme(README))
  .add('Regular', () => {
    return (
      <ModalStory>
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
        <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
        <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
        <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
        <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>
      </ModalStory>
    );
  })
  .add('Prompt', () => {
    return (
      <ModalStory
        type={ModalType.prompt}
        title="Are you sure?"
        acknowledgeLabel="OK"
        dismissLabel="Close"
      >
        <p>This requires your attention and you have to play along.</p>
      </ModalStory>
    );
  })
  .add('Full-screen', () => {
    return (
      <ModalStory type={ModalType.fullscreen}>
        <p>
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi architecto atque consequatur delectus
          deleniti, ducimus enim facilis harum ipsum iste, maiores minus nesciunt nulla numquam quasi reiciendis
          repudiandae sequi veritatis!
        </p>
        <p>
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi cumque delectus illo veritatis vero.
          Architecto eos ipsa numquam quia? Aperiam autem consectetur corporis dolor doloremque labore laborum
          repudiandae similique voluptates.
        </p>
        <p>
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, aperiam atque cumque delectus dolore, doloremque
          error iusto laudantium mollitia non nostrum odio odit quam quia quidem, repellat sunt vitae voluptatibus?
        </p>
      </ModalStory>
    );
  })
  .add('Pinned to bottom', () => {
    return (
      <ModalStory type={ModalType.fullscreen} autoHeight={true} title="Check out these items:">
        <ul>
          <li>* Some thing</li>
          <li>* Other thing</li>
          <li>* Many things</li>
          <li>* Or nothing at all</li>
        </ul>
      </ModalStory>
    );
  })
  .add('Non-dismissible', () => {
    return (
      <ModalStory type={ModalType.prompt} acknowledgeLabel="OK, I got it" preventClose={true} title="Please pay attention!">
        <p>You musk acknowledge this prompt.</p>
        <p>You cannot close it by other means.</p>
      </ModalStory>
    );
  })
  .add('Nested', () => {
    return <NestedModalStory />;
  })
  .addDecorator(withKnobs)
  .add('Knobs playground', () => {
    const state = boolean('Open', true, 'Layout');
    const type = select('Type', [ModalType.default, ModalType.prompt, ModalType.fullscreen], ModalType.default, 'Layout');
    const fullscreenAutoHeight = boolean('Full-screen auto-height', false, 'Layout');
    const aLotOfContent = boolean('A lot of content', false, 'Layout');

    const preventClose = boolean('Prevent Close', false, 'Header');
    const title = boolean('Show title', true, 'Header');
    const titleText = text('Title text', 'Modal title...', 'Header');

    const acknowledgeButton = boolean('Acknowledge button', true, 'Footer');
    const acknowledgeButtonLabel = text('Acknowledge label', 'OK', 'Footer');
    const dismissButton = boolean('Dismiss button', false, 'Footer');
    const dismissButtonLabel = text('Dismiss label', 'Cancel', 'Footer');

    const fewContentBlocks = [1];
    const manyContentBlocks = [1, 2, 3, 4, 5, 6];

    return (
      <Modal
        open={state}
        onCloseRequest={() => alert('close')}
        onOpen={() => {}}
        onClose={() => {}}
        type={type}
        preventClose={preventClose}
        fullscreenAutoHeight={fullscreenAutoHeight}
        title={title ? titleText : undefined}
        acknowledgeLabel={acknowledgeButton ? acknowledgeButtonLabel : undefined}
        onAcknowledge={() => alert('Acknowledged')}
        dismissLabel={dismissButton ? dismissButtonLabel : undefined}
        onDismiss={() => alert('Dismissed')}
      >
        {(aLotOfContent ? manyContentBlocks : fewContentBlocks)
          .map(() => (
            <>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
              <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
              <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
              <p>Aliquam atque culpa cupiditate delectus dolore error fugiat hic id in itaque.</p>
              <p>Libero natus, perferendis quasi saepe sed sequi, sint, soluta?</p>
              {aLotOfContent && <p>&nbsp;</p>}
            </>
          ))
        }
      </Modal>
    );
  });
