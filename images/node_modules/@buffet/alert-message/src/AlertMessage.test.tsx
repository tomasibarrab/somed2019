import React from 'react';
import { render, fireEvent, wait } from 'react-testing-library';
import { AlertMessage } from './AlertMessage';

describe('AlertMessage', () => {
  const id = 'my-id';
  const handleClose = jest.fn();

  function renderAlert(msgType: 'success' | 'error', onClose?: (id: string) => void) {
    return <AlertMessage id={id} iconId="success" type={msgType} message="This is alert" onClose={onClose} />;
  }

  it('should render a success Alert with onClose', async () => {
    const result = await render(renderAlert('success', handleClose));
    expect(result.container.firstChild).toMatchSnapshot();
  });

  it('should render a success Alert without onClose', async () => {
    const result = await render(renderAlert('success'));
    expect(result.container.firstChild).toMatchSnapshot();
  });

  it('should render a error Alert with onClose', async () => {
    const result = await render(renderAlert('error', handleClose));
    expect(result.container.firstChild).toMatchSnapshot();
  });

  it('should render a error Alert without onClose', async () => {
    const result = await render(renderAlert('error'));
    expect(result.container.firstChild).toMatchSnapshot();
  });

  it('should render a error Alert with close button and handler when is clicked', async () => {
    const result = await render(renderAlert('error', handleClose));
    const button = result.getByTestId(`${id}-close-bt`);
    fireEvent.click(button);
    await wait(() => expect(handleClose).toHaveBeenCalled());
  });

  it('should render a error Alert without close button', async () => {
    const result = await render(renderAlert('error'));
    const button = result.queryByTestId(`${id}-close-bt`);
    await wait(() => expect(button).toBe(null));
  });
});
