import React from 'react';
import classNames from 'classnames/bind';

import styles from './Notify.css';

const cx = classNames.bind(styles);

export interface NotifyProps {
  show: boolean;
  autohide: boolean;
  delay: number;
  children: ((show: boolean) => React.ReactNode) | React.ReactNode;
  onTransitioned?: (show: boolean) => void;
}

export function Notify({ show, children, delay, autohide, onTransitioned }: NotifyProps) {
  const [visible, setVisible] = React.useState(show);
  const dropdownEl = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    setVisible(show);
    if (autohide && show) {
      setTimeout(() => setVisible(false), delay * 1000);
    }
  }, [show]);

  /* istanbul ignore next */
  const transitionHandler = React.useCallback(
    (event: TransitionEvent) => {
      if (onTransitioned && event.propertyName === 'opacity') {
        onTransitioned(visible);
      }
    },
    [onTransitioned, visible]
  );

  /* istanbul ignore next */
  React.useEffect(() => {
    if (dropdownEl.current) {
      dropdownEl.current.addEventListener('transitionend', transitionHandler);
    }
    return () => {
      if (dropdownEl.current) {
        dropdownEl.current.removeEventListener('transitionend', transitionHandler);
      }
    };
  }, [transitionHandler]);

  return (
    <div ref={dropdownEl} role="message" className={cx('dropdown-message', `${visible ? 'show' : 'hide'}`)}>
      <div>{children instanceof Function ? children(visible) : children}</div>
    </div>
  );
}
