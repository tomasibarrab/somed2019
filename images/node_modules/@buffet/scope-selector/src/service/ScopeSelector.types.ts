export interface BaseRestaurant {
  rid: number;
  name: string | null;
}

interface AddressResponse {
  city?: string | null;
  country?: string | null;
}

interface Address {
  city?: string | null;
  countryCode?: string | null;
}

// Calls to restaurant search return restaurants in this format
export interface RestaurantSearchItemDTO extends BaseRestaurant {
  addressResponse?: AddressResponse | null;
}

export interface Restaurant extends BaseRestaurant {
  city?: string;
  country?: string;
  isTestRestaurant: boolean;
}

// In the Angular version of the Chrome, "UserRecentRestaurants" will be primed from context.
// https://github.com/opentable/gc-rid-selector/blob/dev/src/script/GcUserRecentRestaurants.js#L72-L76
// TODO: Remove this and refactor the rest of the code that relies on it once the Angular version is retired.
export interface RestaurantDTO extends BaseRestaurant {
  testRestaurant?: boolean;
  isTestRestaurant?: boolean;
  addressResponse?: AddressResponse | null;
  address?: Address | null;
  city?: string | null;
  country?: string | null;
}

export interface SearchDTO<T> {
  items: T[];
  totalPages: number;
  pageIndex: number;
  pageSize: number;
  totalResults: number;
}

export interface GroupSearchItemDTO {
  gid: number;
  name: string;
}

export interface InitState {
  status: 'init';
  data: undefined;
}

export interface StartedState {
  status: 'started';
  data: undefined;
}

export interface DoneState<T> {
  status: 'done';
  data: T;
}

export interface FailedState {
  status: 'failed';
  data: undefined;
}

export type AsyncState<T> = InitState | StartedState | DoneState<T> | FailedState;

export type RestaurantSearchState = AsyncState<Restaurant[]>;
export type GroupSearchState = AsyncState<GroupSearchItemDTO[]>;
