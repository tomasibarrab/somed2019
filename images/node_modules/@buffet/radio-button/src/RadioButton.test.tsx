import React from 'react';
import { render, fireEvent } from 'react-testing-library';
import { RadioButton } from './RadioButton';
import { checkPropTypes } from '../../../../node_modules/@types/prop-types';

test('Should render radio button', async () => {
  const result = render(<RadioButton label={'Test'} value={'value'} />);
  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should render radio button with checked', async () => {
  const result = render(<RadioButton checked={true} label={'Test'} value={'value'} />);
  expect(result.container.firstChild).toMatchSnapshot();
});

test('Should trigger onChange for radio button', () => {
  const mockOnChange = jest.fn();
  const { container, getByText } = render(
    <RadioButton checked={true} label={'Test'} value={'value'} onChange={mockOnChange} />
  );
  fireEvent.click(getByText('Test'));
  expect(mockOnChange).toHaveBeenCalled();
});

test('Should trigger onChange for radio button with react node', () => {
  const mockOnChange = jest.fn();
  const { container, getByText } = render(
    <RadioButton checked={true} label={<span>Test</span>} value={'value'} onChange={mockOnChange} />
  );
  fireEvent.click(getByText('Test'));
  expect(mockOnChange).toHaveBeenCalled();
});

test('Should trigger onChange for radio button with disabled mode', () => {
  const mockOnChange = jest.fn();
  const { container, getByText } = render(
    <RadioButton checked={true} disabled={true} label={<span>Test</span>} value={'value'} onChange={mockOnChange} />
  );
  fireEvent.click(getByText('Test'));
  expect(mockOnChange).toHaveBeenCalled();
});

test('Should run fine without onChange for radio button', () => {
  const cancel = () => undefined;
  const { container, getByText } = render(<RadioButton checked={true} label={'Test'} value={'value'} />);
  fireEvent.click(getByText('Test'));
});
