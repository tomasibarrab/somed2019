/* eslint-disable consistent-return  */
/* eslint-disable import/no-named-as-default  */
/* eslint-disable import/no-named-as-default-member  */
import React from 'react';
import { fireEvent, render } from 'react-testing-library';
import PhoneInput from './PhoneInput';

const LABEL_TEXT = 'Phone Input';

const scenarioConfig = [
  // Initialization
  {
    name: 'Initialization',
    scenarios: [
      {
        name: 'With an empty value',
        scenarios: [
          {
            name: 'Should render an empty input',
            sequence: [],
            expectIsValid: false,
            displayedValue: '',
            emittedValue: undefined
          },
          {
            name: 'Focus should have no affect',
            sequence: ['focus'],
            expectIsValid: false,
            displayedValue: '',
            emittedValue: undefined
          },
          {
            name: 'Blur should have no affect',
            sequence: ['focus', 'blur'],
            expectIsValid: false,
            displayedValue: '',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a valid local number (without international prefix)',
        scenarios: [
          {
            name: 'Should format display as local number',
            props: { value: '5302773976' },
            sequence: [],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          },
          {
            name: 'Focus should show the raw number',
            props: { value: '5302773976' },
            sequence: ['focus'],
            expectIsValid: true,
            displayedValue: '5302773976',
            emittedValue: undefined
          },
          {
            name: 'Blur should format display as local number',
            props: { value: '5302773976' },
            sequence: ['focus', 'blur'],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a valid, oddly formatted local number (without international prefix)',
        scenarios: [
          {
            name: 'Should format display as local number',
            props: { value: ' (530) 277--3976 ' },
            sequence: [],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          },
          {
            name: 'Focus should show the raw number',
            props: { value: ' (530) 277--3976 ' },
            sequence: ['focus'],
            expectIsValid: true,
            displayedValue: ' (530) 277--3976 ',
            emittedValue: undefined
          },
          {
            name: 'Blur should format display as local number',
            props: { value: ' (530) 277--3976 ' },
            sequence: ['focus', 'blur'],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a valid local number (with international prefix)',
        scenarios: [
          {
            name: 'Should format display as local number',
            props: { value: '+15302773976' },
            sequence: [],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          },
          {
            name: 'Focus should show the raw number',
            props: { value: '+15302773976' },
            sequence: ['focus'],
            expectIsValid: true,
            displayedValue: '+15302773976',
            emittedValue: undefined
          },
          {
            name: 'Blur should format display as local number',
            props: { value: '+15302773976' },
            sequence: ['focus', 'blur'],
            expectIsValid: true,
            displayedValue: '(530) 277-3976',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a partial, standard number (with international prefix)',
        scenarios: [
          {
            name: 'Should not attempt to format the number',
            props: { value: '530277', error: 'Invalid phone number' },
            sequence: [],
            expectIsValid: false,
            displayedValue: '530277',
            emittedValue: undefined
          },
          {
            name: 'Focus should have no affect',
            props: { value: '530277' },
            sequence: ['focus'],
            expectIsValid: false,
            displayedValue: '530277',
            emittedValue: undefined
          },
          {
            name: 'Blur should have no affect',
            props: { value: '530277' },
            sequence: ['focus', 'blur'],
            expectIsValid: false,
            displayedValue: '530277',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a valid international number',
        scenarios: [
          {
            name: 'Should format display as an international number',
            props: { value: '+442030115900' },
            sequence: [],
            expectIsValid: true,
            expectedCountry: 'GB',
            displayedValue: '+44 20 3011 5900',
            emittedValue: undefined
          },
          {
            name: 'Focus should show the raw number',
            props: { value: '+442030115900' },
            sequence: ['focus'],
            expectIsValid: true,
            expectedCountry: 'GB',
            displayedValue: '+442030115900',
            emittedValue: undefined
          },
          {
            name: 'Blur should format display as an international number',
            props: { value: '+442030115900' },
            sequence: ['focus', 'blur'],
            expectIsValid: true,
            expectedCountry: 'GB',
            displayedValue: '+44 20 3011 5900',
            emittedValue: undefined
          }
        ]
      },

      {
        name: 'With a non-standard number',
        scenarios: [
          {
            name: 'Should format display as an international number',
            props: { value: '1-800-OPENTABLE' },
            sequence: [],
            expectIsValid: false,
            expectedCountry: 'US',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: undefined
          },
          {
            name: 'Focus should show the raw number',
            props: { value: '1-800-OPENTABLE' },
            sequence: ['focus'],
            expectIsValid: false,
            expectedCountry: 'US',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: undefined
          },
          {
            name: 'Blur should format display as an international number',
            props: { value: '1-800-OPENTABLE' },
            sequence: ['focus', 'blur'],
            expectIsValid: false,
            expectedCountry: 'US',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: undefined
          }
        ]
      }
    ]
  },

  // Pasting
  {
    name: 'Pasting',
    scenarios: [
      {
        name: 'A valid local number (without international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as pasted',
            sequence: ['focus', '5302773976'],
            displayedValue: '5302773976',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', '5302773976', 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A valid, oddly formatted local number (without international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as pasted without any trimming, etc.',
            sequence: ['focus', ' (530) 277--3976 '],
            displayedValue: ' (530) 277--3976 ',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', ' (530) 277--3976 ', 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A valid local number (with international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as pasted, along with the default country prefix',
            sequence: ['focus', '+15302773976'],
            displayedValue: '+15302773976',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', '+15302773976', 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A partial, standard number (with international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as pasted, along with the default country prefix',
            sequence: ['focus', '+1530277'],
            displayedValue: '+1530277',
            emittedValue: { isValid: false, value: '+1530277' }
          },
          {
            name: 'Blur should not attempt to format the number',
            sequence: ['focus', '+1530277', 'blur'],
            displayedValue: '530277',
            emittedValue: { isValid: false, value: '+1530277' }
          }
        ]
      },

      {
        name: 'A valid international number',
        scenarios: [
          {
            name: 'Should show the raw number as pasted',
            sequence: ['focus', '+442030115900'],
            expectedCountry: 'GB',
            displayedValue: '+442030115900',
            emittedValue: { isValid: true, value: '+442030115900' }
          },
          {
            name: 'Blur should show as formatted international number',
            sequence: ['focus', '+442030115900', 'blur'],
            expectedCountry: 'GB',
            displayedValue: '+44 20 3011 5900',
            emittedValue: { isValid: true, value: '+442030115900' }
          }
        ]
      },

      {
        name: 'A non-standard number',
        scenarios: [
          {
            name: 'Should show the raw number as pasted',
            sequence: ['focus', '1-800-OPENTABLE'],
            expectedCountry: 'INTL',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: { isValid: false, value: '1-800-OPENTABLE' }
          },
          {
            name: 'Blur should not attempt to format the number',
            sequence: ['focus', '1-800-OPENTABLE', 'blur'],
            expectedCountry: 'INTL',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: { isValid: false, value: '1-800-OPENTABLE' }
          }
        ]
      }
    ]
  },

  // Sequential Entry
  {
    name: 'Sequential Entry',
    scenarios: [
      {
        name: 'A valid local number (without international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as entered',
            sequence: ['focus', ...Array.from('5302773976')],
            displayedValue: '5302773976',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', ...Array.from('5302773976'), 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A valid, oddly formatted local number (without international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as entered',
            sequence: ['focus', ...Array.from(' (530) 277--3976 ')],
            displayedValue: ' (530) 277--3976 ',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', ...Array.from(' (530) 277--3976 '), 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A valid local number (with international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as entered, along with the default country prefix',
            sequence: ['focus', ...Array.from('+15302773976')],
            displayedValue: '+15302773976',
            emittedValue: { isValid: true, value: '+15302773976' }
          },
          {
            name: 'Blur should show as a local number',
            sequence: ['focus', ...Array.from('+15302773976'), 'blur'],
            displayedValue: '(530) 277-3976',
            emittedValue: { isValid: true, value: '+15302773976' }
          }
        ]
      },

      {
        name: 'A partial, standard number (with international prefix)',
        scenarios: [
          {
            name: 'Should show the raw number as entered, along with the default country prefix',
            sequence: ['focus', ...Array.from('+1530277')],
            expectedCountry: 'US',
            displayedValue: '+1530277',
            emittedValue: { isValid: false, value: '+1530277' }
          },
          {
            name: 'Blur should not attempt to format the number',
            sequence: ['focus', ...Array.from('+1530277'), 'blur'],
            expectedCountry: 'US',
            displayedValue: '530277',
            emittedValue: { isValid: false, value: '+1530277' }
          }
        ]
      },

      {
        name: 'A valid international number',
        scenarios: [
          {
            name: 'Should show the raw number as entered',
            sequence: ['focus', ...Array.from('+442030115900')],
            expectedCountry: 'GB',
            displayedValue: '+442030115900',
            emittedValue: { isValid: true, value: '+442030115900' }
          },
          {
            name: 'Blur should show as formatted international number',
            sequence: ['focus', ...Array.from('+442030115900'), 'blur'],
            expectedCountry: 'GB',
            displayedValue: '+44 20 3011 5900',
            emittedValue: { isValid: true, value: '+442030115900' }
          }
        ]
      },

      {
        name: 'A non-standard number',
        scenarios: [
          {
            name: 'Should show the raw number as pasted',
            sequence: ['focus', ...Array.from('1-800-OPENTABLE')],
            expectedCountry: 'INTL',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: { isValid: false, value: '1-800-OPENTABLE' }
          },
          {
            name: 'Blur should not attempt to format the number',
            sequence: ['focus', ...Array.from('1-800-OPENTABLE'), 'blur'],
            expectedCountry: 'INTL',
            displayedValue: '1-800-OPENTABLE',
            emittedValue: { isValid: false, value: '1-800-OPENTABLE' }
          }
        ]
      }
    ]
  },

  // Edge Cases
  {
    name: 'Edge Cases',
    scenarios: [
      {
        name: 'Entering a single digit should emit an empty string',
        sequence: ['focus', '5'],
        displayedValue: '5',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Backspacing to empty should emit an empty string',
        sequence: ['focus', '5', 'bksp'],
        displayedValue: '',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Should not switch away from default country when entering a "+"',
        sequence: ['focus', '+'],
        expectedCountry: 'US',
        displayedValue: '+',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Should switch to INTL display country when entering a digit after a "+"',
        sequence: ['focus', '+', '7'],
        expectedCountry: 'INTL',
        displayedValue: '+7',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Should switch to displaying a new country when an unambiguous match is found',
        sequence: ['focus', '+', '7', '8'],
        expectedCountry: 'RU',
        displayedValue: '+78',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Backspacing after a country has been detected should not reset the country',
        sequence: ['focus', '+', '7', '8', 'bksp'],
        expectedCountry: 'RU',
        displayedValue: '+7',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Backspacing down to a single `+` should not reset the country back to INTL',
        sequence: ['focus', '+', '7', '8', 'bksp', 'bksp'],
        expectedCountry: 'RU',
        displayedValue: '+',
        emittedValue: { isValid: false, value: '' }
      }
    ]
  },

  // Country Select
  {
    name: 'Country Select',
    scenarios: [
      {
        name: 'Selecting a country should swap the displayed flag',
        sequence: ['focus', 'select:GB'],
        expectedCountry: 'GB',
        displayedValue: '',
        emittedValue: { isValid: false, value: '' }
      },
      {
        name: 'Selecting a country other than default should allow entry in a local format',
        sequence: ['focus', 'select:GB', ...Array.from('02030115900')],
        expectedCountry: 'GB',
        displayedValue: '02030115900',
        emittedValue: { isValid: true, value: '+442030115900' }
      },
      {
        name: 'Selecting a country other than default should allow entry in an international format',
        sequence: ['focus', 'select:GB', ...Array.from('+442030115900')],
        expectedCountry: 'GB',
        displayedValue: '+442030115900',
        emittedValue: { isValid: true, value: '+442030115900' }
      },
      {
        name:
          'Selecting a country after entering a number without international prefix should leave the number in local format',
        sequence: ['focus', ...Array.from('5302773976'), 'select:GB'],
        expectedCountry: 'GB',
        displayedValue: '5302773976',
        emittedValue: { isValid: false, value: '+445302773976' }
      },
      {
        name:
          'Selecting a country after entering a number with international prefix should swap the prefix to the new country',
        sequence: ['focus', ...Array.from('+15302773976'), 'select:GB'],
        expectedCountry: 'GB',
        displayedValue: '+445302773976',
        emittedValue: { isValid: false, value: '+445302773976' }
      },
      {
        name: 'Selecting a country after entering a non-standard number should not affect the displayed value',
        sequence: ['focus', ...Array.from('1-800-OPENTABLE'), 'select:GB'],
        expectedCountry: 'GB',
        displayedValue: '1-800-OPENTABLE',
        emittedValue: { isValid: false, value: '1-800-OPENTABLE' }
      }
    ]
  }
];

/** Render our component with some default props */
function renderScenario(partialProps) {
  const wrapper = {};

  const onChange = emittedValue => {
    wrapper.lastEmittedValue = emittedValue;
  };

  const defaultProps = {
    allowNonStandardCharacters: true,
    defaultCountry: 'US',
    label: LABEL_TEXT,
    onChange,
    value: ''
  };

  const props = {
    ...defaultProps,
    ...partialProps
  };

  wrapper.result = render(<PhoneInput {...props} />);

  return wrapper;
}

/**
 * Fire a sequence of input events on the selected `input` component. Fires a
 * callback once all events in the sequence have been completed.
 */
function inputSequence(input, select, sequence, callback) {
  if (sequence.length === 0) {
    return callback();
  }

  const event = sequence.shift();
  const currentValue = input.value;

  if (event === 'focus') {
    fireEvent.focus(input);
  } else if (event === 'blur') {
    fireEvent.blur(input);
  } else if (event.includes('select')) {
    const newCountry = event.split(':')[1];

    fireEvent.change(select, {
      target: { value: newCountry }
    });
  } else {
    const newValue = event === 'bksp' ? currentValue.slice(0, -1) : input.value.concat(event);

    fireEvent.change(input, {
      target: { value: newValue }
    });
  }

  setTimeout(() => {
    inputSequence(input, select, sequence, callback);
  });
}

/**
 * Wraps `inputSequence` in a promise
 */
function promiseSequence(input, select, sequence) {
  return new Promise(resolve => {
    inputSequence(input, select, sequence, resolve);
  });
}

/**
 * Sets up a test based on the config data
 */
function setupTest(scenario) {
  it(scenario.name, () => {
    const wrapper = renderScenario(scenario.props || {});
    const input = wrapper.result.getByPlaceholderText(LABEL_TEXT);
    const select = wrapper.result.getByLabelText('Country');

    return promiseSequence(input, select, scenario.sequence).then(() => {
      const flag = wrapper.result.container.querySelector('.react-phone-number-input__icon-image');
      const showsIntl =
        wrapper.result.container.querySelectorAll('.react-phone-number-input__icon--international').length > 0;
      const country = showsIntl ? 'INTL' : flag.alt;
      const showsValid = wrapper.result.queryByTestId('buffet__phone-input__checkmark') !== null;

      expect(input.value).toBe(scenario.displayedValue);
      expect(country).toBe(scenario.expectedCountry || 'US');

      if (scenario.expectIsValid !== undefined) {
        expect(showsValid).toEqual(scenario.expectIsValid);
      }

      if (scenario.emittedValue) {
        expect(wrapper.lastEmittedValue).toMatchObject(scenario.emittedValue);
      } else {
        expect(wrapper.lastEmittedValue).toBeUndefined();
      }
    });
  });
}

/**
 * Recursively sets up describe blocks and tests
 */
function setupDescribe(scenarios) {
  scenarios.forEach(scenario => {
    if (scenario.scenarios) {
      describe(scenario.name, () => {
        setupDescribe(scenario.scenarios);
      });
    } else {
      setupTest(scenario);
    }
  });
}

/**
 * Kick everything off by passing our config into the setup function
 */
describe('PhoneInput', () => {
  describe('allowNonStandardCharacters mode', () => {
    setupDescribe(scenarioConfig);
  });

  describe('Regular mode', () => {
    it('Should strip non-standard characters from the display of an initial number', () => {
      const wrapper = renderScenario({ value: '1-800-OPENTABLE', allowNonStandardCharacters: false });
      const input = wrapper.result.getByPlaceholderText(LABEL_TEXT);

      expect(input.value).toBe('1800');
    });

    it('Should strip non-standard characters from the display of a pasted number', () => {
      const wrapper = renderScenario({ allowNonStandardCharacters: false });
      const input = wrapper.result.getByPlaceholderText(LABEL_TEXT);

      fireEvent.change(input, {
        target: { value: '1-800-OPENTABLE' }
      });

      expect(input.value).toBe('1800');
    });
  });
});
