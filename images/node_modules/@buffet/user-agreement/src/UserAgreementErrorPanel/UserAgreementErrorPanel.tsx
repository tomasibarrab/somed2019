import React from 'react';
import styles from './UserAgreementErrorPanel.css';
import { ErrorPanel, ErrorPanelType } from '@buffet/error-panel';
import { OTResponseError } from '../UserAgreement.types';
import { injectIntl, InjectedIntlProps, FormattedMessage } from 'react-intl';

export interface ViewProps {
  error: OTResponseError | {};
}

interface Props extends ViewProps, InjectedIntlProps {}

function isOTResponseError(err: OTResponseError | {}): err is OTResponseError {
  //
  // TRICKY: have determined experimentally that when disconnecting network connection before causing an async error,
  // the error is generated without a status property
  //
  return (err as OTResponseError).status !== undefined;
}

class UserAgreementErrorPanelView extends React.Component<Props> {
  render() {
    const { error, intl } = this.props;
    let errorType: ErrorPanelType = 'async';
    let messageId: string;
    let values = {};

    if (!isOTResponseError(error)) {
      messageId = 'async';
    } else {
      errorType = error.status < 500 ? 'general' : 'async';
      const SUPPORT_LINK = 'Support@getvenga.com';

      if (error.status === 401) {
        messageId = 'permission';
      } else if (error.status === 404) {
        //
        // TODO: this error occurs when attempting to create a restaurant agreement where UAS requires a legal
        // entity be defined for a restaurant. UAS enforces this for agreements which have pricing. Unfortunately there
        // is no general support link that can work for all agreements, but hardcoding a specific support link as is
        // done here is clearly bad. This could be exposed as an additional config parameter, but I am reluctant
        // to keep adding to the property interface. The solution which has been promised is for SFDC to create
        // legal entities for all rids which do not yet have one in GC. At that point this error should not occur.
        // Ticket RLP-4979 has been created to drive this.
        //
        messageId = 'invalid';
        values = {
          supportLink: <a href={`mailto:${SUPPORT_LINK}`}>{SUPPORT_LINK}</a>
        };
      } else {
        messageId = 'async';
      }
    }

    return (
      <div className={styles.userAgreementErrorPanel} data-testid="error-message">
        <ErrorPanel
          type={errorType}
          title={intl.formatMessage({ id: `userAgreement.initializationError.${messageId}.title` })}
          message={<FormattedMessage id={`userAgreement.initializationError.${messageId}.message`} values={values} />}
        />
      </div>
    );
  }
}

export const UserAgreementErrorPanel = injectIntl<ViewProps>(UserAgreementErrorPanelView);
export { UserAgreementErrorPanelView as PureUserAgreementErrorPanel };
