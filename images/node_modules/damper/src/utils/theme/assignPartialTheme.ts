import deepMerge from 'lodash.merge';

interface IAssignPartialTheme {
  customTheme: any;
  includeCommon: boolean;
  keys: any[];
  theme: any;
}

/**
 * Loads partial of the default/overwritten theme
 */
export const assignPartialTheme = ({
  customTheme = {},
  includeCommon = true,
  keys = [],
  theme = {},
}: IAssignPartialTheme) => {
  const keyCommon = 'common';
  const hasCommon = includeCommon ? Object.keys(theme).find((v) => v === keyCommon) : '';

  const partials = Object.keys(theme)
    .filter((v) => keys.find((i) => v === i))
    .map((v) => ({ [v]: theme[v] }));

  const common = (hasCommon && hasCommon.length) ? { [keyCommon]: theme[keyCommon] } : {};

  const mergedTheme = Object.assign(
    {},
    ...partials,
    common
  );

  return deepMerge({}, mergedTheme, customTheme);
};
