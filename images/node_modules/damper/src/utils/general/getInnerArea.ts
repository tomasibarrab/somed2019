import { scaleLinear, scalePoint } from 'd3-scale';
import { customPropTypes } from '../index';
import { IOuterAreaBounds } from './getOuterArea';

interface ISlideProps {
  containerWidth: number;
  isDisabled?: boolean;
  minWidth: number;
  windowWidth: number;
}

/**
 * getOuterAreaBounds parameter interface
 */
interface IGetInnerAreaBoundsParams {
  outerAreaBounds: IOuterAreaBounds;
  customColumnOffsets: {
    left: number;
    right: number;
  };
  slideProps?: ISlideProps;
}

/**
 * getOuterAreaBounds return interface
 */
interface IInnerAreaBounds {
  bottom: number;
  height: number;
  left: number;
  right: number,
  top: number;
  width: number;
}

/**
 * getOuterAreaScales parameter interface
 */
interface IGetInnerAreaScalesParams {
  columns: any[];
  customColumnOffsets: {
    left: number;
    right: number;
  };
  outerAreaBounds: IOuterAreaBounds;
  maxY: number;
  theme: any;
  slideProps?: ISlideProps;
}

/**
 * getOuterAreaScales return interface
 */
interface IInnerAreaScales {
  x: any;
  x2: any,
  y: any;
  yInverted: any;
}

/**
 * getOuterArea parameter interface
 */
interface IGetInnerAreaParams extends IGetInnerAreaBoundsParams, IGetInnerAreaScalesParams  {}

/**
 * Gets the area bounds of the line/area/bars of the visualisation
 */
const getInnerAreaBounds = ({ outerAreaBounds, customColumnOffsets = { left: 0, right: 0 }, slideProps }: IGetInnerAreaBoundsParams): IInnerAreaBounds => {
  const columnOffsetsProps = {
    ...customPropTypes.defaultColumnOffsets,
    ...customColumnOffsets,
  };

  const columnOffsets = columnOffsetsProps.left + columnOffsetsProps.right;
  let width = outerAreaBounds.width - columnOffsets > 0 ? outerAreaBounds.width - columnOffsets : 0;

  // If the user is using the graph slider, update the width
  if (slideProps && !slideProps.isDisabled) {
    width = slideProps.minWidth;
  }

  return {
    bottom: outerAreaBounds.bottom,
    height: outerAreaBounds.height,
    left: outerAreaBounds.left + columnOffsetsProps.left,
    right: outerAreaBounds.right + columnOffsetsProps.right,
    top: outerAreaBounds.top,
    width,
  };
}

/**
 * Gets the d3 scales relating to the line/area/bars of the visualisation
 */
const getInnerAreaScales = ({ columns, customColumnOffsets = { left: 0, right: 0 }, outerAreaBounds, maxY, slideProps, theme }: IGetInnerAreaScalesParams): IInnerAreaScales => {
  const columnOffsetsProps = {
    ...customPropTypes.defaultColumnOffsets,
    ...customColumnOffsets,
  };

  const { left, right } = columnOffsetsProps;

  const halfBarWidth = theme.bars.default.width ? theme.bars.default.width / 2 : 0;

  const minVal = (outerAreaBounds.left + left + halfBarWidth);
  let maxVal = (outerAreaBounds.width + outerAreaBounds.left) - (right + halfBarWidth);

  // If the user is using the graph slider, update the width
  if (slideProps && !slideProps.isDisabled) {
    maxVal = outerAreaBounds.left + slideProps.minWidth;
  }

  const xScaleLinear = scaleLinear()
    .domain([0, columns.length - 1])
    .range([minVal, maxVal]);

  const xScalePoint = scalePoint()
    .domain(columns.map((v) => v.id))
    .range([minVal, maxVal]);

  const yScaleLinear = scaleLinear()
    .domain([0, maxY])
    .range([0, outerAreaBounds.height]);

  const yScaleLinearInverted = scaleLinear()
    .domain([0, maxY])
    .range([outerAreaBounds.height, 0]);

  return {
    x: xScaleLinear,
    x2: xScalePoint,
    y: yScaleLinear,
    yInverted: yScaleLinearInverted,
  };
}

/**
 * Returns both the inner bounds and scales
 */
const getInnerArea = (params: IGetInnerAreaParams) => {
  const {
    columns,
    customColumnOffsets,
    maxY,
    outerAreaBounds,
    slideProps,
    theme,
  } = params;

  return {
    bounds: getInnerAreaBounds({
      customColumnOffsets,
      outerAreaBounds,
      slideProps,
    }),
    scales: getInnerAreaScales({
      columns,
      customColumnOffsets,
      maxY,
      outerAreaBounds,
      slideProps,
      theme,
    }),
  }
};

export { getInnerArea };
