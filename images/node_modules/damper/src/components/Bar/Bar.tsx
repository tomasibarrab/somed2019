import React from 'react';
import { GroupedBar } from './GroupedBar';
import { SingleBar } from './SingleBar';
import { StackedBar } from './StackedBar';

type showBarValueType = {
  attrs: React.SVGAttributes<SVGTextElement>;
  isVisible: boolean;
  style: React.CSSProperties;
} | boolean;

interface IValue {
  theme?: any;
  value: number;
}

interface IProps {
  actions?: {
    onClick?(): void;
    onMouseOver?(data: any, computedLocation: any): void;
    onMouseOut?(): void;
  };
  group?: any;
  id: string;
  isAnimated: boolean;
  isHovered: boolean;
  scale?: any;
  showBarValue?: showBarValueType;
  value?: number | IValue;
  values?: any;
  theme: any;
  yOffset: number;
  xOffset: number;
}

class Bar extends React.Component<IProps> {
  static defaultProps = {
    isAnimated: true,
    isHovered: false,
    scale: undefined,
    value: undefined,
    values: undefined,
    xOffset: 0,
    yOffset: 0,
  }

  render(): React.ReactNode {
    const {
      actions,
      group,
      id,
      isAnimated,
      isHovered,
      scale,
      showBarValue,
      theme,
      value,
      values,
      xOffset,
      yOffset,
    } = this.props;

    const commonBarProps = {
      actions,
      id,
      isAnimated,
      isHovered,
      key: id,
      scale,
      showBarValue,
      theme: theme.bars,
      xOffset,
      yOffset,
    };

    if (group) {
      return (
        <GroupedBar
          {...commonBarProps}
          data={group}
        />
      );
    }

    if (values) {
      return (
        <StackedBar
          {...commonBarProps}
          data={values}
        />
      );
    }

    if (value) {
      let data = value;

      if (typeof value === 'number') {
        data = { value };
      }

      return (
        <SingleBar
          {...commonBarProps}
          data={data as IValue}
        />
      );
    }

    return null;
  }
}

export { Bar };
