import React from 'react';
import PropTypes from 'prop-types';

class TickLabel extends React.Component {
  static propTypes = {
    label: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.array,
      PropTypes.element,
    ]),
    lineHeight: PropTypes.number,
    offset: PropTypes.number,
    styles: PropTypes.object,
    theme: PropTypes.object.isRequired,
  }

  static defaultProps = {
    label: '',
    lineHeight: 1.4,
    offset: 5,
    styles: {},
  }

  constructor(props) {
    super(props);

    const { color } = props.theme.axis.x.label;

    this.styles = {
      text: {
        fontSize: 14,
        textAnchor: 'middle',
        color,
        ...props.styles.text,
      },
    };
  }

  renderMultilineLabel({ label, textStyles }) {
    const { lineHeight } = this.props;
    const y = (i) => i * (lineHeight * textStyles.fontSize);

    return (
      label.map((labelText, i) => (
        <text
          key={`label-text-${i}`}
          {...textStyles}
          y={y(i)}
        >
          {labelText}
        </text>
      ))
    );
  }

  renderLabel({ label }) {
    const { text: textStyles } = this.styles;

    // If multi-line array
    if (Array.isArray(label)) {
      return this.renderMultilineLabel({ label, textStyles });
    }

    // If single-line string
    if (typeof label === 'string') {
      return (
        <text {...textStyles}>
          {label}
        </text>
      );
    }

    const LabelElement = label;

    // If it's an element, render it
    return (
      <LabelElement {...textStyles} lineheight={this.props.lineHeight} />
    );
  }

  render() {
    const { label, offset } = this.props;
    return (
      <g transform={`translate(0 ${offset})`}>
        {this.renderLabel({ label })}
      </g>
    );
  }
}

export { TickLabel };
