96e37850fa46ad3ac1399a507c332119
"use strict";

var _getMaxVal = require("../getMaxVal");

describe('getMaxVal', function () {
  describe('Missing values', function () {
    it('Should throw an error when missing data', function () {
      var emptyGetMaxVal = function emptyGetMaxVal() {
        return (0, _getMaxVal.getMaxVal)();
      };

      var hasDataGetMaxVal = function hasDataGetMaxVal() {
        return (0, _getMaxVal.getMaxVal)({
          data: []
        });
      };

      var hasKeyGetMaxVal = function hasKeyGetMaxVal() {
        return (0, _getMaxVal.getMaxVal)({
          key: 'key'
        });
      };

      expect(emptyGetMaxVal).toThrowError(new Error('Missing data or key'));
      expect(hasDataGetMaxVal).toThrowError(new Error('Missing data or key'));
      expect(hasKeyGetMaxVal).toThrowError(new Error('Missing data or key'));
    });
  });
  describe('Explicit values', function () {
    it('Should return the max value', function () {
      var data = {
        data: [{
          isVisible: false,
          value: 100000
        }, {
          isVisible: true,
          value: 67,
          value2: 80
        }, {
          isVisible: true,
          value: 50,
          value2: 2300
        }, {
          isVisible: true,
          value: 1,
          notCounted: 200
        }],
        key: 'value'
      };
      expect((0, _getMaxVal.getMaxVal)(data)).toEqual(67);
      data.key = 'value2';
      expect((0, _getMaxVal.getMaxVal)(data)).toEqual(2300);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldE1heFZhbC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJlbXB0eUdldE1heFZhbCIsImhhc0RhdGFHZXRNYXhWYWwiLCJkYXRhIiwiaGFzS2V5R2V0TWF4VmFsIiwia2V5IiwiZXhwZWN0IiwidG9UaHJvd0Vycm9yIiwiRXJyb3IiLCJpc1Zpc2libGUiLCJ2YWx1ZSIsInZhbHVlMiIsIm5vdENvdW50ZWQiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBQSxRQUFRLENBQUMsV0FBRCxFQUFjLFlBQU07QUFDMUJBLEVBQUFBLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQy9CQyxJQUFBQSxFQUFFLENBQUMseUNBQUQsRUFBNEMsWUFBTTtBQUNsRCxVQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCO0FBQUEsZUFBTSwyQkFBTjtBQUFBLE9BQXZCOztBQUNBLFVBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUI7QUFBQSxlQUFNLDBCQUFVO0FBQUVDLFVBQUFBLElBQUksRUFBRTtBQUFSLFNBQVYsQ0FBTjtBQUFBLE9BQXpCOztBQUNBLFVBQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0I7QUFBQSxlQUFNLDBCQUFVO0FBQUVDLFVBQUFBLEdBQUcsRUFBRTtBQUFQLFNBQVYsQ0FBTjtBQUFBLE9BQXhCOztBQUVBQyxNQUFBQSxNQUFNLENBQUNMLGNBQUQsQ0FBTixDQUF1Qk0sWUFBdkIsQ0FBb0MsSUFBSUMsS0FBSixDQUFVLHFCQUFWLENBQXBDO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0osZ0JBQUQsQ0FBTixDQUF5QkssWUFBekIsQ0FBc0MsSUFBSUMsS0FBSixDQUFVLHFCQUFWLENBQXRDO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0YsZUFBRCxDQUFOLENBQXdCRyxZQUF4QixDQUFxQyxJQUFJQyxLQUFKLENBQVUscUJBQVYsQ0FBckM7QUFDRCxLQVJDLENBQUY7QUFTRCxHQVZPLENBQVI7QUFZQVQsRUFBQUEsUUFBUSxDQUFDLGlCQUFELEVBQW9CLFlBQU07QUFDaENDLElBQUFBLEVBQUUsQ0FBQyw2QkFBRCxFQUFnQyxZQUFNO0FBQ3RDLFVBQU1HLElBQUksR0FBRztBQUNYQSxRQUFBQSxJQUFJLEVBQUUsQ0FDSjtBQUNFTSxVQUFBQSxTQUFTLEVBQUUsS0FEYjtBQUVFQyxVQUFBQSxLQUFLLEVBQUU7QUFGVCxTQURJLEVBS0o7QUFDRUQsVUFBQUEsU0FBUyxFQUFFLElBRGI7QUFFRUMsVUFBQUEsS0FBSyxFQUFFLEVBRlQ7QUFHRUMsVUFBQUEsTUFBTSxFQUFFO0FBSFYsU0FMSSxFQVVKO0FBQ0VGLFVBQUFBLFNBQVMsRUFBRSxJQURiO0FBRUVDLFVBQUFBLEtBQUssRUFBRSxFQUZUO0FBR0VDLFVBQUFBLE1BQU0sRUFBRTtBQUhWLFNBVkksRUFlSjtBQUNFRixVQUFBQSxTQUFTLEVBQUUsSUFEYjtBQUVFQyxVQUFBQSxLQUFLLEVBQUUsQ0FGVDtBQUdFRSxVQUFBQSxVQUFVLEVBQUU7QUFIZCxTQWZJLENBREs7QUFzQlhQLFFBQUFBLEdBQUcsRUFBRTtBQXRCTSxPQUFiO0FBeUJBQyxNQUFBQSxNQUFNLENBQUMsMEJBQVVILElBQVYsQ0FBRCxDQUFOLENBQXdCVSxPQUF4QixDQUFnQyxFQUFoQztBQUVBVixNQUFBQSxJQUFJLENBQUNFLEdBQUwsR0FBVyxRQUFYO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQywwQkFBVUgsSUFBVixDQUFELENBQU4sQ0FBd0JVLE9BQXhCLENBQWdDLElBQWhDO0FBQ0QsS0E5QkMsQ0FBRjtBQStCRCxHQWhDTyxDQUFSO0FBaUNELENBOUNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRNYXhWYWwgfSBmcm9tICcuLi9nZXRNYXhWYWwnO1xuXG5kZXNjcmliZSgnZ2V0TWF4VmFsJywgKCkgPT4ge1xuICBkZXNjcmliZSgnTWlzc2luZyB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIG1pc3NpbmcgZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVtcHR5R2V0TWF4VmFsID0gKCkgPT4gZ2V0TWF4VmFsKCk7XG4gICAgICBjb25zdCBoYXNEYXRhR2V0TWF4VmFsID0gKCkgPT4gZ2V0TWF4VmFsKHsgZGF0YTogW10gfSk7XG4gICAgICBjb25zdCBoYXNLZXlHZXRNYXhWYWwgPSAoKSA9PiBnZXRNYXhWYWwoeyBrZXk6ICdrZXknIH0pO1xuXG4gICAgICBleHBlY3QoZW1wdHlHZXRNYXhWYWwpLnRvVGhyb3dFcnJvcihuZXcgRXJyb3IoJ01pc3NpbmcgZGF0YSBvciBrZXknKSk7XG4gICAgICBleHBlY3QoaGFzRGF0YUdldE1heFZhbCkudG9UaHJvd0Vycm9yKG5ldyBFcnJvcignTWlzc2luZyBkYXRhIG9yIGtleScpKTtcbiAgICAgIGV4cGVjdChoYXNLZXlHZXRNYXhWYWwpLnRvVGhyb3dFcnJvcihuZXcgRXJyb3IoJ01pc3NpbmcgZGF0YSBvciBrZXknKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFeHBsaWNpdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ1Nob3VsZCByZXR1cm4gdGhlIG1heCB2YWx1ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGRhdGE6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpc1Zpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IDEwMDAwMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA2NyxcbiAgICAgICAgICAgIHZhbHVlMjogODAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNTAsXG4gICAgICAgICAgICB2YWx1ZTI6IDIzMDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIG5vdENvdW50ZWQ6IDIwMCxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBrZXk6ICd2YWx1ZScsXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoZ2V0TWF4VmFsKGRhdGEpKS50b0VxdWFsKDY3KTtcblxuICAgICAgZGF0YS5rZXkgPSAndmFsdWUyJztcbiAgICAgIGV4cGVjdChnZXRNYXhWYWwoZGF0YSkpLnRvRXF1YWwoMjMwMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=