import {
  CampaignState,
  CampaignTypes,
  CustomSuppressionDate,
  DisplaySpecialTypes,
  Schedule,
} from '../../store/campaigns/campaigns.types';

const specialTypeIdsByType: { [index: string]: number } = {
  [DisplaySpecialTypes.HappyHour]: 8,
  [DisplaySpecialTypes.ComplimentaryDrink]: 4,
  [DisplaySpecialTypes.ComplimentaryAppetizer]: 4,
};

const makeSuppressionDates = (values: any) => {
  const blockedDays = values['blocked-days'];
  return {
    custom: Object.keys(blockedDays.custom).reduce(
      (accumulator, currentValue) => {
        if (blockedDays.custom[currentValue] !== false) {
          accumulator.push(blockedDays.custom[currentValue]);
        }
        return accumulator;
      },
      [] as CustomSuppressionDate[],
    ),
    default: Object.keys(blockedDays.default).reduce(
      (accumulator, currentValue) => {
        if (blockedDays.default[currentValue] === true) {
          accumulator.push(currentValue);
        }
        return accumulator;
      },
      [] as string[],
    ),
  };
};

export interface DaysAndTimeRange {
  days: string[];
  times: {
    start: string;
    end: string;
  };
}

const makeSchedule = (daysAndTimes: DaysAndTimeRange[]) =>
  daysAndTimes
    .map(({ days, times: { start, end } }: DaysAndTimeRange): Schedule[] =>
      days.map((day: string): Schedule => ({
        dayOfWeek: day,
        endTime: `${end}:00`,
        startTime: `${start}:00`,
      })),
    )
    .reduce((accumulator, cur) => [...accumulator, ...cur], []);

/* Now works with only VALUES if you want to get a readable Campaign from formValues to show the user,
   rather than to send out. Pass user, rid, and approvalInfo and they will be added to the payload. */
export const makeSpecialPayload = (values: any, user?: any, rid?: any, approvalInfo?: any) => {
  const { endDate, startDate, name, description, type, daysAndTimes } = values;

  const data: any = {
    endDate: endDate === null ? undefined : endDate,
    incentives: [
      {
        description,
        domainId: 1,
        locale: 'en-US',
        name,
        noteToDiners: '',
        typeId: specialTypeIdsByType[type],
      },
    ],
    schedule: makeSchedule(daysAndTimes),
    startDate,
    state: CampaignState.Live,
    suppressionDates: makeSuppressionDates(values),
    type: CampaignTypes.Special,
  };

  if (user) {
    const { userName: email, firstName, lastName } = user;
    const userFields = {
      changedByUser: email,
      restaurantContactEmail: email,
      /* i18n nightmare on next line */
      restaurantContactName: `${firstName} ${lastName}`,
    };
    Object.assign(data, userFields);
  }

  if (rid) {
    Object.assign(data, { rid });
  }

  if (approvalInfo) {
    Object.assign(data, { campaignApprovalInfo: approvalInfo });
  }

  return data;
};
