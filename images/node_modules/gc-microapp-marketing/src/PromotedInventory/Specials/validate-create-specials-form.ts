import { DaysAndTimeRange } from './makeSpecialPayload';

export const enum ValidationErrors {
  Required = 'required',
  OneOrMoreDays = 'one_or_more_days',
  StartTimeBeforeEndTime = 'start_time_before_end_time',
  EndDateAfterStartDate = 'end_date_after_start_date',
}

export const validate = (values: any) => {
  const { type, name, description, daysAndTimes, startDate, endDate } = values;
  const errors: any = {};
  if (!type) {
    errors.type = ValidationErrors.Required;
  }
  if (!name) {
    errors.name = ValidationErrors.Required;
  }
  if (!description) {
    errors.description = ValidationErrors.Required;
  }
  if (endDate && endDate < startDate) {
    errors.endDate = ValidationErrors.EndDateAfterStartDate;
  }
  const daysAndTimesErrors: any = {};
  daysAndTimes.forEach(({ days, times }: DaysAndTimeRange, index: number) => {
    if (!days || days.length === 0) {
      daysAndTimesErrors[index] = { days: ValidationErrors.OneOrMoreDays };
    }
    if (times && times.start >= times.end) {
      daysAndTimesErrors[index] = { times: ValidationErrors.StartTimeBeforeEndTime, ...daysAndTimesErrors[index] };
    }
  });
  errors.daysAndTimes = daysAndTimesErrors;
  return errors;
};
