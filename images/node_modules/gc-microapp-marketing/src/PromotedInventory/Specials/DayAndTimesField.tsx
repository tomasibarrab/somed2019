import { SwitchList } from 'gca-react-components';
import TimeRange from 'gca-react-components/src/components/TimeRange/TimeRange';
import React, { SFC } from 'react';
import { InjectedIntl, injectIntl } from 'react-intl';
import { Field } from 'redux-form';
import getDayOptions from './get-day-options';

interface Props {
  name: string;
}

interface RenderDaysAndTimesProps {
  input: any;
  meta: any;
  intl: InjectedIntl;
}

export const DayAndTimesField: SFC<Props> = ({ name }) => (
  <>
    <Field name={`${name}.days`} component={renderDayField as any} />
    <Field name={`${name}.times`} component={renderTimeRange as any} />
  </>
);

const renderDayField = injectIntl(({ input, meta, intl }: RenderDaysAndTimesProps) => {
  const { value, onChange } = input;
  const { submitFailed, error } = meta;
  const invalid = submitFailed && error;
  return (
    <>
      <SwitchList
        options={getDayOptions(intl.locale)}
        selected={value}
        onChange={onChange}
        valid={!invalid}
        errorMessage={''}
      />
      {invalid && (
        <span className="invalid-message">
          {intl.formatMessage({ id: 'guestcampaigns.specials.form.validation.days.one_or_more_days' })}
        </span>
      )}
    </>
  );
});

const timeSelectAttributes = {
  end: '23:45',
  increment: 15,
  start: '00:00',
};

const renderTimeRange = injectIntl(({ input, meta, intl }: RenderDaysAndTimesProps) => {
  const { submitFailed, error } = meta;
  const { value: { start, end }, onChange } = input;
  const timeRangeLabels = {
    end: intl.formatMessage({ id: 'promos.form.timeRangeEnd' }),
    invalid: intl.formatMessage({ id: 'promos.form.timeRangeInvalidMessage' }),
    start: intl.formatMessage({ id: 'promos.form.timeRangeStart' }),
    to: intl.formatMessage({ id: 'promos.form.timeRangeDivider' }),
  };

  /* Doesn't seem to be worth the effort to try to get coverage on the onChange function below,
     since it's super simple. */

  return (
    <TimeRange
      locale={intl.locale}
      firstSelect={timeSelectAttributes}
      secondSelect={timeSelectAttributes}
      onChange={({ firstTime, secondTime }) =>
        onChange({
          end: secondTime,
          start: firstTime,
        })
      }
      labels={timeRangeLabels}
      value={{ firstTime: start, secondTime: end }}
      valid={!(submitFailed && error)}
    />
  );
});

export default DayAndTimesField;
