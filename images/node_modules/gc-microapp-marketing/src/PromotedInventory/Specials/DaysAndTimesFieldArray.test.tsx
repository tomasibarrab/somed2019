import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import { reduxForm, submit } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { DisplaySpecialTypes } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import DaysAndTimesFieldArray from './DaysAndTimesFieldArray';
import { ValidationErrors } from './validate-create-specials-form';

const makeComponent = (renderer, state) => {
  const store = configureMockStore()(state);
  const Decorated = reduxForm({
    form: 'createSpecial',
  })(DaysAndTimesFieldArray as any);

  return {
    component: renderer(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <Decorated name="daysAndTimes" />
        </IntlProvider>
      </Provider>,
    ),
    store,
  };
};

describe('DaysAndTimesFieldArray', () => {
  const daysAndTimes = [
    {
      days: ['SUNDAY'],
      times: {
        end: '15:00',
        start: '17:00',
      },
    },
    {
      days: ['TUESDAY'],
      times: {
        end: '15:00',
        start: '17:00',
      },
    },
  ];
  const twoItemFormState = {
    form: {
      createSpecial: {
        values: {
          daysAndTimes: daysAndTimes.slice(),
          type: DisplaySpecialTypes.HappyHour,
        },
      },
    },
  };
  const singleItemFormState = {
    form: {
      createSpecial: {
        values: {
          daysAndTimes: [daysAndTimes[0]],
          type: DisplaySpecialTypes.ComplimentaryAppetizer,
        },
      },
    },
  };
  const submitFailedState = {
    form: {
      createSpecial: {
        submitFailed: true,
        syncErrors: {
          daysAndTimes: [
            {
              days: ValidationErrors.OneOrMoreDays,
              times: ValidationErrors.StartTimeBeforeEndTime,
            },
          ],
        },
        values: {
          daysAndTimes: [
            {
              days: [],
              times: {
                end: '20:00',
                start: '10:00',
              },
            },
          ],
        },
      },
    },
  };

  it('should render a couple DaysAndTimesField, w/ remove option, and HH string in tips box', () => {
    const { component } = makeComponent(create, twoItemFormState);

    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  it('should render one DaysAndTimesField, not show the remove option, and have generic string in tips box', () => {
    const { component } = makeComponent(create, singleItemFormState);

    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  it('should call push with new day and time when Add is clicked in tips box', () => {
    const { component: wrapper, store } = makeComponent(mount, singleItemFormState);

    const addButton = wrapper.find('div.tips-box Button').first();
    addButton.simulate('click');

    const actions = store.getActions();
    expect(actions.pop().type).toEqual('@@redux-form/ARRAY_PUSH');
  });

  it('should call remove when remove day and time is clicked', () => {
    const { component: wrapper, store } = makeComponent(mount, twoItemFormState);

    const addButton = wrapper.find('Button.remove-shift').first();
    addButton.simulate('click');

    const actions = store.getActions();
    expect(actions.pop().type).toEqual('@@redux-form/ARRAY_REMOVE');
  });

  it('should show validation errors only when submitFailed', () => {
    const { component: wrapper, store } = makeComponent(mount, submitFailedState);

    const validationErrorElements = wrapper.find('.invalid-message');
    expect(validationErrorElements.length).toEqual(2);
    expect(validationErrorElements.at(0).debug()).toMatchSnapshot();
    expect(validationErrorElements.at(1).debug()).toMatchSnapshot();
  });
});
