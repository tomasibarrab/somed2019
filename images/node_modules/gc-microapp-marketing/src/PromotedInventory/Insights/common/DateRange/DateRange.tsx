import React, { SFC } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { ComparativePeriod, DateRange as DateRangeType } from '../../../../store/insights/insights.types';
import { getInsights } from '../../../../store/insights/selectors';
import { comparativeDateSelector, formatLocaleDateTime } from '../../../../store/insights/utils';
import { State } from '../../../../store/types';

interface SP {
  dateRange: DateRangeType;
  comparativePeriod: ComparativePeriod;
}

interface OP {
  includeComparative?: boolean;
}

type NonIntlProps = SP & OP;

type Props = NonIntlProps & InjectedIntlProps;

const DateRange: SFC<Props> = ({ dateRange, includeComparative, comparativePeriod, intl }) => {
  const compareToDates = includeComparative && comparativeDateSelector(dateRange, comparativePeriod);

  return (
    <p>{`${formatLocaleDateTime(dateRange.startDate, intl.locale, 'shortDate')} - ${formatLocaleDateTime(
      dateRange.endDate,
      intl.locale,
      'shortDate',
      true,
    )} ${
      compareToDates
        ? ` vs. ${formatLocaleDateTime(
            compareToDates.comparativeStartDate,
            intl.locale,
            'shortDate',
          )} - ${formatLocaleDateTime(compareToDates.comparativeEndDate, intl.locale, 'shortDate', true)}`
        : ''
    }`}</p>
  );
};

const mapStateToProps = (state: State) => {
  const { filters } = getInsights(state);
  return {
    comparativePeriod: filters.compareTo,
    dateRange: filters.dateRange,
  };
};

const intlDateRange = injectIntl<NonIntlProps>(DateRange);

export default connect<SP, {}, OP>(
  mapStateToProps,
  {},
)(intlDateRange);
