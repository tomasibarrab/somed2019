import { Button } from 'gca-react-components';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntl } from 'react-intl';

import ExportIcon from '../../PromotedInventory/Icons/ExportIcon';
import convertedToCsvEncodedString, {
    convertedToCsv, fileTypeData,
} from './helpers/convertToCsvEncodedString';
import styles from './InsightsExportButton.module.css';
import { FormattedCampaign } from './InsightsTable';

interface Column {
  id: string;
  isLeft?: boolean;
  isOffsetLeft?: boolean;
  name: string;
  noSort?: boolean;
}
interface Props {
  formattedCampaigns: FormattedCampaign[];
  formattedTotals: {};
  isGuestColumnsEnabled: boolean;
  columns: Column[];
  intl: InjectedIntl;
}

class InsightsExportButton extends Component<Props> {
  public render() {
    const { formattedCampaigns, formattedTotals, columns } = this.props;
    const { exportButton } = styles;

    return (
      <Button
        theme="hollow"
        className={exportButton}
        onClick={() => this.exportCsvFile(formattedCampaigns, formattedTotals, columns)}
      >
        <ExportIcon />
        <FormattedMessage id="insights.button.export" />
      </Button>
    );
  }

  private exportCsvFile(formattedCampaigns: FormattedCampaign[], formattedTotals: {}, columns: Column[]) {
    const { isGuestColumnsEnabled, intl } = this.props;
    const headings = columns.map(heading => heading.name);
    const rows = [headings];

    formattedCampaigns.map(campaign => {
      const {
        displayValues: {
          covers,
          daysAndTimes,
          endDate,
          firstTimeGuests,
          outOfTownGuests,
          price,
          startDate,
          totalSpend,
          type,
        },
      } = campaign;
      let rowItems = [type, price, startDate, endDate, daysAndTimes, totalSpend, covers];
      if (isGuestColumnsEnabled) {
        rowItems = rowItems.concat([firstTimeGuests, outOfTownGuests]);
      }
      rows.push(rowItems);
    });

    const { sumCovers, sumFirstTimeGuests, sumOutOfTownGuests, sumTotalSpend } = formattedTotals as any;
    let columnTotals = [intl.formatMessage({ id: 'insights.table.total' }), '', '', '', '', sumTotalSpend, sumCovers];
    if (isGuestColumnsEnabled) {
      columnTotals = columnTotals.concat([sumFirstTimeGuests, sumOutOfTownGuests]);
    }
    rows.push(columnTotals);

    const dateString = new Date().toISOString().slice(0, 10);
    const fileName = `OpenTable-campaign-breakdown-${dateString}.csv`;

    if (window.navigator.msSaveBlob) {
      // Edge browser
      const blob = new window.Blob([convertedToCsv(rows as [])], { type: fileTypeData });
      window.navigator.msSaveBlob(blob, fileName);
    } else {
      const encodedUri = convertedToCsvEncodedString(rows as []);
      const link = document.createElement('a');
      link.setAttribute('href', encodedUri);
      link.setAttribute('download', fileName);
      document.body.appendChild(link); // Required for FF
      link.click();
    }
  }
}

export default InsightsExportButton;
