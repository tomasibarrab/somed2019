import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { CampaignTypes } from '../../store/campaigns/campaigns.types';
import CampaignTypeLabel from './CampaignTypeLabel';

describe('<CampaignTypeLabel />', () => {
  const scenarios = [
    {
      description: 'campaign w/ incentive',
      props: {
        incentives: [{ offerTypeName: 'Complimentary item' }],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.Special,
      },
    },
    {
      description: 'campaign w/ incentive, type === "legacy_promoted_offer"',
      props: {
        incentives: [{ offerTypeName: 'Complimentary item' }],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.LegacyPromotedOffer,
      },
    },
    {
      description: 'campaign w/ incentive and end date w/in 60 days',
      props: {
        endDate: moment().add(7, 'day'),
        incentives: [{ offerTypeName: 'Complimentary item' }],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.Special,
      },
    },
    {
      description: 'campaign w/ incentive and end date outside 60 days',
      props: {
        endDate: moment().add(64, 'day'),
        incentives: [{ offerTypeName: 'Complimentary item' }],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.Special,
      },
    },
    {
      description: 'campaign w/ promoted results',
      props: {
        incentives: [],
        isShortTerm: false,
        state: 'ended',
        type: CampaignTypes.PromotedResults,
      },
    },
    {
      description: 'campaign w/ promoted results and paused until',
      props: {
        incentives: [],
        isShortTerm: false,
        pauseUntil: moment().add(2, 'day'),
        state: 'paused',
        type: CampaignTypes.PromotedResults,
      },
    },
    {
      description: 'paid_search campaign',
      props: {
        incentives: [],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.CustomPromotions,
      },
    },
    {
      description: 'paid_search campaign and end date w/in 60 days',
      props: {
        endDate: moment().add(7, 'day'),
        incentives: [],
        isShortTerm: false,
        state: 'live',
        type: CampaignTypes.CustomPromotions,
      },
    },
    {
      description: 'paid_search campaign short term',
      props: {
        endDate: moment().add(7, 'day'),
        incentives: [],
        isShortTerm: true,
        state: 'live',
        type: CampaignTypes.CustomPromotions,
      },
    },
  ];

  const messages = {
    'guestcampaigns.list.custom_promotions': 'Custom Promotions',
    'guestcampaigns.list.endsin': 'Ends {in-time-amount}',
    'guestcampaigns.list.promoted_results': 'Promoted Results',
    'guestcampaigns.list.resumesin': 'Resumes {in-time-amount}',
    'guestcampaigns.list.short_term_custom_promotions': 'Short Term Custom Promotions',
  };

  scenarios.map(({ description, props }) => {
    test(`${description} to match snapshot`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={messages}>
          <CampaignTypeLabel {...props} />
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });
});
