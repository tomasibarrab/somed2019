import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { CampaignState } from '../../../store/campaigns/campaigns.types';
import { keys } from '../../../translations/bundles/marketing.json';
import { LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1 } from '../../constants';
import ApproveModal from './ApproveModal';

jest.mock('../../TermsAndConditions/TermsAndConditions', () => {
  // tslint:disable-next-line:no-shadowed-variable
  const React = require.requireActual('react');
  return props => (
    <div data-testid="t-and-c-mock" data-props={props}>
      TermsAndConditions Mock
    </div>
  );
});

const createComponent = (render: any, props: any) =>
  render(
    <IntlProvider locale="en-US" messages={keys}>
      <ApproveModal {...props} />
    </IntlProvider>,
  );

describe('ApproveModal', () => {
  const mockCampaignId = 'a';
  const campaign = { campaignId: mockCampaignId };

  it('should match snapshot', () => {
    const wrapper = createComponent(create, {});

    expect(wrapper.toJSON()).toMatchSnapshot('No action yet');
  });

  it("should add link to terms and call own confirm when child's confirm called, show success page, close", () => {
    const close = jest.fn();
    const confirm = jest.fn();
    const mockApprovalInfo = {
      browserInfo: 'mock browser info',
    };

    const wrapper = createComponent(mount, { campaign, close, confirm });

    expect(confirm).not.toHaveBeenCalled();

    const expectedConfirmPayload = {
      approvalInfo: {
        ...mockApprovalInfo,
        linkToTerms: LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1,
      },
      campaignId: mockCampaignId,
      refetchCampaigns: false,
      state: CampaignState.Live,
    };

    const childConfirm = wrapper
      .find('[data-testid="t-and-c-mock"]')
      .first()
      .props()['data-props'].confirm;

    childConfirm(mockApprovalInfo);

    expect(confirm).toHaveBeenCalledWith(expectedConfirmPayload);

    wrapper.update();
    expect(wrapper.debug()).toMatchSnapshot('Completed');

    const gotItButton = wrapper.find('Button[theme="primary"]');
    expect(gotItButton.length).toEqual(1);

    expect(close).not.toHaveBeenCalled();
    gotItButton.simulate('click');

    expect(close).toHaveBeenCalledWith(true);
  });
});
