import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';

import { keys } from '../../../translations/bundles/marketing.json';
import { BudgetEditor } from './BudgetEditor';

const createComponent = (campaignId, confirm, currentBudget, currentUserEmail) =>
  mount(
    <IntlProvider locale="en-US" messages={keys}>
      <BudgetEditor
        campaignId={campaignId}
        confirm={confirm}
        currentBudget={currentBudget}
        currentUserEmail={currentUserEmail}
      />
    </IntlProvider>,
  );

describe('<BudgetEditor />', () => {
  const campaignId = 'mock-campaignid';
  const currentBudget = {
    cap: 500,
    covers: 25,
    credits: 200,
    price: 20,
    spend: 300,
  };
  const currentUserEmail = 'test@email.com';

  it('should match snapshot when initial state', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    expect(wrapper.debug()).toMatchSnapshot();
  });

  it('should enable apply button when budget value has been changed from its original value', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);

    const button = wrapper.find('button[data-testid="apply-button"]').first();
    const textbox = wrapper.find('input[data-testid="budget-textbox"]').first() as any;

    button.simulate('click');
    expect(confirm).not.toHaveBeenCalled();

    const value = '1000';
    textbox.instance().value = value;
    textbox.simulate('change', { target: { value } });
    expect(textbox.instance().value).toBe(value);

    button.simulate('click');

    expect(confirm).toHaveBeenCalledWith({
      campaignId: 'mock-campaignid',
      changedByUser: 'test@email.com',
      monthlyBudget: 1000,
    });
  });

  it('should hide credit text next to no budget checkbox when zero credits', () => {
    const confirm = jest.fn();
    const updatedCreditBudget = Object.assign({}, currentBudget, {
      credits: 0,
    });
    const wrapper = createComponent(campaignId, confirm, updatedCreditBudget, currentUserEmail);
    const checkbox = wrapper.find('[data-testid="no-budget-checkbox"]').first();
    expect(checkbox.debug()).toMatchSnapshot();
  });

  it('should update covers when budget input is changed', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);

    const button = wrapper.find('button[data-testid="apply-button"]').first();
    const textbox = wrapper.find('input[data-testid="budget-textbox"]').first() as any;
    const totalCoversMessage = () => wrapper.find('[data-testid="total-covers-message"]').first();

    button.simulate('click');
    expect(confirm).not.toHaveBeenCalled();

    const value = '1000';
    textbox.instance().value = value;
    textbox.simulate('change', { target: { value } });
    expect(textbox.instance().value).toBe(value);
    expect(totalCoversMessage().debug()).toMatchSnapshot();
  });

  it('should disable monthly budget input and enable apply button when no budget checkbox is checked', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    const textbox = () => wrapper.find('input[data-testid="budget-textbox"]').first() as any;

    const value = '1000';
    textbox().instance().value = value;
    textbox().simulate('change', { target: { value } });
    expect(textbox().instance().value).toBe(value);
    expect(textbox().instance().disabled).toBe(false);

    const checkbox = wrapper.find('[data-testid="no-budget-checkbox"] input').first();
    checkbox.simulate('click');

    const button = wrapper.find('button[data-testid="apply-button"]').first();
    button.simulate('click');

    expect(textbox().instance().disabled).toBe(true);

    expect(confirm).toHaveBeenCalledWith({
      campaignId: 'mock-campaignid',
      changedByUser: 'test@email.com',
      monthlyBudget: 0,
    });
  });

  it('should display error message when budget input is an empty value', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    const textbox = () => wrapper.find('input[data-testid="budget-textbox"]').first() as any;

    const value = '';
    textbox().instance().value = value;
    textbox().simulate('change', { target: { value } });

    const budgetSection = wrapper.find('[data-testid="budget-section"]').first();
    expect(budgetSection.debug()).toMatchSnapshot();
  });

  it('should display error message when budget input value is less than spend amount', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    const textbox = () => wrapper.find('input[data-testid="budget-textbox"]').first() as any;

    const value = '400';
    textbox().instance().value = value;
    textbox().simulate('change', { target: { value } });

    const budgetSection = wrapper.find('[data-testid="budget-section"]').first();
    expect(budgetSection.debug()).toMatchSnapshot();
  });

  it('should display error message when non-numeric value is entered', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    const textbox = () => wrapper.find('input[data-testid="budget-textbox"]').first() as any;

    const value = 'a';
    textbox().instance().value = value;
    textbox().simulate('change', { target: { value } });

    const budgetSection = wrapper.find('[data-testid="budget-section"]').first();
    expect(budgetSection.debug()).toMatchSnapshot();
  });

  it('should display error message when budget input is blurred and value is unchanged from original amount', () => {
    const confirm = jest.fn();
    const wrapper = createComponent(campaignId, confirm, currentBudget, currentUserEmail);
    const textbox = wrapper.find('input[data-testid="budget-textbox"]').first() as any;
    textbox.simulate('blur');

    const budgetSection = wrapper.find('[data-testid="budget-section"]').first();
    expect(budgetSection.debug()).toMatchSnapshot();
  });

  it('should hide "Your spend so far" text when spend is unavailable', () => {
    const confirm = jest.fn();
    const newCurrentBudget = Object.assign({}, currentBudget, {
      spend: undefined,
    });
    const wrapper = createComponent(campaignId, confirm, newCurrentBudget, currentUserEmail);
    expect(wrapper.debug()).toMatchSnapshot();
  });
});
