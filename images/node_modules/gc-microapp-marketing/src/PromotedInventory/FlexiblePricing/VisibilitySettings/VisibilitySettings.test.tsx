import VisibilitySettings from './VisibilitySettings';

import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { createEmptyFormSettings } from '../../../store/flexiblepricing/createEmptyFormSettings';
import { VisibilityType } from '../../../store/flexiblepricing/flexiblepricing.types';
import makeMockState, { mockDiscoveryPrices } from '../../../store/flexiblepricing/makeMockState';
import { keys } from '../../../translations/bundles/marketing.json';

jest.mock('./DaysAndTimes/DaysAndTimesImages', () => () => 'MockDaysAndTimes');
jest.mock('./MonthlyBudget', () => () => 'MockMonthlyBudget');
jest.mock('react-router-dom', () => ({
  Link: ({ children }) => children,
}));

const renderComponent = (state: any) => {
  const store = configureMockStore([])(state);

  return {
    store,
    wrapper: mount(
      <Provider store={store}>
        <IntlProvider messages={keys} locale="en-US">
          <VisibilitySettings />
        </IntlProvider>
      </Provider>,
    ),
  };
};

describe('<VisibilitySettings />', () => {
  it('renders increase and reduce sections, both unchecked, when reduce feature on, and both sections disabled', () => {
    const { wrapper } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );
    const increaseSection = wrapper.find('section.visibility-type.increase');
    expect(increaseSection.length).toEqual(1);
    expect(increaseSection.find('Checkbox[checked=false]').length).toEqual(1);
    expect(increaseSection.find('Checkbox[checked=true]').length).toEqual(0);

    const reduceSection = wrapper.find('section.visibility-type.reduce');
    expect(reduceSection.length).toEqual(1);
    expect(reduceSection.find('Checkbox[checked=false]').length).toEqual(1);
    expect(reduceSection.find('Checkbox[checked=true]').length).toEqual(0);

    expect(wrapper.debug()).toMatchSnapshot();
  });

  it('renders checked + and - sections when reduce feature on and both enabled, next btn is Summary', () => {
    const formVisibilitySettings = createEmptyFormSettings(mockDiscoveryPrices);
    formVisibilitySettings.enable.increase = true;
    formVisibilitySettings.enable.reduce = true;
    const { wrapper } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings,
      }),
    );
    const increaseSection = wrapper.find('section.visibility-type.increase');
    expect(increaseSection.length).toEqual(1);
    expect(increaseSection.find('Checkbox[checked=false]').length).toEqual(0);
    expect(increaseSection.find('Checkbox[checked=true]').length).toEqual(1);

    const reduceSection = wrapper.find('section.visibility-type.reduce');
    expect(reduceSection.length).toEqual(1);
    expect(reduceSection.find('Checkbox[checked=false]').length).toEqual(0);
    expect(reduceSection.find('Checkbox[checked=true]').length).toEqual(1);

    expect(
      wrapper
        .find('aside.header-buttons')
        .childAt(1)
        .text(),
    ).toEqual('Summary');
  });

  it('does not render reduce section when reduce feature disabled', () => {
    const { wrapper } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: false } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    const reduceSection = wrapper.find('section.visibility-type.reduce');
    expect(reduceSection.length).toEqual(0);
  });

  it('opens and closes informational modals, they match snapshot', () => {
    const { wrapper } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    expect(wrapper.find('ModalWhyLessDiners').length).toEqual(0);
    wrapper.find('p.why Button').simulate('click');

    const whyLessDinersModal = wrapper.find('ModalWhyLessDiners');
    expect(whyLessDinersModal.length).toEqual(1);
    /* Use childAt(0) to avoid snapshotting the component itself,
    which only contains the props when shown in the snapshot. Since
    intl is one of the props of the modal, the snapshot would become
    polluted by the entire set of i18n strings if we did not. */
    expect(whyLessDinersModal.childAt(0)).toMatchSnapshot();

    whyLessDinersModal.find('footer Button').simulate('click');

    expect(wrapper.find('ModalWhyLessDiners').length).toEqual(0);

    expect(wrapper.find('ModalLearnMore').length).toEqual(0);
    wrapper.find('footer.flexible-pricing Button').simulate('click');

    const learnMoreModal = wrapper.find('ModalLearnMore');
    expect(learnMoreModal.length).toEqual(1);
    expect(learnMoreModal.childAt(0)).toMatchSnapshot();

    learnMoreModal.find('footer Button').simulate('click');

    expect(wrapper.find('ModalLearnMore').length).toEqual(0);
  });

  it('fires action to toggle enabled status of visibility type when checkbox checked', () => {
    const { wrapper, store } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    expect(store.getActions().length).toEqual(0);
    wrapper.find('section.visibility-type.increase Checkbox').prop('onClick')();
    expect(store.getActions().pop()).toMatchSnapshot();
  });

  it('when settings already exist, the back button should fire action to show summary, and not be a link', () => {
    const { wrapper, store } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    expect(store.getActions().length).toEqual(0);
    const backButton = wrapper.find('aside.header-buttons').childAt(0);
    expect(backButton.name()).toEqual('Button');
    backButton.prop('onClick')();
    expect(store.getActions()).toMatchSnapshot();
  });

  it('when first run, the back button should fire no action to show summary, and be a link to edu pages', () => {
    const { wrapper, store } = renderComponent(
      makeMockState({
        existingSettings: undefined,
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    expect(store.getActions().length).toEqual(0);
    const backLink = wrapper.find('aside.header-buttons').childAt(0);
    expect(backLink.name()).toEqual('Link');

    /* First child of the Link is a Button that has the onClick */
    backLink.childAt(0).prop('onClick')();
    expect(store.getActions()).toMatchSnapshot();
  });

  it('clicking primary header button w/ valid form should fire action to show summary', () => {
    const { wrapper, store } = renderComponent(
      makeMockState({
        featureToggles: { features: { featureGcaPiFlexiblePricingReduceVisibility: true } },
        formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
      }),
    );

    expect(store.getActions().length).toEqual(0);
    const nextButton = wrapper.find('aside.header-buttons').childAt(1);

    /* First child of the Link is a Button that has the onClick */
    nextButton.prop('onClick')();
    expect(store.getActions().pop()).toMatchSnapshot();
  });
});
