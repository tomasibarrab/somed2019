import queryString from 'query-string';
import React, { Component } from 'react';
import EducationPage, { EducationPageType } from './EducationPage';

const enum Direction {
  Next = 1,
  Previous = -1,
}

const makeClampIndex = (min: number, max: number) => {
  return (x: number) => Math.min(Math.max(min, x), max);
};

class LandingPage extends Component<{ location: Location }> {
  public state = {
    type: EducationPageType.IntroPrices,
  };

  public render() {
    const { type } = this.state;

    /* Grab the "free" styling for Panel from gca-react-components by
      making our component look like a panel without the header. */

    return (
      <section className="gca-panel">
        <div className="gca-panel-body">
          <EducationPage
            onClickNext={() => this.onClick(Direction.Next, type)}
            onClickPrevious={() => this.onClick(Direction.Previous, type)}
            type={type}
          />
        </div>
      </section>
    );
  }

  public componentDidMount() {
    const { location } = this.props;
    if (location.search) {
      const parsed = queryString.parse(location.search);
      if (parsed.type) {
        const types: string[] = Object.values(EducationPageType).filter(key => key === parsed.type);
        if (types.length === 1) {
          this.setState({ type: types[0] as any });
        }
      }
    }
  }

  private onClick = (direction: Direction, typeFrom: EducationPageType): void => {
    const eduPageOrder: EducationPageType[] = [
      EducationPageType.IntroPrices,
      EducationPageType.BillDetail,
      EducationPageType.DiscoveryExplanation,
    ];

    const clampIndex = makeClampIndex(0, eduPageOrder.length - 1);
    const newPageIndex = clampIndex(eduPageOrder.indexOf(typeFrom) + direction);
    const typeTo = eduPageOrder[newPageIndex];

    this.setState({ type: typeTo });
  };
}

export default LandingPage;
