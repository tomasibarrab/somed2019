import './Summary.scss';

import classNames from 'classnames';
import { Button, Panel } from 'gca-react-components';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { get } from 'lodash';
import moment from 'moment';
import React, { Component, ReactNode } from 'react';
import { FormattedMessage, InjectedIntl, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { Pages } from '../../../store/campaigns/campaigns.types';
import {
    clickOrInteract, initializeForm, postVisibilitySettings, revertToOriginalPricing, setPageType,
} from '../../../store/flexiblepricing/flexiblepricing';
import {
    ActiveContractPrices, ButtonType, Days, FlexiblePricingPageType, PlanType, Price, PriceByPlan,
    SummaryType, Times, VisibilitySettings, VisibilityType, VisibilityTypePrices,
} from '../../../store/flexiblepricing/flexiblepricing.types';
import {
    getExpectedDirectPricePerCover, getExpectedDiscoveryPrices, getInUseDiscoveryPriceRange,
    getIsUpdatingPricing, getMonthlyBudget, getPartialVisibility, getShownFlexPrices,
    getShownVisibilitySettings, getSummaryType,
} from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';
import { default as CampaignsList } from '../../ColumnsLayout/CampaignsList';
import getDayOptions from '../../FlexiblePricing/get-day-options';
import Footer from '../Shared/Footer';
import Legend, { LegendType, PriceRange } from '../Shared/Legend';
import ModalLearnMore from '../Shared/ModalLearnMore';
import OTKitIcon from '../Shared/OTKitIcon';
import ModalTermsAndConditions from './ModalTermsAndConditions';
import RevertModal from './RevertModal';
import Schedule from './Schedule';
import summaryTypeToTermsTypeMapping from './summaryTypeToTermsTypeMapping';

interface SP {
  featureToggles: FeatureToggles;
  monthlyBudget?: Price;
  prices: ActiveContractPrices;
  inUseDiscoveryRange: PriceRange;
  discoveryPrices: VisibilityTypePrices;
  settings: VisibilitySettings;
  hasPartialVisibility: boolean;
  summaryType: SummaryType;
  isUpdating: boolean;
}

interface DP {
  initializeForm: typeof initializeForm;
  postVisibilitySettingsStarted: typeof postVisibilitySettings.started;
  setPageType: typeof setPageType;
  revertToOriginalPricingStarted: typeof revertToOriginalPricing.started;
  clickOrInteract: typeof clickOrInteract;
}

type NonIntlProps = SP & DP;

type Props = InjectedIntlProps & NonIntlProps;

interface ComponentState {
  showActionModal: boolean;
  showLearnMore: boolean;
}

class Summary extends Component<Props, ComponentState> {
  public state = {
    showActionModal: false,
    showLearnMore: false,
  };

  private contactEmail = 'campaigns@opentable.com';

  public render() {
    const {
      featureToggles,
      intl,
      monthlyBudget,
      prices,
      inUseDiscoveryRange,
      settings,
      hasPartialVisibility,
      postVisibilitySettingsStarted,
      revertToOriginalPricingStarted,
      discoveryPrices,
      summaryType,
      isUpdating,
    } = this.props;
    const { showLearnMore, showActionModal } = this.state;

    const { formatDate, formatMessage, locale } = intl;
    const formattedDays = getDayOptions(locale);
    let topContent: ReactNode = null;
    switch (summaryType) {
      case SummaryType.PreCommitFirstRun:
        topContent = (
          <>
            <FormattedMessage
              id="flexiblepricing.summary.start_date"
              values={{
                'start-date': formatDate(moment().toDate(), {
                  /* TODO: Check on this start date */
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                }),
              }}
              tagName="h1"
            />
            <FormattedMessage id="flexiblepricing.summary.description" tagName="p" />
            <FormattedMessage id="flexiblepricing.summary.signup_for_this" />
          </>
        );
        break;
      case SummaryType.PreCommitEdit:
        topContent = (
          <FormattedMessage
            id="flexiblepricing.summary.changes_effective"
            tagName="h1"
            values={{
              date: formatDate(moment().toDate(), {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
              }),
            }}
          />
        );
    }

    const showReduceVisibility = get(featureToggles, 'features.featureGcaPiFlexiblePricingReduceVisibility', false);
    const isShowExisting = summaryType === SummaryType.ShowExisting;

    return (
      <Panel
        headerContent={this.headerButtons()}
        // TODO: this shoul be "Flexible Pricing" when in update mode
        title={formatMessage({ id: 'flexiblepricing.visibilitysettings.summary' })}
      >
        <header className="summary">
          {topContent}
          <Legend prices={prices} inUseDiscoveryRange={inUseDiscoveryRange} type={LegendType.Summary} />
          {isUpdating && (
            <p className="we-are-updating">{formatMessage({ id: 'flexiblepricing.summary.updating_the_system' })}</p>
          )}
        </header>
        <section className="summary">
          <FormattedMessage id="flexiblepricing.visibilitysettings.title" tagName="h2" />
          <FormattedMessage id="flexiblepricing.summary.adjust_your_schedule" tagName="p" />
          <div className="summary-layout">
            <Schedule
              shifts={Object.values(Times)}
              days={Object.values(Days)}
              settings={settings}
              fillNoDiscovery={!isShowExisting}
            />
            <ul>
              {hasPartialVisibility && (
                <li className="no-discovery">
                  <FormattedMessage id="flexiblepricing.summary.no_discovery" tagName="h3" />
                </li>
              )}
              <li className="discovery-bookings">
                <h3>
                  <FormattedMessage id="flexiblepricing.visibilitysettings.standard_exposure" />
                  {' — '}
                  <FormattedMessage
                    id="flexiblepricing.summary.price_cover"
                    tagName="strong"
                    values={{
                      price: formatCurrency(
                        discoveryPrices[VisibilityType.Standard].amount,
                        discoveryPrices[VisibilityType.Standard].currencyCode,
                      ),
                    }}
                  />
                </h3>
                {isShowExisting && !hasPartialVisibility && (
                  <FormattedMessage id="flexiblepricing.summary.default_everyday_except" tagName="p" />
                )}
              </li>
              <li className="increased-exposure-shift">
                <h3>
                  <FormattedMessage id="flexiblepricing.summary.increased_exposure" />
                  {' — '}
                  <FormattedMessage
                    id="flexiblepricing.summary.price_cover"
                    tagName="strong"
                    values={{
                      price: formatCurrency(
                        discoveryPrices[VisibilityType.Increase].amount,
                        discoveryPrices[VisibilityType.Increase].currencyCode,
                      ),
                    }}
                  />
                </h3>
                {isShowExisting && <p>{this.makeSummary(VisibilityType.Increase, intl, formattedDays)}</p>}
                {monthlyBudget && (
                  <FormattedMessage
                    id="flexiblepricing.summary.monthly_budget"
                    tagName="p"
                    values={{ price: formatCurrency(monthlyBudget.amount, monthlyBudget.currencyCode) }}
                  />
                )}
              </li>
              {showReduceVisibility && (
                <li>
                  <FormattedMessage
                    id="flexiblepricing.summary.reduced_visibility"
                    tagName="h3"
                    values={{
                      price: formatCurrency(
                        +discoveryPrices[VisibilityType.Reduce].currencyCode,
                        discoveryPrices[VisibilityType.Reduce].amount + '',
                      ),
                    }}
                  />
                  {isShowExisting && <p>{this.makeSummary(VisibilityType.Reduce, intl, formattedDays)}</p>}
                </li>
              )}
            </ul>
          </div>
          {isShowExisting &&
            (hasPartialVisibility ? (
              <FormattedMessage
                id="flexiblepricing.summary.contact"
                tagName="p"
                values={{
                  email: <a href={`mailto:${this.contactEmail}`}>{this.contactEmail}</a>,
                }}
              />
            ) : (
              <Button className="edit-button" onClick={this.onClickEdit} theme="primary">
                <FormattedMessage id="flexiblepricing.summary.edit_visibility" />
              </Button>
            ))}
          {isShowExisting && get(featureToggles, 'features.featureGcaPiFlexiblePricingRevert', false) && (
            <>
              <FormattedMessage id="flexiblepricing.summary.revert_back_to_original_pricing" tagName="h2" />
              <FormattedMessage id="flexiblepricing.summary.you_can_revert_any_time" tagName="p" />
              <Button onClick={this.showActionModal} theme="hollow" className="revert-button">
                <FormattedMessage id="flexiblepricing.summary.switch_back" />
              </Button>
            </>
          )}
        </section>
        {isShowExisting && <CampaignsList type={Pages.FlexiblePricing} />}
        <Footer
          onClick={() => {
            this.props.clickOrInteract({
              action: 'Click',
              props: {
                name: 'Open Learn More Modal',
                page: 'Summary',
              },
            });
            this.setState({ showLearnMore: !showLearnMore });
          }}
        />
        {showLearnMore && (
          <ModalLearnMore
            onConfirm={() => {
              this.props.clickOrInteract({
                action: 'Click',
                props: {
                  name: 'Close Learn More Modal',
                  page: 'Summary',
                },
              });
              this.setState({ showLearnMore: !showLearnMore });
            }}
            {...({} as any)}
          />
        )}
        {showActionModal &&
          (summaryType === SummaryType.ShowExisting ? (
            <RevertModal
              onConfirm={() => {
                this.props.clickOrInteract({
                  action: 'Click',
                  props: {
                    name: 'Revert',
                    page: 'Revert Modal',
                  },
                });
                revertToOriginalPricingStarted({});
              }}
              onCancel={this.hideActionModal}
            />
          ) : (
            <ModalTermsAndConditions
              termsType={summaryTypeToTermsTypeMapping[summaryType]}
              confirm={postVisibilitySettingsStarted}
              onClose={this.hideActionModal}
            />
          ))}
      </Panel>
    );
  }

  private onClickEdit = (ev: any) => {
    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: 'Edit exposure',
        page: 'Summary',
      },
    });
    this.props.initializeForm(this.props.settings);
    this.props.setPageType(FlexiblePricingPageType.VisibilitySettings);
  };

  private getVisibilityForDayShift = (day: Days, shift: Times): { [visType in VisibilityType]: boolean } => {
    const { settings } = this.props;
    const visibility = {
      [VisibilityType.Increase]: false,
      [VisibilityType.Reduce]: false,
      [VisibilityType.Standard]: false,
    };
    Object.values(VisibilityType).forEach((type: VisibilityType) => {
      if (settings[type]) {
        visibility[type] = settings[type]!.schedule[day][shift] === true;
      }
    });
    return visibility;
  };

  private headerButtons() {
    const { summaryType } = this.props;
    return summaryType !== SummaryType.ShowExisting ? (
      <aside className="summary header-buttons">
        <Button onClick={this.onClick} value={ButtonType.Back}>
          <FormattedMessage id="flexiblepricing.visibilitysettings.back" />
        </Button>
        <Button onClick={this.showActionModal} theme="publish" value={ButtonType.Switch}>
          {summaryType === SummaryType.PreCommitFirstRun ? (
            <FormattedMessage id="flexiblepricing.summary.switch_to_flexible_pricing" />
          ) : (
            <FormattedMessage id="flexiblepricing.summary.make_changes" />
          )}
        </Button>
      </aside>
    ) : (
      undefined
    );
  }

  private makeSummary = (
    type: VisibilityType,
    intl: InjectedIntl,
    formattedDays: { [index: string]: string },
  ): string => {
    const { settings } = this.props;

    const summary: any = {};
    const noTimesMessage = intl.formatMessage({ id: 'flexiblepricing.summary.no_times_set' });
    if (!settings[type]) {
      return noTimesMessage;
    }
    const { schedule } = settings[type]!;
    Object.values(Days).forEach(day => {
      Object.values(Times).forEach(shift => {
        /* Again, TS3.0 would probably not require this level of type assertions :/ might revisit this */
        if (schedule[day as Days][shift as Times] === true) {
          if (Array.isArray(summary[day as Days])) {
            summary[day as Days]!.push(shift as Times);
          } else {
            summary[day as Days] = [shift as Times];
          }
        }
      });
    });

    return (
      Object.keys(summary)
        .map(
          day =>
            `${formattedDays[day]} (${
              (summary[day] as string[]).length === 3
                ? intl.formatMessage({ id: 'flexiblepricing.summary.all_day' })
                : summary[day]
                    .map((shift: string) => intl.formatMessage({ id: `times.${shift.toLowerCase()}.name` }))
                    .join(', ')
            })`,
        )
        .join(', ') || noTimesMessage
    );
  };

  private makeTd = (day: Days, shift: Times) => {
    const visibility = this.getVisibilityForDayShift(day, shift);
    const icon = visibility.increase ? (
      <OTKitIcon fill="white" name="icMetricChangeUp" />
    ) : visibility.reduce ? (
      <OTKitIcon fill="white" name="icMetricChangeDown" />
    ) : null;
    return (
      <td key={`${day}${shift}`} className={classNames(visibility)}>
        {icon}
      </td>
    );
  };

  private onClick = (ev: any) => {
    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: 'Back',
        page: 'Summary',
      },
    });
    this.props.setPageType(FlexiblePricingPageType.VisibilitySettings);
  };

  private showActionModal = () => {
    let actionName: string;
    switch (this.props.summaryType) {
      case SummaryType.ShowExisting:
        actionName = 'Revert to Standard Pricing';
        break;
      case SummaryType.PreCommitEdit:
        actionName = 'Make changes';
        break;
      case SummaryType.PreCommitFirstRun:
        actionName = 'Switch to Flexible Pricing';
        break;
    }
    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: actionName,
        page: 'Summary',
      },
    });
    this.setState({ showActionModal: true });
  };

  private hideActionModal = () => {
    let pageName: string;
    switch (this.props.summaryType) {
      case SummaryType.ShowExisting:
        pageName = 'Revert Modal';
        break;
      case SummaryType.PreCommitEdit:
        pageName = 'Terms & Conditions (Edit)';
        break;
      case SummaryType.PreCommitFirstRun:
        pageName = 'Terms & Conditions (First sign up)';
        break;
    }

    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: 'Close',
        page: pageName,
      },
    });
    this.setState({ showActionModal: false });
  };
}

const mapStateToProps = (state: State) => ({
  discoveryPrices: getExpectedDiscoveryPrices(state),
  featureToggles: state.featureToggles,
  hasPartialVisibility: getPartialVisibility(state),
  inUseDiscoveryRange: getInUseDiscoveryPriceRange(state),
  isUpdating: getIsUpdatingPricing(state),
  monthlyBudget: getMonthlyBudget(state),
  newDirectPricePerCover: getExpectedDirectPricePerCover(state),
  prices: getShownFlexPrices(state),
  settings: getShownVisibilitySettings(state)!,
  summaryType: getSummaryType(state),
});

const mapDispatch = {
  clickOrInteract,
  initializeForm,
  postVisibilitySettingsStarted: postVisibilitySettings.started,
  revertToOriginalPricingStarted: revertToOriginalPricing.started,
  setPageType,
};

export default connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatch,
)(injectIntl<NonIntlProps>(Summary));
