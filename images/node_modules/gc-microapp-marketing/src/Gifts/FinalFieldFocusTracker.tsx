import React, { Component } from 'react';
import { ClickOrInteractPayload } from '../store/gifts/gifts.types';

interface Props {
  trackFocus?: boolean;
  trackBlur?: boolean;
  fieldName: string;
  active: string | undefined;
  clickOrInteract: (payload: ClickOrInteractPayload) => void;
  pageName: string;
  formattedFieldName: string;
}

class FinalFieldFocusTracker extends Component<Props> {
  public componentDidUpdate(prevProps: Props) {
    /* This seems kind of dumb but it's basically the way the React-final-form
      examples do it, and I can't put an onFocus or onBlur directly on the
      inputs. */
    const { active, fieldName, formattedFieldName, pageName, clickOrInteract, trackFocus, trackBlur } = this.props;
    const { active: lastActive } = prevProps;

    if (trackFocus && lastActive !== fieldName && active === fieldName) {
      clickOrInteract({
        action: 'Focus',
        props: { name: `${formattedFieldName} Field`, page: pageName },
      });
    }

    if (trackBlur && lastActive === fieldName && active !== fieldName) {
      clickOrInteract({
        action: 'Blur',
        props: { name: `${formattedFieldName} Field`, page: pageName },
      });
    }
  }

  public render() {
    return null;
  }
}

export default FinalFieldFocusTracker;
