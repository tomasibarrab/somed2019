import { AsyncContent } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
import { State } from '../store/types';

import { actions } from '../store/gifts/gifts';

import { GiftsPageType } from '../store/gifts/gifts.types';
import GiftsFinished from './GiftsFinished';
import GiftsLanding from './GiftsLanding';
import GiftsMain from './GiftsMain';

interface SP {
  completed: boolean;
  error: boolean;
  loading: boolean;
  pageType: GiftsPageType;
}

interface DP {
  fetchGiftsUrl: () => void;
}

type OP = RouteComponentProps<any>;
type Props = SP & DP & OP & InjectedIntlProps;

class Gifts extends React.Component<Props, {}> {
  public render() {
    const { loading, error, intl, pageType } = this.props;

    let mainComponent;

    switch (pageType) {
      case GiftsPageType.FinishedPage:
        mainComponent = <GiftsFinished />;
        break;
      case GiftsPageType.LandingPage:
        mainComponent = <GiftsLanding />;
        break;
      default:
        mainComponent = <GiftsMain />;
        break;
    }

    return (
      <AsyncContent
        isLoading={loading}
        isError={error}
        errorTitle={intl.formatMessage({ id: 'app.errorTitle' })}
        errorMessage={intl.formatMessage({ id: 'app.errorMessage' })}
      >
        {mainComponent}
      </AsyncContent>
    );
  }

  public componentDidMount() {
    this.props.fetchGiftsUrl();
  }
}

const mapState = (state: State) => ({
  completed: state.gifts.success || state.gifts.error,
  error: state.gifts.error,
  loading: state.gifts.loading || state.user.loading,
  pageType: state.gifts.pageType,
});

const mapDispatch = {
  fetchGiftsUrl: actions.fetchGiftsUrl.started,
};

export default connect<SP, DP, OP>(
  mapState,
  mapDispatch,
)(injectIntl(Gifts));
export { Gifts as PureGifts };
