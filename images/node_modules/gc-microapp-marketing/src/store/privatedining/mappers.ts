import merge from 'gca-react-components/src/utils/merge';
import pickBy from 'lodash/pickBy';
import { Photo, PrivateDiningData, PrivateDiningDataDTO, Room, RoomDTO } from './privatedining.types';
import { privateDiningFormDefaults } from './privateDiningForm';

export const photo: Photo = {
  error: false,
  liveUrl: null,
  loading: true, // Default to true here so images initialize in loading state
  localUrl: null,
  pendingUrl: null,
};

const setPhone = (phone: string): string => phone.split('x')[0] || '';
const setExtension = (phone: string): string => phone.split('x')[1] || '';

export const mapFetchToStore = (response: PrivateDiningDataDTO): PrivateDiningData => {
  return privateDiningFormDefaults(
    merge(response, {
      // set draftSubmitted to true to bypass the 'draft' queue and post directly to the 'pending' queue
      draftSubmitted: true,
      photo,
      privatePartyPhone: (response.privatePartyPhone && setPhone(response.privatePartyPhone)) || '',
      privatePartyPhoneExt: (response.privatePartyPhone && setExtension(response.privatePartyPhone)) || '',
      requestId: response.requestId || null,
      rooms: response.rooms
        // By definition the roomId is 0 for room1 in an 'empty' form.
        // Force this room to be active, and first in the display order.
        .map((room: RoomDTO): RoomDTO => (room.roomId === 0 ? { ...room, active: true, listingOrder: 1 } : room))
        .sort((a, b): number => a.listingOrder - b.listingOrder)
        .map((room: RoomDTO): Room => ({ ...room, photo })),
    }),
  );
};

const mergePhone = (phone: string, ext: string) => (phone = ext ? phone + 'x' + ext : phone);

export const mergePostResponseAndFormToStore = (
  responseData: PrivateDiningDataDTO,
  formData: PrivateDiningData,
): PrivateDiningData => {
  // apply the latest room info from the post response - since it contains updated room IDs
  return {
    ...responseData,
    photo: formData.photo,
    privatePartyPhone: (responseData.privatePartyPhone && setPhone(responseData.privatePartyPhone)) || '',
    privatePartyPhoneExt: (responseData.privatePartyPhone && setExtension(responseData.privatePartyPhone)) || '',
    rooms: responseData.rooms.map(
      (room: RoomDTO, index: number): Room => ({
        ...room,
        photo: formData.rooms[index].photo,
      }),
    ),
  };
};

export const mapFormToDTO = (formData: PrivateDiningData, email: string): PrivateDiningDataDTO => {
  const phone = mergePhone(formData.privatePartyPhone, formData.privatePartyPhoneExt);
  const dataWithoutPhoto: any = pickBy(formData, (value: any, key: string) => key !== 'photo');
  const roomsWithoutPhotos: any[] = formData.rooms.map(room =>
    pickBy(room, (value: any, key: string) => key !== 'photo'),
  );

  return { ...dataWithoutPhoto, privatePartyPhone: phone, submittedBy: email, rooms: roomsWithoutPhotos };
};
