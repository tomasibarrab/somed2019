/* tslint:disable */
import configureMockStore from 'redux-mock-store';
import { createEpicMiddleware } from 'redux-observable';
import { of } from 'rxjs/observable/of';
import merge from 'gca-react-components/src/utils/merge';

import {
  fetchPrivateDiningEnabled,
  fetchPrivateDining,
  fetchPrivateDiningEnabledEpic,
  fetchPrivateDiningEpic,
  postPrivateDiningEpic,
  privateDiningReducer,
  privateDiningEnabledReducer,
} from './privatedining';

import { createSalesForceLead, postSalesForceLeadEpic, reducer } from '../leadgen/leadgen';

import { LeadGen, LeadGenType, Status } from '../leadgen/leadgen.types';

import { emptyForm, privateDiningFixture, privateDiningEnabledFixture } from './privateDiningFixture';
import { initialState } from '../user/user';
import { PrivateDiningData, PrivateDiningDataDTO, PrivateDiningBaseDTO, Photo, Room, RoomDTO } from './privatedining.types';

export const mockPhoto: Photo = {
    error: false,
    liveUrl: null,
    loading: true,
    localUrl: null,
    pendingUrl: null,
};
export let mockPrivateDiningDataDTO: PrivateDiningDataDTO = {
  draftSubmitted: false,
  enablePrivateDining: false,
  hasPrivateParty: false,
  isPDDraft: 1,
  languageID: 1,
  largestCapacity: 40,
  locale: 'en-US',
  modified: '2011-07-05T13:55:31.160Z',
  newPremiumRequest: false,
  partyShortDescription: 'Parties of up to 40 guests can be accommodated.',
  partyLongDescription: '',
  pdChangeMask: 28,
  premiumEnabled: false,
  privatePartyContact: 'Francis Black',
  privateDiningMenu: '',
  privateDiningThumbnail: '1290.jpg',
  privateDiningThumbnailURL: '',
  privatePartyEmail: '',
  privatePartyPhone: '6172270800',
  publishPrivateDining: true,
  requestId: 5225,
  rid: 1290,
  submittedBy: 'abc@xyz.com',
  thumbnailImageID: -1,
  rooms: [
    {
      privateRoomImageId: -1,
      roomChangeMask: 0,
      roomId: 30936,
      roomName: '',
      roomDescription: '',
      imageName: '',
      imageURL: '',
      seatedSize: 0,
      standingSize: 0,
      listingOrder: 1,
      active: true
    },
    {
      privateRoomImageId: -1,
      roomChangeMask: 0,
      roomId: 30937,
      roomName: '',
      roomDescription: '',
      imageName: '',
      imageURL: '',
      seatedSize: 0,
      standingSize: 0,
      listingOrder: 2,
      active: false
    },
    {
      privateRoomImageId: -1,
      roomChangeMask: 0,
      roomId: 30938,
      roomName: '',
      roomDescription: '',
      imageName: '',
      imageURL: '',
      seatedSize: 0,
      standingSize: 0,
      listingOrder: 3,
      active: false
    },
    {
      privateRoomImageId: -1,
      roomChangeMask: 0,
      roomId: 30939,
      roomName: '',
      roomDescription: '',
      imageName: '',
      imageURL: '',
      seatedSize: 0,
      standingSize: 0,
      listingOrder: 4,
      active: false
    },
    {
      privateRoomImageId: -1,
      roomChangeMask: 0,
      roomId: 30940,
      roomName: '',
      roomDescription: '',
      imageName: '',
      imageURL: '',
      seatedSize: 0,
      standingSize: 0,
      listingOrder: 5,
      active: false,
    },
  ],
};

export let mockPrivateDiningDataResult: any = { ...mockPrivateDiningDataDTO, 
                                                privatePartyPhone: '6172270800',
                                                privatePartyPhoneExt: '',
                                                draftSubmitted: true,
                                                photo: mockPhoto,
                                            };

mockPrivateDiningDataResult = merge(mockPrivateDiningDataResult, {
  rooms: mockPrivateDiningDataResult.rooms
  .map((room: RoomDTO): Room => ({ ...room, photo: mockPhoto }))
});

export const mockPrivateDiningDataEmptyDTO: PrivateDiningBaseDTO = { ...emptyForm, rid: 123 };

export const mockPrivateDiningEmptyResult: any = {
  draftSubmitted: true,
  enablePrivateDining: false,
  hasPrivateParty: false,
  isPDDraft: 0,
  languageID: 0,
  largestCapacity: 0,
  locale: 'en-US',
  modified: '',
  newPremiumRequest: true,
  partyLongDescription: '',
  partyShortDescription: '',
  pdChangeMask: 0,
  photo: {
    error: false,
    liveUrl: null,
    loading: true,
    localUrl: null,
    pendingUrl: null
  },
  premiumEnabled: true,
  privateDiningMenu: '',
  privateDiningThumbnail: '',
  privateDiningThumbnailURL: '',
  privatePartyContact: '',
  privatePartyEmail: '',
  privatePartyPhone: '',
  privatePartyPhoneExt: '',
  requestId: null,
  rid: 123,
  submittedBy: '',
  thumbnailImageID: 0,
  enablePrivateDining: false,
  publishPrivateDining: false,
  hasPrivateParty: false,
  locale: 'en-US',
  rooms: [
    {
      active: true,
      imageName: '',
      imageURL: '',
      listingOrder: 1,
      photo: {
        error: false,
        liveUrl: null,
        loading: true,
        localUrl: null,
        pendingUrl: null
      },
      privateRoomImageId: 0,
      roomChangeMask: 0,
      roomDescription: '',
      roomId: 0,
      roomName: '',
      seatedSize: 0,
      standingSize: 0
    },
    {
      active: false,
      imageName: '',
      imageURL: '',
      listingOrder: 2,
      photo: {
        error: false,
        liveUrl: null,
        loading: true,
        localUrl: null,
        pendingUrl: null
      },
      privateRoomImageId: 0,
      roomChangeMask: 0,
      roomDescription: '',
      roomId: 0,
      roomName: '',
      seatedSize: 0,
      standingSize: 0
    },
    {
      active: false,
      imageName: '',
      imageURL: '',
      listingOrder: 3,
      photo: {
        error: false,
        liveUrl: null,
        loading: true,
        localUrl: null,
        pendingUrl: null
      },
      privateRoomImageId: 0,
      roomChangeMask: 0,
      roomDescription: '',
      roomId: 0,
      roomName: '',
      seatedSize: 0,
      standingSize: 0
    },
    {
      active: false,
      imageName: '',
      imageURL: '',
      listingOrder: 4,
      photo: {
        error: false,
        liveUrl: null,
        loading: true,
        localUrl: null,
        pendingUrl: null
      },
      privateRoomImageId: 0,
      roomChangeMask: 0,
      roomDescription: '',
      roomId: 0,
      roomName: '',
      seatedSize: 0,
      standingSize: 0
    },
    {
      active: false,
      imageName: '',
      imageURL: '',
      listingOrder: 5,
      photo: {
        error: false,
        liveUrl: null,
        loading: true,
        localUrl: null,
        pendingUrl: null
      },
      privateRoomImageId: 0,
      roomChangeMask: 0,
      roomDescription: '',
      roomId: 0,
      roomName: '',
      seatedSize: 0,
      standingSize: 0
    }
  ]
};

describe('private dining reducer', () => {
  it('fetch private dining enabled ', () => {
    const action = { type: fetchPrivateDiningEnabled.started.type };
    const mockState = privateDiningEnabledFixture;
    const expectedResult = { ...mockState, loading: true };

    expect(privateDiningEnabledReducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch private dining enabled success ', () => {
    const action = {
      type: fetchPrivateDiningEnabled.done.type,
      payload: { params: {}, result: { enabled: true } },
    };
    const mockState = privateDiningEnabledFixture;
    const expectedResult = { ...mockState, enabled: true };

    expect(privateDiningEnabledReducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch private dining enabled error ', () => {
    const action = { type: fetchPrivateDiningEnabled.failed.type };
    const mockState = privateDiningEnabledFixture;
    const expectedResult = { ...mockState, error: true };

    expect(privateDiningEnabledReducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch private dining data ', () => {
    const action = { type: fetchPrivateDining.started.type };
    const mockState = privateDiningFixture;
    const expectedResult = { ...mockState, loading: true };

    expect(privateDiningReducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch private dining data success ', () => {
    const action = {
      type: fetchPrivateDining.done.type,
      payload: { params: {}, result: { isFormEmpty: false, privateDiningData: true } },
    };
    const mockState = privateDiningFixture;
    const expectedResult = { ...mockState, isFormEmpty: false, privateDiningData: true };

    expect(privateDiningReducer(mockState, action)).toEqual(expectedResult);
  });

  it('fetch private dining data error ', () => {
    const action = { type: fetchPrivateDining.failed.type };
    const mockState = privateDiningFixture;
    const expectedResult = { ...mockState, error: true };

    expect(privateDiningReducer(mockState, action)).toEqual(expectedResult);
  });

  it('request private dining ', () => {
    const action = { type: createSalesForceLead.started.type };
    const mockState = { status: Status.Init, requested: {} };
    const expectedResult = { ...mockState, status: Status.Started };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });

  it('request private dining success ', () => {
    const payload = {
      result: LeadGenType.PrivateDining,
      params: {
        type: LeadGenType.PrivateDining,
        user: {
          email: 'bogusemail88590@mailinator.com',
          firstName: 'John',
          lastName: 'Doe',
          phone: '',
        },
      },
    };
    const action = createSalesForceLead.done(payload);
    const mockState = { status: Status.Started, requested: {} };
    const expectedResult = { ...mockState, status: Status.Done, requested: { [LeadGenType.PrivateDining]: true } };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });

  it('request private dining error ', () => {
    const action = { type: createSalesForceLead.failed.type };
    const mockState = { status: Status.Started, requested: {} };
    const expectedResult = { ...mockState, status: Status.Failed };

    expect(reducer(mockState, action)).toEqual(expectedResult);
  });
});

// private dining action creators
//
describe('private dining actions', () => {
  it('fetch private dining enabled ', () => {
    const data = undefined;
    expect(fetchPrivateDiningEnabled.started(data)).toEqual({
      payload: undefined,
      type: fetchPrivateDiningEnabled.started.type,
    });
  });

  it('fetch private dining enabled success ', () => {
    const data = { params: {}, result: { enabled: true } };

    expect(fetchPrivateDiningEnabled.done(data)).toEqual({
      type: fetchPrivateDiningEnabled.done.type,
      payload: data,
    });
  });

  it('fetch private dining enabled error ', () => {
    const data = undefined;
    expect(fetchPrivateDiningEnabled.failed(data)).toEqual({
      type: fetchPrivateDiningEnabled.failed.type,
      error: true,
      payload: undefined,
    });
  });

  it('request private dining ', () => {
    const data = undefined;
    expect(createSalesForceLead.started(data)).toEqual({
      type: createSalesForceLead.started.type,
    });
  });

  it('request private dining success ', () => {
    const data = { params: {}, result: { requested: true } };
    expect(createSalesForceLead.done(data)).toEqual({
      type: createSalesForceLead.done.type,
      payload: data,
    });
  });

  it('request private dining error ', () => {
    const data = undefined;
    expect(createSalesForceLead.failed(data)).toEqual({
      type: createSalesForceLead.failed.type,
      error: true,
      payload: undefined,
    });
  });
});

// private dining epics
//
describe('fetchPrivateDiningEnabledEpic', () => {
  const state = {
    currentContext: {
      restaurant: {
        rid: 123,
      },
    },
  };

  const mockPrivateDiningEnabled = {
    enabled: true,
  };

  const dependencies = { api: { fetchPrivateDiningEnabled: () => of(mockPrivateDiningEnabled) } };
  const rootEpic = (action$, store) => fetchPrivateDiningEnabledEpic(action$, store, dependencies);
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {});

  afterEach(() => {
    epicMiddleware.replaceEpic(rootEpic);
  });

  it('should fetch the private dining enabled flag ', () => {
    // setup store with default empty private dining state
    store = mockStore({
      ...state,
      privateDiningEnabled: privateDiningEnabledFixture,
    });

    store.dispatch(fetchPrivateDiningEnabled.started({}));

    expect(store.getActions()).toEqual([
      fetchPrivateDiningEnabled.started({}),
      fetchPrivateDiningEnabled.done({ params: {}, result: { enabled: true } }),
    ]);
  });
});

describe('fetchPrivateDiningEpic', () => {
  const state = {
    currentContext: {
      restaurant: {
        rid: 123,
      },
    },
  };

  let dependencies = { api: { fetchPrivateDiningDTO: () => of(mockPrivateDiningDataEmptyDTO) } };
  let rootEpic = (action$, store) => fetchPrivateDiningEpic(action$, store, dependencies);
  let epicMiddleware = createEpicMiddleware(rootEpic);
  let mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {});

  afterEach(() => {
    epicMiddleware.replaceEpic(rootEpic);
  });

  it('should fetch private dining data, data set is empty -- happens when the rid has just been promoted in salesforce ', () => {
    // setup store with default empty private dining state
    store = mockStore({
      ...state,
      isFormEmpty: false,
      privateDiningData: '',
    });

    store.dispatch(fetchPrivateDining.started({}));

    expect(store.getActions()).toEqual([
      fetchPrivateDining.started({}),
      fetchPrivateDining.done({ params: {}, result: { isFormEmpty: true, privateDiningData: mockPrivateDiningEmptyResult } }),
    ]);
  });

  it('should fetch private dining data, data set includes a phone number without an extension ', () => {
    dependencies = { api: { fetchPrivateDiningDTO: () => of(mockPrivateDiningDataDTO) } };
    rootEpic = (action$, store) => fetchPrivateDiningEpic(action$, store, dependencies);
    epicMiddleware = createEpicMiddleware(rootEpic);
    mockStore = configureMockStore([epicMiddleware]);

    // setup store with default empty private dining state
    store = mockStore({
      ...state,
      isFormEmpty: false,
      privateDiningData: '',
    });

    store.dispatch(fetchPrivateDining.started({}));

    expect(store.getActions()).toEqual([
      fetchPrivateDining.started({}),
      fetchPrivateDining.done({ params: {}, result: { isFormEmpty: false, privateDiningData: mockPrivateDiningDataResult } }),
    ]);
  });

  it('should fetch private dining data, data set includes a phone number with an extension ', () => {

    mockPrivateDiningDataDTO = { ...mockPrivateDiningDataDTO, privatePartyPhone: '6172270800x1234'};
    mockPrivateDiningDataResult =  { ...mockPrivateDiningDataResult, privatePartyPhoneExt: '1234'};
    rootEpic = (action$, store) => fetchPrivateDiningEpic(action$, store, dependencies);
    epicMiddleware = createEpicMiddleware(rootEpic);
    mockStore = configureMockStore([epicMiddleware]);

    // setup store with default empty private dining state
    store = mockStore({
      ...state,
      isFormEmpty: false,
      privateDiningData: '',
    });

    store.dispatch(fetchPrivateDining.started({}));

    expect(store.getActions()).toEqual([
      fetchPrivateDining.started({}),
      fetchPrivateDining.done({ params: {}, result: { isFormEmpty: false, privateDiningData: mockPrivateDiningDataResult } }),
    ]);
  });
});

describe('postPrivateDiningEpic', () => {
  const state = {
    currentContext: {
      user: {
        id: '54efd1d76f8435051cca9877',
        role: 'Internal_User',
        userName: 'bogusemail88590@mailinator.com',
        firstName: 'John',
        lastName: 'Doe',
      },
      restaurant: {
        rid: 123,
        name: 'A Test Restaurant',
        isClaimedListing: false,
        address: {
          street1: null,
          street2: null,
          city: 'San Francisco',
          province: 'California',
          provinceCode: 'CA',
          country: 'United States',
          countryCode: 'US',
          postalCode: null,
        },
      },
    },
  };

  const user = {
    email: 'bogusemail88590@mailinator.com',
    firstName: 'John',
    lastName: 'Doe',
    phone: '',
  };

  const leadgenInitialState: LeadGen = {
    requested: {},
    status: Status.Init,
  };

  const dependencies = { api: { postSalesForceLead: () => of(true) } };
  const rootEpic = (action$, store) => postSalesForceLeadEpic(action$, store, dependencies);
  const epicMiddleware = createEpicMiddleware(rootEpic);
  const mockStore = configureMockStore([epicMiddleware]);

  let store;
  beforeEach(() => {});

  afterEach(() => {
    epicMiddleware.replaceEpic(rootEpic);
  });

  it('should post a salesforce request', () => {
    // setup store with default empty private dining state
    store = mockStore({
      ...state,
      leadgen: leadgenInitialState,
      privateDining: privateDiningFixture,
      user: initialState,
    });

    store.dispatch(createSalesForceLead.started({ type: LeadGenType.PrivateDining, user: user }));

    expect(store.getActions()).toEqual([
      createSalesForceLead.started({ type: LeadGenType.PrivateDining, user: user }),
      createSalesForceLead.done({
        params: { type: LeadGenType.PrivateDining, user: user },
        result: LeadGenType.PrivateDining,
      }),
    ]);
  });
});
