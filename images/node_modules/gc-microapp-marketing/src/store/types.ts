import { CurrentContext } from 'gca-react-components/src/redux-modules/currentContext';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import { LanguageProvider } from 'gca-react-components/src/redux-modules/languageProvider';
import { Dispatch as ReduxDispatch, Store as ReduxStore } from 'redux';
import { ActionsObservable } from 'redux-observable';
import { Observable } from 'rxjs/Observable';

import { Action as FsaAction } from 'typescript-fsa';
import { LeadGen } from './leadgen/leadgen.types';

// tslint:disable-next-line:max-line-length
import RestaurantPIPropertiesState from '../../../../shared_modules/shared-pi-properties-store/restaurantPIProperties.types';
import { CampaignsType } from './campaigns/campaigns.types';
import { FlexiblePricingState } from './flexiblepricing/flexiblepricing.types';
import { GiftsState } from './gifts/gifts.types';
import { InsightsState } from './insights/insights.types';
import { PrivateDining, PrivateDiningEnabled } from './privatedining/privatedining.types';
import { Promos } from './promos/promos.types';
import { User } from './user/user.types';

import { Dependencies } from './store';

export interface State {
  currentContext: CurrentContext;
  featureToggles: FeatureToggles;
  language: LanguageProvider;
  promos: Promos;
  privateDining: PrivateDining;
  privateDiningEnabled: PrivateDiningEnabled;
  leadGen: LeadGen;
  user: User;
  campaigns: CampaignsType;
  gifts: GiftsState;
  flexiblePricing: FlexiblePricingState;
  insights: InsightsState;
  restaurantPIProperties: RestaurantPIPropertiesState;
}

export interface AsyncData<T> {
  loading: boolean;
  error?: boolean;
  data?: T;
}

export type Action = FsaAction<any>;

export type Store = ReduxStore<State>;

export type Dispatch = ReduxDispatch<Action>;
export type Epic = (action$: ActionsObservable<Action>, store: Store, options: Dependencies) => Observable<Action>;
