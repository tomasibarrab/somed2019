import { createMixpanelMiddleware, mixpanel } from 'gca-react-components';
import { State } from './types';

import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import isOpenTableEmail from '../PromotedInventory/isOpenTableEmail';
import { actions as campaignsActions } from './campaigns/campaigns';
import { CampaignState, ModalType, Pages } from './campaigns/campaigns.types';
import { actions as flexiblePricingActions } from './flexiblepricing/flexiblepricing';
import { actions as giftsActions } from './gifts/gifts';
import { createSalesForceLead } from './leadgen/leadgen';
import { postPrivateDining } from './privatedining/privatedining';
import { updatePromo } from './promos/promos';

// TODO: Move this into a shared location
/**
 * Formats a path to a human friendly name.
 * e.g. `/account-balance/current` -> `Account Balance: Current`
 */
export const formatPathAsPageName = (str: string) =>
  str
    .slice(1)
    .split('/')
    .map((segment: string) =>
      segment
        .split('-')
        .map((word: string) => {
          if (word.length > 0) {
            return word.replace(word[0], word[0].toUpperCase());
          }

          return '';
        })
        .join(' '),
    )
    .join(': ');

const pathFragments = (str: any) => (!str ? [] : str.slice(1).split('/'));

/**
 * return first or last fragment; feature is first and page last
 */
const pathAsPageName = (str: any) => pathFragments(str).pop();

const pathAsFeatureName = (str: any) => pathFragments(str).shift();

/**
 * remove any -'s and capitalize string passed
 * e.g. guest-campaigns returns Guest Campaigns
 */
const capitalize = (str: string | undefined | void) =>
  !str
    ? ''
    : str
        .split('-')
        .map(word => word.replace(word[0], word[0].toUpperCase()))
        .join(' ');

const GUEST_CAMPAIGNS = 'Guest Campaigns';
const PRIVATE_DINING = 'Private Dining';
const PROMOS = 'Seasonal/Featured Promos';

const addCommonPIProps = (state: State, props: any) => ({
  ...state.restaurantPIProperties.data,
  ...props,
});

const trackedActions = {
  '@@router/LOCATION_CHANGE': {
    event: mixpanel.eventNames.LOAD_PAGE,
    props: (state: State, action: any): any => {
      if (action.payload && typeof action.payload.pathname === 'string') {
        const pageName = capitalize(pathAsPageName(action.payload.pathname));
        // hack rule but if ends in /private-dining then don't track
        // also don't add track if just a hash change (campaigns adds hash to url)
        if (pageName === PRIVATE_DINING || action.payload.hash !== '') {
          return { skip: true };
        }
        let feature = pageName;
        // if more than one part e.g. /private-dining/lead then use correct feature
        if (action.payload.pathname.split('/').length - 1 > 1) {
          feature = capitalize(pathAsFeatureName(action.payload.pathname));
        }

        // Don't add common PI props to this tracking event since they will not be loaded
        // when it is fired. Page load information with commonPIProps will still be available
        // in the other LOAD_PAGE event further down
        return {
          'Page name': pageName,
          feature,
        };
      }

      throw new Error('Error in action format.');
    },
  },
  [createSalesForceLead.started.type]: {
    event: mixpanel.eventNames.PUBLISH,
    props: (state: State, action: any): any => {
      if (action.payload && typeof action.payload.type === 'string') {
        const feature = action.payload.type === 'PRIVATE_DINING' ? PRIVATE_DINING : GUEST_CAMPAIGNS;
        return addCommonPIProps(state, {
          action: mixpanel.actionNames.CREATE,
          feature,
          info: 'Lead Gen',
        });
      }
      throw new Error('Error in action format.');
    },
  },
  [postPrivateDining.started.type]: {
    event: mixpanel.eventNames.PUBLISH,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: mixpanel.actionNames.UPDATE,
        feature: PRIVATE_DINING,
        info: 'Edit',
      }),
  },
  [updatePromo.started.type]: {
    event: mixpanel.eventNames.PUBLISH,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: mixpanel.actionNames.UPDATE,
        feature: PROMOS,
      }),
  },
  // Campaigns
  [campaignsActions.clickCallToAction.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Click',
        feature: 'Call To Action',
        ...action.payload,
      }),
  },
  [campaignsActions.closeCreationTermsModal.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Close',
        feature: 'Creation Terms Modal',
      }),
  },
  [campaignsActions.createCampaign.done.type]: {
    event: mixpanel.eventNames.PUBLISH,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: mixpanel.actionNames.CREATE,
        feature: 'Specials',
        info: 'success',
        type: action.payload.params.formValues.type,
      }),
  },
  [campaignsActions.fetchCampaigns.done.type]: {
    event: mixpanel.eventNames.LOAD_PAGE,
    props: (state: State, action: any): any => {
      // since we don't start fetching campaigns until the currentContext is fully loaded,
      // selectors.user(state).userName should always have the user's email in it as
      // far as this section of code is concerned
      const userEmail = selectors.user(state).userName;

      // Leave undefined in case the user is internal and the page is not Flex or CP
      let hasPendingDisabledCPApproval;

      if (!isOpenTableEmail(userEmail) &&
        (action.payload.params.pageType === Pages.CustomPromotions ||
          action.payload.params.pageType === Pages.FlexiblePricing)
      ) {
        const approvalCampaigns = (action.payload.result || [])
          .filter(
            campaign =>
              campaign.needsDecisionMakerApproval &&
              campaign.state === CampaignState.Draft,
          );

        const campaignsAbleToApprove = approvalCampaigns.filter(
          campaign => campaign.restaurantContactEmail === userEmail,
        );

        // If they have campaigns to approve, but can't approve any of them, output true.
        hasPendingDisabledCPApproval = (approvalCampaigns.length > 0 && campaignsAbleToApprove.length === 0);
      }

      // Should we not count opentable users when determining whether or not to set this property to true?
      return addCommonPIProps(state, {
        feature: 'Get Campaigns',
        pageName: action.payload.params.pageType,
        ...action.payload.params,
        hasPendingDisabledCPApproval,
      });
    },
  },
  [campaignsActions.openCreationTermsModal.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Open',
        feature: 'Creation Terms Modal',
      }),
  },
  [campaignsActions.openModal.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Open',
        feature: 'Modal',
        type: ModalType[action.payload.type],
      }),
  },
  [campaignsActions.patchCampaign.done.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Patch',
        feature: 'Campaign',
        ...action.payload.params,
      }),
  },
  [campaignsActions.putSuppressionDates.done.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Put',
        feature: 'Suppression Dates',
      }),
  },
  [giftsActions.patchGiftsUrl.done.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: 'Patch',
        feature: 'Gifts URL',
        ...action.payload.params,
      }),
  },
  [giftsActions.clickOrInteract.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: action.payload.action,
        feature: 'Gifts',
        ...action.payload.props,
      }),
  },
  [flexiblePricingActions.clickOrInteract.type]: {
    event: mixpanel.eventNames.CUSTOM_ACTION,
    props: (state: State, action: any): any =>
      addCommonPIProps(state, {
        action: action.payload.action,
        feature: 'FlexiblePricing',
        ...action.payload.props,
      }),
  },
};

export default createMixpanelMiddleware({
  defaultProps: {
    app: 'Marketing',
  },
  trackedActions,
});
