import get from 'lodash/get';
import { createSelector } from 'reselect';
import { State } from '../types';
import { PromoForm } from './promoForm';
import { currentPromoSelector } from './promos';
import {
  CreditCardDay,
  CreditCardMessagespec,
  DayOfReservationCutoffPenalty,
  PromoRestaurant,
  RestaurantPromo,
  TimeSpanCutoffPenalty,
  UpdatePromoBody,
} from './promos.types';

const MIDNIGHT = '00:00';

const buildTimeSpanCutoffPenalty = ({ amount, days }: PromoForm): TimeSpanCutoffPenalty => ({
  amount,
  timeSpanCutoff: {
    days,
  },
});

const buildDayOfReservationCutoffPenalty = ({ amount }: PromoForm): DayOfReservationCutoffPenalty => ({
  amount,
  dayOfReservationCutoff: {
    time: MIDNIGHT,
  },
});

const buildSpecification = (form: PromoForm): CreditCardMessagespec => ({
  schemaVersion: 1,
  specification: {
    cancellationPenalty: form.days < 1 ? buildDayOfReservationCutoffPenalty(form) : buildTimeSpanCutoffPenalty(form),
  },
});

export function buildCreditCardDay(
  state: State,
  payload: null | PromoForm,
  currentPromo: RestaurantPromo,
): CreditCardDay | null {
  if (payload === null || payload.requireCreditCard === false) {
    return null;
  }

  const Specification = payload.inform ? buildSpecification(payload) : undefined;
  const times = payload.allShifts ? {} : { startTime: payload.startTime, endTime: payload.endTime };

  return {
    Specification,
    createdBy: state.currentContext.user.firstName,
    createdDateTime: new Date().toISOString(),
    effectiveDate: currentPromo.promo.eventDates.start,
    partySize: 1,
    ...times,
  };
}

/** Given the current state, and a form payload, builds a PromoRestaurant  */
export function buildPromoRestaurant(
  state: State,
  payload: null | PromoForm,
  currentPromo: RestaurantPromo,
): PromoRestaurant | null {
  if (payload === null) {
    return null;
  }

  return {
    isActive: true,
    language: state.promos.primaryLanguage,
    message: payload.message,
    rank: (currentPromo && currentPromo.promoRestaurant && currentPromo.promoRestaurant.rank) || 1,
    updatedBy: state.currentContext.user.userName,
    updatedOn: new Date().toISOString(),
  };
}

export function mapStoreToUpdate(state: State, payload: null | PromoForm): UpdatePromoBody {
  const currentPromo = currentPromoSelector(state);

  if (currentPromo === null) {
    throw new Error("currentPromoId is required, but we've gotten here without one.");
  }

  return {
    ...currentPromo,
    creditCardDay: buildCreditCardDay(state, payload, currentPromo),
    isNewPromoRestaurant: currentPromo.promoRestaurant === null,
    promoRestaurant: buildPromoRestaurant(state, payload, currentPromo),
  };
}
