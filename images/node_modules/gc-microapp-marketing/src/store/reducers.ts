/**
 * Combine all reducers in this file and export the combined reducers.
 * If we were to do this in store.js, reducers wouldn't be hot reloadable.
 */

import { currentContextReducer } from 'gca-react-components/src/redux-modules/currentContext';
import { featureTogglesReducer } from 'gca-react-components/src/redux-modules/featureToggles';
import {
  createReducer as createLanguageReducer,
  LangLocale,
} from 'gca-react-components/src/redux-modules/languageProvider';
import get from 'lodash/get';
import { routerReducer } from 'react-router-redux';
import { combineReducers } from 'redux';
import customFormReducer from './form/form';
import { reducer as leadGen } from './leadgen/leadgen';
import { privateDiningEnabledReducer, privateDiningReducer } from './privatedining/privatedining';

import { promosReducer } from './promos/promos';
import { State } from './types';

// tslint:disable-next-line:max-line-length
import { reducer as restaurantPIProperties } from '../../../../shared_modules/shared-pi-properties-store/restaurantPIProperties';
import { reducer as campaigns } from './campaigns/campaigns';
import { reducer as flexiblePricing } from './flexiblepricing/flexiblepricing';
import { reducer as gifts } from './gifts/gifts';
import { reducer as insights } from './insights/insights';
import { reducer as user } from './user/user';

const locale: LangLocale = get(window, ['gcaConfig', 'i18n', 'primaryLocale']);
/**
 * Creates the main reducer with the asynchronously loaded ones
 */

export default function createReducer() {
  return combineReducers<State>({
    campaigns,
    currentContext: currentContextReducer,
    featureToggles: featureTogglesReducer,
    flexiblePricing,
    form: customFormReducer,
    gifts,
    insights,
    language: createLanguageReducer({ locale: locale || LangLocale.AmericanEnglish }),
    leadGen,
    privateDining: privateDiningReducer,
    privateDiningEnabled: privateDiningEnabledReducer,
    promos: promosReducer,
    restaurantPIProperties,
    route: routerReducer,
    user,
  });
}
