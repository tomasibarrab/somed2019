import { AsyncContent } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { fetchPrivateDining } from '../../store/privatedining/privatedining';
import { Dispatch, State } from '../../store/types';
import EnabledForm from './EnabledForm';

interface SP {
  error: boolean;
  loading: boolean;
}

interface DP {
  fetchPrivateDining: () => void;
}

export type Props = SP & DP & InjectedIntlProps;

class PrivateDiningEnabled extends React.Component<Props> {
  public render() {
    const { loading, error, intl: { formatMessage } } = this.props;

    return (
      <AsyncContent
        isLoading={loading}
        isError={error}
        errorTitle={formatMessage({ id: 'app.errorTitle' })}
        errorMessage={formatMessage({ id: 'app.errorMessage' })}
      >
        <EnabledForm />
      </AsyncContent>
    );
  }

  public componentWillMount() {
    this.props.fetchPrivateDining();
  }
}

const mapState = (state: State) => {
  return {
    error: state.privateDining.error,
    loading: state.privateDining.loading,
  };
};

const mapDispatch = (dispatch: Dispatch) => ({
  fetchPrivateDining() {
    dispatch(fetchPrivateDining.started(true));
  },
});

export default connect(mapState, mapDispatch)(injectIntl(PrivateDiningEnabled));
