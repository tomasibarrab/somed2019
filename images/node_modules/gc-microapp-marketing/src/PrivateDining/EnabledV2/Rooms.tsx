import classNames from 'classnames';
import { Button, CheckboxField, Fieldset, InputField, LabelGroup, TextAreaField } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Field, WrappedFieldArrayProps } from 'redux-form';
import { pdFormValueSelector } from './EnabledForm';
import PhotoController from './Photo/PhotoController';

import './Rooms.scss';

export const enum RoomFields {
  Active = 'active',
  ImageName = 'imageName',
  RoomId = 'roomId',
  RoomName = 'roomName',
  RoomDescription = 'roomDescription',
  SeatedSize = 'seatedSize',
  StandingSize = 'standingSize',
}

interface SP {
  room: string;
  index: number;
  getLabel: any;
  isEmpty: boolean;
  isAdded: boolean;
}

export type RoomXProps = SP;

class RoomX extends React.Component<RoomXProps> {
  public state = { isAdded: false };

  constructor(props: RoomXProps) {
    super(props);
    this.addRoom = this.addRoom.bind(this);
  }

  public render() {
    const { room, index, getLabel, isEmpty } = this.props;

    return (
      <span>
        {index > 0 && (!isEmpty || this.state.isAdded) ? (
          <CheckboxField
            className="active"
            name={`${room}.${RoomFields.Active}`}
            label={getLabel('fields.room.active')}
          />
        ) : null}

        {index === 0 || !isEmpty || this.state.isAdded ? (
          <span>
            <LabelGroup label={getLabel('fields.room.name')}>
              <InputField name={`${room}.${RoomFields.RoomName}`} />
            </LabelGroup>

            <LabelGroup label={getLabel('fields.room.description')}>
              <TextAreaField name={`${room}.${RoomFields.RoomDescription}`} max={500} rows={7} />
            </LabelGroup>

            <div className="capacity">
              <LabelGroup label={getLabel('fields.room.seated')}>
                <InputField type="number" name={`${room}.${RoomFields.SeatedSize}`} />
              </LabelGroup>

              <LabelGroup label={getLabel('fields.room.standing')}>
                <InputField type="number" name={`${room}.${RoomFields.StandingSize}`} />
              </LabelGroup>
            </div>

            <LabelGroup label={getLabel('fields.room.photo')}>
              <Field name={`${room}.photo`} component={PhotoController} height={240} width={240} />
            </LabelGroup>
          </span>
        ) : (
          <Button theme="link" onClick={this.addRoom} className="add-room">
            {getLabel('fields.room.add')}
          </Button>
        )}
      </span>
    );
  }

  private addRoom() {
    this.setState({ isAdded: true });
  }
}

const RoomExtended = connect(
  (
    state,
    props: {
      room: string;
      index: number;
      getLabel: (message: string) => string;
      isEmpty: boolean;
    },
  ) => {
    return {
      ...props,
      isEmpty:
        pdFormValueSelector(state, `${props.room}.${RoomFields.RoomId}`) === 0 ||
        (pdFormValueSelector(state, `${props.room}.${RoomFields.RoomName}`).length === 0 &&
          pdFormValueSelector(state, `${props.room}.${RoomFields.RoomDescription}`).length === 0 &&
          (pdFormValueSelector(state, `${props.room}.${RoomFields.SeatedSize}`) === '' ||
            pdFormValueSelector(state, `${props.room}.${RoomFields.SeatedSize}`) === 0) &&
          (pdFormValueSelector(state, `${props.room}.${RoomFields.StandingSize}`) === '' ||
            pdFormValueSelector(state, `${props.room}.${RoomFields.StandingSize}`) === 0) &&
          pdFormValueSelector(state, `${props.room}.${RoomFields.ImageName}`).length === 0),
    };
  },
)(RoomX);

const Room = (getLabel: (message: string) => string) => (room: string, index: number) => (
  <fieldset key={index} className="room">
    <RoomExtended room={room} index={index} getLabel={getLabel} isEmpty={false} />
  </fieldset>
);

type Props = WrappedFieldArrayProps<any> & InjectedIntlProps;

// tslint:disable-next-line:max-classes-per-file
class Rooms extends React.Component<Props> {
  public render() {
    const { fields, intl: { formatMessage } } = this.props;
    const getLabel = (message: string): string => formatMessage({ id: `privatedining.enabled.v2.${message}` });

    return (
      <Fieldset
        legend={getLabel('section.rooms.title')}
        description={getLabel('section.rooms.description')}
        className="rooms"
      >
        {fields.map(Room(getLabel))}
      </Fieldset>
    );
  }
}

export default injectIntl(Rooms);
