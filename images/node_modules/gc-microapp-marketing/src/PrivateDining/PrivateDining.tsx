import { AsyncContent } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { RouteComponentProps } from 'react-router-dom';
import { Dispatch, State } from '../store/types';

import { fetchPrivateDining, fetchPrivateDiningEnabled } from '../store/privatedining/privatedining';
import { fetchUser } from '../store/user/user';

import PrivateDiningEnabled from './Enabled/Enabled';
import PrivateDiningEnabledV2 from './EnabledV2/EnabledV2';
import PrivateDiningLead from './Lead/Lead';
import PrivateDiningRequested from './Requested/Requested';

import { Redirect, Route, Switch } from 'react-router-dom';
import { Routes } from '../common/App/App';

import './PrivateDining.scss';

const pdRequestedRoute = `${Routes.PrivateDining}/requested`;
const pdEnabledRoute = `${Routes.PrivateDining}/enabled`;
const pdLeadRoute = `${Routes.PrivateDining}/lead`;

interface SP {
  completed: boolean;
  enabled: boolean;
  error: boolean;
  loading: boolean;
  requested: boolean;
  privateDiningFeatureV2Enabled: boolean;
}

interface DP {
  fetchPrivateDiningEnabled: () => void;
  fetchUserRequest: () => void;
}

type OP = RouteComponentProps<any>;
type Props = SP & DP & OP & InjectedIntlProps;

class PrivateDining extends React.Component<Props, {}> {
  public render() {
    let currentSwitch;
    const { completed, loading, error, enabled, requested, intl, privateDiningFeatureV2Enabled } = this.props;

    const enabledSwitch = (
      <Switch>
        {privateDiningFeatureV2Enabled && <Route path={pdEnabledRoute} component={PrivateDiningEnabledV2} />}
        <Route path={pdEnabledRoute} component={PrivateDiningEnabled} />
        <Redirect to={pdEnabledRoute} />
      </Switch>
    );

    const requestedSwitch = (
      <Switch>
        <Route path={pdRequestedRoute} component={PrivateDiningRequested} />
        <Redirect to={pdRequestedRoute} />
      </Switch>
    );

    const leadSwitch = (
      <Switch>
        <Route path={pdLeadRoute} component={PrivateDiningLead} />
        <Redirect to={pdLeadRoute} />
      </Switch>
    );

    if (enabled) {
      currentSwitch = enabledSwitch;
    } else if (requested) {
      currentSwitch = requestedSwitch;
    } else {
      currentSwitch = leadSwitch;
    }

    return (
      <AsyncContent
        isLoading={loading}
        isError={error}
        errorTitle={intl.formatMessage({ id: 'app.errorTitle' })}
        errorMessage={intl.formatMessage({ id: 'app.errorMessage' })}
      >
        {currentSwitch}
      </AsyncContent>
    );
  }

  public componentDidMount() {
    if (!this.props.completed) {
      this.props.fetchUserRequest();
    }
    this.props.fetchPrivateDiningEnabled();
  }
}

const mapState = (state: State) => ({
  completed: state.user.success || state.user.error,
  enabled: state.privateDiningEnabled.enabled,
  error: state.privateDiningEnabled.error,
  loading: state.privateDiningEnabled.loading || state.user.loading,
  privateDiningFeatureV2Enabled: !!state.featureToggles.features.featureGcaPrivateDiningV2,
  requested: state.privateDiningEnabled.requested,
});

const mapDispatch = {
  fetchPrivateDiningEnabled: fetchPrivateDiningEnabled.started,
  fetchUserRequest: fetchUser.started,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl(PrivateDining));
export { PrivateDining as PurePrivateDining };
