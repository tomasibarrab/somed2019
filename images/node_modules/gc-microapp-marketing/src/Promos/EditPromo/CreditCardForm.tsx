import classNames from 'classnames';
import { Button, CheckboxField, ExternalLinkIcon, SelectField, TimeRangeField } from 'gca-react-components';
import range from 'lodash/range';
import * as React from 'react';
import { FormattedMessage } from 'react-intl';
import { Fields, Props } from './EditPromoForm';

const START_RANGE = '00:00:00';
const END_RANGE = '24:00:00';
const INCREMENT = 30;

interface SelectOption {
  value: number | boolean;
  label: string;
}

export class CreditCardForm extends React.Component<Props, {}> {
  private dayOptions: SelectOption[];
  private amountOptions: SelectOption[];
  private allShiftsOptions: SelectOption[];

  constructor(props: Props) {
    super(props);

    this.dayOptions = this.makeDayOptions();
    this.amountOptions = this.makeAmountOptions();
    this.allShiftsOptions = this.makeallShiftsOptions();
  }

  public render() {
    const {
      creditCardEnabled,
      currentPromo,
      inform,
      allShifts,
      intl: { formatMessage },
      requireCreditCard,
      rid,
    } = this.props;

    const timeRangeLabels = {
      end: formatMessage({ id: 'promos.form.timeRangeEnd' }),
      invalid: formatMessage({ id: 'promos.form.timeRangeInvalidMessage' }),
      start: formatMessage({ id: 'promos.form.timeRangeStart' }),
      to: formatMessage({ id: 'promos.form.timeRangeDivider' }),
    };

    const isEditMode = !!currentPromo.promoRestaurant;
    const informDisabled = !creditCardEnabled || !inform;
    const restaurantSettingsLink = (
      <Button type="a" theme="link" href={`/${rid}/settings#/payments`} target="_blank">
        <FormattedMessage id="promos.form.restaurantSettings" /> <ExternalLinkIcon height="14" />
      </Button>
    );

    return (
      <div className="credit-card-form">
        {!creditCardEnabled && (
          <FormattedMessage tagName="p" id="promos.form.enableCreditCard" values={{ restaurantSettingsLink }} />
        )}

        <CheckboxField
          name={Fields.RequireCreditCard}
          label={formatMessage({ id: 'promos.form.requireCreditCard' })}
          disabled={!creditCardEnabled}
        />

        <div className={classNames('time-range-container', 'labelrow', { disabled: !requireCreditCard })}>
          <SelectField
            className="all-shifts-select"
            name={Fields.AllShifts}
            options={this.allShiftsOptions}
            disabled={!requireCreditCard}
          />
          {!allShifts && (
            <TimeRangeField
              className="time-range-select"
              startName="startTime"
              endName="endTime"
              startRange={START_RANGE}
              endRange={END_RANGE}
              increment={INCREMENT}
              labels={timeRangeLabels}
              disabled={!requireCreditCard}
              outputWithSeconds
            />
          )}
        </div>

        <CheckboxField
          name={Fields.Inform}
          label={formatMessage({ id: 'promos.form.inform' })}
          disabled={!creditCardEnabled || !requireCreditCard}
        />

        <div className={classNames('labelrow', { disabled: informDisabled })}>
          <FormattedMessage tagName="label" id="promos.form.amount" />
          <SelectField name={Fields.Amount} options={this.amountOptions} disabled={informDisabled} />
        </div>

        <div className={classNames('labelrow', { disabled: informDisabled })}>
          <FormattedMessage tagName="label" id="promos.form.days" />
          <SelectField name={Fields.Days} options={this.dayOptions} disabled={informDisabled} />
        </div>
      </div>
    );
  }

  private makeAmountOptions() {
    return range(5, 155, 5).map(a => ({ value: a, label: `$${a}` }));
  }

  private makeallShiftsOptions() {
    const formatMessage = this.props.intl.formatMessage;
    return [
      { value: false, label: formatMessage({ id: 'promos.form.betweenTimes' }) },
      { value: true, label: formatMessage({ id: 'promos.form.duringAllShifts' }) },
    ];
  }

  private makeDayOptions() {
    const formatMessage = this.props.intl.formatMessage;

    const baseDayOptions = [
      { value: 0, label: formatMessage({ id: 'promos.form.dayOf' }) },
      { value: 1, label: formatMessage({ id: 'promos.form.dayBefore' }) },
    ];

    const dynamicDayOptions = [2, 3, 4, 5, 6, 7].map(d => ({
      label: formatMessage({ id: 'promos.form.daysBefore' }, { days: d }),
      value: d,
    }));

    return baseDayOptions.concat(dynamicDayOptions);
  }
}
