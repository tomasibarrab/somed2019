// Remove this once Button onClicks open links/modals (based on promoId)
/* eslint-disable react/no-unused-prop-types, no-unused-vars */

import isFuture from 'date-fns/is_future';
import { Button, ExternalLinkIcon, PencilIcon } from 'gca-react-components';
import * as React from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { editPromo } from '../../../store/promos/promos';
import { RestaurantPromo } from '../../../store/promos/promos.types';
import { State } from '../../../store/types';

interface OP {
  promo: RestaurantPromo;
}
interface SP {
  metroId: number;
}
interface DP {
  editPromo: (id: number) => void;
}

type Props = OP & SP & DP;

class PromoCardActions extends React.Component<Props, {}> {
  constructor(props: Props) {
    super(props);

    this.editPromo = this.editPromo.bind(this);
  }

  public render() {
    const { metroId, promo: { id, promo: { liveNow } } } = this.props;
    const joined = this.props.promo.promoRestaurant && this.props.promo.promoRestaurant.isActive;
    const available = isFuture(this.props.promo.promo.eventDates.end);
    const viewUrl = `https://www.opentable.com/promo.aspx?m=${metroId}&pid=${id}`;

    const joinButton = (
      <Button theme="hollow" onClick={this.editPromo}>
        <FormattedMessage id="promos.card.join" />
      </Button>
    );

    const viewButton = (
      <Button theme="link" type="a" target="_blank" to={viewUrl}>
        <ExternalLinkIcon height="16" />
        <span>
          <FormattedMessage id="promos.card.view" />
        </span>
      </Button>
    );

    const editButton = (
      <Button theme="link" onClick={this.editPromo}>
        <PencilIcon height="20" />
        <span>
          <FormattedMessage id="promos.card.edit" />
        </span>
      </Button>
    );

    return (
      <div className="column-actions">
        {joined && liveNow && viewButton}
        {joined && editButton}
        {!joined && available && joinButton}
      </div>
    );
  }

  private editPromo() {
    this.props.editPromo(this.props.promo.id);
  }
}

const mapState = (state: State) => ({ metroId: state.promos.metroId });

const mapDispatch = {
  editPromo,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(PromoCardActions);
