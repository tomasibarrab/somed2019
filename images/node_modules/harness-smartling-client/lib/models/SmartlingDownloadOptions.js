'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}module.exports = function (SmartlingBaseOptions, SmartlingRetrievalTypes, SmartlingFileNameModes,
SmartlingLocaleModes) {var
  SmartlingDownloadOptions = function (_SmartlingBaseOptions) {_inherits(SmartlingDownloadOptions, _SmartlingBaseOptions);
    function SmartlingDownloadOptions(props) {_classCallCheck(this, SmartlingDownloadOptions);var _this = _possibleConstructorReturn(this,
      _SmartlingBaseOptions.call(this, props));

      _this.localeIds = props.localeIds || ['en-us'];

      _this.retrievalType = props.retrievalType || SmartlingRetrievalTypes.published;

      _this.fileNameMode = props.fileNameMode || SmartlingFileNameModes.trimLeading;

      _this.localeMode = props.localMode || SmartlingLocaleModes.localeInPath;

      if (props.zipFileName) {
        _this.zipFileName = props.zipFileName;
      }

      if (props.includeOriginalStrings !== undefined) {
        _this.includeOriginalStrings = props.includeOriginalStrings;
      }return _this;
    }return SmartlingDownloadOptions;}(SmartlingBaseOptions);


  return SmartlingDownloadOptions;
};
//# sourceMappingURL=SmartlingDownloadOptions.js.map