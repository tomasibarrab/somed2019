import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { Notification } from './types';

const actionCreator = actionCreatorFactory();

export const addNotification = actionCreator<Notification>('ADD_NOTIFICATION');
export const removeNotification = actionCreator<number>('REMOVE_NOTIFICATION');
export const removeNotificationById = actionCreator<symbol>('REMOVE_NOTIFICATION_BY_ID');

const removeNotificationByIndex = (state: Notification[], index: number) => [
  ...state.slice(0, index),
  ...state.slice(index + 1),
];

export const notificationReducer = reducerWithInitialState([] as Notification[])
  .case(addNotification, (state, payload) => {
    const swapNotificationIndex =
      payload.id !== undefined ? state.findIndex(notification => notification.id === payload.id) : -1;
    if (swapNotificationIndex !== -1) {
      return [payload, ...removeNotificationByIndex(state, swapNotificationIndex)];
    }
    return [payload, ...state];
  })
  .case(removeNotification, removeNotificationByIndex)
  .case(removeNotificationById, (state, idToRemove) => {
    const index = state.findIndex(notification => notification.id === idToRemove);
    return index >= 0 ? removeNotificationByIndex(state, index) : state;
  });
