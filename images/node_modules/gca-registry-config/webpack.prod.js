/**
 * Development Registry based Micro-app Webpack configuration
 */

const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const postcssConfig = require('./postcss.loader.js');
const base = require('./webpack.base.js');

const cwd = process.cwd();
const appConfig = require(path.join(process.cwd(), './app.config'));

const localPackage = require('gca-mono/lib/load-local-package');
const dashPackageVersion = localPackage.getPackageVersion();

const appPkg = localPackage.getPackageFile();

const app = {
  packageVersion: dashPackageVersion,
  name: appPkg.name,
  cdnPath: `https://gc-cdn.otstatic.com/gc-microapps-v2/${appPkg.name}/${dashPackageVersion}/`,
  template: appConfig.template || {},
  chromeProps: appConfig.chromeProps || {}
};

console.log('--- Registry MicroApp info ----------------------------------');
console.log(JSON.stringify(app, null, 2));
console.log('-------------------------------------------------------------');

module.exports = base({
  mode: 'production',

  // In production, we skip all hot-reloading stuff
  entry: [path.join(cwd, 'src/app')],

  // Utilize long-term caching by adding content hashes (not compilation hashes) to compiled assets
  output: {
    publicPath: app.cdnPath,
    path: path.resolve(cwd, 'dist'),
    filename: 'main.js',
    chunkFilename: '[name].js',
  },

  babelQuery: {
    presets: ['gca-babel-config/babelrc'],
  },

  cssLoaders: [
    {
      loader: MiniCssExtractPlugin.loader,
      options: {
        publicPath: '../',
      },
    },
    {
      loader: 'css-loader',
      query: {
        importLoaders: 1,
        sourceMap: true,
      },
    },
    postcssConfig,
    'sass-loader',
  ],

  imageOptions: {
    name: '[path][name].[ext]',
    publicPath: app.cdnPath,
    useRelativePath: false,
  },

  plugins: [
    // Extract the CSS into a separate file
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: '[name].css',
      chunkFilename: '[name].css',
    }),
  ],

  externals: {
    react: 'react',
    'react-dom': 'reactDom'
  }
});
