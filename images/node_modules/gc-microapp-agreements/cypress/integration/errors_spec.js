const gatewayBase = '/gateway/proxies';
const uasBase = `${gatewayBase}/userAgreementService/v1/user-agreement/agreements`;

describe('Error pages', () => {
  beforeEach(() => {
    cy.server();
    // mock unnecessary requests (made by chrome, or otherwise)
    cy.route('/sockjs-node/**', '').as('nodeSock');
    cy.route(`${gatewayBase}/featureManager/**`, '').as('apiFeatureManager');
    cy.route(`${gatewayBase}/gcrestaurant/**`, '').as('apiRestaurantInfo');
    cy.route('/restaurant-search/**', '').as('apiRestaurantSearch');
    cy.route('POST', '/restaurant-search/**', '').as('apiRestaurantSearch');
  });

  it('Should show an error message when user is not logged in', () => {
    cy.route({ method: 'GET', url: `${uasBase}/test-id`, status: 401, response: {} }).as('apiAgreement');

    cy.visit('/agreements/test-id');

    cy.get('.error-panel')
      .should('contain', 'You must log in');
  });

  it('Should show an error message when Agreement doesn\'t exist', () => {
    cy.route({ method: 'GET', url: `${uasBase}/test-id`, status: 404, response: {} }).as('apiAgreement');

    cy.visit('/agreements/test-id');

    cy.get('.error-panel')
      .should('contain', 'doesnâ€™t exist');
  });

  it('Should show a generic error message when service is failing', () => {
    cy.route({ method: 'GET', url: `${uasBase}/test-id`, status: 500, response: {} }).as('apiAgreement');

    cy.visit('/agreements/test-id');

    cy.get('.error-panel')
      .should('contain', 'issue on our side');
  });

  it('Should show an error message on the homepage', () => {
    cy.visit('/agreements/');
    cy.get('#app')
      .should('contain', 'Nothing to see here');
  });

  it('Should redirect to the homepage on wrong urls', () => {
    cy.visit('/agreements/some/wrong/url')
      .location('pathname')
      .should('not.contain', 'some/wrong/url');
  });
});
