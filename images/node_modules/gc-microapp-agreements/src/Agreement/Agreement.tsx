import { AsyncContent } from 'gca-react-components';
import React, { useEffect, useState } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { RouteComponentProps, withRouter } from 'react-router';

import { AgreementNewDetails } from '../types';

import Header from './Header';
import Pricing from './Pricing';
import Terms from './Terms';


const toJson = (data: Response) => {
  if (data.status < 400) {
    return data.json();
  } else if (data.status === 401) {
    throw new Error('unauthorized')
  } else if (data.status === 404) {
    throw new Error('not_found');
  } else {
    throw new Error('general');
  }
};

interface AgreementRouteParams {
  agreement_id: string;
}

type Props = RouteComponentProps<AgreementRouteParams> & InjectedIntlProps;

const Agreement = ({ match, intl }: Props) => {
  const { params } = match;

  const [agreement, setAgreement] = useState<AgreementNewDetails>();
  const [error, setError] = useState();

  useEffect(() => {
    fetch(`/gateway/proxies/userAgreementService/v1/user-agreement/agreements/${params.agreement_id}`)
      .then(toJson)
      .then((response: AgreementNewDetails) => {
        // set the agreement details
        setAgreement(response);
        // clear any previous errors
        if (error) {
          setError(undefined);
        }
      })
      .catch((e: Error) => setError(e.message));
  }, [params.agreement_id]);

  return (
    <AsyncContent
      isLoading={!agreement && !error}
      isError={error !== undefined}
      errorMessage={error && intl.formatMessage({ id: `app.error.${error}` })}
    >
      {agreement && (
        <>
          <Header agreement={agreement} />
          {agreement.pricingDetails && <Pricing agreement={agreement} />}
          <Terms terms={agreement.termsAndConditions[0]} showTitle={!!agreement.pricingDetails} />
        </>
      )}
    </AsyncContent>
  );
};

export default withRouter(injectIntl(Agreement));
