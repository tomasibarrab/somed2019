import { AnyAction } from 'redux';
import { Role, RolesState } from '../types';
import {
  actions,
  reducer,
} from './roles';

// mock the actual reducer
function rolesStateReducer(state: any, action: AnyAction) {
  return reducer('appRoles')(state, action);
}

/**
 * REDUCER TESTS
 */

describe('Reducers', () => {

  const intialState: RolesState = {
    defPermissions: [],
    inProgress: {},
    permissions: [],
    roles: [],
  };

  it('Root Roles root reducer should return initial state', () => {
    const actual = rolesStateReducer(undefined, {} as AnyAction);
    expect(actual).toEqual(intialState);
  });

  describe('starting async fetching', () => {

    it('should set inProgress.fetchingDefaultPermissions to "inprogress"', () => {
      const newState = rolesStateReducer(intialState, actions.fetchDefaultPermissions.started);
      expect(newState.inProgress.fetchingDefaultPermissions).toBe('inprogress');
    });

    it('should set inProgress.fetchingRoles to "inprogress"', () => {
      const newState = rolesStateReducer(intialState, actions.fetchRoles.started);
      expect(newState.inProgress.fetchingRoles).toBe('inprogress');
    });

    it('should set inProgress.fetchingPermissions to "inprogress"', () => {
      const newState = rolesStateReducer(intialState, actions.fetchPermissions.started);
      expect(newState.inProgress.fetchingPermissions).toBe('inprogress');
    });
  });

  describe('done async fetching', () => {
    it('should set defPermissions with arrived Roles', () => {
      const role: Role = {
        isDefault: true,
        permissions: [ 'test_perm' ],
        properties: {},
        urn: 'test_role',
      };
      const action = actions.fetchDefaultPermissions.done({ params: {}, result: [ role ] });
      const newState = rolesStateReducer(intialState, action);
      expect(newState.inProgress.fetchingDefaultPermissions).toBeUndefined();
      expect(newState.defPermissions).toHaveLength(1);
      expect(newState.defPermissions[0]).toEqual(role);
    });

    it('should set the roles with the one sent by the action', () => {
      const role: Role = {
        isDefault: true,
        permissions: [ 'test_perm' ],
        properties: {},
        urn: 'test_role',
      };
      const action = actions.fetchRoles.done({ params: {}, result: [role] });
      const newState = rolesStateReducer(intialState, action);
      expect(newState.inProgress.fetchingRoles).toBeUndefined();
      expect(newState.roles).toHaveLength(1);
      expect(newState.roles[0]).toEqual({ ...role, status: 'view'});
    });

    it('should set inProgress.fetchingDefaultPermissions to "undefined"', () => {
      const action = actions.fetchPermissions.done({
        params: {},
        result: [ { urn: 'test', properties: {} }] });
      const newState = rolesStateReducer(intialState, action);
      expect(newState.inProgress.fetchingPermissions).toBeUndefined();
      expect(newState.permissions).toHaveLength(1);
    });
  });

  describe('error async fetching', () => {
    const fakeError = { params: {}, error: new Error('Fake Error') };

    it('should set inProgress.fetchingDefaultPermissions to undefined', () => {
      const newState = rolesStateReducer(intialState, actions.fetchDefaultPermissions.failed(fakeError));
      expect(newState.inProgress.fetchingDefaultPermissions).toBe('error');
    });

    it('should set inProgress.fetchRoles to undefined', () => {
      const newState = rolesStateReducer(intialState, actions.fetchRoles.failed(fakeError));
      expect(newState.inProgress.fetchingRoles).toBe('error');
    });

    it('should set inProgress.fetchPermissions to undefined', () => {
      const newState = rolesStateReducer(intialState, actions.fetchPermissions.failed(fakeError));
      expect(newState.inProgress.fetchingPermissions).toBe('error');
    });
  });

  describe('editPermissionInRole', () => {

    const state: RolesState = {
      defPermissions: [{
        permissions: ['test-1', 'test-2'],
        properties: {},
        urn: 'test-role',
      }],
      inProgress: {},
      permissions: [
        { urn: 'test-1', properties: {} },
        { urn: 'test-2', properties: {} },
        { urn: 'test-3', properties: {} },
      ],
      roles: [{
        permissions: ['test-1', 'test-2'],
        properties: {},
        urn: 'test-role',
      }],
    };

    it('rolesReducer should remove "test-1" permission from "test-role"', () => {
      const newState = rolesStateReducer(state, actions.editPermissionInRole({
        flag: false,
        permId: 'test-1',
        roleId: 'test-role',
      }));
      expect(newState.roles[0]['test-1']).toBeUndefined();
    });

    it('rolesReducer should add "test-3" permissions to "test-role"', () => {
      const newState = rolesStateReducer(state, actions.editPermissionInRole({
        flag: true,
        permId: 'test-3',
        roleId: 'test-role',
      }));
      expect(newState.roles[0]['test-1']).toBeUndefined();
    });
  })

});
