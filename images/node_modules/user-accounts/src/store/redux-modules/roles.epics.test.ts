import configureMockStore from 'redux-mock-store';
import { ActionsObservable} from 'redux-observable';
import { Observable } from 'rxjs';

import { PermissionResponse, RoleResponse } from '../api';
import { Action, Role } from '../types';
import { actions, createRoleRequest, epics } from './roles';

/**
 * EPICS TESTS
 */

const mockStore = configureMockStore();

const state = {
  appRoles: {
    roles: [{
      permissions: ['test-1', 'test-2'],
      urn: 'test-role',
    }],
  },
  currentContext: {
    productType: 'guest_center',
    restaurant: {
      address : {
        countryCode: 'en-us',
      },
      rid: 123,
    },
  },
  language: { locale: 'en-us' },
  modals: {},
  scope: {
    rid: '123',
    type: 'restaurant',
  },
  users: {
    currentSort: { firstName: 'asc'},
    isCreating: false,
    users: [],
  },
};

const restRoleResp: RoleResponse = {
  context: 'test',
  roles: [],
};

const permResponse: PermissionResponse = {
  context: 'test-context',
  permissions: [ { urn: 'test-1', properties: {} }, { urn: 'test-2', properties: {}  } ],
  principal: 'test-principal',
};

const mockedApi = {
  getPermissions: (): Observable<PermissionResponse> => Observable.of(permResponse),
  getRoles: (): Observable<RoleResponse> => Observable.of(restRoleResp),
  updateRole: ({ role }: { role: Role }) => Observable.of({}),
};

describe('Epics', () => {

  it('should fetch Restaurant Roles', () => {
    const output$ = epics.fetchRolesEpic(
      ActionsObservable.of(actions.fetchRoles.started({})),
      mockStore(state),
      { usersApi: () => mockedApi },
    );
    output$.toArray().subscribe((acts: Action[]) => {
      expect(acts).toHaveLength(1);
      expect(acts[0].type).toBe(actions.fetchRoles.done.type);
    })
  });

  it('should fetch available Permissions', () => {
    const output$ = epics.fetchPermissionsEpic(
      ActionsObservable.of(actions.fetchPermissions.started({})),
      mockStore(state),
      { usersApi: () => mockedApi },
    );
    output$.toArray().subscribe((acts: Action[]) => {
      expect(acts).toHaveLength(1);
      expect(acts[0].type).toBe(actions.fetchPermissions.done.type);
    })
  });

  it('should update Permissions for a Role', () => {
    const output$ = epics.saveRoleEpic(
      ActionsObservable.of(actions.saveRole.started({ roleId: 'test-role' })),
      mockStore(state),
      { usersApi: () => mockedApi },
    );
    output$.toArray().subscribe((acts: Action[]) => {
      expect(acts).toHaveLength(1);
      expect(acts[0].type).toBe(actions.saveRole.done.type);
    })
  });

  it('should trigger fetchRoles by onSaveRoleComplete', () => {
    const output$ = epics.saveRoleCompleteEpic(
      ActionsObservable.of(actions.saveRole.done({
        params: { roleId: 'test-role'},
        result: { roleId: 'test-role' } })),
      mockStore(state),
      { usersApi: () => mockedApi },
    );
    output$.toArray().subscribe((acts: Action[]) => {
      expect(acts).toHaveLength(1);
      expect(acts[0].type).toBe(actions.fetchRoles.started.type);
    });
  })

});

describe('Epics utilities', () => {

  it('createRoleRequest() should aggregate permissions and hidden permissions', () => {
    const testRole = {
      editingPermissions: [ 'permA', 'permB' ],
      hiddenPermissions: [ 'hiddenPermA'],
      permissions: [],
      urn: 'testRole',
    };
    const result = createRoleRequest(testRole);
    expect(result.permissions).toHaveLength(3);
  });

  it('createRoleRequest() should ignore non existing hidden permissions', () => {
    const testRole = {
      editingPermissions: [ 'permA', 'permB' ],
      permissions: [],
      urn: 'testRole',
    };
    const result = createRoleRequest(testRole);
    expect(result.permissions).toHaveLength(2);
  });

  it('createRoleRequest() should use existing permissions and hidden permissions', () => {
    const testRole = {
      hiddenPermissions: [ 'hiddenPermA'],
      permissions: [ 'permA', 'permB' ],
      urn: 'testRole',
    };
    const result = createRoleRequest(testRole);
    expect(result.permissions).toHaveLength(3);
  });

});
