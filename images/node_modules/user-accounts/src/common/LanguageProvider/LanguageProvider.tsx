/*
 *
 * LanguageProvider
 *
 * this component connects the redux state language locale to the
 * IntlProvider component and i18n messages (loaded from `app/translations`)
 */

import { selectors } from 'gca-react-components/src/redux-modules/languageProvider';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { connect } from 'react-redux';

import { State } from '../../store/types';

export interface MessageMap {
  [index: string]: string;
}

interface SP {
  locale: string;
}

interface OP {
  messages: MessageMap;
}

type Props = SP & OP;

export class LanguageProvider extends React.Component<Props> {
  public render() {
    return (
      <IntlProvider locale={this.props.locale} messages={this.props.messages[this.props.locale]}>
        {React.Children.only(this.props.children)}
      </IntlProvider>
    );
  }
}

/* istanbul ignore next */
// LanguageProvider.propTypes = {
//   locale: React.PropTypes.string,
//   messages: React.PropTypes.object,
//   children: React.PropTypes.element.isRequired,
// };

const mapStateToProps = (state: State) => ({
  locale: selectors.locale(state),
});

export default connect<SP, {}, OP>(mapStateToProps)(LanguageProvider);
// export { LanguageProvider as PureLanguageProvider };
