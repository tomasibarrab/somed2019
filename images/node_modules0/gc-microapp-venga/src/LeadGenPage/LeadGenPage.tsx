import { Icon } from '@buffet/icon';
import { Restaurant, selectors, User } from 'gca-react-components/src/redux-modules/currentContext';
import React, { useMemo } from 'react';
import { Form } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Redirect, RouteComponentProps, withRouter } from 'react-router-dom';

import { AsyncStatus } from 'shared-react-utils/asyncStateReducer';

import { AppRoutes } from '../common/App/AppRoutes';
import LeadGenForm from './LeadGenForm';
import './LeadGenFormPage.scss';
import './LeadGenPage.scss';

import openTableVengaImage from '../assets/open-table-venga.png';

import { actions } from '../store/redux-modules/leadGen';
import { LeadGenFormData, State } from '../store/types';


interface StateProps {
  user: User;
  restaurant: Restaurant;
  leadGenStatus: AsyncStatus;
}

interface DispatchProps {
  submitLeadGen: (payload: LeadGenFormData) => void;
}

type Props = RouteComponentProps<{}> & InjectedIntlProps & StateProps & DispatchProps;


function LeadGenPage({
  user,
  restaurant,
  leadGenStatus,
  submitLeadGen,
  intl,
}: Props) {
  // get form initial values
  const initialValues = useMemo<LeadGenFormData>(() => ({
    Company: restaurant.name,
    Country: restaurant.address.country || '',
    CurrencyISOCode: 'USD',
    Disqualification_Reason__c: '',
    Email: user.userName,
    FirstName: user.firstName,
    LastName: user.lastName,
    LeadSource: 'GCA',
    POS_Brand__c: '',
    Phone:  restaurant.billingPhoneNumber,
    Product_Type__c: 'Venga',
    RID__c: restaurant.rid,
    RecordTypeID: '01230000000jw7a',
    Restaurant_or_parent__c: 'Restaurant',
    Status: 'New',
  }),
    [restaurant, user]);

  // redirect when done
  if (leadGenStatus === 'done') {
    return <Redirect to={AppRoutes.LeadGenDone} />;
  }

  return (
    <div className="leadgen-container">
      <img src={openTableVengaImage} className="ot-venga-brands" alt="OpenTable + Venga" />

      <FormattedMessage id="venga.leadgen.title" tagName="h1" />
      <FormattedMessage id="venga.leadgen.description" tagName="p" />

      <div className="key-points">
        <div className="key-point">
          <Icon iconId="checkmark" />
          <FormattedMessage id="venga.leadgen.key_points_1" tagName="div" />
        </div>
        <div className="key-point">
          <Icon iconId="checkmark" />
          <FormattedMessage id="venga.leadgen.key_points_2" tagName="div" />
        </div>
        <div className="key-point">
          <Icon iconId="checkmark" />
          <FormattedMessage id="venga.leadgen.key_points_3" tagName="div" />
        </div>
      </div>

      <FormattedMessage id="venga.leadgen.form.title" tagName="h2" />

      <Form
        onSubmit={submitLeadGen}
        initialValues={initialValues}
        render={({ handleSubmit }) => (
          <LeadGenForm
            intl={intl}
            handleSubmit={handleSubmit}
            isSending={leadGenStatus === 'started'}
          />
        )}
      />

      <div className="already-member">
        <FormattedMessage
          id="venga.leadgen.form.alreadyMember"
          tagName="p"
          values={{
            signInLink: (
              <a
                href="https://dashboard.getvenga.com/"
                target="_blank"
                title={intl.formatMessage({ id: 'venga.leadgen.form.alreadyMember.signInLink.title' })}
              >
                {intl.formatMessage({ id: 'venga.leadgen.form.alreadyMember.signInLink' })}
              </a>
            ),
          }}
        />
      </div>
    </div>
  );
}

const mapState = (state: State): StateProps => ({
  leadGenStatus: state.leadGen.status,
  restaurant: selectors.restaurant(state),
  user: selectors.user(state),
});

const mapDispatch = {
  submitLeadGen: actions.submitLeadGen.started,
};

const IntlLeadGenPage = injectIntl(LeadGenPage);
const ConnectedLeadGenPage = connect<{}, {}, RouteComponentProps<{}>>(mapState, mapDispatch)(IntlLeadGenPage);

export default withRouter(ConnectedLeadGenPage);
