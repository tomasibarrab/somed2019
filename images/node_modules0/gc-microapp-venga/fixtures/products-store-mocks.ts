/* tslint:disable:object-literal-sort-keys */
import { BaseAgreementDTO } from '@buffet/user-agreement';
import { pricingToBundle } from '../src/helpers/typeHelpers';
import { SingleProductState } from '../src/store/redux-modules/product';

import { ProductsState } from '../src/store/redux-modules/products';
import { AgreementType, PricedAddOn, Pricing, PricingResponse } from '../src/store/types';


// default Product Pricing data (Venga Host)
export const defaultPricingMock: Pricing[] = [
  {
    billingRecurrence: 'Monthly',
    currencyCode: 'USD',
    feeType: 'Subscription',
    listPrice: 250,
    productCode: 'VSYS002',
    productName: 'Venga Host Subscription',
    termLength: 12,
  },
  {
    billingRecurrence: 'One Time',
    currencyCode: 'USD',
    feeType: 'Installation',
    listPrice: 250,
    productCode: 'VSAC002',
    productName: 'Venga Host Implementation ',
    termLength: 0,
  },
  {
    billingRecurrence: 'Monthly',
    currencyCode: 'USD',
    feeType: 'Subscription',
    listPrice: 0,
    productCode: 'VPOSINTEG',
    productName: 'Venga POS Integration',
    termLength: 0,
  },
];

export const reviewManagerPricingMock: Pricing[] = [
  {
    billingRecurrence: 'Monthly',
    currencyCode: 'USD',
    feeType: 'Subscription',
    listPrice: 99.0,
    productCode: 'VSYS001',
    productName: 'Venga Review Manager Subscription',
    termLength: 12,
  },
  {
    billingRecurrence: 'One Time',
    currencyCode: 'USD',
    feeType: 'Installation',
    listPrice: 99.0,
    productCode: 'VSAC001',
    productName: 'Venga  Review Manager Implementation',
    termLength: 0,
  },
];

// generate a different Product Pricing to be used in the UA fixtures
export const modifiedPricingMock: Pricing[] = defaultPricingMock.map(defaultPriceItem => ({
  ...defaultPriceItem,
  listPrice: defaultPriceItem.listPrice / 2,
}));

// generate Product AddOns with different statuses
export const productAvailablePrice: PricedAddOn = {
  bundleCategory: 'Venga',
  bundleDetails: defaultPricingMock,
  bundleDisplayName: 'Host',
  bundleName: 'venga_integration_host',
  status: 'Available',
};

export const productReviewManagerAvailablePrice: PricedAddOn = {
  bundleCategory: 'Venga',
  bundleDetails: reviewManagerPricingMock,
  bundleDisplayName: 'Review Manager',
  bundleName: 'venga_integration_review_manager',
  status: 'Available',
};

const productPendingPrice: PricedAddOn = {
  ...productAvailablePrice,
  status: 'PendingActive',
};
const productActivatedPrice: PricedAddOn = {
  ...productAvailablePrice,
  status: 'Active',
};

export const pricingBundleResponse: PricingResponse = {
  rid: 1,
  ['primary-product']: 'asd',
  currency: 'USD',
  region: { country: 'US', metro: 'CA' },
  addons: [
    {
      ...productAvailablePrice,
      bundleDetails: productAvailablePrice.bundleDetails.map(pricingToBundle),
    },
  ],
};

// generate a signed and unsigned UA
export const productUnsignedUA: BaseAgreementDTO = {
  isSigned: false,
  source: 'UAS',
  agreementDetails: {
    id: '1ac07393-9b27-4b4c-883f-78de76b27a59',
    type: {
      name: 'venga_integration_host',
      intentTextId: 2,
      agreeTextId: 2,
    },
    context: 'urn:ot.restaurants: 241',
    locale: 'en-US',
    assignedUser: null,
    legalEntity: 'Benchmark',
    creationDateUTC: '2019-07-01T18: 45: 53.163265Z',
    lastUpdatedDateUTC: '2019-07-01T18: 45: 53.163265Z',
    state: 'Created',
    signingDetails: null,
    termsAndConditions: [
      {
        version: 1,
        termsId: 37,
        content: '</h1><p>Venga sample terms and conditions</p></li></ol>',
        title: 'Venga Integration Addendum',
        locale: 'en-US',
      },
    ],
    pricing: modifiedPricingMock,
  },
};
const productSignedUA: BaseAgreementDTO = {
  ...productUnsignedUA,
  isSigned: true,
};

// ====== helper functions ======
// wraps a data object in an AsyncState with the status of 'done'
const done = (data: PricedAddOn | BaseAgreementDTO) => ({ status: 'done', data });
// generates a ProductsState with all products
const productState
  = (singleProductState: SingleProductState, selectedProduct?: AgreementType | null): ProductsState => ({
  venga_integration_review_manager: singleProductState,
  venga_integration_host: singleProductState,
  venga_legacy_customer: singleProductState,
  selectedProduct,
});
// ====== end helper functions ======


// export generated fixtures
export const initialStateFixture: ProductsState = productState({
  price: { status: 'init' },
  userAgreement: { status: 'init' },
});

export const productsLoadingAllFixture: ProductsState = productState({
  price: { status: 'started' },
  userAgreement: { status: 'started' },
});

export const productsLoadingPricesFixture: ProductsState = productState({
  price: { status: 'started' },
  userAgreement: done(productUnsignedUA),
});

export const productsLoadingUAFixture: ProductsState = productState({
  price: done(productAvailablePrice),
  userAgreement: { status: 'started' },
});

export const missingPricesFixture: ProductsState  = productState({
  price: { status: 'failed' },
  userAgreement: { status: 'failed' },
});

export const availablePricesFixture: ProductsState  = productState({
  price: done(productAvailablePrice),
  userAgreement: { status: 'failed' },
});

export const availablePricesHostSelectedFixture: ProductsState  = productState({
    price: done(productAvailablePrice),
    userAgreement: { status: 'failed' },
  },
  AgreementType.venga_integration_host,
);

export const availablePricesFailedHostSelectedFixture: ProductsState  = productState({
  price: { status: 'failed' },
  userAgreement: { status: 'failed' },
},
AgreementType.venga_integration_host,
);

export const availablePricesReviewManagerSelectedFixture: ProductsState  = productState({
  price: done(productReviewManagerAvailablePrice),
  userAgreement: { status: 'failed' },
},
AgreementType.venga_integration_review_manager,
);

export const availablePricesFailedReviewManagerSelectedFixture: ProductsState  = productState({
  price: { status: 'failed' },
  userAgreement: { status: 'failed' },
},
AgreementType.venga_integration_review_manager,
);

export const availablePricesAndUnsignedUAFixture: ProductsState  = productState({
  price: done(productAvailablePrice),
  userAgreement: done(productUnsignedUA),
});

export const selectedAvailablePricesAndUnsignedUAFixture: ProductsState  = productState({
  price: done(productAvailablePrice),
  userAgreement: done(productUnsignedUA),
});

export const pendingPricesAndSignedUAFixture: ProductsState  = productState({
  price: done(productPendingPrice),
  userAgreement: done(productSignedUA),
});

export const activePricesAndSignedUAFixture: ProductsState  = productState({
  price: done(productActivatedPrice),
  userAgreement: done(productSignedUA),
});

export const activePricesAndUnsignedUAFixture: ProductsState  = productState({
  price: done(productActivatedPrice),
  userAgreement: done(productUnsignedUA),
});
