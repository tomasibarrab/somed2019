const { get: safeGet } = require('lodash/get');
const utils = require('gca-registry-publish/utils/utils');
const fullApiClient = require('gca-registry-publish/version-api/api/api-client');
const fakeApiClient = require('gca-registry-publish/version-api/api/fake-client');
const { getServerSettings } = require('gca-registry-publish/version-api/config/getVersionApiSettings');

/*
*  Get full list of all microapps and their version numbers, from Version API (both PP and Prod)
*/

// Given a server (pp/prod), make an API call to get list of all microapps known on that server
const getMicroappListForServer = function (serverName) {
  const serverSettings = getServerSettings(serverName);
  return fullApiClient.getAllMicroapps({ host: serverSettings.host })
    .then((response) => {
      if (!response || !response.body || !response.body.length) {
        console.log("Response", response);
        utils.fatal('Data returned by Microapp Version API is invalid');
      }
      const serverApps = response.body;
      return Promise.resolve(serverApps);
    })
}

// Collect the results into list of entries: { microappName: version# }
const transformAppList = (profileName, appList) => {
  return {
    [profileName]: appList.reduce((collector, appItem) => {
      // Don't gather ALL version numbers, assume all testing envs are the same as 'pp-sf'
      const envName = profileName == 'production' ? 'prod-sc' : 'pp-sf';
      const profileVersion = appItem && appItem.dist && appItem.dist[envName] || undefined;
      return {
        ...collector,
        [appItem.microAppId]: profileVersion,
      }
    }, {})
  }
}

// Combine PP and Prod lists
const compileFullMicroappList = () => {
  return Promise.all([
    getMicroappListForServer('pp'),
    getMicroappListForServer('prod')
  ])
    .then(([testingVersions, productionVersions]) => ({
      ...transformAppList('testing', testingVersions),
      ...transformAppList('production', productionVersions),
    }));
}

module.exports = {
  compileFullMicroappList,
}