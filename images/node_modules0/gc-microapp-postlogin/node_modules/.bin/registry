#!/usr/bin/env node
const yargs = require('yargs');

const { listOptions } = require('./utils/utils');
const s3Upload = require('./s3-api/scripts/s3-upload');
const initializeApp = require('./version-api/scripts/app-initialize');
const createVersion = require('./version-api/scripts/version-create');
const promoteVersion = require('./version-api/scripts/version-promote');

const { versionApiServers, versionApiProfiles } = require('./version-api/config/version-api-env-config');

const options = {
  server: {
    description: `Target Version API server.\nPossible values are [${listOptions(versionApiServers)}]`,
    isRequired: true,
    type: 'string',
  },
  profile: {
    description: `Profiles are a collection of one or more environments.\nPossible values are [${listOptions(versionApiProfiles)}]`,
    isRequired: true,
    type: 'string',
  },
  dry: {
    description: 'Dry Run. Prevents write-operations, but script will proceed as if they happen successfully.',
    isRequired: false,
    type: 'boolean',
  }
}

const commands = [
  {
    name: 'upload',
    description: 'Upload the assets for this micro-app to S3.',
    handler: (argv) => {
      s3Upload(argv.dry);
    }
  },
  {
    name: 'init-app',
    description: 'Create a new app in the Version API Database.\nUse --server to pass the desired Version API server (required)',
    option: 'server',
    handler: (argv) => {
      initializeApp(argv.server, argv.dry);
    }
  },
  {
    name: 'create-version',
    description: 'Create a version in the Version API for this micro-app.\nUse --server to pass the target environment (required)',
    option: 'server',
    handler: (argv) => {
      createVersion(argv.server, argv.dry);
    }
  },
  {
    name: 'promote',
    description: 'Promote a micro-app version.\nUse --profile to apply version to all environments in a Profile (required)',
    option: 'profile',
    handler: (argv) => {
      promoteVersion(argv.profile, argv.dry)
    }
  }
];

yargs
  .usage('publish <command>')
  .demandCommand()
  .fail(function (msg, err, yargs) {
    console.error(yargs.help());
    process.exit(0);
  });

commands.forEach((cmd) => {
  yargs.command(
    cmd.name,
    cmd.description,
    (yargsInstance) => {
      // Add an option to a command, such as '--example myString', if that command has one defined
      if (cmd.option && options[cmd.option]) {
        const { description, isRequired, type } = options[cmd.option];
        yargsInstance.option(cmd.option, {
          description,
          demandOption: isRequired,
          type,
        });
      }
      // Add '--dry' option to all commands
      yargsInstance.option('dry', {
        description: 'Dry Run. Prevents write-operations, but script will proceed as if they happen successfully.',
        demandOption: false,
        type: 'boolean',
      });
    },
    cmd.handler
  );
});

yargs.argv;
