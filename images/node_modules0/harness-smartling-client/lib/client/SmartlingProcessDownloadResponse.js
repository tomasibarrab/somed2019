'use strict';

var _v = require('uuid/v4');var _v2 = _interopRequireDefault(_v);
var _unzip = require('unzip2');var _unzip2 = _interopRequireDefault(_unzip);
var _mkdirp = require('mkdirp');var _mkdirp2 = _interopRequireDefault(_mkdirp);
var _del = require('del');var _del2 = _interopRequireDefault(_del);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} /* eslint-disable new-cap */

module.exports = function (SmartlingFileDetailsBuilder, fsPromise, Promise, path, Utils, fs) {var
  SmartlingProcessDownloadResponse = function () {
    function SmartlingProcessDownloadResponse(buffer, options, saveTo) {_classCallCheck(this, SmartlingProcessDownloadResponse);
      this.buffer = buffer;
      this.options = options;
      this.saveTo = saveTo;

      // To be used as the name of the temp directory.
      this.tempId = (0, _v2.default)();
    }SmartlingProcessDownloadResponse.

    process = function process(buffer, options, saveTo) {
      return new SmartlingProcessDownloadResponse(buffer, options, saveTo).process();
    };SmartlingProcessDownloadResponse.prototype.

    process = function process() {
      return Utils.promiseQueue([
      this._checkDirectoryExist.bind(this),
      this._createTempDirectory.bind(this),
      this._saveBufferToFile.bind(this),
      this._extractContents.bind(this),
      this._moveContentsToFinalDestination.bind(this)])

      // Make sure to try and clean up even if there is a failure
      .finally(this._cleanUpTemporaryFiles.bind(this));
    };SmartlingProcessDownloadResponse.prototype.

    _checkDirectoryExist = function _checkDirectoryExist() {var _this = this;
      return fsPromise.statAsync(this.saveTo).
      then(function (stats) {
        if (!stats.isDirectory()) {
          throw new Error('\'' + _this.saveTo + '\' directory does not exist');
        }

        return stats;
      });
    };SmartlingProcessDownloadResponse.prototype.

    _createTempDirectory = function _createTempDirectory() {var _this2 = this;
      return new Promise(function (resolve, reject) {
        (0, _mkdirp2.default)(_this2._getTempDirectoryPath(), function (err) {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
    };SmartlingProcessDownloadResponse.prototype.

    _saveBufferToFile = function _saveBufferToFile() {
      if (!this.options.fileUri) {
        return Promise.reject(new Error('fileUri is not defined in the download options.'));
      }

      var archivePath = this._getTempFilePath();

      return Promise.resolve(fsPromise.writeFileSync(archivePath, this.buffer, 'binary'));
    };SmartlingProcessDownloadResponse.prototype.

    _extractContents = function _extractContents() {var _this3 = this;
      return new Promise(function (resolve, reject) {
        var tempFilePath = _this3._getTempFilePath();

        var unzipExtractor = _unzip2.default.Extract({ path: _this3._getTempDirectoryPath() });

        unzipExtractor.on('error', reject);
        unzipExtractor.on('close', resolve);
        unzipExtractor.on('end', resolve);

        fs.createReadStream(tempFilePath).pipe(unzipExtractor);
      });
    };SmartlingProcessDownloadResponse.prototype.

    _moveContentsToFinalDestination = function _moveContentsToFinalDestination() {
      return SmartlingFileDetailsBuilder.build(this._getTempDirectoryPath(), this.saveTo, this.options.fileUri).
      then(function (result) {
        var fileDetails = result.fileDetails;

        if (!fileDetails || fileDetails.length < 1) {
          throw new Error('No file details were loaded.');
        }

        return Promise.each(fileDetails, function (entry) {return fsPromise.renameAsync(entry.sourceFile, entry.destinationFile);});
      });
    };SmartlingProcessDownloadResponse.prototype.

    _cleanUpTemporaryFiles = function _cleanUpTemporaryFiles() {var _this4 = this;
      return new Promise(function (resolve, reject) {
        (0, _del2.default)([
        _this4._getTempFilePath(),
        _this4._getTempDirectoryPath()]).

        then(resolve).
        catch(reject);
      });
    };SmartlingProcessDownloadResponse.prototype.

    _unlinkPath = function _unlinkPath(assetPath) {
      return fsPromise.unlinkAsync(assetPath);
    };SmartlingProcessDownloadResponse.prototype.

    _getTempFilePath = function _getTempFilePath() {
      return path.join(this.saveTo, '' + this._getFileName());
    };SmartlingProcessDownloadResponse.prototype.

    _getTempDirectoryPath = function _getTempDirectoryPath() {
      return path.join(this.saveTo, 'temp-' + this.tempId);
    };SmartlingProcessDownloadResponse.prototype.

    _getFileName = function _getFileName() {
      return this.tempId + '.zip';
    };return SmartlingProcessDownloadResponse;}();


  return SmartlingProcessDownloadResponse;
};
//# sourceMappingURL=SmartlingProcessDownloadResponse.js.map