import { LoadingPanel } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import agent from 'superagent';

import AppCard from '../AppCard/AppCard';

import imgReports from '../assets/card_reports.png';
import imgReservations from '../assets/card_reservations.png';
import imgAccounts from '../assets/card_userAccounts.png';

interface Application {
  enabled: boolean;
  name: string;
  url: string;
}

interface GroupHomeApps {
  [key: string]: Application
};

interface GroupHomeState {
  applications: GroupHomeApps;
  isError: boolean;
  isLoading: boolean;
};
type GroupHomeProps = InjectedIntlProps;

export const initialState: GroupHomeState = {
  applications: {
    GroupAccounts: {
      enabled: false,
      name: 'userAccounts',
      url: '',
    },
    GroupBookings: {
      enabled: false,
      name: 'reservations',
      url: '',
    },
    GroupReporting: {
      enabled: false,
      name: 'reports',
      url: '',
    },
  },
  isError: false,
  isLoading: true,
};

class GroupHome extends React.Component<GroupHomeProps, GroupHomeState> {
  public constructor(props: any) {
    super(props);

    this.state = initialState;
  }

  public componentDidMount() {
    this.fetchNavData();
  }

  public render() {
    const { applications, isError, isLoading } = this.state;
    if (isError) {
      throw new Error('Error loading data from Nav Service.');
    }

    const IntroMessage = this.calcNumAppsWithAccess(applications) === 0 ? (
      <FormattedMessage id="intro.header.noAccess"/>
    ) : <FormattedMessage id="intro.header.text"/>
    ;

    if (isLoading) {
      return (<LoadingPanel/>);
    }

    return (
      <main className="group-home-page" data-qa="group-home-container">
        <header className="group-home-header" data-qa="group-home-header">
          <h1 className="header-title"><FormattedMessage id="intro.header.title"/></h1>
          <div className="header-message">
            { IntroMessage }
          </div>
        </header>
        <section className="uicard-list" data-qa="app-list">
            <AppCard image={imgReservations} app={applications.GroupBookings}/>
            <AppCard image={imgReports} app={applications.GroupReporting}/>
            <AppCard image={imgAccounts} app={applications.GroupAccounts}/>
        </section>
      </main>
  )};

  private calcNumAppsWithAccess = (applications: GroupHomeApps) => {
    return Object.values(applications).reduce((acc, item) => {
      return item.enabled ? acc + 1 : acc;
    }, 0);
  }

  private fetchNavData() {
    // Make a call to GC Navigation service to get list of applications the user has access to
    // If an app with access is among one of the 3 we care about (reservations, reports, accounts),
    // then enable the corresponding card, and save the destination URL to the card
    const groupId = window.gcScope.id;

    return agent.get(`/gateway/proxies/gcnavigation/api/v1/group/${groupId}`)
    .send({})
    .end((err, res) => {
      const data = res.body;
      const newState = {...this.state};

      if (!err &&
        data &&
        data.sections &&
        data.sections[0].items) {

        const appList = data.sections[0].items;

        appList.forEach((item: any) => {
          if ( item.id in this.state.applications) {
            newState.applications[item.id] = {
              ...this.state.applications[item.id],
              enabled: true,
              url: item.route.url,
            }
          }
        });
      } else {
        newState.isError = true;
      }
      newState.isLoading = false;
      this.setState(newState);
    });
  }
}

export default injectIntl(GroupHome);
export { GroupHome as PureGroupHome};
