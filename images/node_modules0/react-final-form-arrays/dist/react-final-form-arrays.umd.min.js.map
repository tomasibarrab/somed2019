{"version":3,"file":"react-final-form-arrays.umd.min.js","sources":["../src/FieldArray.js","../src/diffSubscription.js","../src/renderComponent.js"],"sourcesContent":["// @flow\nimport * as React from 'react'\nimport { polyfill } from 'react-lifecycles-compat'\nimport {\n  fieldSubscriptionItems,\n  version as ffVersion,\n  ARRAY_ERROR\n} from 'final-form'\nimport { version as rffVersion } from 'react-final-form'\nimport diffSubscription from './diffSubscription'\nimport type { FieldSubscription, FieldState, FieldValidator } from 'final-form'\nimport type { Mutators } from 'final-form-arrays'\nimport type { FieldArrayPropsWithForm as Props, FieldArrayProps } from './types'\nimport renderComponent from './renderComponent'\nimport type { ReactContext } from 'react-final-form'\nimport { withReactFinalForm } from 'react-final-form'\nexport const version = '2.0.1'\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': rffVersion,\n  'react-final-form-arrays': version\n}\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\ntype State = {\n  state: ?FieldState\n}\n\nclass FieldArray extends React.Component<Props, State> {\n  props: Props\n  state: State\n  mutators: Mutators\n  mounted: boolean\n  unsubscribe: () => void\n\n  static displayName = `ReactFinalFormFieldArray(${ffVersion})(${version})`\n\n  constructor(props: Props) {\n    super(props)\n    let initialState\n    // istanbul ignore next\n    if (process.env.NODE_ENV !== 'production' && !props.reactFinalForm) {\n      console.error(\n        'Warning: FieldArray must be used inside of a ReactFinalForm component'\n      )\n    }\n    const { reactFinalForm } = props\n    if (reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      this.subscribe(props, (state: FieldState) => {\n        if (initialState) {\n          this.notify(state)\n        } else {\n          initialState = state\n        }\n      })\n    }\n    this.state = { state: initialState }\n    this.bindMutators(props)\n    this.mounted = false\n  }\n\n  isEqual = (a: Array<any>, b: Array<any>) => {\n    if (typeof this.props.isEqual === 'function') {\n      return this.props.isEqual(a, b)\n    }\n\n    return true\n  }\n\n  subscribe = (\n    { name, subscription }: Props,\n    listener: (state: FieldState) => void\n  ) => {\n    this.unsubscribe = this.props.reactFinalForm.registerField(\n      name,\n      listener,\n      subscription ? { ...subscription, length: true } : all,\n      {\n        getValidator: () => this.validate,\n        isEqual: this.isEqual\n      }\n    )\n  }\n\n  validate: FieldValidator = (...args) => {\n    const { validate } = this.props\n    if (!validate) return undefined\n    const error = validate(args[0], args[1])\n    if (!error || Array.isArray(error)) {\n      return error\n    } else {\n      const arrayError = []\n      // gross, but we have to set a string key on the array\n      ;((arrayError: any): Object)[ARRAY_ERROR] = error\n      return arrayError\n    }\n  }\n\n  bindMutators = ({ name }: Props) => {\n    const { reactFinalForm } = this.props\n    if (reactFinalForm) {\n      const { mutators } = reactFinalForm\n      const hasMutators = !!(mutators && mutators.push && mutators.pop)\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== 'production' && !hasMutators) {\n        console.error(\n          'Warning: Array mutators not found. You need to provide the mutators from final-form-arrays to your form'\n        )\n      }\n      if (hasMutators) {\n        this.mutators = Object.keys(mutators).reduce((result, key) => {\n          result[key] = (...args) => mutators[key](name, ...args)\n          return result\n        }, {})\n      }\n    }\n  }\n\n  notify = (state: FieldState) => {\n    setTimeout(() => {\n      if (this.mounted) {\n        this.setState({ state })\n      }\n    })\n  }\n\n  forEach = (iterator: (name: string, index: number) => void): void => {\n    const { name } = this.props\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const length = this.state.state ? this.state.state.length || 0 : 0\n    for (let i = 0; i < length; i++) {\n      iterator(`${name}[${i}]`, i)\n    }\n  }\n\n  map = (iterator: (name: string, index: number) => any): any[] => {\n    const { name } = this.props\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\n    // istanbul ignore next\n    const length = this.state.state ? this.state.state.length || 0 : 0\n    const results: any[] = []\n    for (let i = 0; i < length; i++) {\n      results.push(iterator(`${name}[${i}]`, i))\n    }\n    return results\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const { name, subscription } = nextProps\n    if (\n      this.props.name !== name ||\n      diffSubscription(\n        this.props.subscription,\n        subscription,\n        fieldSubscriptionItems\n      )\n    ) {\n      if (this.props.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe()\n        this.subscribe(nextProps, this.notify)\n      }\n    }\n    if (this.props.name !== name) {\n      this.bindMutators(nextProps)\n    }\n  }\n\n  componentDidMount() {\n    this.mounted = true\n  }\n\n  componentWillUnmount() {\n    this.mounted = false\n    this.unsubscribe()\n  }\n\n  render() {\n    const { name, ...rest } = this.props\n    let {\n      length,\n      active,\n      dirty,\n      dirtySinceLastSubmit,\n      error,\n      initial,\n      invalid,\n      pristine,\n      submitError,\n      submitFailed,\n      submitSucceeded,\n      touched,\n      valid,\n      visited,\n      ...fieldStateFunctions\n    } = this.state.state || {}\n    const meta = {\n      active,\n      dirty,\n      dirtySinceLastSubmit,\n      error,\n      initial,\n      invalid,\n      pristine,\n      submitError,\n      submitFailed,\n      submitSucceeded,\n      touched,\n      valid,\n      visited\n    }\n    const fieldState = {\n      ...meta,\n      ...fieldStateFunctions\n    }\n    return renderComponent(\n      {\n        fields: {\n          name,\n          forEach: this.forEach,\n          length,\n          map: this.map,\n          ...this.mutators,\n          ...fieldState\n        },\n        meta,\n        ...rest,\n        __versions: versions\n      },\n      `FieldArray(${name})`\n    )\n  }\n}\n\npolyfill(FieldArray)\n\nconst decorated: React.ComponentType<\n  FieldArrayProps & ReactContext\n> = withReactFinalForm(FieldArray)\n\nexport default decorated\n","// @flow\nexport default function<Subscription: { [string]: boolean }>(\n  a: ?Subscription,\n  b: ?Subscription,\n  keys: string[]\n): boolean {\n  if (a) {\n    if (b) {\n      // $FlowFixMe\n      return keys.some(key => a[key] !== b[key])\n    } else {\n      return true\n    }\n  } else {\n    return !!b\n  }\n}\n","// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children }) // inject children back in\n  }\n  if (render) {\n    return render({ ...rest, children }) // inject children back in\n  }\n  // istanbul ignore next\n  if (typeof children !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        `Warning: Must specify either a render prop, a render function as children, or a component prop to ${name}`\n      )\n      return null // warning will alert developer to their mistake\n    }\n  }\n  return children(rest)\n}\n"],"names":["version","versions","ffVersion","rffVersion","all","fieldSubscriptionItems","reduce","result","key","FieldArray","props","initialState","a","b","_this","isEqual","listener","name","subscription","unsubscribe","reactFinalForm","registerField","length","getValidator","validate","error","Array","isArray","arrayError","ARRAY_ERROR","mutators","push","pop","Object","keys","args","state","setTimeout","mounted","setState","iterator","i","results","subscribe","notify","bindMutators","UNSAFE_componentWillReceiveProps","nextProps","this","some","componentDidMount","componentWillUnmount","render","children","component","rest","active","dirty","dirtySinceLastSubmit","initial","invalid","pristine","submitError","submitFailed","submitSucceeded","touched","valid","visited","fieldStateFunctions","meta","fieldState","fields","forEach","map","__versions","React","decorated","withReactFinalForm"],"mappings":"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"}