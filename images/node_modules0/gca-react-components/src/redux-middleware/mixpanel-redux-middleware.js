const trackedActionsError = 'You must pass in a map of actions to event names and callbacks to select props';
function throwError(str) { throw new Error(str); }
/* eslint-disable no-console */

/**
 * Factory function returns a low-level mixpanel event dispatcher. Ordinarily should not be used,
 * but available if for instance want to be able to dispatch mixpanel events without creating redux
 * actions for triggering the mixpanel redux middleware. Call with a default props object, similar
 * to creating the mixpanel middleware. Returns a function which is invoked with a string event name
 * and a properties object
 * (@see https://help.mixpanel.com/hc/en-us/articles/115004547063-What-data-types-does-Mixpanel-accept-as-properties).
 */
export function createMixpanelDispatcher(defaultProps = {}) {
  return (eventName, props) => {
    if (Object.prototype.toString.call(props) !== '[object Object]') {
      console.error(
        'Props passed to mixpanel.track() must be an object.',
      );
    }

    if (window.mixpanel !== undefined && typeof window.mixpanel.track === 'function') {
      window.mixpanel.track(eventName, { ...defaultProps, ...props });
    } else {
      console.log('event: ', eventName, '\nprops: ', { ...defaultProps, ...props });
    }
  };
}

export function createMixpanelMiddleware({
  trackedActions = throwError(trackedActionsError),
  defaultProps = {},
} = throwError(trackedActionsError)) {
  const dispatchMixpanelEvent = createMixpanelDispatcher(defaultProps);

  return (store) => (next) => (action) => {
    const trackedAction = trackedActions[action.type];
    if (!trackedAction) {
      return next(action);
    }

    const event = trackedAction.event || action.type;
    const props = typeof trackedAction.props === 'function'
      ? trackedAction.props(store.getState(), action)
      : trackedAction.props;

    // if props.skip then skip tracking
    if (props && props.skip) {
      return next(action);
    }

    dispatchMixpanelEvent(event, props);

    return next(action);
  };
}
