import { combineEpics } from 'redux-observable';
import { ajaxGetJSON } from 'rxjs/observable/dom/AjaxObservable';
import './rxjsOperators';
import { checkEpicApi } from '../utils/error-utils';
import safeGet from '../utils/safeGet';

const FETCH_FEATURE_TOGGLES_REQUEST = 'featureToggles/FETCH_FEATURE_TOGGLES_REQUEST';
const FETCH_FEATURE_TOGGLES_SUCCESS = 'featureToggles/FETCH_FEATURE_TOGGLES_SUCCESS';
const FETCH_FEATURE_TOGGLES_FAILURE = 'featureToggles/FETCH_FEATURE_TOGGLES_FAILURE';

export const types = {
  FETCH_FEATURE_TOGGLES_REQUEST,
  FETCH_FEATURE_TOGGLES_SUCCESS,
  FETCH_FEATURE_TOGGLES_FAILURE,
};

export const actions = {
  fetchFeatureToggles: (payload) => ({ type: FETCH_FEATURE_TOGGLES_REQUEST, payload }),
  fetchFeatureTogglesSuccess: (payload) => ({ type: FETCH_FEATURE_TOGGLES_SUCCESS, payload }),
  fetchFeatureTogglesFailure: (error) => ({ type: FETCH_FEATURE_TOGGLES_FAILURE, error }),
};

export function fetchFeatureTogglesEpic(action$, store, { api } = {}) {
  checkEpicApi(api, 'fetchFeatureToggles');

  return action$.ofType(FETCH_FEATURE_TOGGLES_REQUEST)
    .map(({ payload }) => payload && payload.rid)
    .switchMap((rid) => api.fetchFeatureToggles(rid)
      .map((features) => actions.fetchFeatureTogglesSuccess(features))
      .catch((error) => [actions.fetchFeatureTogglesFailure(error)]),
    );
}

export const featureTogglesEpic = combineEpics(fetchFeatureTogglesEpic);

export const initialState = {
  // Initialize to loading to enable blocking app renders until toggles are successfully fetched.
  isFetching: true,
  fetchFailed: false,
  features: {},
  error: null,
};

export function normalizeFeaturesResponse(features) {
  if (Array.isArray(features)) {
    return features.reduce((map, featureName) => {
      // eslint-disable-next-line no-param-reassign
      map[featureName] = true;
      return map;
    }, {});
  }

  return features;
}

export function featureTogglesReducer(state = initialState, action) {
  switch (action.type) {
    default:
      return state;
    case FETCH_FEATURE_TOGGLES_REQUEST:
      return {
        ...state,
        isFetching: true,
        fetchFailed: false,
      };
    case FETCH_FEATURE_TOGGLES_SUCCESS:
      return {
        ...state,
        isFetching: false,
        fetchFailed: false,
        features: normalizeFeaturesResponse(action.payload)
      };
    case FETCH_FEATURE_TOGGLES_FAILURE:
      return {
        ...state,
        isFetching: false,
        fetchFailed: true,
        error: action.error,
      };
  }
}

export const selectors = {
  featureToggles(state) {
    return safeGet(state, ['featureToggles']);
  },
  featureToggle(state, featureToggleKey) {
    return safeGet(state, ['featureToggles', 'features', featureToggleKey]);
  },
};

export function getFeatureTogglesUrl(rid) {
  return `/gateway/proxies/featureManager/v3/api/restaurant/${rid}/toggles`;
}

export function apiFetchFeatureToggles(rid) {
  const url = getFeatureTogglesUrl(rid);
  return ajaxGetJSON(url);
}
