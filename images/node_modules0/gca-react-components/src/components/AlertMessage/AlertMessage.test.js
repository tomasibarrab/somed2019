import React from 'react';
import { shallow } from 'enzyme';
import { AlertMessage } from './AlertMessage';

jest.useFakeTimers();

describe('AlertMessage', () => {
  describe('Inline', () => {
    const props = {
      active: true,
      display: 'inline',
      fadeOut: false,
      onClose: jest.fn(),
    };

    it('should render different styles', () => {
      ['success', 'warn', 'error'].forEach(type => {
        ['inline', 'block'].forEach(display => {
          expect(
            <AlertMessage {...props} type={type} display={display}>
              <span>Test content for {type}.</span>
            </AlertMessage>,
          ).toMatchSnapshot();
        });
      });
    });
  });

  describe('Inactive and Fadeout', () => {
    let props;
    beforeAll(() => {
      props = {
        active: true,
        type: 'success',
        display: 'inline',
        fadeOut: false,
        onClose: jest.fn(),
      };
    });

    it('should not render children when not active', () => {
      expect(
        shallow(
          <AlertMessage {...props} active={false}>
            <div>Should not shallow render.</div>
          </AlertMessage>,
        ),
      ).toMatchSnapshot();
    });

    it('should fade out', () => {
      const wrapper = shallow(
        <AlertMessage {...props} active={false} fadeOut delayTimeout={100}>
          <div id="test">test alert, should shallow render.</div>
        </AlertMessage>,
      );
      expect(wrapper.find('#test').length).toBe(0);
      wrapper.setProps({ active: true });
      expect(wrapper.find('#test').length).toBe(1);
      jest.runTimersToTime(90);
      expect(props.onClose).not.toHaveBeenCalled();
      jest.runAllTimers();
      expect(props.onClose).toHaveBeenCalled();
    });
  });
});
