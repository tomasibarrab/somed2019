import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

import { AlertIcon } from '../../icons/AlertIcon';
import { SuccessIcon } from '../../icons/SuccessIcon';
import { CrossIcon } from '../../icons/CrossIcon';

import './AlertMessage.scss';

const primaryColors = {
  success: '#9ACC54',
  warn: '#EDBD0E',
  error: '#F44E40',
  default: '#7B808D',
};

const icons = {
  'success-inline': <SuccessIcon color="#FFF" backgroundColor={primaryColors.success} />,
  'success-block': <SuccessIcon color={primaryColors.success} backgroundColor="#FFF" />,
  'error-inline': <AlertIcon backgroundColor={primaryColors.error} color="#FFF" />,
  'error-block': <AlertIcon backgroundColor="#FFF" color={primaryColors.error} />,
  'warn-block': <AlertIcon backgroundColor="#FFF" color={primaryColors.warn} />,
  'warn-inline': <AlertIcon backgroundColor={primaryColors.warn} color="#FFF" />,
};

function Alert(props) {
  const { type, display, children, onClose, canClose } = props;
  const icon = icons[`${type}-${display}`];
  const closeButton = canClose ? (
    <div className="button-container">
      <button onClick={onClose} className="gca-close-button">
        <CrossIcon height="15px" color="#979797" />
      </button>
    </div>
  ) : null;

  return (
    <div className={classnames('alert', type, display)}>
      <div className={classnames('icon-bar', display, type)}>{icon}</div>
      <div className={classnames('alert-content', display)}>{children}</div>
      {closeButton}
    </div>
  );
}

export class AlertMessage extends React.Component {
  componentDidMount() {
    if (this.props.active && this.props.fadeOut) {
      this.activate();
    }
  }

  componentWillUpdate(nextProps) {
    if (!this.props.active && nextProps.active && nextProps.fadeOut) {
      this.activate();
    }
  }

  activate() {
    window.setTimeout(this.props.onClose, this.props.delayTimeout);
  }

  render() {
    const { active, inactiveContent = null } = this.props;

    return (
      <TransitionGroup className="gca-alert-message">
        {active ? (
          <CSSTransition classNames="gca-alert-fadeout" timeout={{ exit: 800 }} unmountOnExit>
            <Alert {...this.props} />
          </CSSTransition>
        ) : (
          inactiveContent
        )}
      </TransitionGroup>
    );
  }
}

Alert.propTypes = {
  /** Allow user to close this alert manually. */
  canClose: PropTypes.bool,
  /** The contents of the alert are passed as children */
  children: PropTypes.node.isRequired,
  /** Inline display is minimal, including only an icon. Block mode  also includes a border: `inline | block` */
  display: PropTypes.oneOf(['inline', 'block']).isRequired,
  /** If fadeout is set to `true` this function will be invoked after `delayTimeout`. You should use this function to set `active` back to `false`. */
  onClose: PropTypes.func,
  /** primarily determines the color of the alert message: `success | error | warn` */
  type: PropTypes.oneOf(['success', 'error', 'warn']).isRequired,
};

AlertMessage.propTypes = {
  ...Alert.propTypes,
  /** Show/hide the message. If `inactiveContent` is passed, it will be show when this is `false`. */
  active: PropTypes.bool.isRequired,
  /** How long the message is shown before fading out. */
  delayTimeout: PropTypes.number,
  /** If true, the message fades out after a delay. If false, message remains until closed by the user. */
  fadeOut: PropTypes.bool,
  /** Content to display when alert is not active. */
  inactiveContent: PropTypes.node,
};

AlertMessage.defaultProps = {
  canClose: false,
  delayTimeout: 5000,
  fadeout: false,
  inactiveContent: null,
  onClose() {
    /* noop */
  },
};

export default AlertMessage;
