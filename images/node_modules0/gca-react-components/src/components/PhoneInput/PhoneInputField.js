// import PropTypes from 'prop-types';
import { isValidNumber } from 'libphonenumber-js';

import PhoneInput from './PhoneInput';
import customField from '../customField/customField';

import { fallbacks } from './constants.js';

export function validatePhoneNumber(value = '') {
  const code = this.props.countryCode.toUpperCase();
  // use a known fallback if there is one
  const countryCode = fallbacks[code] !== undefined ? fallbacks[code] : code;

  try {
    // try to validate against the countryCode first
    return isValidNumber(value, countryCode) ? undefined : 'Not a valid phone number';
  } catch (e) {
    // eslint-disable-next-line no-console
    console.log(e);
  }

  try {
    // if that fails, try again with the locale, safely parsing if either 'xx-XX' or 'XX'
    const localeCountry = this.props.locale.length === 5 ? this.props.locale.split('-')[1] : this.props.locale;
    return isValidNumber(value, localeCountry.toUpperCase()) ? undefined : 'Not a valid phone number';
  } catch (e) {
    // eslint-disable-next-line no-console
    console.log(e);
    // just return undefined (valid) if we aren't able to safely validate.
    return undefined;
  }
}
/**
 * Wraps a [`<PhoneInput>`](#PhoneInput) component in a Redux Form <a href="http://redux-form.com/6.6.3/docs/api/Field.md/" target="_blank">`<Field>`</a> and binds validation functions for min and max length.
 */
export const PhoneInputField = customField({
  component: PhoneInput,
  baseValidators: [validatePhoneNumber],
});

export default PhoneInputField;
