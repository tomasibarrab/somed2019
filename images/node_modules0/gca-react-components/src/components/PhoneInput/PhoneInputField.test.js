/* eslint-disable max-len */

import { shallow } from 'enzyme';
import React from 'react';

import { PhoneInputField } from './PhoneInputField';

const props = {
  countryCode: 'US',
  valid: true,
  value: '',
  name: 'phone',
};

describe('<PhoneInputField />', () => {
  it('Should pass props on to <Field>', () => {
    expect(shallow(<PhoneInputField {...props} />)).toMatchSnapshot();
  });

  it('should include a single validator for phone numbers', () => {
    const wrapper = shallow(<PhoneInputField {...props} />);
    const [validate] = wrapper.props().validate;

    expect(typeof validate('')).toEqual('string');
    expect(validate('4155556789')).toEqual(undefined);
  });

  describe('validatePhone', () => {
    const scenarios = [
      // valid US number
      { countryCode: 'US', value: '4155559988', locale: 'en-US', expected: 'undefined' },

      // valid AU number: real values from production
      { countryCode: 'AU', value: '0292562222', locale: 'en-US', expected: 'undefined' },
      // invalid AU number
      { countryCode: 'AU', value: '029256222', locale: 'en-US', expected: 'string' },
      // invalid AU number
      { countryCode: 'AU', value: '02925622222', locale: 'en-US', expected: 'string' },

      // valid UK number
      { countryCode: 'UK', value: '02072343456', locale: 'en-GB', expected: 'undefined' },
      // invalid UK number: not enough digits
      { countryCode: 'UK', value: '020723434', locale: 'en-GB', expected: 'string' },

      // valid IE: real values from production
      { countryCode: 'IE', value: '012748888', locale: 'en-GB', expected: 'undefined' },

      // valid CA: real values from production
      { countryCode: 'CA', value: '5142843332', locale: 'en-US', expected: 'undefined' },

      // valid FR: real values from production
      { countryCode: 'FR', value: '0493765027', locale: 'en-GB', expected: 'undefined' },
      // valid FR: lower case country code
      { countryCode: 'fr', value: '0493765027', locale: 'en-GB', expected: 'undefined' },
      // invalidvalid FR: country code not allowed: treal values from production
      { countryCode: 'FR', value: '330493765027', locale: 'en-GB', expected: 'string' },

      // valid IT: real values from production
      { countryCode: 'IT', value: '0287318888', locale: 'en-GB', expected: 'undefined' },
      // invalid IT: no country code allowed: real values from production
      { countryCode: 'IT', value: '390287318888', locale: 'en-GB', expected: 'string' },

      // valid ES
      { countryCode: 'ES', value: '971573790', locale: 'en-GB', expected: 'undefined' },
      // invalid ES: no country code allowed: real values from production
      { countryCode: 'ES', value: '3497157379', locale: 'en-GB', expected: 'string' },
      // invalid ES: not enough digits
      { countryCode: 'ES', value: '9715737', locale: 'en-GB', expected: 'string' },

      { countryCode: 'XX', value: '0000000000', locale: 'XX', expected: 'undefined' },
    ];

    it('should validate correctly and fallback safely if unable to validate', () => {
      scenarios.forEach(({ countryCode, value, locale, expected }) => {
        const wrapper = shallow(<PhoneInputField {...props} countryCode={countryCode} locale={locale} value={value} />);
        const [validate] = wrapper.props().validate;
        expect(typeof validate(value)).toEqual(expected);
      });
    });
  });
});
