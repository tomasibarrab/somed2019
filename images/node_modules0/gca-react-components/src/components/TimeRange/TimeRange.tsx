import * as React from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';

import TimeSelect from '../TimeSelect/TimeSelect';

export interface Labels {
  start?: string;
  end?: string;
  to?: string;
  invalid?: string;
}

export interface Value {
  firstTime?: string;
  secondTime?: string;
}

/**
 * TimeRange props
 */
export interface Props {
  className?: string;
  firstSelect: {
    start?: string;
    startType?: 'inclusive' | 'exclusive';
    end?: string;
    endType?: 'inclusive' | 'exclusive';
    increment: number;
  };
  secondSelect: {
    start?: string;
    startType?: 'inclusive' | 'exclusive';
    end?: string;
    endType?: 'inclusive' | 'exclusive';
    increment: number;
  };
  outputWithSeconds?: boolean;
  locale: string;
  labels?: Labels;
  value?: Value;
  valid?: boolean;
  onChange?: ( nv: Value ) => void;
}

interface DefProps {
  outputWithSeconds: boolean;
  labels: {
    start: string;
    end: string;
    to: string;
    invalid: string;
  },
  firstSelect: {
    start: string;
    startType: string;
    end: string;
    endType: string;
  },
  secondSelect: {
    start: string;
    startType: string;
    end: string;
    endType: string;
  }
}

type PropsWithDef = Props & DefProps;

/**
 * A compound component for managing a time interval using two TimeSelect components.
 */
class TimeRange extends React.Component<Props> {
  static propTypes: React.ValidationMap<Props>;
  static defaultProps: Partial<DefProps>;

  constructor(p: Props) {
    super(p);
  }

  handleChangeFirstSelect = (newtime: string | null) => {
    const { onChange, value } = this.props;
    if (onChange) {
      onChange({
        firstTime: newtime || undefined,
        secondTime: value ? value.secondTime : undefined
      });
    }
  }

  handleChangeSecondSelect = (newtime: string | null) => {
    const { onChange, value } = this.props;
    if (onChange) {
      onChange({
        firstTime: value ? value.firstTime : undefined,
        secondTime: newtime || undefined
      });
    }
  }

  render() {
    const {
      firstSelect,
      secondSelect,
      className,
      labels,
      locale,
      outputWithSeconds,
      valid,
      value
    } = this.props as PropsWithDef;

    return (
      <div className={classnames('gca-time-range', className)}>
        <div className="time-range-select-container">
          <TimeSelect
            value={value && value.firstTime ? value.firstTime || '' : ''}
            onChange={this.handleChangeFirstSelect}
            locale={locale}
            outputWithSeconds={outputWithSeconds}
            placeholder={labels.start}
            {...firstSelect}
          />
          <p className="time-range-divider">
            {labels.to}
          </p>
          <TimeSelect
            value={value && value.secondTime ? value.secondTime || '' : ''}
            onChange={this.handleChangeSecondSelect}
            locale={locale}
            outputWithSeconds={outputWithSeconds}
            placeholder={labels.end}
            {...secondSelect}
          />
        </div>
        {!valid
          ? <p className="invalid-message">
            {labels.invalid}
          </p>
          : null}
      </div>
    );
  }
}

TimeRange.defaultProps = {
  outputWithSeconds: false,
  labels: {
    start: 'Start',
    end: 'End',
    to: 'to',
    invalid: 'Please select a start time that is before your end time.',
  },
  firstSelect: {
    start: '00:00',
    startType: 'inclusive',
    end: '24:00',
    endType: 'inclusive'
  },
  secondSelect: {
    start: '00:00',
    startType: 'inclusive',
    end: '24:00',
    endType: 'inclusive'
  }
}

export default TimeRange;
