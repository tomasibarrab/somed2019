import { shallow } from 'enzyme';
import React from 'react';

import { TimeSelect, parseTimeToMinutes, buildTimes } from './TimeSelect';

const baseProps = {
  start: '00:00',
  end: '05:00',
  increment: 30,
  onChange: () => {},
  outPutWithSeconds: false,
  locale: 'ja-jp',
  value: '04:30',
};

describe('<TimeSelect />', () => {
  describe('parseTimeToMinutes', () => {
    it('should return an integer reprenting number of minutes from a 24-hour timestamp', () => {
      const actual = parseTimeToMinutes('00:00');
      const expected = 0;
      expect(actual).toBe(expected);
    });

    it('should return an integer reprenting number of minutes from a 24-hour timestamp', () => {
      const actual = parseTimeToMinutes('05:30');
      const expected = 5 * 60 + 30;
      expect(actual).toBe(expected);
    });
  });

  describe('buildTime', () => {
    const actual = buildTimes('00:00', '01:30', 15, 'h:mm a');
    const expected = [
      {
        label: '12:00 am',
        value: '00:00',
      },
      {
        label: '12:15 am',
        value: '00:15',
      },
      {
        label: '12:30 am',
        value: '00:30',
      },
      {
        label: '12:45 am',
        value: '00:45',
      },
      {
        label: '1:00 am',
        value: '01:00',
      },
      {
        label: '1:15 am',
        value: '01:15',
      },
    ];

    expect(actual).toEqual(expected);
  });

  describe('buildTime should interpret 24+ hours correctly', () => {
    const actual = buildTimes('25:00', '26:30', 30, 'h:mm a');
    const expected = [
      {
        label: '1:00 am',
        value: '25:00',
      },
      {
        label: '1:30 am',
        value: '25:30',
      },
      {
        label: '2:00 am',
        value: '26:00',
      },
    ];

    expect(actual).toEqual(expected);
  });

  describe('TimeSelect', () => {
    it('should match snapshot', () => {
      expect(shallow(<TimeSelect {...baseProps} />)).toMatchSnapshot();
    });
  });

  describe('TimeSelect', () => {
    it('should render correct list of times based on inclusive/exclusive start/end', () => {
      expect(shallow(<TimeSelect {...baseProps} startType="exclusive" endType="inclusive" />)).toMatchSnapshot();
    });
  });
});
