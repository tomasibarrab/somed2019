import React from 'react';
import classNames from 'classnames';
import { Link } from 'react-router-dom';
import PropTypes from 'prop-types';

import { BusyIcon } from '../BusyIcon/BusyIcon';

import './Button.scss';

/**
 * A button component with included styles for disabled and busy states.
 * Can be used as either a 'button' or a 'link'.
 */
export function Button(props) {
  const { busy, children, className, disabled, htmlType, theme, to, type, ...rest } = props;
  const isDisabled = disabled || busy;
  const RootElement = type === 'link' ? Link : type;

  // Pass through a `type` property if this is an actual button
  const resolvedHtmlType = type === 'button' ? htmlType : undefined;

  return (
    <RootElement
      className={classNames('gca-button', className, theme, { 'gca-button-link': type === 'link', busy, disabled })}
      href={to}
      to={to}
      disabled={isDisabled}
      type={resolvedHtmlType}
      {...rest}
    >
      <span className="button-content">{children}</span>
      {busy && <BusyIcon type={theme} size="26px" />}
    </RootElement>
  );
}

Button.propTypes = {
  /** If true, displays a busy spinner in place of the text */
  busy: PropTypes.bool,
  /** The contents of the button are passed as children */
  children: PropTypes.node,
  /** Class(es) will be assigned to the root element as a hook for style overrides. */
  className: PropTypes.string,
  /* Disabled is passed in as prop and modified based on busy prop for RootElement */
  disabled: PropTypes.bool,
  /** Because `type` is overridden (see below), use this to set the `type` property of the underlying element */
  htmlType: PropTypes.oneOf(['button', 'reset', 'submit']),
  /** If used as a button, onClick method is called when the button is pressed. */
  onClick: PropTypes.func,
  /** Specifies the style presets to use */
  theme: PropTypes.oneOf(['bare', 'primary', 'default', 'publish', 'hollow', 'link']),
  /** If type is `a`, will be set as the href. If type is `link` will be passed on. */
  to: PropTypes.string,
  /** Specifies how the component should render -- as a button or an anchor. 'link' implements react-dom's Link, which requires your app use react-router. */
  type: PropTypes.oneOf(['a', 'button', 'link']),
};

Button.defaultProps = {
  disabled: false,
  htmlType: 'button',
  theme: 'default',
  type: 'button',
};

export default Button;
