import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import uniqueId from 'lodash/uniqueId';
import './RadioButton.scss';

//
// implementing as class so that the wrapped onChange handler is only defined once, as opposed to on
// each render
//

/**
 * Expected to be used as a child of a `RadioButtonGroup`. Should be provided `value` and `label`
 * properties when added to a `RadioButtonGroup`. The `RadioButtonGroup` ends up cloning the
 * provided button, in the process comparing the button's `value` property to it's `selectedValue`
 * in order to set the `checked` property. The group also assigns the `onChange` callback. An
 * example usage might look like:
 *
 * ```
 * <RadioButton value="fee" label="Say Fee!" />
 * ```
 */
export class RadioButton extends React.Component {
  constructor(props) {
    super(props);

    this.onChangeHandler = () => {
      props.onChange(props.value);
    };
  }

  componentWillMount() {
    this.id = uniqueId('radio_');
  }

  render() {
    const { disabled, checked = false, label, className } = this.props;
    const radioButtonClasses = classnames({ disabled }, className, 'gca-radio');

    return (
      <div className={radioButtonClasses}>
        <label htmlFor={this.id}>
          <input id={this.id} type="radio" checked={checked} onChange={this.onChangeHandler} disabled={disabled} />
          <span className="label">{label}</span>
        </label>
      </div>
    );
  }
}

RadioButton.propTypes = {
  /**
   * Typically set by enclosing `RadioButtonGroup` by comparing the radio's `value` with the
   * `RadioButtonGroup`'s `selectedValue' property
   */
  checked: PropTypes.bool,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /** Callback invoked with `value` when the radio native `onChange` triggers */
  onChange: PropTypes.func,
  /**
   * Used to compare with the `selectedValue` of an enclosing `RadioButtonGroup` to determine if
   * the radio is `checked` or not
   */
  value: PropTypes.string,
  /** Optional class names may be passed in in addition to the default `'gca-radio'` */
  className: PropTypes.string,
  disabled: PropTypes.bool,
};

export default RadioButton;
