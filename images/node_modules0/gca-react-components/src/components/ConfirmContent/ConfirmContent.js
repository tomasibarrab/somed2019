import React from 'react';
import PropTypes from 'prop-types';

/**
 * A view-less component for tracking an action/confirm/cancel behavior. If `showConfirm` is passed as a prop this component can have its state managed externally, but will otherwise default to internal state. Uses the [function-as-child pattern](https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9) to allow you full control of rendering.
 */
export class ConfirmContent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      showConfirm: false,
    };

    this.changeState = this.changeState.bind(this);
    this.onInitial = this.onInitial.bind(this);
    this.onConfirm = this.onConfirm.bind(this);
    this.onCancel = this.onCancel.bind(this);
  }

  onCancel(e) {
    if (e && typeof e.preventDefault === 'function') {
      e.preventDefault();
    }

    this.changeState(false);
  }

  onConfirm(...args) {
    this.props.onConfirm(...args);
    this.changeState(false);
  }

  onInitial(e) {
    if (e && typeof e.preventDefault === 'function') {
      e.preventDefault();
    }

    this.changeState(true);
  }

  changeState(show) {
    if (this.props.showConfirm === undefined) {
      this.setState({ showConfirm: show });
    } else if (typeof this.props.onStateChange === 'function') {
      this.props.onStateChange(show);
    }
  }

  render() {
    return this.props.children({
      showConfirm: this.state.showConfirm || this.props.showConfirm,
      onInitial: this.onInitial,
      onConfirm: this.onConfirm,
      onCancel: this.onCancel,
    });
  }
}

ConfirmContent.propTypes = {
  /**
   * This function will be injected with state and handlers. Use them to render your content however you want.
   *
   * @param {boolean} showConfirm Flag to determine your view state
   * @param {function} onInitial Transitions to the `showConfirm` state
   * @param {function} onConfirm Invokes your top level onConfirm and resets back to initial state
   * @param {function} onCancel Resets back to initial state
   */
  children: PropTypes.func.isRequired,
  /** Function to be called when confirming the action. */
  onConfirm: PropTypes.func.isRequired,
  /** Function: `(showConfirm: boolean) => void`. Use this to update `showConfirm` if managing this component externally */
  onStateChange: PropTypes.func,
  /** Show/hide the confirm state. Use to set display if managing this component externally. */
  showConfirm: PropTypes.bool,
};

ConfirmContent.defaultProps = {};

export default ConfirmContent;
