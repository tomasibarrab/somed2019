import * as React from 'react';
import { Field, FieldProps, FieldRenderProps } from 'react-final-form';

export type InputFieldProps<T> = T & FieldProps & {
  valid?: boolean
  showValidationWhenPristine?: boolean;
};

interface FieldRenderer<T> {
  ( props: InputFieldProps<T>, fieldProps: FieldRenderProps ): React.ReactNode;
}

interface InputFieldContext {
  showValidationWhenPristine?: boolean;
}

/**
 * customFinalField allows to create a custom Field component for gca-react-components.
 *
 * showValidationWhenPristine can be set in props or in context to true or false.
 *
 * When showValidationWhenPristine is set to FALSE the validation feedback is only visible
 * when the field has been focused and focused out once (in final form this is reported with the meta.touched)
 *
 * When showValidationWhenPristine is set to TRUE the validation feedback is always visible.
 *
 * @param fieldRenderer render function for the controlled component.
 */
export function customFinalField<T>( fieldRenderer: FieldRenderer<T> ) {
  return ( props: InputFieldProps<T>, context: InputFieldContext ) => {
    const p: InputFieldProps<T> = Object.assign( {}, props);
    return (
      <Field {...props}>
        {( fieldState: FieldRenderProps ) => {
          const { meta } = fieldState;
          const showValidationWhenPristine = props.showValidationWhenPristine !== undefined
            ? props.showValidationWhenPristine
            : context.showValidationWhenPristine;
          const hideValidation = showValidationWhenPristine ? false : !meta.touched;
          const valid = meta.valid || hideValidation;
          p.valid = valid;
          p.errorText = valid ? undefined : props.errorText || meta.error;
          return fieldRenderer(p, fieldState);
        }}
      </Field>
    );
  };
}
