import React from 'react';
import { FormattedHTMLMessage, FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { State } from '../store/types';
import {
  getAppointmentDate,
  selectors,
} from '../store/userAgreements/userAgreements';
import { ConfirmPageDisplayState, ContactInfo } from '../store/userAgreements/userAgreements.types';
import '../UserAgreements/UserAgreements.scss';
import './Confirm.scss';

interface SP {
  appointmentDate: string;
  browserLocale: string;
  confirmPageDisplayState: ConfirmPageDisplayState;
  contractOwner: ContactInfo;
};

type Props = SP & InjectedIntlProps;

class ConfirmHeader extends React.Component<Props> {
  public render() {
    const { confirmPageDisplayState, contractOwner } = this.props;
    let titleMessage = null;
    let detailsMessage = null;

    switch (confirmPageDisplayState) {
      case 'Scheduled_RedirectedFromScheduling':
        titleMessage = this.getAppointmentMessage();
        detailsMessage = <FormattedMessage id="confirm.scheduled.details" />;
        break;
      case 'Scheduled_LoadedFromUrl':
      default:
        titleMessage = <FormattedHTMLMessage id="confirm.scheduled.title.general"/>;
        detailsMessage = <FormattedMessage id="confirm.scheduled.details" />;
        break;
      case 'Unscheduled_SchedulingSkipped':
        titleMessage = <FormattedHTMLMessage id="confirm.unscheduled.title"/>;
        detailsMessage = <FormattedHTMLMessage id="confirm.unscheduled.details"
            values={{
              contractOwnerFirstName: contractOwner.firstName,
              contractOwnerLastName: contractOwner.lastName,
            }}
          />;
        break;
    }

    return <>
      <h1>
        { titleMessage }
      </h1>
      <div className="title-description">
        { detailsMessage }
      </div>
    </>;
  }

  private getAppointmentMessage() {
    const { appointmentDate, browserLocale } = this.props;

    const options: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const appt = new Date(appointmentDate);
    const apptEnd = new Date(appt);
    apptEnd.setHours(apptEnd.getHours() + 2);
    const formattedDate = appt.toLocaleDateString(browserLocale, options);

    let timeOptions: Intl.DateTimeFormatOptions = { hour: 'numeric', minute: 'numeric' };
    const formattedStartTime = appt.toLocaleTimeString(browserLocale, timeOptions);
    timeOptions = { ...timeOptions, ...{ timeZoneName: 'short'} };
    const formattedEndTimeWithTimezone = apptEnd.toLocaleTimeString(browserLocale, timeOptions);

    return <FormattedHTMLMessage id="confirm.scheduled.title.specific"
    values={{
      formattedDate,
      formattedEndTimeWithTimezone,
      formattedStartTime,
    }}
  />;
  }

  private getGcAppLink() {
    return 'https://itunes.apple.com/app/apple-store/id766049754?pt=141936&ct=ERB_Upgrade_Agreement&mt=8';
  }

  private getVideosLink() {
    return 'https://www.youtube.com/channel/UCO-5Em0AJjAFllck30O8yZw/';
  }
}

const mapState = (state: State): SP => ({
  appointmentDate: getAppointmentDate(state),
  browserLocale: state.language.locale,
  confirmPageDisplayState: selectors.getConfirmPageDisplayState(state),
  contractOwner: selectors.getContractOwner(state),
});

export default connect<SP, {}, {}>(mapState)(injectIntl(ConfirmHeader));
export { ConfirmHeader as PureConfirmHeader };
