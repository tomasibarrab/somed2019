/**
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import { AlertMessage, AsyncContent } from 'gca-react-components';
import { initializeGcScope } from 'gca-react-components/src/redux-modules/initializeApp';
import * as React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { State } from '../../store/types';

import { GcScope, getGcScope } from 'shared-utils/gcScope';

import { selectors as uaSelectors } from '../../store/userAgreements/userAgreements';
import UserAgreements from '../../UserAgreements/UserAgreements';

import './App.scss';

interface SP {
  loading: boolean;
  error: boolean;
  forbidden: boolean;
}

interface DP {
  initializeGcScope: (payload: GcScope) => void;
}

type Props = SP & DP & InjectedIntlProps;

class App extends React.Component<Props, {}> {
  public render() {

    const forbiddenComponent = () => (
      <div className="forbiddenMessage">
        <AlertMessage
          active
          type="error"
          display="block"
        >
          <FormattedMessage
            id="error.access.denied"
            tagName="p"
          />
        </AlertMessage>
      </div>
    );

    return (
      <div className="ua-layout">
        <AsyncContent
          isLoading={this.props.loading}
          isEmpty={this.props.forbidden}
          isError={this.props.error}
          emptyComponent={forbiddenComponent}
          errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
          errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
        >
          <UserAgreements />
        </AsyncContent>
      </div>
    );
  }

  public componentDidMount() {
    this.props.initializeGcScope(getGcScope(window));
  }
}

const mapState = (state: State): SP => ({
  error: uaSelectors.isAppLoadFailed(state),
  forbidden: uaSelectors.isForbidden(state),
  loading: uaSelectors.isAppLoading(state),
});


const mapDispatch = {
  initializeGcScope,
};

const Connected = connect<SP, DP, {}>(mapState, mapDispatch)(injectIntl<Props>(App));

export default Connected;
export { App as PureApp };
