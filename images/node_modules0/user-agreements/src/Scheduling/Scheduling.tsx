import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import Sidebar from '../Sidebar/Sidebar';
import { State, UserAgreementsWindow } from '../store/types';
import { selectors } from '../store/userAgreements/userAgreements';
import { ContactInfo } from '../store/userAgreements/userAgreements.types';

import '../NavBar/NavBar.scss';
import '../UserAgreements/UserAgreements.scss';
import './Scheduling.scss';

interface SP {
  agreementId: string;
  customerInfo: ContactInfo;
  opportunityId: string;
  schedulingLink: string;
}

type Props = SP & InjectedIntlProps;

class Scheduling extends React.Component<Props> {
  public render() {
    return <>
        <div className="page-content scheduling" data-qa="uaf-scheduling-page">
          <div className="nav-item">
            <FormattedMessage id="agreements.step3" />
          </div>
          <h1>
            <FormattedMessage id="scheduling.success" />
          </h1>
          <h2>
            <FormattedMessage id="scheduling.48HourReminder" />
          </h2>
          <h2>
            <FormattedMessage id="scheduling.iPadReminder" />
          </h2>
          <div dangerouslySetInnerHTML={{ __html: this.getCalendlySnippet() }} />
        </div>
        <Sidebar />
      </>;
  }

  public componentDidMount() {
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'https://assets.calendly.com/assets/external/widget.js';
    script.async = true;

    document.body.appendChild(script);
  }

  private getCalendlyUrl(): string {
    const { agreementId, opportunityId, schedulingLink, customerInfo: { firstName, lastName, email } } = this.props;

    const schedulingUrl = `${schedulingLink}/${this.getDate()}`;
    // tslint:disable-next-line:max-line-length
    const queryStr = `?name=${encodeURI(firstName + ' ' + lastName)}&email=${encodeURI(email)}&utm_campaign=${agreementId}&sfid=${opportunityId}`;

    return `${schedulingUrl}${queryStr}`;
  };

  private getCalendlySnippet(): string {
    return `<div class="calendly-inline-widget" data-url="${this.getCalendlyUrl()}" style="height:880px"></div>`;
  };

  // Bump the date forward to the first available calendly appointment (1 week from today)
  private getDate(): string {
    const currentDate: Date = new Date();
    currentDate.setDate(currentDate.getDate() + 8);
    const dateStr = `${currentDate.getMonth() + 1}-${currentDate.getDate()}-${currentDate.getFullYear()}`;

    return dateStr;
  }
}

const mapState = (state: State): SP => ({
  agreementId: selectors.getAgreementId(state),
  customerInfo: selectors.getCustomerInfo(state),
  opportunityId: selectors.getOpportunityId(state),
  schedulingLink: state.userAgreements.userAgreement.schedulingLink,
});

export default connect<SP, {}, {}>(mapState, {})(injectIntl(Scheduling));
export { Scheduling as PureScheduling };
