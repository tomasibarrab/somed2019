import { AlertMessage } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import Sidebar from '../Sidebar/Sidebar';
import { State } from '../store/types';
import { selectors } from '../store/userAgreements/userAgreements';
import { ContactInfo } from '../store/userAgreements/userAgreements.types';

import '../UserAgreements/UserAgreements.scss';
import './AgreementInvalid.scss';

interface SP {
  contractOwner: ContactInfo;
}

type Props = SP & InjectedIntlProps;

class AgreementInvalid extends React.Component<Props, {}> {

  public render() {
    const { contractOwner } = this.props;

    return (
      <>
        <div className="page-content" data-qa="agreement-invalid-alert">
          <div className="alert-message">
            <AlertMessage
            active
            type="error"
            display="block"
            >
              <FormattedMessage
                id="error.contractExpired"
                tagName="p"
                values={{ name: `${contractOwner.firstName} ${contractOwner.lastName}` }}
              />
            </AlertMessage>
          </div>
        </div>
        <Sidebar />
      </>
    )
  }
}

const mapState = (state: State): SP => ({
  contractOwner: selectors.getContractOwner(state),
});

export default connect<SP, {}, {}>(mapState, {})(AgreementInvalid);
export { AgreementInvalid as PureAgreementInvalid };
