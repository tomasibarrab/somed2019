import { AjaxError } from 'rxjs/observable/dom/AjaxObservable';
import AsyncStatus from '../../AsyncStatus';

export enum AgreementState {
  AgreementCreated = 'agreementCreated',
  AgreementExpired = 'agreementExpired',
  AgreementRenegotiated = 'agreementRenegotiated',
  AgreementUpdated = 'agreementUpdated',
  PricingAccepted = 'pricingAccepted',
  TermsAccepted = 'termsAccepted',
  AppointmentScheduled = 'appointmentScheduled',
}

export enum AgreementStepName {
  AgreementInvalid = 'AgreementInvalid',
  PricingDetails = 'PricingDetails',
  TermsAndConditions = 'TermsAndConditions',
  Scheduling = 'Scheduling',
  Print = 'Print',
  Confirm = 'Confirm',
}

export interface UserAgreementsDTO {
  agreementId: string;
  agreementState: AgreementState;
  appointmentDate: string;
  contractOwner: ContactInfo;
  createdDate: string;
  customerInfo: ContactInfo;
  entityInfo: EntityInfo;
  isSigned: boolean;
  pricingDetails: PricingDetails;
  rid: number;
  salesforce: SalesforceInfo;
  schedulingLink: string;
  termsAndConditions: TermsAndConditionsItem[];
  type: string;
}

export interface UserAgreementsState {
  acceptStatus: AsyncStatus;
  agreementId: string;
  fetchStatus: AsyncStatus;
  isPageScrolledToBottom: boolean;
  printPage: boolean;
  updateAppointmentScheduledStatus: AsyncStatus,
  updateStatus: AsyncStatus;
  userAgreement: UserAgreementsDTO;
  fetchError: AjaxError | null;
  viewAgreement: boolean;
  wasAppointmentJustScheduled: boolean;
}

export interface UpdateUserAgreementDTO {
  agreementId: string;
  agreementState: AgreementState;
  appointmentDate?: string;
}

export interface AcceptTermsDTO {
  agreementId: string;
  clientEmail: string;
  signedVersions: number[];
}

export interface AppointmentDateDTO {
  agreementId: string;
  appointmentDate: string;
}

export interface AgreementIdType {
  agreementId: string;
}

export interface ContactInfo {
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
}

export interface SalesforceInfo {
  opportunityId: string;
  quoteId: string;
}

export interface TermsAndConditionsItem {
  productType: string;
  version: number;
  content: string;
  locale: string;
}

export interface EntityInfo {
  defaultLocale: string;
  legalEntity: string;
  restaurantName: string;
}

export interface PricingDetails {
  feeNotes: string;
  pricingItems: PricingItem[];
}

export interface PricingItem {
  billingRecurrence: BillingRecurrence;
  currencyCode: string;
  discount: number;
  feeType: FeeType;
  listPrice: number;
  productCode: string;
  productName: string;
  temporaryDiscountAmount: number;
  temporaryDiscountMonths: number;
  totalPrice: number;
}

export interface PricingItemCategories {
  [key: string]: PricingItem[],
}

enum FeeType {
  Subscription = 'subscription',
  Covers = 'covers',
  Connectivity = 'connectivity',
  Installation = 'installation',
  OpenTableGifts = 'openTable Gifts',
  API = 'API',
  Hardware = 'Hardware',
}

enum BillingRecurrence {
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Annual = 'annual',
  OneTime = 'one time',
}

export type ConfirmPageDisplayState =
  'Scheduled_RedirectedFromScheduling' |
  'Scheduled_LoadedFromUrl' |
  'Unscheduled_SchedulingSkipped'
;
