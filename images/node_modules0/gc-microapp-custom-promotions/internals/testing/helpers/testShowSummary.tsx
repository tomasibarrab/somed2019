import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { CUSTOM_PROMOTIONS_FORM_NAME } from '../../../src/CustomPromotions/constants';
import messages from '../../../src/i18n/custom-promotions';

/*
  This file should be used within a test file for any component that intends to be inside a SteppedFormSection.

  In your component's test file, mock out the [MyComponentName]Summary component, and anything else that is
  going to complain if it tries to grab something out of the state and can't find it, since this function,
  at the moment, only provides a rather limited state.
*/

const testShowingFieldsOrSummary = (Component: any, showingSummary: boolean, formValues?: any, state?: any) => {
  const formState = {
    form: {
      [CUSTOM_PROMOTIONS_FORM_NAME]: {
        values: formValues || {},
      },
    },
    ...state,
  };

  const Decorated = reduxForm({ form: CUSTOM_PROMOTIONS_FORM_NAME })(Component) as any;
  const store = configureMockStore([])(formState);
  const wrapper = mount(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={messages}>
        <Decorated isOpen={!showingSummary} />
      </IntlProvider>
    </Provider>,
  );

  const classToFind = showingSummary ? 'summary' : 'fields';
  const classToNotFind = showingSummary ? 'fields' : 'summary';

  const shouldFind = wrapper.find(`.${classToFind}`);
  const shouldNotFind = wrapper.find(`.${classToNotFind}`);

  expect(shouldFind.length).toEqual(1);
  expect(shouldNotFind.length).toEqual(0);
};

export default testShowingFieldsOrSummary;
