import React, { Component } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { FormSection } from 'redux-form';
import { ChildComponentProps } from '../commonTypes';
import { dayOrdering, days as daysInfo } from './constants';
import './DaysAndTimes.scss';
import ImageDay from './ImageDay';
import Times from './Times';

interface State {
  selected: string;
}

type OP = ChildComponentProps;

type Props = OP & InjectedIntlProps;

class DaysAndTimesImages extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      selected: dayOrdering[0],
    };
  }

  public render() {
    const { selected } = this.state;
    return (
      <div className="image-daypicker-variant">
        <div className="day-bar">
          <div className="day-container">
            {dayOrdering.map((key: string) => (
              <ImageDay
                selected={selected === key}
                key={key}
                label={daysInfo[key].label}
                onClickDay={value => this.onClickDay(key)}
              />
            ))}
          </div>
        </div>
        <div className="times-container">
          <FormSection name={daysInfo[selected].label.toLowerCase()}>
            <Times />
          </FormSection>
        </div>
      </div>
    );
  }
  private onClickDay(key: string) {
    /* Safer to use functional setState and object spread to create
      a new state: using Object.assign on `days` doesn't deeply create new
      day objects, so modifying them and calling setState(// the new days)
      is really updating the state before React would have done it itself. */
    this.setState(prevState => ({
      selected: key,
    }));
  }
}

export default DaysAndTimesImages;
