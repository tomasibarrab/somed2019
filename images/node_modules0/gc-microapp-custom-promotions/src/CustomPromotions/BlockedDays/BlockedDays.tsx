import classNames from 'classnames';
import React, { Component, Fragment, ReactNode } from 'react';
import { FormattedDate, FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { Field, FormSection, formValues } from 'redux-form';
import { translateToForm } from '../../helpers/suppression-dates-manipulator';
import { SuppressionDates } from '../../store/customPromotions/customPromotions.types';
import { ChildComponentProps } from '../commonTypes';
import { defaultSuppressionDates } from '../constants';
import Fieldset from '../Fieldset/Fieldset';
import CloseIcon from '../images/CloseIcon';
import BlockedDatesPickerModal from './BlockedDatesPickerModal/BlockedDatesPickerModal';
import BlockedDaysSummary from './BlockedDaysSummary';
import formatCountMessage from './format-count-message';

import './BlockedDays.scss';

interface FormValuesProps {
  custom: any;
  default: any;
}

interface ListAndCount {
  rendered: ReactNode | null;
  count: number;
}

type Props = ChildComponentProps & InjectedIntlProps & FormValuesProps;

interface State {
  showModal: boolean;
}

const getKeysWithValue = (obj: any, value: any) => Object.keys(obj).filter(key => obj[key] === value);

// check: /gc-microapp-marketing/src/PromotedInventory/Specials/BlockedDays.tsx
export class BlockedDays extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { showModal: false };
  }

  public render() {
    /* 'default' is a reserved word. */
    const { intl: { formatMessage }, isOpen, custom, default: defaultDates } = this.props;
    const { showModal } = this.state;
    const { enabledDefault, enabledCustom, disabled } = this.getLists(custom, defaultDates);

    return (
      <Fieldset
        className="blocked-days"
        description={formatMessage({
          id: 'guestcampaigns.custom_promotions.form.blocked_days.description',
        })}
        legend={formatMessage({ id: 'guestcampaigns.custom_promotions.form.blocked_days.legend' })}
      >
        {isOpen ? (
          <div className="fields">
            {showModal && this.makeBlockedDatesPickerModal(custom, defaultDates)}
            {formatCountMessage('by_default_these', enabledDefault.count)}
            {enabledDefault.rendered}
            {formatCountMessage('default_holidays_unblocked', disabled.count)}
            {disabled.rendered}
            <FormattedMessage id="guestcampaigns.custom_promotions.form.blocked_days.you_can_add" />
            {enabledCustom.rendered}
          </div>
        ) : (
          <div className="summary">
            <BlockedDaysSummary />
          </div>
        )}
      </Fieldset>
    );
  }

  private renderPill(
    isCustom: boolean,
    isSelected: boolean,
    id: string,
    label: string,
    date: string,
    varies?: boolean,
  ): ReactNode {
    return (
      <li
        className={classNames({
          custom: isCustom,
          default: !isCustom,
          unselected: !isSelected,
        })}
        key={id}
      >
        <label>
          {label && <span className="blocked-day-label">{label}</span>}
          <time>
            {varies ? (
              <FormattedMessage id="guestcampaigns.custom_promotions.form.blocked_days.varies" />
            ) : (
              <FormattedDate
                value={date}
                month={isCustom ? 'long' : 'short'}
                day="numeric"
                year={isCustom ? 'numeric' : undefined}
              />
            )}
          </time>
          <Field className={isSelected ? 'blocked' : 'unblocked'} component="input" name={id} type="checkbox" />
          {isSelected ? (
            <CloseIcon size="14" />
          ) : (
            <FormattedMessage id="guestcampaigns.custom_promotions.form.blocked_days.block" />
          )}
        </label>
      </li>
    );
  }

  private getLists(
    custom: any,
    defaultDates: any,
  ): { enabledCustom: ListAndCount; enabledDefault: ListAndCount; disabled: ListAndCount } {
    const enabledDefault = getKeysWithValue(defaultDates, true);
    const disabledDefault = getKeysWithValue(defaultDates, false);
    const enabledCustom = getKeysWithValue(custom, true);

    const enabledDefaultOutput =
      enabledDefault.length > 0 ? (
        <ul className="enabled-default">
          <FormSection name="default" component={Fragment}>
            {enabledDefault.map((defaultId: string) =>
              this.renderPill(
                false,
                true,
                defaultId,
                defaultSuppressionDates[defaultId].label,
                defaultSuppressionDates[defaultId].startDate,
                defaultSuppressionDates[defaultId].varies,
              ),
            )}
          </FormSection>
        </ul>
      ) : null;

    const enabledCustomOutput = (
      <ul className="enabled-custom">
        <FormSection name="custom" component={Fragment}>
          {enabledCustom.map((customDate: string) => this.renderPill(true, true, customDate, '', customDate))}
        </FormSection>
        {this.makeAddCustomDay()}
      </ul>
    );

    const disabledOutput =
      disabledDefault.length > 0 ? (
        <ul className="disabled-default">
          <FormSection name="default" component={Fragment}>
            {disabledDefault.map((defaultId: string) =>
              this.renderPill(
                false,
                false,
                defaultId,
                defaultSuppressionDates[defaultId].label,
                defaultSuppressionDates[defaultId].startDate,
              ),
            )}
          </FormSection>
        </ul>
      ) : null;

    return {
      disabled: { rendered: disabledOutput, count: disabledDefault.length },
      enabledCustom: { rendered: enabledCustomOutput, count: enabledCustom.length },
      enabledDefault: { rendered: enabledDefaultOutput, count: enabledDefault.length },
    };
  }

  private makeAddCustomDay = (): JSX.Element => {
    return (
      <li
        className="action"
        key="add-a-custom-day"
        onClick={() => {
          this.setState({ showModal: true });
        }}
      >
        + <FormattedMessage id="guestcampaigns.custom_promotions.form.blocked_days.add" />
      </li>
    );
  };

  private makeBlockedDatesPickerModal = (customDates: any, defaultDates: any): JSX.Element => {
    const { change } = this.props;
    const suppressionDates = this.makeSuppressionDates(customDates, defaultDates);

    return (
      <BlockedDatesPickerModal
        suppressionDates={suppressionDates}
        close={() => {
          this.setState({ showModal: false });
        }}
        confirm={(data: SuppressionDates) => {
          const formSuppressionDates = translateToForm(data);
          change('custom', formSuppressionDates.custom);
          change('default', formSuppressionDates.default);
        }}
      />
    );
  };

  private makeSuppressionDates = (custom: any, defaultDates: any) => {
    const arrayedDefaults = Object.keys(defaultDates).filter(key => defaultDates[key]);
    const arrayedCustom = Object.keys(custom)
      .filter(customKey => custom[customKey])
      .map(customDate => ({
        endDate: customDate,
        startDate: customDate,
      }));
    return {
      custom: arrayedCustom,
      default: arrayedDefaults,
    };
  };
}

export default formValues<any, any>('custom', 'default')(injectIntl(BlockedDays));
