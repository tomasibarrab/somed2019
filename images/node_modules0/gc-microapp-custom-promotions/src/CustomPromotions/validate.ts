import moment from 'moment';
import { DEFAULT_PRICE_PER_COVER } from './constants';

export const enum ValidationRequirements {
  Required = 'required',
  OneOrMoreDays = 'one_or_more_days',
  EndDateAfterStartDate = 'end_date_after_start_date',
}

const anyTrue = (daysAndTimes: any): boolean => {
  let result = false;
  if (daysAndTimes) {
    Object.keys(daysAndTimes).forEach(day => {
      if (daysAndTimes[day]) {
        Object.keys(daysAndTimes[day]).forEach(time => {
          if (daysAndTimes[day][time]) {
            result = true;
          }
        });
      }
    });
  }
  return result;
};

const validate = (formValues: any): any => {
  const { seatingDates, daysAndTimes, monthlyBudget } = formValues;
  const syncErrors: any = {};
  if (seatingDates.endDate && moment(seatingDates.startDate).isAfter(moment(seatingDates.endDate))) {
    syncErrors.seatingDates = ValidationRequirements.EndDateAfterStartDate;
  }
  if (!anyTrue(daysAndTimes)) {
    syncErrors.daysAndTimes = ValidationRequirements.OneOrMoreDays;
  }
  if (!monthlyBudget.disabled && (!monthlyBudget.cap || parseFloat(monthlyBudget.cap) < DEFAULT_PRICE_PER_COVER)) {
    syncErrors.monthlyBudget = ValidationRequirements.Required;
  }
  return syncErrors;
};

export default validate;
