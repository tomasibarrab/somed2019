import classNames from 'classnames';
import _get from 'lodash.get'
import React, { Component } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { actions } from '../store/customPromotions/customPromotions';
import {
  CreateCustomPromotionPayload,
  CreditsModel,
  CustomPromotionsState,
  EducationPageType,
  SetProgressPercentagePayload,
} from '../store/customPromotions/customPromotions.types';
import { State } from '../store/types';
import { CUSTOM_PROMOTIONS_FORM_NAME } from './constants';
import CreateCustomPromotionForm from './CreateCustomPromotionForm';
import CreateCustomPromotionTermsModal from './CreateCustomPromotionTermsModal';
import EducationPage from './EducationPages/EducationPage';
import FinishedPage from './FinishedPage/FinishedPage';
import initialValues from './initialValues';
import Panel from './Panel/Panel';

interface SP {
  create: CustomPromotionsState['create'];
  credits: CreditsModel;
  educationPage: CustomPromotionsState['educationPage'];
  progressPercentage: number;
}

interface DP {
  clickOrInteract: typeof actions.clickOrInteract;
  createCustomPromotionStart: (payload: CreateCustomPromotionPayload) => void;
  closeModal: () => void;
  setEducationPage: (page: number) => void;
  setProgressPercentage: (payload: SetProgressPercentagePayload) => void;
}

type Props = SP & DP & InjectedIntlProps;

const globalHistoryBack = () => {
  const windowHistory = _get(window, ['history']); // accessing window.history is broken for some reason...
  if (windowHistory && typeof windowHistory.back === 'function') {
    windowHistory.back();
  }
};

class CreateCustomPromotion extends Component<Props, { showEducationPage: boolean }> {
  public state = { showEducationPage: false };

  public render() {
    const {
      closeModal,
      clickOrInteract,
      create,
      createCustomPromotionStart,
      credits,
      educationPage,
      setEducationPage,
      setProgressPercentage,
      progressPercentage,
    } = this.props;
    const { showEducationPage } = this.state;

    const closeLearnMoreModal = () => {
      clickOrInteract({
        action: 'Click',
        props: {
          name: 'Close',
          page: 'Learn More modal',
        },
      });
      this.setState({ showEducationPage: false });
    };

    switch (educationPage) {
      case 1:
        return (
          <EducationPage
            className={classNames('education-page', 'is-active')}
            pageNum={educationPage}
            onClickNext={() => {
              clickOrInteract({
                action: 'Click',
                props: {
                  name: 'Next',
                  page: 'FRE Step 1',
                },
              });
              setEducationPage(2);
            }}
            onClickBack={() => {
              clickOrInteract({
                action: 'Click',
                props: {
                  name: 'Back',
                  page: 'FRE Step 1',
                },
              });
              globalHistoryBack();
            }}
            credits={credits}
            type={EducationPageType.Wizard}
          />
        );
      case 2:
        return (
          <EducationPage
            className={classNames('education-page', 'is-active')}
            pageNum={educationPage}
            onClickNext={() => {
              clickOrInteract({
                action: 'Click',
                props: {
                  name: 'Next',
                  page: 'FRE Step 2',
                },
              });
              setEducationPage(0);
            }}
            onClickBack={() => {
              clickOrInteract({
                action: 'Click',
                props: {
                  name: 'Back',
                  page: 'FRE Step 2',
                },
              });
              setEducationPage(1);
            }}
            credits={credits}
            type={EducationPageType.Wizard}
          />
        );
      default:
        return (
          <>
            <Panel
              className={classNames('pi-panel-container', { 'is-active': !showEducationPage })}
              showHeader={!create.success}
              onClickBack={() => {
                setEducationPage(2);
              }}
            >
              {!create.success ? (
                <>
                  <CreateCustomPromotionForm
                    {...{
                      initialValues: Object.assign({}, initialValues, {
                        monthlyBudget: {
                          cap: credits.defaultBudget,
                          disabled: false,
                        },
                      }),
                    }}
                    form={CUSTOM_PROMOTIONS_FORM_NAME}
                    onClickNeedMoreInfo={() => {
                      clickOrInteract({
                        action: 'Click',
                        props: {
                          name: 'Learn More modal',
                          page: 'Form overview',
                        },
                      });
                      this.setState({ showEducationPage: true });
                    }}
                  />
                  {create.modal && (
                    <CreateCustomPromotionTermsModal
                      formValuesSnapshot={create.formValuesSnapshot}
                      close={() => {
                        clickOrInteract({
                          action: 'Click',
                          props: {
                            name: 'Close',
                            page: 'Terms & Conditions',
                          },
                        });
                        setProgressPercentage({ percentage: progressPercentage - 25 });
                        closeModal();
                      }}
                      confirm={
                        (payload: CreateCustomPromotionPayload) => {
                          clickOrInteract({
                            action: 'Click',
                            props: {
                              name: 'Publish',
                              page: 'Terms & Conditions',
                            },
                          });
                          createCustomPromotionStart(payload);
                        }}
                      credits={credits}
                    />
                  )}
                </>
              ) : (
                <FinishedPage />
              )}
            </Panel>
            <EducationPage
              className={classNames('education-page ', {
                'is-active': showEducationPage,
              })}
              credits={{} as any}
              onClickBack={closeLearnMoreModal}
              onClickNext={closeLearnMoreModal}
              pageNum={1}
              type={EducationPageType.Single}
            />
          </>
        );
    }
  }
}

const mapState = (state: State): SP => ({
  create: state.customPromotions.create,
  credits: state.customPromotions.credits.model!,
  educationPage: state.customPromotions.educationPage,
  progressPercentage: state.customPromotions.progressPercentage,
});

const mapDispatch = {
  clickOrInteract: actions.clickOrInteract,
  closeModal: actions.closeCustomPromotionsCreationTermsModal,
  createCustomPromotionStart: actions.createCustomPromotion.started,
  setEducationPage: actions.setEducationPage,
  setProgressPercentage: actions.setProgressPercentage,
};

const IntlCustomPromotions = injectIntl(CreateCustomPromotion);
const ConnectedCustomPromotions = connect<SP, DP, {}>(mapState, mapDispatch)(IntlCustomPromotions);

export default ConnectedCustomPromotions;
