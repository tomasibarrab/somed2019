import React, { ChangeEvent, Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import Toggle from 'react-toggle';
import { ChildComponentProps } from '../commonTypes';
import DatePickerField from '../Fields/DatePickerField';
import makeDisabledBeforeDatePickerField from '../Fields/makeDisabledBeforeDatePickerField';
import Fieldset from '../Fieldset/Fieldset';
import SeatingDatesSummary from './SeatingDatesSummary';

import 'react-toggle/style.css';
import './SeatingDates.scss';
interface State {
  showEndDate: boolean;
}

type OP = ChildComponentProps;

type Props = OP & InjectedIntlProps;

const DisabledBeforeDatePickerField = makeDisabledBeforeDatePickerField('startDate');

class SeatingDates extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      showEndDate: false,
    };
  }

  public render() {
    const { intl: { formatMessage }, isOpen } = this.props;
    const { showEndDate } = this.state;
    return (
      <Fieldset
        className="seating-dates"
        legend={formatMessage({ id: 'guestcampaigns.custom_promotions.form.start_and_end_date' })}
      >
        {isOpen ? (
          <div className="fields">
            {/* TODO: Fix highlight color, alignment, appearance on Desktop */}
            <div className="date-picker-label">
              <FormattedMessage id="guestcampaigns.custom_promotions.form.start_date" />
            </div>
            <DatePickerField name="startDate" isInline={true} />
            <label className="date-picker-label">
              <Toggle onChange={this.onEndDateChange} checked={this.state.showEndDate} icons={false} />
              <FormattedMessage id="guestcampaigns.custom_promotions.form.end_date" />
            </label>
            {showEndDate && <DisabledBeforeDatePickerField name="endDate" isInline={true} />}
          </div>
        ) : (
          <div className="summary">
            <SeatingDatesSummary />
          </div>
        )}
      </Fieldset>
    );
  }

  /* Must be an arrow function to get `this` bound lexically */
  private onEndDateChange = ({ target: { checked } }: ChangeEvent<HTMLInputElement>) => {
    if (!checked) {
      this.props.change('endDate', null);
    }
    this.setState({ showEndDate: checked });
  };
}

export default injectIntl(SeatingDates);
