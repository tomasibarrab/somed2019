import {
  act,
  cleanup,
  fireEvent,
  render,
} from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { MemoryRouter } from 'react-router';
import SendEmail from './SendEmail';

jest.mock('../common/api');

import * as messages from '../translations/json/en-us.json';

export default function getIntl() {
  // Create the IntlProvider to retrieve context for wrapping around.
  const intlProvider = new IntlProvider({ locale: 'en-us', messages }, {});
  return intlProvider.getChildContext().intl;
}

afterEach(cleanup)

describe('SendEmail component', () => {
  const onSubmit = jest.fn();
  const handleSubmit = jest.fn();

  const props = {
    handleSubmit,
    intl: getIntl(),
    isSubmitting: false,
    messages,
    onSubmit,
  };

  const renderTree = (node) => {
    return <IntlProvider locale="en" messages={messages}>
      <MemoryRouter initialEntries={['/login/reset-password']} >
        {node}
      </MemoryRouter>
    </IntlProvider>
  };

  const rendererWithIntl = node => render(renderTree(node));

  it('email input field with the submit button are displayed when the page is loaded', () => {
    const { getByTestId } = rendererWithIntl(<SendEmail />);

    expect(getByTestId('email-text-input')).toBeDefined();
    expect(getByTestId('submit-button')).toBeDefined();
  });

  it('The email field is fullfiled with an initial value if email is passed during the routing', () => {
    const initEmail = 'user@opentable.com';
    const { getByTestId } = rendererWithIntl(<SendEmail email={initEmail} />);

    expect(getByTestId('email-text-input')).toBeDefined();
    expect(getByTestId('email-text-input').nodeValue === initEmail);
  });

  it('Validation error appears if form is submitted with invalid email', async () => {
    const initEmail = 'user@opentable.com';
    const { getByTestId } = rendererWithIntl(<SendEmail email={initEmail} />);

    const emailElm = getByTestId('email-text-input');
    fireEvent.change(emailElm, { target: { value: 'invalidemail@' } });
    act(() => { fireEvent.click(getByTestId('submit-button')) });
    expect(emailElm.nextElementSibling.textContent).toContain('Please enter a valid email address');
  });

  it('Validation error appears if the email field is empty', () => {
    const { getByTestId } = rendererWithIntl(<SendEmail />);

    const emailElm = getByTestId('email-text-input');
    act(() => { fireEvent.click(getByTestId('submit-button')) });
    expect(emailElm.nextElementSibling.textContent).toContain('Please enter a valid email address');
  });
});
