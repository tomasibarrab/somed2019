import {
    act,
    cleanup,
    fireEvent,
    render,
} from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { MemoryRouter } from 'react-router';
import ChangePassword from './ChangePassword';

import * as messages from '../translations/json/en-us.json';

export default function getIntl() {
    // Create the IntlProvider to retrieve context for wrapping around.
    const intlProvider = new IntlProvider({ locale: 'en-us', messages }, {});
    return intlProvider.getChildContext().intl;
}

afterEach(cleanup)

describe('SendEmail component', () => {
    const onSubmit = jest.fn();
    const handleSubmit = jest.fn();

    const props = {
        handleSubmit,
        intl: getIntl(),
        isSubmitting: false,
        messages,
        onSubmit,
    };

    const renderTree = (node) => {
        return <IntlProvider locale="en" messages={messages}>
            <MemoryRouter initialEntries={['/login/reset-password']} >
                {node}
            </MemoryRouter>
        </IntlProvider>
    };

    const rendererWithIntl = node => render(renderTree(node));

    const historyMock: any = jest.fn();
    historyMock.location = jest.fn();
    const matchMock: any = jest.fn();
    matchMock.params = jest.fn();


    it('password, passwordConfirm fields with the submit button are displayed when the page is loaded', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock} />);

        expect(getByTestId('password-text-input')).toBeDefined();
        expect(getByTestId('confirm-password-text-input')).toBeDefined();
        expect(getByTestId('submit-button')).toBeDefined();
    });

    it('Error messages appears when user clicks the submit button while password is empty', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock}/>);

        act(() => { fireEvent.click(getByTestId('submit-button')) });
        const password = getByTestId('password-text-input');
        expect(password.nextElementSibling.textContent)
            .toContain('Password must be a combination of at least six numbers and letters.');
    });

    it('Error messages appears when user enter an invalid password (only digits)', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock}/>);
        const password = getByTestId('password-text-input');
        fireEvent.change(password, { target: { value: '123456' } });

        act(() => { fireEvent.click(getByTestId('submit-button')) });

        expect(password.nextElementSibling.textContent)
            .toContain('Password must be a combination of at least six numbers and letters.');
    });

    it('Error messages appears when user enter an invalid password (only letters)', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock}/>);
        const password = getByTestId('password-text-input');
        fireEvent.change(password, { target: { value: 'abcdef' } });

        act(() => { fireEvent.click(getByTestId('submit-button')) });

        expect(password.nextElementSibling.textContent)
            .toContain('Password must be a combination of at least six numbers and letters.');
    });

    it('Error messages appears when user enter an invalid password (too short)', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock}/>);
        const password = getByTestId('password-text-input');
        fireEvent.change(password, { target: { value: 'abc12' } });

        act(() => { fireEvent.click(getByTestId('submit-button')) });

        expect(password.nextElementSibling.textContent)
            .toContain('Password must be a combination of at least six numbers and letters.');
    });

    it('Error messages appears when user clicks apply when passwordConfirm does not match password', () => {
        const { getByTestId } = rendererWithIntl(<ChangePassword {...props} history={historyMock} match={matchMock}/>);
        const password = getByTestId('password-text-input');
        fireEvent.change(password, { target: { value: '123qwe' } });

        const passwordConfirm = getByTestId('confirm-password-text-input');
        fireEvent.change(passwordConfirm, { target: { value: '123qwe890' } });

        act(() => { fireEvent.click(getByTestId('submit-button')) });

        expect(passwordConfirm.nextElementSibling.textContent)
            .toContain('Passwords do not match. Please try again.');
    });
});
