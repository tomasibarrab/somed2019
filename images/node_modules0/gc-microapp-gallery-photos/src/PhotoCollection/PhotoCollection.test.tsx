import { cleanup, fireEvent, render, wait } from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import gallery from '../../fixtures/gallery.json';
import photoAdmin from '../../fixtures/photoAdmin.json';
import photoMetadata from '../../fixtures/photoMetadata.json';
import photoUpload from '../../fixtures/photoUpload.json';
import { mockImageFile, PAS_ERROR, ridWithoutPhotos, ridWithPhotos, USE_EFFECT_ERROR } from '../common/testHelpers';
import { keys } from '../translations/bundles/gallery-photos.json';
import PhotoCollection from './PhotoCollection';

afterEach(cleanup);

describe('PhotoCollection', () => {
  beforeEach(() => {
    (fetch as any).resetMocks();
  });
  afterEach(cleanup);

  const handleError = jest.fn();

  it('after useEffect', async () => {
    (fetch as any).mockResponseOnce(JSON.stringify({ photos: [] }));

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithoutPhotos} handleError={handleError} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));
    expect(tree.container).toMatchSnapshot();
  });

  it('useEffect throws', async () => {
    (fetch as any).mockRejectOnce(USE_EFFECT_ERROR);

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithoutPhotos} handleError={handleError} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));

    expect(() => {
      throw USE_EFFECT_ERROR;
    }).toThrow();
  });

  it('first displays the empty initial state before uploading and the photo grid after uploading', async () => {
    (fetch as any).mockResponses(
      [JSON.stringify({ photos: [] })],
      [JSON.stringify(photoUpload)],
      [JSON.stringify(photoMetadata)],
    );

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithoutPhotos} handleError={handleError} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));

    // Snapshot before upload
    expect(tree.container).toMatchSnapshot();

    // Invoke 'onChange' for the input element
    fireEvent.change(tree.getByTestId('select-image-file'), mockImageFile);
    await wait(() => tree.rerender(component));

    // Snapshot after upload
    expect(tree.container).toMatchSnapshot();
  });

  it('renders the photo grid', async () => {
    (fetch as any).mockResponseOnce(JSON.stringify(gallery));

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithPhotos} handleError={handleError} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));
    expect(tree.container).toMatchSnapshot();
  });

  // tslint:disable-next-line:max-line-length
  it('user clicks delete icon for 1st photo; the modal to delete photo appears; user clicks on confirm Delete button will delete photo', async () => {
    (fetch as any).mockResponses([JSON.stringify(gallery)], [JSON.stringify(photoAdmin)]);
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithPhotos} handleError={handleError} />
      </IntlProvider>
    );
    const tree = render(component);
    const { baseElement, getAllByTestId } = tree;
    await wait(() => tree.rerender(component));

    const deleteButtonNode = tree.getAllByTestId('delete-button')[0];
    // before click on delete button
    expect(baseElement).toMatchSnapshot();
    // Invoke 'click' for the delete-button
    fireEvent.click(deleteButtonNode);
    // assert after delete button clicked
    expect(baseElement).toMatchSnapshot();
    // Invoke click on confirmation of 'delete' for the delete-button
    const confirmDeleteButton = getAllByTestId('buttonContent')[1].parentElement;
    fireEvent.click(confirmDeleteButton);
    // assert after photo is deleted
    await wait(() => tree.rerender(component));
    expect(baseElement).toMatchSnapshot();
  });
  // tslint:disable-next-line:max-line-length
  it('user clicks delete icon for 1st photo; the modal to delete photo appears; user clicks on Cancel button will close modal', async () => {
    (fetch as any).mockResponses([JSON.stringify(gallery)], [JSON.stringify(photoAdmin)]);
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithPhotos} handleError={handleError} />
      </IntlProvider>
    );
    const { baseElement, getAllByTestId, rerender } = render(component);
    await wait(() => rerender(component));

    const deleteButtonNode = getAllByTestId('delete-button')[0];
    // before click on delete button
    expect(baseElement).toMatchSnapshot();
    // Invoke 'click' for the delete-button
    fireEvent.click(deleteButtonNode);
    // assert after delete button clicked
    expect(baseElement).toMatchSnapshot();
    // Invoke click on 'Cancel' in modal
    const cancelButton = getAllByTestId('buttonContent')[0].parentElement;
    fireEvent.click(cancelButton);
    // assert after cancellation of delete process
    await wait(() => rerender(component));
    expect(baseElement).toMatchSnapshot();
  });
  // tslint:disable-next-line:max-line-length
  it('user clicks delete icon for 1st photo; the modal to delete photo appears; user clicks on Delete button; PAS throws an error', async () => {
    (fetch as any).mockResponseOnce(JSON.stringify(gallery));
    (fetch as any).mockRejectOnce(PAS_ERROR);
    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoCollection rid={ridWithPhotos} handleError={handleError} />
      </IntlProvider>
    );
    const { baseElement, debug, getAllByTestId, getByTestId, rerender } = render(component);
    await wait(() => rerender(component));
    const deleteButtonNode = getAllByTestId('delete-button')[0];
    // before click on delete button
    expect(baseElement).toMatchSnapshot();
    // Invoke 'click' for the delete-button
    fireEvent.click(deleteButtonNode);
    // assert after delete button clicked
    expect(baseElement).toMatchSnapshot();
    // // Invoke click on confirmation of 'delete' for the delete-button
    const confirmDeleteButton = getAllByTestId('buttonContent')[1].parentElement;

    await wait(() => fireEvent.click(confirmDeleteButton));
    // expect error thrown by PAS and correct error message
    expect(() => {
      throw PAS_ERROR;
    }).toThrow();

    await wait(() => rerender(component));
  });

  // TODO
  // Uploading does not give back a pid
  // Uploading throws an error
});
