import { cleanup, fireEvent, render, wait } from '@testing-library/react';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { PMS_ERROR, ridWithoutPhotos, ridWithPhotos } from '../common/testHelpers';
import { keys } from '../translations/bundles/gallery-photos.json';
import PhotoGallery from './PhotoGallery';

describe('PhotoGallery', () => {
  beforeEach(() => {
    (fetch as any).resetMocks();
  });
  afterEach(cleanup);

  it('renders the upload interface for restaurants that do not have photos', async () => {
    (fetch as any).mockResponseOnce(JSON.stringify({ photos: [] }));

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoGallery rid={ridWithPhotos} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));

    expect(tree.container).toMatchSnapshot();
  });

  it('displays error message and closes the message', async () => {
    (fetch as any).mockRejectOnce(PMS_ERROR);

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoGallery rid={ridWithoutPhotos} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));

    expect(() => {
      throw PMS_ERROR;
    }).toThrow();
    await wait(() => tree.rerender(component));

    // Snapshot of error message upon throwing an error
    expect(tree.getByTestId('error')).toMatchSnapshot();

    // Close the alert message
    const BUFFET_ALERT_CLOSE_BUTTON_ID = 'error-close-bt';
    fireEvent.click(tree.getByTestId(BUFFET_ALERT_CLOSE_BUTTON_ID));

    // Snapshot after alert message is closed
    expect(tree.getByTestId('error')).toMatchSnapshot();
  });

  it('simulates a click on photo tips', async () => {
    (fetch as any).mockResponseOnce(JSON.stringify({ photos: [] }));

    const component = (
      <IntlProvider locale="en-US" messages={keys}>
        <PhotoGallery rid={ridWithoutPhotos} />
      </IntlProvider>
    );

    const tree = render(component);
    await wait(() => tree.rerender(component));

    fireEvent.click(tree.getByText('Photo tips').parentElement.parentElement);

    // Nothing should change upon clicking (for now)
    expect(tree.container).toMatchSnapshot();
  });
});
