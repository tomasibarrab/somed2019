module.exports = (Processor, SmartlingClient, TranslationPaths, Promise, fs, path, mkdirp, _, Logger) ->

  class HarnessSmartlingClientDependenciesProcessor extends Processor

    run: ->
      if @shouldRun(@context, @config)
        @downloadBundles()
      else
        Promise.reject(new Error("HarnessSmartlingClientDependenciesProcessor called with invalid context or config."))

    downloadBundles: ->
      @downloadManifestLocales @getBundleParams(@context.bundle)

    shouldRun: (context, config) ->
      context?.bundle and context?.localeIds and config?.forEach is "dependency"

    getBundleParams: (bundle) ->
      bundleParams = _.extend {}, bundle
      bundleParams.localeIds ?= @context.localeIds
      bundleParams.saveTo ?= path.join(TranslationPaths.root, bundle?.projectId, bundle?.fileUri)
      bundleParams

    downloadManifestLocales: (bundleParams) ->
      unless @isAlreadyDownloaded(bundleParams)
        mkdirp.sync bundleParams?.saveTo
        return @getClientInstance(bundleParams)
          .download(bundleParams)
          .catch(@handleError)
      return Promise.resolve(bundleParams)

    isAlreadyDownloaded: (bundleParams) ->
      isAlreadyDownloaded = false
      try
        isAlreadyDownloaded = fs.statSync(bundleParams.saveTo)?.isDirectory() and fs.readdirSync(bundleParams.saveTo).length is bundleParams.localeIds.length
      catch error
      return isAlreadyDownloaded

    getClientInstance: (bundleParams) ->
      return new SmartlingClient(bundleParams?.userIdentifier, bundleParams?.userSecret, bundleParams?.projectId)

    handleError: (error) =>
      Logger.error "Harness Smartling Client Dependencies Processor - download dependencies error"
      Promise.reject(error)
