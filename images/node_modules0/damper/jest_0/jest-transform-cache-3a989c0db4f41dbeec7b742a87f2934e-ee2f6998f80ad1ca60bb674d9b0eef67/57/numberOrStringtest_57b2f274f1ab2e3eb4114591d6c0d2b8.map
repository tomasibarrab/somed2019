{"version":3,"sources":["numberOrString.test.js"],"names":["checkProps","p","propTypes","numberOrString","props","createCheckPropErrorCalled","stub","expectCalled","expect","calledOnce","toBe","describe","checkPropErrorCalled","beforeEach","sinon","console","afterEach","error","restore","it","undefined"],"mappings":";;AACA;;AACA;;AACA;;;;AAHA;AAKA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAuC;AAAA,MAAnCC,SAAmC,uEAAvB;AAAEC,IAAAA,cAAc,EAAdA;AAAF,GAAuB;AACxD,MAAMC,KAAK,GAAG;AAAED,IAAAA,cAAc,EAAEF;AAAlB,GAAd;AACA,iCAAeC,SAAf,EAA0BE,KAA1B,EAAiC,MAAjC,EAAyC,eAAzC;AACD,CAHD;;AAKA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,IAAD;AAAA,SAAU,UAACF,KAAD,EAAgC;AAAA,QAAxBG,YAAwB,uEAAT,IAAS;AAC3EP,IAAAA,UAAU,CAACI,KAAD,CAAV;AACAI,IAAAA,MAAM,CAACF,IAAI,CAACG,UAAN,CAAN,CAAwBC,IAAxB,CAA6BH,YAA7B;AACD,GAHkC;AAAA,CAAnC;;AAKAI,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,MAAIC,oBAAJ;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACf,QAAMP,IAAI,GAAGQ,eAAMR,IAAN,CAAWS,OAAX,EAAoB,OAApB,CAAb;;AACAH,IAAAA,oBAAoB,GAAGP,0BAA0B,CAACC,IAAD,CAAjD;AACD,GAHS,CAAV;AAKAU,EAAAA,SAAS,CAAC,YAAM;AACdD,IAAAA,OAAO,CAACE,KAAR,CAAcC,OAAd;AACD,GAFQ,CAAT,CAR+B,CAY/B;;AACAP,EAAAA,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BQ,IAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvDP,MAAAA,oBAAoB,CAACQ,SAAD,CAApB;AACD,KAFC,CAAF;AAIAD,IAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrEP,MAAAA,oBAAoB,CAAC,EAAD,CAApB;AACD,KAFC,CAAF;AAGD,GARO,CAAR;AAUAD,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BQ,IAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACzEP,MAAAA,oBAAoB,CAAC,QAAD,EAAW,KAAX,CAApB;AACD,KAFC,CAAF;AAIAO,IAAAA,EAAE,CAAC,gEAAD,EAAmE,YAAM;AACzEP,MAAAA,oBAAoB,CAAC,GAAD,EAAM,KAAN,CAApB;AACD,KAFC,CAAF;AAIAO,IAAAA,EAAE,CAAC,iEAAD,EAAoE,YAAM;AAC1EP,MAAAA,oBAAoB,CAAC,MAAD,EAAS,KAAT,CAApB;AACD,KAFC,CAAF;AAGD,GAZO,CAAR;AAaD,CApCO,CAAR","sourcesContent":["/* eslint-disable no-console */\nimport sinon from 'sinon';\nimport { checkPropTypes } from 'prop-types';\nimport { numberOrString } from '../numberOrString';\n\nconst checkProps = (p, propTypes = { numberOrString }) => {\n  const props = { numberOrString: p };\n  checkPropTypes(propTypes, props, 'prop', 'TestComponent');\n};\n\nconst createCheckPropErrorCalled = (stub) => (props, expectCalled = true) => {\n  checkProps(props);\n  expect(stub.calledOnce).toBe(expectCalled);\n};\n\ndescribe('numberOrString', () => {\n  let checkPropErrorCalled;\n\n  beforeEach(() => {\n    const stub = sinon.stub(console, 'error');\n    checkPropErrorCalled = createCheckPropErrorCalled(stub);\n  });\n\n  afterEach(() => {\n    console.error.restore();\n  });\n\n  //\n  describe('Wrong values', () => {\n    it('Should throw an error when no prop is passed', () => {\n      checkPropErrorCalled(undefined);\n    });\n\n    it('Should throw an error when a prop of type Object is passed', () => {\n      checkPropErrorCalled({});\n    });\n  });\n\n  describe('Correct values', () => {\n    it('Should do nothing when correct prop of type String is provided', () => {\n      checkPropErrorCalled('String', false);\n    });\n\n    it('Should do nothing when correct prop of type number is provided', () => {\n      checkPropErrorCalled(122, false);\n    });\n\n    it('Should do nothing when correct prop of type decimal is provided', () => {\n      checkPropErrorCalled(18.214, false);\n    });\n  });\n});\n"]}