import { scaleLinear, scalePoint } from 'd3-scale';
import {
  customPropTypes,
  SCALE,
} from '../index';

/**
 * getOuterAreaBounds parameter interface
 */
interface IGetOuterAreaBoundsParams {
  bounds: IOuterAreaBounds;
  padding: {
    bottom: number;
    left: number;
    right: number;
    top: number;
  };
  responsive: any;
  width: number;
  height: number;
}

/**
 * getOuterAreaBounds return interface
 */
export interface IOuterAreaBounds {
  bottom: number;
  height: number;
  left: number;
  right: number,
  top: number;
  width: number;
}

/**
 * getOuterAreaScales parameter interface
 */
interface IGetOuterAreaScalesParams {
  bounds: IOuterAreaBounds;
  columns: any[];
  maxY: number;
}

/**
 * getOuterAreaScales return interface
 */
interface IOuterAreaScales {
  x: any;
  x2: any,
  y: any;
  yInverted: any;
}

/**
 * getOuterArea parameter interface
 */
interface IGetOuterAreaParams extends IGetOuterAreaBoundsParams, IGetOuterAreaScalesParams  {}

/**
 * Gets the area bounds of the outside of the visualisation
 */
const getOuterAreaBounds = ({ bounds, height, padding, responsive, width }: IGetOuterAreaBoundsParams): IOuterAreaBounds => {
  const paddingProps = {
    ...customPropTypes.defaultPadding,
    ...padding,
  };

  const getWidth = () => {
    const paddingX = paddingProps.left + paddingProps.right;
    const nonScaledWidth = bounds.width - paddingX;
    let activeWidth = 0;

    if (responsive === SCALE) {
      const scaledWidth = width - paddingX;
      activeWidth = scaledWidth;
    }

    if (responsive !== SCALE && nonScaledWidth > 0) {
      activeWidth = nonScaledWidth;
    }

    return activeWidth;
  };

  return {
    bottom: paddingProps.bottom,
    height: height - (paddingProps.top + paddingProps.bottom),
    left: paddingProps.left,
    right: paddingProps.right,
    top: paddingProps.top,
    width: getWidth(),
  };
}

/**
 * Gets the d3 scales relating to the outside of the visualisation
 */
const getOuterAreaScales = ({ bounds, columns, maxY }: IGetOuterAreaScalesParams): IOuterAreaScales => {
  const { width, height, top, left } = bounds;

  const scales = {
    x: scaleLinear(),
    x2: scalePoint(),
    y: scaleLinear(),
    yInverted: scaleLinear(),
  };

  scales.x
    .domain([0, columns.length - 1])
    .range([left, (width + left)]);

  scales.x2
    .domain(columns.map((v) => v.id))
    .range([left, (width + left)]);

  scales.y
    .domain([0, maxY])
    .range([top, (height + top)]);

  scales.yInverted
    .domain([0, maxY])
    .range([(height + top), 0]);

  return scales;
}

/**
 * Returns both the outer bounds and scales
 */
const getOuterArea = (params: IGetOuterAreaParams) => {
  const {
    bounds,
    height,
    padding,
    responsive,
    width,
    columns,
    maxY,
  } = params;

  const outerAreaBounds = getOuterAreaBounds({
    bounds,
    height,
    padding,
    responsive,
    width,
  });

  return {
    bounds: outerAreaBounds,
    scales: getOuterAreaScales({
      bounds: outerAreaBounds,
      columns,
      maxY,
    }),
  }
};

export { getOuterArea };
