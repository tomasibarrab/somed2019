import {
  area,
  curveBasis,
  curveCardinal,
  curveCatmullRom,
  curveLinear,
  curveMonotoneX,
  curveStep,
  curveStepAfter,
  curveStepBefore,
  line,
} from 'd3-shape';

interface IData {
  style: {
    x: number;
    y0: number;
    y1: number;
  }
}

const getCurve = (curve:string | undefined) => {
  switch (curve) {
    case 'curveBasis': return curveBasis;
    case 'curveCardinal': return curveCardinal;
    case 'curveCatmullRom': return curveCatmullRom;
    case 'curveLinear': return curveLinear;
    case 'curveMonotoneX': return curveMonotoneX;
    case 'curveStep': return curveStep;
    case 'curveStepAfter': return curveStepAfter;
    case 'curveStepBefore': return curveStepBefore;
    default: return curveMonotoneX;
  }
}

export const generatePathData = (data: IData[], theme: any) => {
  const getLinePathData = line<IData>()
    .x((d) => d.style.x)
    .y((d) => d.style.y0)
    .curve(getCurve(theme.area.curve));

  const getAreasPathData = area<IData>()
    .x((d) => d.style.x)
    .y0((d) => d.style.y0)
    .y1((d) => d.style.y1)
    .curve(getCurve(theme.area.curve));

  const isGraphFilled = (typeof theme.common.fill !== 'undefined' && theme.common.fill !== 'transparent');

  return (isGraphFilled) ? getAreasPathData(data) : getLinePathData(data);
};
