import React from 'react';
import PropTypes from 'prop-types';
import posed, { PoseGroup } from 'react-pose';
import { Bar } from '../Bar';
import { HighlightBarHelper } from '../Helpers';
import { AnimateSlideOffset, ISlideProps } from '../SlideController';

const emptyGroup = {
  group: [
    {
      values: [
        {
          value: 0,
        },
        {
          value: 0,
        },
        {
          value: 0,
        },
        {
          value: 0,
        },
      ],
    },
    {
      values: [
        {
          value: 0,
        },
        {
          value: 0,
        },
        {
          value: 0,
        },
        {
          value: 0,
        },
      ],
    },
  ],
};

const emptyValues = {
  values: [
    {
      value: 0,
    },
    {
      value: 0,
    },
    {
      value: 0,
    },
    {
      value: 0,
    },
    {
      value: 0,
    },
  ],
};

const AnimateXYBarGroup = posed.g({
  pose: {
    opacity: 1,
    x: ({ barGroupPoseVals }) => barGroupPoseVals.x,
    y: ({ barGroupPoseVals }) => barGroupPoseVals.y,
    transition: {
      x: {
        type: 'spring',
        stiffness: 210,
        damping: 20,
      },
      y: {
        easing: 'linear',
        duration: 200,
      },
      opacity: {
        duration: 200,
        ease: 'easeIn',
      },
    },
  },
  exit: {
    x: ({ barGroupPoseVals }) => {
      const offsetDistance = 200;
      const { index, dataLength } = barGroupPoseVals;

      if (index > (dataLength / 2)) {
        return barGroupPoseVals.maxX + offsetDistance;
      }

      return barGroupPoseVals.minX - offsetDistance;
    },
    opacity: 0,
    transition: {
      x: {
        type: 'spring',
        stiffness: 210,
        damping: 20,
      },
      opacity: {
        duration: 200,
        ease: 'easeOut',
      },
    },
  },
});

const AnimateYBarGroup = posed.g({
  pose: {
    x: ({ barGroupPoseVals }) => barGroupPoseVals.x,
    y: ({ barGroupPoseVals }) => barGroupPoseVals.y,
    transition: {
      x: {
        duration: 0,
      },
      y: {
        duration: 0,
      },
    },
  },
});

const StaticBarGroup = posed.g({
  static: {
    x: ({ poseVal }) => poseVal.x,
    y: ({ poseVal }) => poseVal.y,
  },
});

class Bars extends React.Component {
  static propTypes = {
    actions: PropTypes.shape({
      onMouseOver: PropTypes.func,
      onMouseOut: PropTypes.func,
      onClick: PropTypes.func,
    }),
    activeInnerArea: PropTypes.shape({
      top: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
      width: PropTypes.number.isRequired,
      scales: PropTypes.shape({
        x: PropTypes.func.isRequired,
        y: PropTypes.func,
      }).isRequired,
    }).isRequired,
    animationOffsetDistance: PropTypes.number,
    columns: PropTypes.array,
    data: PropTypes.array,
    isAnimated: PropTypes.bool,
    isAnimatedX: PropTypes.bool,
    helper: PropTypes.shape({
      highlight: PropTypes.shape({
        show: PropTypes.bool,
        callback: PropTypes.func,
      }),
    }),
    rounded: PropTypes.number,
    theme: PropTypes.object.isRequired, // SHAPE
  }

  static defaultProps = {
    actions: {
      onMouseOver: null,
      onMouseOut: null,
      onClick: null,
    },
    animationOffsetDistance: 2,
    columns: [],
    data: [],
    helper: null,
    isAnimated: true,
    isAnimatedX: false,
    rounded: undefined,
  }

  constructor(props) {
    super(props);

    this.state = {
      hovered: false,
    };

    this.renderBar = this.renderBar.bind(this);
  }

  getBarActions(barData, groupLocation, index) {
    const { id } = barData;
    const { actions } = this.props;

    const barAction = {
      ...actions,
      ...barData.actions,
    };

    const onMouseOver = (data, location) => {
      this.setState((prevState) => ({
        ...prevState,
        hovered: id,
      }));

      barAction.onMouseOver({
        data: {
          ...data,
          id,
          x: index,
        },
        groupLocation,
        location,
        id,
      });
    };

    const onMouseOut = () => {
      this.setState((prevState) => ({
        ...prevState,
        hovered: false,
      }));

      barAction.onMouseOut({
        // location,
        id,
      });
    };

    const onClick = () => {
      barAction.onClick({
        // location,
        id,
      });
    };

    const barActions = {};

    if (barAction.onMouseOver) {
      barActions.onMouseOver = onMouseOver;
    }

    if (barAction.onMouseOut) {
      barActions.onMouseOut = onMouseOut;
    }

    if (barAction.onClick) {
      barActions.onClick = onClick;
    }

    return barActions;
  }

  renderHighlightBar(barData) {
    const { activeInnerArea, helper, theme } = this.props;

    if (helper && helper.highlight) {
      return (
        <HighlightBarHelper
          activeInnerArea={activeInnerArea}
          data={barData}
          theme={theme}
          helper={helper.highlight}
        />
      );
    }

    return null;
  }

  renderBar(barData, index) {
    const {
      activeInnerArea,
      data,
      isAnimated,
      isAnimatedX,
      theme,
    } = this.props;

    const xRange = activeInnerArea.scales.x.range();
    const groupLocation = {
      x: activeInnerArea.scales.x(index),
      y: (activeInnerArea.top + activeInnerArea.height),
    };

    const barGroupProps = {
      key: barData.id,
      pose: 'pose',
      poseKey: ['pose'],
      barGroupPoseVals: {
        minX: xRange[0],
        x: groupLocation.x,
        maxX: xRange[1],
        y: groupLocation.y,
        index,
        dataLength: data.length,
      },
    };

    const barProps = {
      actions: this.getBarActions(barData, groupLocation, index),
      group: barData.group,
      key: barData.id,
      id: barData.id,
      isAnimated,
      isHovered: this.state.hovered === barData.id,
      scale: activeInnerArea.scales.y,
      showBarValue: barData.showBarValue,
      theme,
      value: barData.value,
      values: barData.values,
    };

    if (isAnimated && isAnimatedX) {
      return (
        <AnimateXYBarGroup {...barGroupProps}>
          {this.renderHighlightBar(barData)}
          <PoseGroup animateOnMount key={barData.id}>
            <Bar {...barProps} />
          </PoseGroup>
        </AnimateXYBarGroup>
      );
    }

    if (isAnimated) {
      return (
        <PoseGroup animateOnMount key={barData.id}>
          <AnimateYBarGroup key={barProps.key} {...barGroupProps}>
            {this.renderHighlightBar(barData)}
            <Bar {...barProps} />
          </AnimateYBarGroup>
        </PoseGroup>
      );
    }

    return (
      <StaticBarGroup
        key={barData.id}
        pose="static"
        poseKey={['static']}
        poseVal={barGroupProps.barGroupPoseVals}
      >
        {this.renderHighlightBar(barData)}
        <Bar {...barProps} />
      </StaticBarGroup>
    );
  }

  render() {
    const {
      columns,
      data,
      isAnimated,
      isAnimatedX,
      slideProps,
    } = this.props;

    if (!columns || !data) return null;

    let xOffset = 0;
    let clipPathProps;

    if (slideProps && !slideProps.isDisabled) {
      xOffset = slideProps.offset;
      clipPathProps = {
        clipPath: 'url(#mask)',
      };
    }

    const animateSlideOffsetProps = {
      pose: 'pose',
      poseKey: xOffset,
      xOffset,
    }

    const barData = columns.map((col) => {
      const colData = data && data.find((d) => d.id === col.id);
      let emptyData = 0;

      if (data[0].values) {
        emptyData = emptyValues;
      }

      if (data[0].group) {
        emptyData = emptyGroup;
      }

      const barData = { ...emptyData, ...colData };

      return {
        id: col.id,
        ...barData,
      };
    });

    if (isAnimated && isAnimatedX) {
      return (
        <g {...clipPathProps}>
          <AnimateSlideOffset {...animateSlideOffsetProps}>
            <PoseGroup>
              {barData.map(this.renderBar)}
            </PoseGroup>
          </AnimateSlideOffset>
        </g>
      );
    }

    return (
      <g {...clipPathProps}>
        <AnimateSlideOffset {...animateSlideOffsetProps}>
          {barData.map(this.renderBar)}
        </AnimateSlideOffset>
      </g>
    );
  }
}

export { Bars };
