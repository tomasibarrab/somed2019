import React from 'react';
import PropTypes from 'prop-types';
import posed, { PoseGroup } from 'react-pose';
import { SingleBar } from './SingleBar';
import { BarValueHelper } from '../Helpers/BarValueHelper';

const StackGroup = posed.g({
  pose: {
    y: ({ barYOffset }) => barYOffset,
    transition: {
      easing: 'linear',
      duration: 200,
    },
  },
});

export class StackedBar extends React.Component {
  static propTypes = {
    actions: PropTypes.shape({
      onClick: PropTypes.func,
      onMouseOver: PropTypes.func,
      onMouseOut: PropTypes.func,
    }),
    data: PropTypes.arrayOf(PropTypes.shape({
      theme: PropTypes.shape({
        id: PropTypes.string,
        style: PropTypes.object,
      }),
      value: PropTypes.number.isRequired,
    })),
    id: PropTypes.string.isRequired,
    isAnimated: PropTypes.bool,
    isHovered: PropTypes.bool,
    scale: PropTypes.func,
    showBarValue: PropTypes.bool,
    theme: PropTypes.shape({
      default: PropTypes.shape({
        fill: PropTypes.string,
        width: PropTypes.number,
        cursor: PropTypes.oneOf(['pointer', 'cursor']),
      }),
      easing: PropTypes.shape({
        opacity: PropTypes.string,
        x: PropTypes.string,
      }),
    }).isRequired,
    xOffset: PropTypes.number,
    yOffset: PropTypes.number,
  };

  static defaultProps = {
    actions: null,
    data: null,
    isHovered: false,
    isAnimated: true,
    scale: null,
    showBarValue: false,
    xOffset: 0,
    yOffset: 0,
  }

  /**
   * Gets the bar theme, removing rounding from all but the top bar
   * @param {number} index
   * @param {number} stackLength
   */
  getBarsTheme(index, stackLength) {
    const { theme } = this.props;
    let barTheme = theme;

    if (index !== (stackLength - 1)) {
      barTheme = this.removeRounding(barTheme);
    }

    return barTheme;
  }

  /**
   * Sets rounding on the bar to 0
   * @param {object} theme
   * @returns {object} // returns modified theme
   */
  removeRounding(theme) {
    return {
      ...theme,
      default: {
        ...theme.default,
        rounding: 0,
      },
    };
  }

  /**
   * Calculates the y-offset of a specific bar
   * in the stack
   * @param {object} stack
   * @param {number} currentIndex The index of the bar you'd like to finds y value
   * @returns {number}
   */
  calculateYOffset(stack, currentIndex) {
    const { scale } = this.props;

    return stack.reduce((acc, el, index) => {
      let offset = acc;

      if (index <= currentIndex && stack[index - 1]) {
        const prev = stack[index - 1];

        if (scale) {
          offset += scale(prev.value);
        } else {
          offset += prev.value;
        }
      }

      return offset;
    }, 0);
  }

  renderBarValueHelper() {
    const { data, yOffset, scale, showBarValue } = this.props;

    if (!showBarValue || showBarValue.isVisible === false) {
      return null;
    }

    return (
      <BarValueHelper
        data={data}
        yOffset={yOffset}
        scale={scale}
        labelAttrs={showBarValue.attrs}
        labelStyle={showBarValue.style}
       />
    );
  }

  render() {
    const {
      actions,
      data,
      id,
      isAnimated,
      isHovered,
      scale,
      xOffset,
      yOffset,
    } = this.props;

    const commonStackedBarProps = {
      actions,
      isAnimated,
      isHovered,
      id,
      scale,
      xOffset,
    };

    if (!isAnimated) {
      return (
        <g>
          {this.renderBarValueHelper()}
          {data.map((barVals, index) => {
            const barYOffset = yOffset - this.calculateYOffset(data, index);
            return (
              <SingleBar
                key={`${id}-stack-${index}`}
                {...commonStackedBarProps}
                data={barVals}
                index={index}
                theme={this.getBarsTheme(index, data.length)}
                yOffset={barYOffset}
              />
            );
          })}
        </g>
      );
    }

    return (
      <PoseGroup>
        {data.map((barVals, index) => {
          const barYOffset = yOffset - this.calculateYOffset(data, index);
          const id = barVals && barVals.theme ? barVals.theme.id : id;

          return (
            <StackGroup
              pose="pose"
              poseKey={['pose']}
              barYOffset={barYOffset}
              key={`${id}-stack-${index}`}
            >
              {this.renderBarValueHelper()}
              <SingleBar
                key={`${id}-stack-${index}--child`}
                {...commonStackedBarProps}
                data={barVals}
                index={index}
                theme={this.getBarsTheme(index, data.length)}
              />
            </StackGroup>
          );
        })}
      </PoseGroup>
    );
  }
}
