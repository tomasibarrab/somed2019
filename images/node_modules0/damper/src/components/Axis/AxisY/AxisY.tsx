import { scaleLinear } from 'd3-scale';
import times from 'lodash.times';
import React from 'react';
import { ISlideProps } from '../../SlideController';

interface IAxisYProps {
  AxisYLabel?: React.ComponentType;
  activeOuterArea: {
    bottom: number;
    height: number;
    left: number;
    right: number;
    scales: {
      x: any;
      x2: any;
      y: any;
      yInverted: any;
    };
    top: number;
    width: number;
  };
  count: number;
  helper: {
    commaLargeValues: boolean;
    commaLargeValuesUtil: any;
    hideZero: boolean;
    normalizeValues: boolean;
  };
  highestValue: number;
  overrideCount: boolean;
  slideProps?: ISlideProps;
  theme: any;
}

class AxisY extends React.Component<IAxisYProps> {
  static defaultProps = {
    AxisYLabel: undefined,
    count: 0,
    helper: {
      commaLargeValues: false,
      commaLargeValuesUtil: (d: React.ReactNode) => d,
      hideZero: false,
    },
    highestValue: 0,
    overrideCount: false,
  }

  constructor(props: IAxisYProps) {
    super(props);

    this.getTickArray = this.getTickArray.bind(this);
    this.renderTick = this.renderTick.bind(this);
    this.formatTickVal = this.formatTickVal.bind(this);
  }

  getAxisCount(): number {
    const { highestValue } = this.props;
    const count = 5;

    if (this.props.overrideCount) {
      return this.props.count;
    }

    if (highestValue >= count) {
      return count;
    }

    return highestValue + 1;
  }

  getLabelScale(): any {
    const { highestValue } = this.props;
    const count = this.getAxisCount();
    return scaleLinear().domain([1, count]).range([0, highestValue]);
  }

  getRectProps(): any {
    const { top, left, height } = this.props.activeOuterArea;
    const { fill, width } = this.props.theme.axis.y.stroke;

    return {
      fill,
      height,
      width,
      x: left,
      y: top,
    };
  }

  getTickArray(): any {
    const { activeOuterArea, theme, helper } = this.props;
    const count = this.getAxisCount();
    const labelScale = this.getLabelScale();
    const scale = activeOuterArea.scales.y.domain([count, 1]);
    let { hideZero } = helper;

    // If there are no Y-values default to having 5 ticks without
    // any labels
    if (count === 1) {
      return times(5, (index) => {
        const i = index + 1;

        return {
          barLength: '100%',
          i,
          isVisible: true,
          key: `tick-${index}`,
          styles: theme.axis.y,
          val: '',
          xPosition: activeOuterArea.left,
          yPosition: activeOuterArea.scales.y.domain([5, 1])(i),
        };
      });
    }

    return times(count, (index) => {
      const i = index + 1;

      // If hidezero is added to the helper hide the label from
      // the bottom tick only
      if (hideZero && i !== 1) {
        hideZero = false;
      }

      return {
        barLength: '100%',
        i,
        isVisible: !hideZero,
        key: `tick-${index}`,
        styles: theme.axis.y,
        val: hideZero ? '' : labelScale(i),
        xPosition: activeOuterArea.left,
        yPosition: scale(i),
      };
    });
  }

  formatTickVal(val: number): any {
    const {
      commaLargeValues,
      commaLargeValuesUtil,
    } = this.props.helper;

    let tickVal = Math.round(val);

    if (commaLargeValues && typeof commaLargeValuesUtil === 'function') {
      tickVal = commaLargeValuesUtil(tickVal);
    }

    return tickVal;
  }

  renderTick({
    barLength,
    i,
    xPosition,
    yPosition,
    val,
    key,
    styles,
    isVisible,
  }: any): any {
    const { AxisYLabel } = this.props;

    const TickLabel = ({ tickVal }: { tickVal?: number }): React.ReactElement<any> => {
      const textProps = {
        alignmentBaseline: 'central',
        style: {
          ...styles.label,
          fontSize: '14px',
        },
        textAnchor: 'end',
        transform: 'translate(-10 0)',
      } as any;

      return (
        <text {...textProps}>
          {AxisYLabel ? <AxisYLabel>{tickVal}</AxisYLabel> : tickVal}
        </text>
      );
    };

    const groupProps = {
      key,
      transform: `translate(${xPosition}, ${yPosition})`,
    };

    if (!isVisible) {
      return (
        <g {...groupProps}>
          <rect width={barLength} {...(i === 1 ? styles.tickFirst : styles.tick)} />
        </g>
      );
    }

    return (
      <g {...groupProps}>
        { typeof val === 'number' && <TickLabel tickVal={this.formatTickVal(val)} />}
        { typeof val !== 'number' && <TickLabel />}
        <rect width={barLength} {...styles.tick} />
      </g>
    );
  }

  render(): React.ReactNode {
    return (
      <g>
        {this.getTickArray().map(this.renderTick)}
        <rect {...this.getRectProps()} />
      </g>
    );
  }
}

export { AxisY };
