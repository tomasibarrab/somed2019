import React from 'react';
import PropTypes from 'prop-types';
import posed, { PoseGroup } from 'react-pose';
import { Tick } from './Tick';
import { AnimateSlideOffset } from '../../SlideController';

const AnimateTickGroup = posed.g({
  pose: {
    opacity: 1,
    x: ({ tickGroupPoseVals }) => tickGroupPoseVals.x,
    transition: {
      x: {
        type: 'spring',
        stiffness: 210,
        damping: 20,
      },
      opacity: {
        duration: 200,
        ease: 'easeIn',
      },
    },
  },
  exit: {
    x: ({ tickGroupPoseVals }) => {
      const offsetDistance = 200;
      const { index, dataLength } = tickGroupPoseVals;

      if (index > (dataLength / 2)) {
        return tickGroupPoseVals.maxX + offsetDistance;
      }

      return tickGroupPoseVals.minX - offsetDistance;
    },
    opacity: 0,
    transition: {
      x: {
        type: 'spring',
        stiffness: 210,
        damping: 20,
      },
      opacity: {
        duration: 200,
        ease: 'easeOut',
      },
    },
  },
});

class AxisX extends React.Component {
  static propTypes = {
    activeOuterArea: PropTypes.shape({
      height: PropTypes.number.isRequired,
      top: PropTypes.number.isRequired,
    }).isRequired,
    animationOffsetDistance: PropTypes.number,
    axisYOffset: PropTypes.number,
    data: PropTypes.array.isRequired,
    isAnimated: PropTypes.bool,
    responsive: PropTypes.oneOf(['scale', 'redraw', 'none']),
    scale: PropTypes.func.isRequired,
    slideProps: PropTypes.shape({
      isDisabled: PropTypes.bool,
      minWidth: PropTypes.number,
      offset: PropTypes.number,
      windowWidth: PropTypes.number,
    }),
    theme: PropTypes.object.isRequired,
  }

  static defaultProps = {
    axisYOffset: 20,
    animationOffsetDistance: 2,
    isAnimated: true,
    responsive: 'none',
  }

  constructor(props) {
    super(props);

    this.renderTick = this.renderTick.bind(this);
  }

  getYOffset() {
    const { activeOuterArea, axisYOffset } = this.props;

    const halfAxisGroupHeight = axisYOffset * -1;
    const distanceFromTop = (activeOuterArea.height + activeOuterArea.top) - halfAxisGroupHeight;
    return distanceFromTop;
  }

  getTickProps({ label, styles }) {
    const { theme } = this.props;

    return {
      label,
      styles,
      theme,
      x: 0,
      y: 0,
    };
  }

  renderTick(tickData, index) {
    const { data, isAnimated, scale } = this.props;
    const xRange = scale.range();
    const tickX = scale(index);

    if (isAnimated) {
      const tickGroupProps = {
        key: tickData.id,
        pose: 'pose',
        poseKey: ['pose'],
        tickGroupPoseVals: {
          minX: xRange[0],
          x: tickX,
          maxX: xRange[1],
          index,
          dataLength: data.length,
        },
      };

      return (
        <AnimateTickGroup {...tickGroupProps}>
          <Tick
            key={tickData.id}
            {...this.getTickProps(tickData, index)}
          />
        </AnimateTickGroup>
      );
    }

    return (
      <g key={tickData.id} transform={`translate(${tickX}, 0)`}>
        <Tick
          key={tickData.id}
          {...this.getTickProps(tickData, index)}
        />
      </g>
    );
  }

  render() {
    if (this.props.data.length === 0) return null;
    const { slideProps } = this.props;

    const groupProps = {
      transform: `translate(0 ${this.getYOffset()})`,
    };

    let xOffset = 0;
    let clipPathProps;

    if (slideProps && !slideProps.isDisabled) {
      xOffset = slideProps.offset;
      clipPathProps = {
        clipPath: 'url(#mask)',
      };
    }

    const animateSlideOffsetProps = {
      pose: 'pose',
      poseKey: xOffset,
      xOffset,
    }

    if (this.props.isAnimated) {
      return (
        <g {...clipPathProps}>
          <AnimateSlideOffset {...animateSlideOffsetProps}>
            <g {...groupProps}>
              <PoseGroup>
                {this.props.data.map(this.renderTick)}
              </PoseGroup>
            </g>
          </AnimateSlideOffset>
        </g>
      );
    }

    return (
      <g {...clipPathProps}>
        <AnimateSlideOffset {...animateSlideOffsetProps}>
          <g {...groupProps}>
            {this.props.data.map(this.renderTick)}
          </g>
        </AnimateSlideOffset>
      </g>
    );
  }
}

export { AxisX };
