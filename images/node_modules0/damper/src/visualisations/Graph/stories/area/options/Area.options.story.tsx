import { boolean, select } from '@storybook/addon-knobs';
import { tealLighter } from 'otkit-colors/token.common';
import React from 'react';
import { AnimationType } from '../../../../../@types/animationOptions';
import { ResponsiveType } from '../../../../../@types/responsiveOptions';
import { Graph } from '../../../Graph/index';
import ReadMe from './README.md';

const MAX = 200;
const STACK = [
  '#6C8AE4',
  '#61BDDB',
  '#1FA888',
  '#FDC958',
];

const defaultColumns = [
  {
    id: 'a',
    label: 'A',
  },
  {
    id: 'b',
    label: 'B',
  },
  {
    id: 'c',
    label: 'C',
  },
  {
    id: 'd',
    label: 'D',
  },
  {
    id: 'e',
    label: 'E',
  },
  {
    id: 'f',
    label: 'F',
  },
  {
    id: 'g',
    label: 'G',
  },
  {
    id: 'h',
    label: 'H',
  },
];

const generateData = (num: number) => defaultColumns.map((v) => {
  const value = Math.floor((Math.random() * num) + 10);
  return {
    id: v.id,
    value,
  };
});

const getNormalArea = (num: number, isGrouped = false) => [
  {
    data: [
      {
        data: generateData(num || MAX),
        id: 'area-0-1',
      },
    ],
    group: isGrouped,
    id: 'area-0',
  },
  {
    data: [
      {
        data: generateData(num || MAX),
        id: 'area-1-1',
        styles: {
          common: {
            fill: 'transparent',
            mouseOver: {
              fill: 'transparent',
              stroke: tealLighter,
            },
            stroke: tealLighter,
            strokeOpacity: 1,
            strokeWidth: 2,
          },
        },
      },
    ],
    group: isGrouped,
    id: 'area-1',
  },
];

const getStackedArea = (num: number, isGrouped = false) => [
  {
    data: STACK.map((v, i) => ({
      data: generateData(num || MAX),
      id: `area-0-${i + 1}`,
      styles: {
        common: {
          fill: v,
          mouseOver: {
            fill: v,
            fillOpacity: 0.5,
          },
        },
      },
    })),
    group: isGrouped,
    id: 'area-0',
  },
];

const getArea = (num: number, areaType = 'normal', isGrouped = false) => (areaType === 'stacked' ? getStackedArea(num, isGrouped) : getNormalArea(num, isGrouped));

const columnOffsets = {
  left: 0,
  right: 0,
};

const defaultPadding = {
  bottom: 40,
  left: 60,
  right: 60,
  top: 20,
};

interface IProps {
  animation: AnimationType;
  columns: any[];
  padding: any;
  responsive: ResponsiveType;
  columnOffsets: any;
  isGrouped: boolean;
}

interface IState {
  areas: any;
  areaType: string;
  isGrouped: boolean;
}

class GraphWrapper extends React.Component<IProps, IState> {
  static defaultProps = {
    isGrouped: false,
  }

  constructor(props: IProps) {
    super(props);

    this.state = {
      areaType: 'normal',
      areas: getArea(MAX),
      isGrouped: false,
    };

    this.btnUpdate = this.btnUpdate.bind(this);
    this.handleNormalClick = this.handleNormalClick.bind(this);
    this.handleStackedClick = this.handleStackedClick.bind(this);
  }

  componentDidUpdate(prevProps: IProps, prevState: IState): void {
    if (prevProps.isGrouped !== this.props.isGrouped) {
      this.setState((prevCBState) => ({
        ...prevCBState,
        areas: getArea(MAX, prevState.areaType, this.props.isGrouped),
        isGrouped: this.props.isGrouped,
      }));
    }
  }

  btnUpdate(num: number, areaType = 'normal'): void {
    this.setState((prevState) => ({
      ...prevState,
      areaType,
      areas: getArea(num, areaType, this.state.isGrouped),
      isGrouped: this.props.isGrouped,
    }));
  }

  handleNormalClick(): void {
    this.btnUpdate(MAX);
  }

  handleStackedClick(): void {
    this.btnUpdate(MAX, 'stacked');
  }

  render(): React.ReactElement {
    const { animation, columnOffsets, columns, padding, responsive } = this.props;
    const { areas } = this.state;

    return (
      <article className="markdown-body">
        <h1>Area - Options</h1>
        <Graph
          width={1010}
          height={500}
          animation={animation}
          areas={areas}
          columns={columns}
          padding={padding}
          responsive={responsive}
          columnOffsets={columnOffsets}
        />
        <hr />
        <div>
          <button className="btn BtnGroup-item" onClick={this.handleNormalClick}>Normal Area</button>
          <button className="btn BtnGroup-item" onClick={this.handleStackedClick}>Stacked Area</button>
        </div>
      </article>
    );
  }
}
export const areaOptionsStory = () => {
  const responsive = select('Responsive', ['redraw', 'scale', 'none'], 'redraw');
  const animation = select('Animation', ['all', 'none'], 'all');
  const isGrouped = boolean('Group Stacked', false);

  return (
    <GraphWrapper
      animation={animation}
      columns={defaultColumns}
      padding={defaultPadding}
      responsive={responsive}
      columnOffsets={columnOffsets}
      isGrouped={isGrouped}
    />
  );
};

export { ReadMe as areaOptionsStoryReadMe };
