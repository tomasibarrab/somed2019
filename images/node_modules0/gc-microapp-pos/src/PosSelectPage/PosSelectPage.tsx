import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import { AsyncContent } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { AsyncStatus } from '../store/AsyncState';
import { selectors as onBoardSelector, selectPosBrand, updateDisplayState } from '../store/onboarding/onboarding';
import { fetchSupportedPosBrands } from '../store/onboarding/supportedPosBrands';
import { OnboardingDisplayStateName, State, SupportedPosBrand } from '../store/types';
import PosSelectionTile from './PosSelectionTile';

import { gaTrackTypes } from '../constants';
import './PosSelectPage.scss';

interface PosSelectProps {
  supportedPosBrands: SupportedPosBrand[];
  supportPosStatus: AsyncStatus;
  selectedPos: SupportedPosBrand;
}

interface PosSelectDispatch {
  fetchSupportedPosBrands: (payload: null) => void;
  selectPosBrand: (payload: SupportedPosBrand) => void;
  updateDisplayState: (payload: OnboardingDisplayStateName) => void;
}

type Props = InjectedIntlProps & PosSelectProps & PosSelectDispatch;

class PosSelectPage extends React.Component<Props> {
  public componentDidMount() {
    this.props.fetchSupportedPosBrands(null);
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.select,
      category: gaTrackTypes.category,
      label: `pos-select:pos-brand:${this.props.selectedPos.Name}`,
    });
  }

  public render() {
    const { supportPosStatus, supportedPosBrands, selectedPos, intl } = this.props;
    return (
      <main className="pos-select-page">
        <AsyncContent
          isLoading={supportPosStatus === 'started' || supportPosStatus === 'init'}
          isError={supportPosStatus === 'failed'}
          errorTitle={intl.formatMessage({ id: 'supportPos.error.title' })}
          errorMessage={intl.formatMessage({ id: 'supportPos.error.message' })}
        >
          <div className="pos-select__container">
            <h1 className="pos-select__messaging pos-select__messaging__supported">
              <FormattedMessage id="posSelect.selectMessage" />
            </h1>
            <div className={`pos-brand-selection ${selectedPos.Id ? '' : 'pos-brand-selection__no-selection'}`}>
              {supportedPosBrands.map((posBrand: SupportedPosBrand) => (
                <PosSelectionTile
                  key={posBrand.Id}
                  posBrand={posBrand}
                  selectPosAction={this.selectPos}
                  isSelected={selectedPos.Id === posBrand.Id}
                />
              ))}
            </div>
            <hr className="pos-select__break" />
            <div className="pos-select__unsupported">
              <p className="pos-select__messaging pos-select__messaging__unsupported">
                <FormattedMessage id="posSelect.unsupported.message" />
              </p>
              <Button
                type="button"
                theme="bare"
                className="pos-select__btn pos-select__btn__unsupported"
                onClick={this.unsupportedPosHandler}
              >
                <FormattedMessage id="posSelect.unsupported.navigationText" />
              </Button>
            </div>
          </div>
        </AsyncContent>
      </main>
    );
  }

  private selectPos = (selectedBrand: SupportedPosBrand) => {
    this.props.selectPosBrand(selectedBrand);
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.select,
      category: gaTrackTypes.category,
      label: `pos-select:pos-brand:${selectedBrand.Name}`,
    });
  };

  private unsupportedPosHandler = () => {
    this.props.updateDisplayState('unsupportedPos');
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.nagivate,
      category: gaTrackTypes.category,
      label: 'pos-select:unsupported-pos',
    });
  };
}

const mapState = (state: State): PosSelectProps => ({
  selectedPos: state.onBoarding.selectedPos,
  supportPosStatus: state.onBoarding.fetchSupportedPosStatus.status,
  supportedPosBrands: onBoardSelector.getSupportedPosBrands(state),
});

const mapDispatch = {
  fetchSupportedPosBrands: fetchSupportedPosBrands.started,
  selectPosBrand,
  updateDisplayState,
};

export default connect<PosSelectProps, PosSelectDispatch, {}>(
  mapState,
  mapDispatch,
)(injectIntl<PosSelectProps & PosSelectDispatch>(PosSelectPage));
export { PosSelectPage as PurePosSelectPage, Props };
