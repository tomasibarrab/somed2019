import { shallow } from 'enzyme';
import React from 'react';

import PosSelectionTile, { Props } from './PosSelectionTile';

import alohaLogo from '../assets/posLogos/aloha-large.png';
import dinerwareLogo from '../assets/posLogos/dinerware-large.png';
import hnlLogo from '../assets/posLogos/hnl.png';
import imposLogo from '../assets/posLogos/impos.png';
import microsLogo from '../assets/posLogos/micros-large.png';
import simphonyLogo from '../assets/posLogos/micros-simphony-large.png';
import positouchLogo from '../assets/posLogos/positouch-large.png';
import smsLogo from '../assets/posLogos/sms-large.png';
import squirrelLogo from '../assets/posLogos/squirrel-large.png';
import toastLogo from '../assets/posLogos/toast-large.png';
import upserveLogo from '../assets/posLogos/upserve-large.png';

import { SupportedPosBrandsIds } from '../store/types';

describe('<PosSelectionTile />', () => {
  const setup = (override = {}) => {
    const { isSelected = false, posBrand = { Id: SupportedPosBrandsIds.Toast, Name: 'Toast' } } = override as Props;
    const props: Props = {
      isSelected,
      posBrand,
      selectPosAction: jest.fn(),
    };
    const posSelectionTile = shallow(<PosSelectionTile {...props} />);

    return { posSelectionTile, props };
  };

  it('should have a mapping of POS names to POS logos', () => {
    const { posSelectionTile } = setup();

    expect(posSelectionTile.instance().posLogoMap).toEqual({
      a4y0c000000LZ0fAAG: smsLogo,
      a4y0c000000UphzAAC: alohaLogo,
      a4y0c000000Upi0AAC: toastLogo,
      a4y0c000000Upi1AAC: microsLogo,
      a4y0c000000Upi2AAC: positouchLogo,
      a4y0c000000Upi3AAC: squirrelLogo,
      a4y0c000000Upi4AAC: dinerwareLogo,
      a4y0c000000Upi5AAC: simphonyLogo,
      a4y0c000000Upi7AAC: hnlLogo,
      a4y0c000000Upi8AAC: imposLogo,
      a4y0c000000UpiDAAS: upserveLogo,
      [SupportedPosBrandsIds.unselected]: null,
    });
  });

  it('should display a radio button label with the pos brand logo', () => {
    const { posSelectionTile } = setup();

    const radioBtn = posSelectionTile.find('input[type="radio"]');
    expect(radioBtn.props().value).toEqual('a4y0c000000Upi0AAC');
    expect(radioBtn.props().name).toEqual('posSelect');

    const img = posSelectionTile.find('img');
    expect(img.props().src).toEqual(toastLogo);

    const { posSelectionTile: posSelectionTile2 } = setup({
      posBrand: { Id: 'a4y0c000000UphzAAC', Name: 'Aloha' },
    });

    const radioBtn2 = posSelectionTile2.find('input[type="radio"]');
    expect(radioBtn2.props().value).toEqual('a4y0c000000UphzAAC');
    expect(radioBtn2.props().name).toEqual('posSelect');

    const img2 = posSelectionTile2.find('img');
    expect(img2.props().src).toEqual(alohaLogo);
  });

  it('should have the radio selected when isSelected is true', () => {
    const { posSelectionTile } = setup({ isSelected: true });
    const radioBtn = posSelectionTile.find('input[type="radio"]');

    expect(radioBtn.props().checked).toEqual(true);
  });

  it('should fire the callback when clicked', () => {
    const { posSelectionTile, props } = setup();

    posSelectionTile.find('input').simulate('change', { target: { value: 'NCC-1701' } });

    expect(props.selectPosAction).toHaveBeenCalledWith(props.posBrand);
  });
});
