import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import { TransitionableFooter } from '@buffet/user-agreement';
import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import React from 'react';
import { Form, FormRenderProps } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import * as validate from 'shared-utils/validate';
import { gaTrackTypes } from '../../constants';
import { AsyncStatus } from '../../store/AsyncState';
import { sendAlohaHaspKey } from '../../store/onboarding/nextStepsData';
import { AlohaHaspData, State } from '../../store/types';
import '../Steps.scss';
import AlohaHaspKey from './AlohaHaspKey';

// Placeholder styles, remove later when we update buffet button
import ChangePosBtn from '../../common/ChangePosBtn/ChangePosBtn';
import './btnStyles.scss';

interface SP {
  asyncStatus: AsyncStatus;
  rid: number;
}

interface DP {
  sendHaspKey: (payload: AlohaHaspData) => void;
}

type AlohaStepsProps = SP & DP & InjectedIntlProps;

class AlohaSteps extends React.Component<AlohaStepsProps> {
  private haspValidation = validate.create({
    haspKey: validate.compose(
      validate.minChars(1, this.props.intl.formatMessage({ id: 'nextSteps.aloha.haspKey.required' })),
      validate.regEx(/^\d{4,7}$/, this.props.intl.formatMessage({ id: 'nextSteps.aloha.haspKey.invalid' })),
      validate.maxChars(7, this.props.intl.formatMessage({ id: 'nextSteps.aloha.haspKey.invalid' })),
    ),
  });

  private boldText = {
    cmcid: <FormattedMessage id={'nextsteps.pos.aloha.haspkey.cmcid'} tagName="strong" />,
    haspkey: <FormattedMessage id={'nextsteps.pos.aloha.haspkey.haspkey'} tagName="strong" />,
  };

  public render() {
    return (
      <div className="steps-container">
        <div className="steps-content">
          <FormattedMessage id="nextsteps.pos.header" tagName="h1" />
          <ol>
            <li>
              <FormattedMessage id="nextsteps.pos.aloha.haspkey" values={this.boldText} />
              <FormattedMessage id="nextsteps.pos.aloha.hereshow" tagName="p" />
              <FormattedMessage id="nextsteps.pos.aloha.optionone" tagName="h2" />
              <ul className="steps-list">
                <FormattedMessage id="nextsteps.pos.aloha.optionone.contenta" tagName="li" />
                <FormattedMessage id="nextsteps.pos.aloha.optionone.contentb" tagName="li" />
                <FormattedMessage id="nextsteps.pos.aloha.optionone.contentc" tagName="li" />
              </ul>

              <FormattedMessage id="nextsteps.pos.aloha.optiontwo" tagName="h2" />
              <ul className="steps-list">
                <FormattedMessage id="nextsteps.pos.aloha.optiontwo.contenta" tagName="li" />
              </ul>
            </li>
            <li>
              <FormattedMessage id="nextsteps.pos.aloha.optiontwo.enterlabel" />
              <Form
                onSubmit={this.submitHaspKeyHandler}
                validate={this.haspValidation}
                render={this.renderAlohaHaspKeyForm}
              />
            </li>
          </ol>
          <TransitionableFooter className="onboarding__nextsteps-footer" show>
            <ChangePosBtn />
            <button className="blank-btn" form="alohaHaspKeyForm">
              <Button type="button" onClick={() => null} theme="primary" busy={this.props.asyncStatus === 'started'}>
                <FormattedMessage id="nextSteps.aloha.haspkey.button" />
              </Button>
            </button>
          </TransitionableFooter>
        </div>
      </div>
    );
  }

  private renderAlohaHaspKeyForm(props: FormRenderProps) {
    return <AlohaHaspKey {...props} />;
  }

  private submitHaspKeyHandler = ({ haspKey, reseller }: { haspKey: string; reseller: string }) => {
    this.props.sendHaspKey({ rid: this.props.rid, haspKey, reseller });
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.submit,
      category: gaTrackTypes.category,
      label: 'next-steps:aloha-hasp-key',
    });
  };
}

const mapState = (state: State): SP => ({
  asyncStatus: state.onBoarding.sendAlohaHaspKeyStatus.status,
  rid: selectors.rid(state),
});

const mapDispatch = {
  sendHaspKey: sendAlohaHaspKey.started,
};

export default connect<SP, DP, {}>(
  mapState,
  mapDispatch,
)(injectIntl<AlohaStepsProps>(AlohaSteps));
export { AlohaSteps as PureAlohaSteps };
