import { Button } from '@buffet/button';
import eventTracker from '@buffet/event-tracker';
import React from 'react';
import { FormRenderProps } from 'react-final-form';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { InputFinalField } from 'shared-react-atomic-ui/finalform-fields';
import { gaTrackTypes } from '../../constants';
import { AsyncStatus } from '../../store/AsyncState';

import './UpserveLinkForm.scss';

interface ErrorProps {
  statusCode: number;
  linkStatus: AsyncStatus;
  resetErrorMessaging: () => void;
}

type Props = ErrorProps & FormRenderProps & InjectedIntlProps;

const NO_ERROR = ' ';

class UpserveLinkForm extends React.Component<Props> {
  private errorMessageMap: { [key: number]: string } = {
    0: NO_ERROR,
    1: 'app.error.general',
    200: NO_ERROR,
    400: 'nextSteps.upserve.message.400',
    403: 'nextSteps.upserve.message.403',
    404: 'nextSteps.upserve.message.404',
    409: 'nextSteps.upserve.message.409',
    412: 'nextSteps.upserve.message.412',
    503: 'nextSteps.upserve.message.503',
  };

  private upserveErrorMessageLinks = {
    nextStepsUpserveMessage403Link: (
      <a href="http://www.upserve.com/pricing" target="_blank" onClick={this.gaClickPricingLinkHandler}>
        <FormattedMessage id="nextSteps.upserve.message.403.link" />
      </a>
    ),
    nextStepsUpserveMessage412Link: (
      <a
        href="https://help.upserve.com/s/article/Getting-Started-with-your-Upserve-POS-OpenTable-Integration"
        target="_blank"
        onClick={this.gaClickGettingStartedLinkHandler}
      >
        <FormattedMessage id="nextSteps.upserve.message.412.link" />
      </a>
    ),
  };

  public render() {
    const {
      handleSubmit,
      intl: { formatMessage },
      linkStatus,
      statusCode,
    } = this.props;

    const errorMessage = this.errorMessageMap[statusCode] || this.errorMessageMap[1];
    return (
      <form onSubmit={handleSubmit} id="upserveUrlForm" className="upserve-verify-form">
        <InputFinalField
          name="upserveLink"
          className={`field${errorMessage === NO_ERROR ? '' : ' danger'}`}
          label={formatMessage({ id: 'nextSteps.upserve.link.label' })}
          statusText={<FormattedMessage id={errorMessage} values={this.upserveErrorMessageLinks} />}
          onBlur={this.formInputChangeHandler}
        />
        <Button
          type="button"
          onClick={() => null}
          htmltype="submit"
          theme="primary"
          disabled={statusCode !== 0}
          busy={linkStatus === 'started'}
        >
          <FormattedMessage id="nextsteps.pos.upserve.verifyButton" />
        </Button>
      </form>
    );
  }

  private formInputChangeHandler = () => {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.enter,
      category: gaTrackTypes.category,
      label: 'next-steps:form-input:upserve-link',
    });

    this.props.resetErrorMessaging();
  };

  private gaClickPricingLinkHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'next-steps:upserve-pricing',
    });
  }

  private gaClickGettingStartedLinkHandler() {
    eventTracker.sendEvent({
      action: gaTrackTypes.actions.clickLink,
      category: gaTrackTypes.category,
      label: 'next-steps:upserve-getting-started',
    });
  }
}

export default injectIntl<FormRenderProps & ErrorProps>(UpserveLinkForm);
export { UpserveLinkForm, Props };
