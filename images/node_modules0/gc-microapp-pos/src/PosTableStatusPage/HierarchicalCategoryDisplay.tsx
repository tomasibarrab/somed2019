import { LabeledCheckbox } from '@buffet/checkbox';
import React from 'react';
import { Category, CategoryStatus } from './../store/types';
import { FlatCategoryDisplay } from './FlatCategoryDisplay';

interface SortedCategories {
  [id: string]: Category[];
}

interface Props {
  categories: Category[];
  parentCategoriesDictionary: { [id: string]: Category };
  statusDictionary: { [id: number]: CategoryStatus };
  onCheckCategory: (categoryId: string) => void;
}

class HierarchicalCategoryDisplay extends React.Component<Props, {}> {
  public render() {
    const hierarchicalCategories = this.getHierarchicalCategories();
    return (
      <div>
        {Object.keys(hierarchicalCategories).map((parentId: string) => {
          const parentCategory = this.props.parentCategoriesDictionary[parentId];
          const childrenCategories = hierarchicalCategories[parentId];
          if (!parentCategory) {
            return null;
          }
          return (
            <div className="parent-category" key={'parent-display-' + parentId}>
              <div className="parent-hierarchy-category" key={parentCategory.category_id}>
                <LabeledCheckbox
                  id={parentCategory.category_id}
                  checked={parentCategory.checked}
                  label={parentCategory.name}
                  onClick={() => this.props.onCheckCategory(parentCategory.category_id)}
                  key={parentCategory.category_id}
                />
              </div>
              <FlatCategoryDisplay
                categories={childrenCategories}
                statusDictionary={this.props.statusDictionary}
                onCheckCategory={this.props.onCheckCategory}
                key={'flat-display-' + parentId}
              />
            </div>
          );
        })}
      </div>
    );
  }
  private getHierarchicalCategories(): SortedCategories {
    return this.props.categories.reduce(
      (memo, category) => {
        if (category.level === 1 && category.parent_category_id) {
          return {
            ...memo,
            [category.parent_category_id]: [...(memo[category.parent_category_id] || []), category],
          };
        }

        return memo;
      },
      {} as SortedCategories,
    );
  }
}

export { HierarchicalCategoryDisplay, Props };
