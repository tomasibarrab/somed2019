import { shallow } from 'enzyme';
import React from 'react';

import { LabeledCheckbox } from '@buffet/checkbox';
import { FlatCategoryDisplay, Props } from './FlatCategoryDisplay';

describe('<FlatCategoryDisplay/>', () => {
  const setup = (propOverride = {}) => {
    const {
      statusDictionary = {
        123: { id: 123, status: 'big', rank: 5 },
        456: { id: 456, status: 'small', rank: 11 },
      },
    } = propOverride as Props;

    const props: Props = {
      categories: [
        {
          category_id: 'heavy cruiser',
          checked: true,
          level: 100,
          name: 'Star Destroyer',
          parent_category_id: 'evil_empire',
          status_id: 123,
        },
        {
          category_id: 'fighter',
          checked: false,
          level: 2,
          name: 'X Wing',
          parent_category_id: 'rebels',
          status_id: 456,
        },
        {
          category_id: 'car',
          checked: undefined,
          level: 7,
          name: 'Batmobile',
          parent_category_id: 'batman',
          status_id: null,
        },
      ],
      onCheckCategory: jest.fn(),
      statusDictionary,
    };

    const flatCategoryDisplayComponent = shallow(<FlatCategoryDisplay {...props} />);

    return { flatCategoryDisplayComponent, props };
  };

  it('should display a checkbox for each category', () => {
    const { flatCategoryDisplayComponent, props } = setup();

    const checkboxes = flatCategoryDisplayComponent.find(LabeledCheckbox);
    expect(checkboxes.length).toEqual(props.categories.length);

    checkboxes.forEach((checkbox, index) => {
      const checkboxProps = checkbox.props();
      const correspondingCategory = props.categories[index];
      expect(checkboxProps.checked).toEqual(correspondingCategory.checked || false);
      expect(checkboxProps.label).toEqual(correspondingCategory.name);
    });
  });

  describe('display status', () => {
    it('should display status if there is a statusId and if statusDictionary has keys', () => {
      const { flatCategoryDisplayComponent } = setup();

      const statuses = flatCategoryDisplayComponent.find('.label-status.status');

      expect(statuses.length).toBe(2);
      expect(statuses.at(0).text()).toBe('big');
      expect(statuses.at(1).text()).toBe('small');
    });

    it('should not display status if there is not keys in statusDictionary', () => {
      const { flatCategoryDisplayComponent } = setup({
        statusDictionary: {},
      });

      const statuses = flatCategoryDisplayComponent.find('.label-status.status');

      expect(statuses.length).toBe(0);
    });
  });
});
