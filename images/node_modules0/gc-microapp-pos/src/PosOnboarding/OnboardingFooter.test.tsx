import { Button } from '@buffet/button';
import { FooterUserAgreement, TransitionableFooter } from '@buffet/user-agreement';
import { shallow } from 'enzyme';
import React from 'react';
import BackButton from 'shared-react-atomic-ui/BackButton';
import restaurant from '../../fixtures/RestaurantDataFromRide.json';
import { posBrandMocks, posUpserveMock } from '../store/onboarding/onboarding.mocks';
import { Props, PureOnboardingFooter as OnboardingFooter } from './OnboardingFooter';

describe('<OnboardingFooter />', () => {
  const setup = (override = {}) => {
    const {
      displayState = 'posSelect',
      selectedPos = posBrandMocks[2],
      isAgreementSigned = false,
      savingPosBrandToRideStatus = 'init',
    } = override as Props;
    const props: Props = {
      displayState,
      isAgreementSigned,
      restaurant,
      savingPosBrandToRideStatus,
      selectedPos,
      updateDisplayState: jest.fn(),
    };
    const onboardingFooter = shallow(<OnboardingFooter {...props} />);

    return { onboardingFooter, props };
  };

  describe('FooterUserAgreement', () => {
    it('should be shown if the agreement is not signed', () => {
      const { onboardingFooter } = setup();

      expect(onboardingFooter.find(FooterUserAgreement).length).toBe(1);
    });

    describe('when the pos', () => {
      it('is not upserve should pass the omnivore agreement type, the context should contain the rid', () => {
        const { onboardingFooter } = setup();
        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();

        expect(userAgreementProps.agreementType).toEqual('pos_integration');
        expect(userAgreementProps.context).toEqual('urn:ot.restaurants:12345');
        expect(userAgreementProps.show).toBe(true);
        expect(userAgreementProps.onAgreeSuccess).toBe(onboardingFooter.instance().acceptUserAgreementHandler);
      });

      it('is upserve should pass the upserve agreement type, the context should contain the rid', () => {
        const { onboardingFooter } = setup({ selectedPos: posUpserveMock });
        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();

        expect(userAgreementProps.agreementType).toEqual('pos_integration_generic');
        expect(userAgreementProps.context).toEqual('urn:ot.restaurants:12345');
        expect(userAgreementProps.show).toBe(true);
        expect(userAgreementProps.onAgreeSuccess).toBe(onboardingFooter.instance().acceptUserAgreementHandler);
      });
    });

    describe('show', () => {
      it('is true when a pos is selected', () => {
        const { onboardingFooter } = setup();
        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();
        expect(userAgreementProps.show).toBe(true);
      });

      it('is false when no pos is selected', () => {
        const { onboardingFooter } = setup({
          selectedPos: { Id: '', Name: '' },
        });

        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();
        expect(userAgreementProps.show).toBe(false);
      });

      it('is false when pos is selected but displayState is on nextSteps', () => {
        const { onboardingFooter } = setup({
          displayState: 'nextSteps',
        });

        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();
        expect(userAgreementProps.show).toBe(false);
      });

      it('should be false while saving the pos', () => {
        const { onboardingFooter } = setup({
          savingPosBrandToRideStatus: 'started',
        });

        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();
        expect(userAgreementProps.show).toBe(false);
      });

      it('should be true while when saving the pos is done', () => {
        const { onboardingFooter } = setup({
          savingPosBrandToRideStatus: 'done',
        });

        const userAgreementProps = onboardingFooter.find(FooterUserAgreement).props();
        expect(userAgreementProps.show).toBe(true);
      });
    });
  });

  describe('Footer Next button', () => {
    it('should have a transitionable footer and a button if the agreement is signed', () => {
      const { onboardingFooter } = setup({ isAgreementSigned: true });

      const transitionableFooter = onboardingFooter.find(TransitionableFooter);
      expect(transitionableFooter.length).toBe(1);
      expect(transitionableFooter.find(Button).length).toBe(1);
    });
  });

  it('should set the state to nextsteps when button is clicked', () => {
    const { onboardingFooter, props } = setup({ isAgreementSigned: true });

    onboardingFooter.find(Button).simulate('click');

    expect(props.updateDisplayState).toHaveBeenCalledWith('nextSteps');
  });

  describe('Footer back button', () => {
    it('should have a back button that fires change state', () => {
      const { onboardingFooter, props } = setup({
        supportedPosBrands: posBrandMocks,
      });

      onboardingFooter.find(BackButton).simulate('click');

      expect(props.updateDisplayState).toHaveBeenCalledWith('landing');
    });
  });
});
