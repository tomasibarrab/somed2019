import { addNotification, removeNotificationById } from 'shared-react-smart-ui/NotificationCenter';
import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { AsyncState } from '../AsyncState';
import { SubmitPosBrandPayload } from '../types';
import { Epic } from '../types';
import { deselectPosBrand, selectPosBrand } from './onboarding';


// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const savePosBrand = actionCreator.async<SubmitPosBrandPayload, {}, any>('SUBMIT_POS_BRAND');


// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------

export const triggerSavePosBrand: Epic = (action$, store) =>
  action$
    .filter(selectPosBrand.match)
    .map(({ payload }) =>
      savePosBrand.started({
        posBrandId: payload.Id,
        salesForceId: store.getState().onBoarding.fetchPosRideDataStatus.data.ride.salesforceId,
      }),
  );

export const savePosBrandId = Symbol();

export const dismissSavePosBrandErrorsEpic: Epic = action$ =>
  action$
    .filter(savePosBrand.started.match)
    .map(() => removeNotificationById(savePosBrandId));

export const savePosBrandEpic: Epic = (action$, store, { api }) =>
  action$
    .filter(savePosBrand.started.match)
    .mergeMap(({ payload }) => api
      .postSelectedPos(payload.salesForceId, payload.posBrandId)
      .flatMap(() => [savePosBrand.done({ params: payload, result: {} }), removeNotificationById(savePosBrandId)])
      .catch(error => [
        addNotification({ messageId: 'app.error.general', id: savePosBrandId }),
        savePosBrand.failed({ error, params: payload }),
        deselectPosBrand(),
      ]),
  );


// ---------------------------------------------------------------------------------------------------------------------
// reducer
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: AsyncState<undefined> = {
  data: undefined,
  status: 'init',
};

export const savePosBrandReducer = reducerWithInitialState(initialState as AsyncState<undefined>)
  .case(savePosBrand.started, () => ({ data: undefined, status: 'started' }))
  .case(savePosBrand.done, () => ({ data: undefined, status: 'done' }))
  .case(savePosBrand.failed, (state, { error }) => ({ data: error, status: 'failed' }));
