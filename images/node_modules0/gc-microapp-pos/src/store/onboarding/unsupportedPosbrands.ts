import { addNotification, removeNotificationById } from 'shared-react-smart-ui/NotificationCenter';
import actionCreatorFactory from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import { AsyncState } from '../AsyncState';
import { Epic, LeadGenFormData } from '../types';
import { updateDisplayState } from './onboarding';


// ---------------------------------------------------------------------------------------------------------------------
// actions
// ---------------------------------------------------------------------------------------------------------------------

const actionCreator = actionCreatorFactory();

export const submitLeadGen = actionCreator.async<LeadGenFormData, null, any>('SUBMIT_LEAD_GEN');

export const leadGenNotificationSymbol = Symbol('SUBMIT_LEAD_GEN');


// ---------------------------------------------------------------------------------------------------------------------
// epics
// ---------------------------------------------------------------------------------------------------------------------
export const submitLeadGenEpic: Epic = (action$, store, { api }) =>
  action$.filter(submitLeadGen.started.match).mergeMap(({ payload }) =>
    api
      .submitLeadGen(payload)
      .flatMap(() => [submitLeadGen.done({ params: payload, result: null }), updateDisplayState('submittedLeadGen')])
      .catch(err => [
        submitLeadGen.failed({ params: payload, error: err }),
        addNotification({
          iconId: 'negative',
          id: leadGenNotificationSymbol,
          messageId: 'app.error.general',
          type: 'error',
        }),
      ]),
  );

export const clearErrorNotificationsEpic: Epic = (action$, store, {}) =>
  action$.filter(submitLeadGen.started.match).map(() => {
    return removeNotificationById(leadGenNotificationSymbol);
  });


// ---------------------------------------------------------------------------------------------------------------------
// reducers
// ---------------------------------------------------------------------------------------------------------------------

export const initialState: AsyncState<null> = {
  data: undefined,
  status: 'init',
};

export const submitLeadGenReducer = reducerWithInitialState(initialState as AsyncState<undefined>)
  .case(submitLeadGen.started, () => ({
    data: undefined,
    status: 'started',
  }))
  .case(submitLeadGen.done, () => ({
    data: undefined,
    status: 'done',
  }))
  .case(submitLeadGen.failed, () => ({
    data: undefined,
    status: 'failed',
  }));
