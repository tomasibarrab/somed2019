import get from 'lodash/get';
import React from 'react';
import { connect } from 'react-redux';

import { selectors } from 'gca-react-components/src/redux-modules/currentContext';

import { State } from '../store/types';
import isOpenTableEmail from './../PromotedInventory/isOpenTableEmail';

interface Features {
  [index: string]: boolean;
}

interface SP {
  features: Features;
  email: string;
}

interface OP {
  internalUserFeatureName: string;
  normalFeatureName: string;
  children: any; // Really shouldn't need this `any` here but we get a weird error if not
}

type Props = SP & OP;

/*
 * Shows the child component if the `normalFeatureName` feature is enabled, or if
 * the `internalUserFeatureName` is enabled, and the current logged-in user is an
 * internal user (has an email ending with @opentable.com)
 */

const InternalUserFeatureToggle: React.FunctionComponent<Props> = ({
  internalUserFeatureName,
  normalFeatureName,
  features,
  email,
  children,
}) => {
  const normalEnabled = features[normalFeatureName];
  const internalEnabled = features[internalUserFeatureName];
  const currentUserIsOT = isOpenTableEmail(email);
  return (normalEnabled || (internalEnabled && currentUserIsOT)) ?
    children : null;
}

const mapStateToProps = (state: State): SP => ({
  email: get(selectors.user(state), 'userName', ''),
  features: get(state, 'featureToggles.features', {}),
});

export default connect<SP, {}, OP>(mapStateToProps)(InternalUserFeatureToggle);
