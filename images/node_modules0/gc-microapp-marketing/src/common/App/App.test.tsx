import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';

import { keys } from '../../translations/bundles/marketing.json';
import App from './App';

jest.mock('../../PrivateDining/PrivateDining', () => () => '[PrivateDiningComponent]');
jest.mock('../../Promos/Promos', () => () => '[PromosComponent]');
jest.mock('../../PromotedInventory/ColumnsLayout/CampaignsList', () => () => '[ColumnsLayout/CampaignsList]');
jest.mock('../../PromotedInventory/CampaignsList/CampaignsList', () => () => '[CampaignsList/CampaignsList]');
jest.mock('../../PromotedInventory/Insights/Insights', () => () => '[InsightsComponent]');
jest.mock('../../PromotedInventory/FlexiblePricing/FlexiblePricing', () => () => '[FlexiblePricingComponent]');
jest.mock('../../PromotedInventory/Specials/SpecialsList.tsx', () => () => '[SpecialsList]');
jest.mock('../../Gifts/Gifts.tsx', () => () => '[GiftsComponent]');
jest.mock('../LeadGen/LeadGen.tsx', () => () => '[LeadGenComponent]');
jest.mock('../MainNav/MainNav', () => () => '[MainNavComponent]');

describe('<App />', () => {
  const enabledFeatures = {
    featureGcaPiApproveCustomPromotion: true,
    featureGcaPiCreateCustomPromotion: true,
    featureGcaPiCustomPromotions: true,
    featureGcaPiFlexiblePricing: true,
    featureGcaPiFlexiblePricingReduceVisibility: true,
    featureGcaPiFlexiblePricingRevert: true,
    featureGcaPiGifts: true,
    featureGcaPiGuestCampaigns: true,
    featureGcaPiInsights: true,
    featureGcaPiRecommended: true,
    featureGcaPiSpecials: true,
    transientGcaPiFourColumnPromotedResultsAndSpecials: true,
  };
  const scenarios = [
    // invalid route
    {
      features: enabledFeatures,
      path: '/invalid',
      should: 'should default to Insights page when all toggles are enabled for invalid route',
    },
    {
      features: Object.assign({}, enabledFeatures, { featureGcaPiInsights: false }),
      path: '/invalid',
      should: 'should default to Flexible Pricing page when featureGcaPiInsights is disabled for invalid route',
    },
    {
      features: Object.assign({}, enabledFeatures, { featureGcaPiFlexiblePricing: false }),
      path: '/invalid',
      should: 'should default to Custom Promotions page when featureGcaPiFlexiblePricing is disabled for invalid route',
    },

    // root route
    {
      features: enabledFeatures,
      path: '/',
      should: 'should default to Insights page when all toggles are enabled for root route',
    },
    {
      features: Object.assign({}, enabledFeatures, { featureGcaPiInsights: false }),
      path: '/',
      should: 'should default to Flexible Pricing page when featureGcaPiInsights is disabled for root route',
    },
    {
      features: Object.assign({}, enabledFeatures, { featureGcaPiFlexiblePricing: false }),
      path: '/',
      should: 'should default to Custom Promotions page when featureGcaPiFlexiblePricing is disabled for root route',
    },
    {
      features: {
        featureGcaPiApproveCustomPromotion: true,
        featureGcaPiCreateCustomPromotion: true,
        featureGcaPiCustomPromotions: true,
        transientGcaPiFourColumnPromotedResultsAndSpecials: true,
      },
      path: '/',
      should: 'should default to Custom Promotions page when CP toggles are enabled for root route',
    },
    {
      features: {
        featureGcaPiSpecials: true,
        transientGcaPiFourColumnPromotedResultsAndSpecials: true,
      },
      path: '/',
      should: 'should default to Specials page when only featureGcaPiSpecials is enabled for root route',
    },
    {
      features: { gcaMarketingPromos: true },
      path: '/',
      should: 'should default to Seasonal Promos page when only gcaMarketingPromos is enabled for root route',
    },
    {
      features: { featureGcaMarketingPrivateDining: true },
      path: '/',
      should:
        'should default to Private Dining page when only featureGcaMarketingPrivateDining is enabled for root route',
    },
    {
      features: { featureGcaPiGifts: true },
      path: '/',
      should: 'should default to Gifts page when only featureGcaPiGifts is enabled for root route',
    },
    {
      features: {},
      path: '/',
      should: 'should default to Seasonal Promos page when no features are enabled for root route',
    },
  ];

  scenarios.forEach(({ should, features, path }) => {
    it(should, () => {
      const state = {
        currentContext: { fetchFailed: false, isFetching: false },
        featureToggles: { features },
        restaurantPIProperties: { loading: false, data: {} },
      };
      const store = configureMockStore([])(state);
      const component = create(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <MemoryRouter initialEntries={[path]}>
              <App />
            </MemoryRouter>
          </IntlProvider>
        </Provider>,
      );

      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });
});
