import { mount } from 'enzyme';
import { Form } from 'react-final-form';

import React from 'react';

import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { keys } from '../../translations/bundles/marketing.json';

import { LINK_TO_GIFTS_TERMS_V1 as linkToTerms } from '../constants';

import GiftsTermsModal from './GiftsTermsModal';

jest.mock('platform', () => ({
  name: '<Browser name>',
  os: '<Operating system>',
}));

const createComponent = (state, confirm, url) => {
  const store = configureMockStore()(state);
  const wrapper = mount(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={keys}>
        <GiftsTermsModal confirm={confirm} url={url} close={jest.fn()} />
      </IntlProvider>
    </Provider>,
  );
  return { wrapper, store };
};

describe('<GiftsTermsModal />', () => {
  const url = 'http://test.example.com';
  const state = {
    currentContext: {
      user: {
        firstName: 'John',
        lastName: 'Doe',
        userName: 'john.doe@example.com',
      },
    },
    gifts: {
      patchPending: false,
    },
  };

  it('should call confirm and close modal when submitting completed form', () => {
    const confirm = jest.fn();
    const { wrapper, store } = createComponent(state, confirm, url);
    const form = wrapper.find('form').first();
    const inputs = wrapper.find('input');
    const restaurantLegalName = 'Ye Olde Fake Restauant Name, LLC';

    inputs.at(1).instance().value = restaurantLegalName;
    inputs.at(1).simulate('change');
    inputs.last().simulate('click'); // agree

    form.simulate('submit'); // button clicks do not submit forms in enzyme

    expect(confirm).toHaveBeenLastCalledWith({
      approvalInfo: {
        agreed: undefined,
        browserInfo: '{"name":"<Browser name>","os":"<Operating system>"}',
        email: 'john.doe@example.com',
        linkToTerms,
        name: 'John Doe',
        restaurantLegalName,
      },
      isEdit: false,
      url,
    });
    expect(store.getActions()).toMatchSnapshot();
  });
});
