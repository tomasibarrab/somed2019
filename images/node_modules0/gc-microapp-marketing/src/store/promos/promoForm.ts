import get from 'lodash/get';
import { createSelector } from 'reselect';
import { State } from '../types';
import { currentPromoSelector } from './promos';
import { DayOfReservationCutoffPenalty, Penalty, RestaurantPromo, TimeSpanCutoffPenalty } from './promos.types';

export interface PromoForm {
  message: string;
  requireCreditCard: boolean;
  inform: boolean;
  amount: number;
  days: number;
  allShifts: boolean;
  startTime: string;
  endTime: string;
}

const DEFAULT_START_TIME = '16:30:00';
const DEFAULT_END_TIME = '22:30:00';
const DEFAULT_AMOUNT = 10;
const DEFAULT_DAYS = 2;

export const promoFormDefaults = (partialPromoForm: Partial<PromoForm>): PromoForm => ({
  allShifts: true,
  amount: DEFAULT_AMOUNT,
  days: DEFAULT_DAYS,
  endTime: DEFAULT_END_TIME,
  inform: false,
  message: '',
  requireCreditCard: false,
  startTime: DEFAULT_START_TIME,
  ...partialPromoForm,
});

// See: "Type Guards and Differentiating Types": https://www.typescriptlang.org/docs/handbook/advanced-types.html
export const isDayOfReservationCutoffPenalty = (spec: Penalty): spec is DayOfReservationCutoffPenalty =>
  (spec as DayOfReservationCutoffPenalty).dayOfReservationCutoff !== undefined;

export const getCancellationPenalty = (currentPromo: RestaurantPromo) =>
  get<RestaurantPromo, any>(currentPromo, ['creditCardDay', 'Specification', 'specification', 'cancellationPenalty']);

export const getDays = (currentPromo: RestaurantPromo): number => {
  const penalty = getCancellationPenalty(currentPromo);

  if (penalty === undefined) {
    return DEFAULT_DAYS;
  }

  if (isDayOfReservationCutoffPenalty(penalty)) {
    // "Day Of" maps to 0 days in the form select
    return 0;
  }

  return penalty.timeSpanCutoff.days;
};

export const getAmount = (currentPromo: RestaurantPromo): number => {
  const penalty = getCancellationPenalty(currentPromo);

  if (penalty === undefined) {
    return DEFAULT_AMOUNT;
  }

  return penalty.amount;
};

export const getEndTime = (currentPromo: RestaurantPromo): string => {
  if (currentPromo.creditCardDay && currentPromo.creditCardDay.endTime) {
    return currentPromo.creditCardDay.endTime;
  }

  return DEFAULT_END_TIME;
};

export const getStartTime = (currentPromo: RestaurantPromo): string => {
  if (currentPromo.creditCardDay && currentPromo.creditCardDay.startTime) {
    return currentPromo.creditCardDay.startTime;
  }

  return DEFAULT_START_TIME;
};

export const initialValuesSelector = createSelector(
  currentPromoSelector,
  (currentPromo: RestaurantPromo): PromoForm => {
    if (currentPromo === null) {
      throw new Error("Attempting to select form data without a promo. Something's gone horribly wrong.");
    }

    const allShifts =
      currentPromo.creditCardDay === null ||
      !currentPromo.creditCardDay.startTime ||
      !currentPromo.creditCardDay.endTime;

    return promoFormDefaults({
      allShifts,
      amount: getAmount(currentPromo),
      days: getDays(currentPromo),
      endTime: getEndTime(currentPromo),
      inform: !!get(currentPromo, ['creditCardDay', 'Specification']),
      message: get(currentPromo, ['promoRestaurant', 'message']) || '',
      requireCreditCard: currentPromo.creditCardDay !== null,
      startTime: getStartTime(currentPromo),
    });
  },
);
