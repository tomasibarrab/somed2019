import { cloneDeep, get } from 'lodash';
import { CampaignsType } from '../../store/campaigns/campaigns.types';
import {
  FlexiblePricingPageType,
  FlexiblePricingState,
  PricingInfo,
  USD,
  VisibilitySettings,
  VisibilitySettingsResponse,
} from './flexiblepricing.types';

const makePricingInfo = (hasReducePrices: boolean, hasFlatFee: boolean): PricingInfo => {
  return {
    currencyCode: 'USD',
    discovery: {
      covers: 633,
      currentPrice: {
        amount: 1.0,
        currencyCode: USD,
      },
      decreasePrice: hasReducePrices
        ? {
            amount: 0.75,
            currencyCode: USD,
          }
        : undefined,
      flexPrice: {
        amount: 1.5,
        currencyCode: USD,
      },
      increasePrice: {
        amount: 2.75,
        currencyCode: USD,
      },
    },
    month: '2018-07',
    otreso: {
      covers: 882,
      currentPrice: {
        amount: 1.0,
        currencyCode: USD,
      },
      flexPrice: {
        amount: 0.25,
        currencyCode: USD,
      },
    },
    restRef: {
      covers: 512,
      currentPrice: {
        amount: hasFlatFee ? 49 : 0.25,
        currencyCode: USD,
      },
      flatFee: hasFlatFee,
      flexPrice: {
        amount: 0.0,
        currencyCode: USD,
      },
    },
    system: {
      currentPrice: {
        amount: 199.0,
        currencyCode: 'USD',
      },
      flexPrice: {
        amount: 249.0,
        currencyCode: 'USD',
      },
    },
  };
};

// tslint:disable:object-literal-sort-keys
const visibilitySettings: VisibilitySettingsResponse = {
  rid: 268852,
  startDate: '2019-11-01',
  changedByUser: 'jest@example.com',
  restaurantContactName: 'Jest Tester',
  restaurantContactEmail: 'jest@example.com',
  currentVersion: 1,
  increase: {
    monthlyBudget: { amount: 200, currencyCode: USD },
    price: { amount: 2.75, currencyCode: USD },
    schedule: {
      friday: { morning: false, midDay: false, evening: false },
      monday: { morning: false, midDay: false, evening: false },
      saturday: { morning: false, midDay: false, evening: false },
      sunday: { morning: false, midDay: false, evening: false },
      thursday: { morning: false, midDay: false, evening: false },
      tuesday: { morning: false, midDay: false, evening: false },
      wednesday: { morning: false, midDay: false, evening: false },
    },
    suppressionDates: { custom: [], default: [] },
  },
  reduce: {
    price: { amount: 0.75, currencyCode: USD },
    schedule: {
      friday: { morning: false, midDay: false, evening: false },
      monday: { morning: false, midDay: false, evening: false },
      saturday: { morning: false, midDay: false, evening: false },
      sunday: { morning: false, midDay: false, evening: false },
      thursday: { morning: false, midDay: false, evening: false },
      tuesday: { morning: false, midDay: false, evening: false },
      wednesday: { morning: false, midDay: false, evening: false },
    },
  },
  standard: {
    price: { amount: 1.5, currencyCode: USD },
    schedule: {
      friday: { morning: false, midDay: false, evening: false },
      monday: { morning: false, midDay: false, evening: false },
      saturday: { morning: false, midDay: false, evening: false },
      sunday: { morning: false, midDay: false, evening: false },
      thursday: { morning: false, midDay: false, evening: false },
      tuesday: { morning: false, midDay: false, evening: false },
      wednesday: { morning: false, midDay: false, evening: false },
    },
  },
};
// tslint:enable:object-literal-sort-keys

export const mockDiscoveryPrices = {
  increase: {
    amount: 2.75,
    currencyCode: 'USD',
  },
  reduce: {
    amount: 0.75,
    currencyCode: 'USD',
  },
  standard: {
    amount: 1.5,
    currencyCode: 'USD',
  },
};

// tslint:disable:object-literal-sort-keys
export const makeMockActiveContractPrices = () => ({
  rid: 1234,
  currencyCode: 'USD',
  restref: 0.0,
  otreso: 0.35,
  discoveryReduced: 0.85,
  discoveryStandard: 1.6,
  discoveryIncreased: 3.1,
  systemFee: 259,
});

interface MockStateOptions {
  campaigns?: CampaignsType;
  formVisibilitySettings?: any;
  existingSettings?: VisibilitySettingsResponse;
  featureToggles?: any;
  hasFlatFee?: boolean;
}

const makeMockState: any = (options?: MockStateOptions) => {
  const currentContext: any = {
    restaurant: { name: 'Rojo Gusano' },
    user: {
      firstName: 'Jest',
      lastName: 'Example',
      userName: 'jest@example.com',
    },
  };

  const { featureToggles: featureToggleOptions, ...restOfOptions } = options || { featureToggles: {} };
  const featureTogglesWithDefaults = {
    features: {
      ...get(featureToggleOptions, 'features', {}),
    },
  };

  const optsWithDefaults = {
    campaigns: {
      data: [],
    },
    existingSettings: cloneDeep(visibilitySettings),
    hasFlatFee: false,
    hasReducePrices: true,
    ...restOfOptions,
  };

  const flexiblePricing: FlexiblePricingState = {
    activeContract: {
      data: makeMockActiveContractPrices(),
      loading: false,
    },
    appInitialized: true,
    formVisibilitySettings: optsWithDefaults.formVisibilitySettings,
    pageType: FlexiblePricingPageType.VisibilitySettings,
    pricingInfo: {
      data: makePricingInfo(optsWithDefaults.hasReducePrices, optsWithDefaults.hasFlatFee),
      loading: false,
    },
    sendingSettings: false,
    visibilitySettings: {
      data: optsWithDefaults.existingSettings,
      loading: false,
    },
  };

  const state: any = {
    campaigns: optsWithDefaults.campaigns,
    currentContext,
    featureToggles: featureTogglesWithDefaults,
    flexiblePricing,
  };

  return state;
};

export default makeMockState;
