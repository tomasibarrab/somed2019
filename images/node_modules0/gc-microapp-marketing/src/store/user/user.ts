import { selectors } from 'gca-react-components/src/redux-modules/currentContext';
import { Action, actionCreatorFactory, Success } from 'typescript-fsa';
import { reducerWithInitialState } from 'typescript-fsa-reducers';
import '../commonRxjs';
import { Epic, State, Store } from '../types';
import { User, UserDTO } from './user.types';

// --------------------------------- //
// Actions
// --------------------------------- //

const actionCreator = actionCreatorFactory('USER');

export const fetchUser = actionCreator.async<{}, UserDTO>('FETCH');

export const userSelector = (state: State): Partial<User> => {
  const email = state.currentContext.user.userName;
  const { firstName, lastName, phone } = state.user;
  return { firstName, lastName, phone, email };
};

// --------------------------------- //
// Reducer
// --------------------------------- //

export const initialState: User = {
  email: '',
  error: false,
  firstName: '',
  lastName: '',
  loading: false,
  phone: '',
  success: false,
};

export const reducer = reducerWithInitialState(initialState)
  .case(fetchUser.started, state => ({ ...state, loading: true }))
  .case(fetchUser.done, (state, { result }) => ({
    ...state,
    email: result.email,
    firstName: result.firstName,
    lastName: result.lastName,
    loading: false,
    phone: result.phone,
    success: true,
  }))
  .case(fetchUser.failed, state => ({
    ...state,
    email: '',
    error: true,
    firstName: '',
    lastName: '',
    loading: false,
    phone: '',
  }));

// --------------------------------- //
// Epics
// --------------------------------- //

export const fetchUserEpic: Epic = (action$, store, { api }) =>
  action$.ofType(fetchUser.started.type).switchMap(() => {
    const state = store.getState();
    const rid = selectors.rid(state);
    const email = selectors.user(state).userName;
    return api
      .fetchUser({ rid, email })
      .map((response: UserDTO) => fetchUser.done({ params: {}, result: response }))
      .catch(() => [fetchUser.failed({ params: {}, error: {} })]);
  });
