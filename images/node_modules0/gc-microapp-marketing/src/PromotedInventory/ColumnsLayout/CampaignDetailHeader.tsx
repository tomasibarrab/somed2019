import { Chevron } from 'gca-react-components';
import { selectors as featureToggleSelectors } from 'gca-react-components/src/redux-modules/featureToggles';
import moment from 'moment';
import React, { SFC } from 'react';
import { FormattedMessage } from 'react-intl';
import { connect } from 'react-redux';
import { BadgeType, CampaignState, CampaignTypes, Pages } from '../../store/campaigns/campaigns.types';
import { VisibilityType } from '../../store/flexiblepricing/flexiblepricing.types';
import { State } from '../../store/types';
import { endingSoonDaysCount } from '../constants';
import RelativeTimeBadge from './RelativeTimeBadge';
interface CampaignDetailHeaderProps {
  flexiblePricingVisibility?: string | undefined;
  incentives: any[];
  isShortTerm: boolean;
  state: CampaignState;
  type: CampaignTypes;
  startDate: string;
  endDate?: string;
  pauseUntil?: string;
  isOpen: boolean;
  pageType: Pages;
}

const isSpecialOrOffer = (type: CampaignTypes): boolean =>
  type === CampaignTypes.Special || type === CampaignTypes.LegacyPromotedOffer;

const CampaignDetailHeader: SFC<CampaignDetailHeaderProps> = ({
  flexiblePricingVisibility,
  incentives,
  isShortTerm,
  state,
  type,
  startDate,
  endDate,
  pauseUntil,
  isOpen,
  pageType,
}) => {
  const color = state === CampaignState.Ended || state === CampaignState.Discarded ? '#ccc' : undefined;
  let badgeType;
  let date;
  if (state === CampaignState.Paused && pauseUntil) {
    badgeType = BadgeType.Resuming;
    date = moment(pauseUntil);
  }
  if (state === CampaignState.Live && endDate && startDate !== endDate) {
    date = moment(endDate).add(1, 'day');
    /* The campaign end date is inclusive. To get the correct
    relative measurement, we use the start of the next day. */
    /* Should not have to worry about now being after
     end since the campaign will auto-terminate */
    if (
      moment()
        .add(endingSoonDaysCount, 'days')
        .isAfter(date)
    ) {
      badgeType = BadgeType.Ending;
    }
  }

  let headerTitle = (
    <FormattedMessage
      tagName="h3"
      id={`guestcampaigns.list.${isShortTerm ? 'short_term_promoted_results' : 'promoted_results'}`}
    />
  );
  if (isSpecialOrOffer(type)) {
    const name = incentives[0].offerTypeName;
    headerTitle = <h3>{name}</h3>;
  }
  if (type === CampaignTypes.CustomPromotions) {
    headerTitle = (
      <FormattedMessage
        tagName="h3"
        id={`guestcampaigns.list.${isShortTerm ? 'short_term_custom_promotions' : 'custom_promotions'}`}
      />
    );
  }
  if (pageType === Pages.FlexiblePricing) {
    let title = 'guestcampaigns.list.flexible_pricing';
    if (flexiblePricingVisibility) {
      title = `${title}.${flexiblePricingVisibility}_exposure`;
    }
    headerTitle = <FormattedMessage tagName="h3" id={title} />;
  }

  return (
    <>
      <div>{headerTitle}</div>
      <div>{/* intentionally empty */}</div>
      <div>{badgeType && date && <RelativeTimeBadge badgeType={badgeType} time={date.toDate()} />}</div>
      <div>
        <span className="toggle">
          <Chevron direction={isOpen ? 'up' : 'down'} />
        </span>
      </div>
    </>
  );
};

export default CampaignDetailHeader;
