import React from 'react';

import { actions } from '../../store/campaigns/campaigns';
import {
    CampaignGroup, CampaignState, CampaignType, OpenModalPayload, Pages, PatchActionPayload,
    Recommendation,
} from '../../store/campaigns/campaigns.types';
import campaignActions from '../CampaignsList/campaign-actions';
import { copiedLinkTimeout } from '../constants';
import CampaignDetail from './CampaignDetail';
import RecommendedDetail from './RecommendedDetail';

interface OP {
  actions: any;
  campaign: CampaignType;
  defaultApprovalMessage: Recommendation;
  group: string;
  titleId: string;
  openModal: (payload: OpenModalPayload) => void;
  getCredits: (payload: any) => void;
  patchCampaignRequest: (payload: PatchActionPayload) => void;
  currentUserEmail: string;
  pageType: Pages;
  clickCallToAction: typeof actions.clickCallToAction;
}

type Props = OP;

interface State {
  hasJustCopied: boolean;
  isOpen: boolean;
}

class Campaign extends React.Component<Props, State> {
  public state = {
    hasJustCopied: false,
    isOpen:
      typeof window.location.hash === 'string' && this.props.campaign.campaignId === window.location.hash.slice(1),
  };

  public render() {
    const {
      campaign,
      clickCallToAction,
      currentUserEmail,
      defaultApprovalMessage,
      getCredits,
      openModal,
      pageType,
      ...rest
    } = this.props;
    const { hasJustCopied } = this.state;
    const isOpen = this.isPending() || this.state.isOpen;

    // TODO: switch type for specials and PR
    return this.props.group === CampaignGroup.Recommended ? (
      <RecommendedDetail
        campaign={campaign}
        openModal={openModal}
        recommendation={campaign.recommendation || defaultApprovalMessage}
        handleClick={() => this.handleClick(campaign.campaignId)}
        currentUserEmail={currentUserEmail}
        pageType={pageType}
        clickCallToAction={clickCallToAction}
      />
    ) : (
      <CampaignDetail
        {...rest}
        campaign={campaign}
        currentUserEmail={currentUserEmail}
        openModal={openModal}
        isOpen={isOpen}
        hasJustCopied={hasJustCopied}
        handleClick={() => this.handleClick(campaign.campaignId)}
        handleCopyLink={() => this.handleCopyLink(campaign.campaignId)}
        pageType={pageType}
        getCredits={getCredits}
      />
    );
  }

  public componentDidMount() {
    const hash = window.location.hash;
    const id = window.location.hash.replace('#', '');
    if (hash && document.getElementById(id) && document.getElementById(id).scrollIntoView) {
      document.getElementById(id).scrollIntoView();
    }
  }

  private handleClick = (campaignId: string) => {
    const isOpen = !this.state.isOpen;
    if (isOpen) {
      window.location.hash = `#${campaignId}`;
    } else {
      window.location.hash = '#';
    }
    this.setState({
      isOpen,
    });
  };

  private handleCopyLink = (campaignId: string) => {
    this.setState({
      hasJustCopied: true,
    });
    setTimeout(() => {
      this.setState({
        hasJustCopied: false,
      });
    }, copiedLinkTimeout);
    campaignActions.handleCopyLink(campaignId);
  };

  private isPending = () => this.props.campaign.state === CampaignState.Draft;
}

export default Campaign;
export { Campaign };
