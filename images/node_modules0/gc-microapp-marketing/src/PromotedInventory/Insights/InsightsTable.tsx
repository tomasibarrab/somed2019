import { orderBy } from 'lodash';
import React, { PureComponent } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { HashLink } from 'react-router-hash-link';

import { ashLighter, teal } from '../../../../../node_modules/otkit-colors/token.common';
import OTKitIcon from '../../PromotedInventory/FlexiblePricing/Shared/OTKitIcon';
import { AugmentedCampaignType } from '../../store/insights/insights.types';
import { getCampaignDetails } from '../../store/insights/selectors';
import { State } from '../../store/types';
import DateRange from './common/DateRange/DateRange';
import convertStringsToDisplayFormat from './helpers/convertStringsToDisplayFormat';
import InsightsExportButton from './InsightsExportButton';
import styles from './InsightsTable.module.css';

interface DisplayValues {
  covers: string;
  daysAndTimes: string;
  firstTimeGuests: string;
  outOfTownGuests: string;
  price: string;
  totalSpend: string;
  type: string;
  startDate: string;
  endDate: string;
  uuidCampaignId: string;
}

export interface FormattedCampaign {
  className: string;
  covers: number;
  daysAndTimes: string;
  displayValues: DisplayValues;
  endDate: string;
  firstTimeGuests: number;
  link: string;
  outOfTownGuests: number;
  price: number;
  startDate: string;
  totalSpend: number;
  type: string;
}

interface IState {
  columnSelected: string;
  isColumnDescending: boolean;
  isGuestColumnsEnabled: boolean;
}

interface SP {
  campaigns?: AugmentedCampaignType[];
}

type Props = SP & InjectedIntlProps;

class InsightsTable extends PureComponent<Props, IState> {
  constructor(props) {
    super(props);

    this.state = {
      columnSelected: 'covers',
      isColumnDescending: true,
      isGuestColumnsEnabled: false,
    };
  }

  public render() {
    const { campaigns, intl } = this.props;
    const { columnSelected, isColumnDescending } = this.state;
    const { grid, gridWithGuestCovers } = styles;

    const converted = convertStringsToDisplayFormat(campaigns, intl);
    const formattedTotals = converted.formattedTotals;
    let orderByValue = columnSelected;
    if (columnSelected === 'type') {
      orderByValue = 'displayValues.type';
    }
    const formattedCampaigns = orderBy(converted.formattedCampaigns, orderByValue, isColumnDescending ? 'desc' : 'asc');

    const gridClassNames = [grid];
    if (this.state.isGuestColumnsEnabled) {
      gridClassNames.push(gridWithGuestCovers);
    }

    let columns = [
      {
        id: 'type',
        isLeft: true,
        isOffsetLeft: true,
        name: intl.formatMessage({ id: 'insights.table.campaign_type' }),
      },
      { id: 'price', name: intl.formatMessage({ id: 'insights.table.price' }) },
      { id: 'startDate', name: intl.formatMessage({ id: 'insights.table.start_date' }), isLeft: true },
      { id: 'endDate', name: intl.formatMessage({ id: 'insights.table.end_date' }), isLeft: true },
      {
        id: 'daysAndTimes',
        isLeft: true,
        name: intl.formatMessage({ id: 'insights.table.days_and_times' }),
        noSort: true,
      },
      { id: 'totalSpend', name: intl.formatMessage({ id: 'insights.table.total_spend' }) },
      { id: 'covers', name: intl.formatMessage({ id: 'insights.table.covers' }) },
    ];

    if (this.state.isGuestColumnsEnabled) {
      columns = columns.concat([
        { id: 'firstTimeGuests', name: 'First time guests' },
        { id: 'outOfTownGuests', name: 'Out-of-town guests' },
      ]);
    }

    return (
      <>
        <FormattedMessage id="insights.dashboard.title.ot_discovery_breakdown" tagName="h3" />
        <header>
          <DateRange />
          {formattedCampaigns && formattedCampaigns.length > 0 && (
            <InsightsExportButton
              formattedCampaigns={formattedCampaigns as []}
              formattedTotals={formattedTotals}
              isGuestColumnsEnabled={this.state.isGuestColumnsEnabled}
              columns={columns}
              intl={intl}
            />
          )}
        </header>
        {formattedCampaigns && formattedCampaigns.length > 0 ? (
          <ul className={gridClassNames.join(' ')}>
            {this.buildHeaderCells(columns)}
            {this.buildGridRows(formattedCampaigns as [], formattedTotals)}
          </ul>
        ) : (
          <div>
            <FormattedMessage id="insights.dashboard.graph.no_data_for_range" tagName="p" />
          </div>
        )}
      </>
    );
  }

  private buildHeaderCells(columns) {
    const { cell, cellEllipsis, cellLeft, cellHead, cellNoHover, cellOffsetLeft } = styles;

    const newColumns = columns.map(column => {
      const { id, name, isLeft, noSort, isOffsetLeft } = column;
      const classNames = [cell, this.setActiveColumn(id)];

      if (isLeft) {
        classNames.push(cellLeft);
      }

      if (noSort) {
        classNames.push(cellNoHover);
      }

      if (isOffsetLeft) {
        classNames.push(cellOffsetLeft);
      }

      return (
        <li key={id} className={cellHead} title={name}>
          <strong className={classNames.join(' ')} onClick={() => this.sorting(id)}>
            <span className={cellEllipsis}>{name}</span>
            {id !== 'daysAndTimes' && this.sortingArrows(id)}
          </strong>
        </li>
      );
    });

    return newColumns;
  }

  private setActiveColumn(columnType) {
    const { cellActive } = styles;
    const isActive = this.state.columnSelected === columnType;
    return isActive ? cellActive : '';
  }

  private sorting(columnType: string, isColumnDescending?: boolean) {
    if (columnType === 'daysAndTimes') {
      return;
    }

    let isDescending = !this.state.isColumnDescending;

    if (this.state.columnSelected !== columnType) {
      isDescending = true;
    }

    if (typeof isColumnDescending === 'boolean') {
      isDescending = isColumnDescending;
    }

    this.setState({
      columnSelected: columnType,
      isColumnDescending: isDescending,
    });
  }

  private sortingArrows(columnType: string) {
    const { sorting, sortingArrow } = styles;
    const arrowColor = this.state.columnSelected === columnType ? teal : ashLighter;

    return (
      <span className={sorting}>
        {(!this.state.isColumnDescending || this.state.columnSelected !== columnType) && (
          <a
            className={sortingArrow}
            onClick={event => {
              event.stopPropagation();
              this.sorting(columnType, true);
            }}
          >
            <OTKitIcon name="icUp" key="icUp" fill={arrowColor} />
          </a>
        )}
        {(this.state.isColumnDescending || this.state.columnSelected !== columnType) && (
          <a
            className={sortingArrow}
            onClick={event => {
              event.stopPropagation();
              this.sorting(columnType, false);
            }}
          >
            <OTKitIcon name="icDown" key="icDown" fill={arrowColor} />
          </a>
        )}
      </span>
    );
  }

  private buildGridRows(formattedCampaigns: FormattedCampaign[], formattedTotals: {}) {
    const { cell, cellCampaign, cellEllipsis, cellLeft, cellOffsetLeft } = styles;

    const gridRow = formattedCampaigns.map((row: FormattedCampaign, index) => {
      const {
        className,
        displayValues: {
          covers,
          daysAndTimes,
          endDate,
          firstTimeGuests,
          outOfTownGuests,
          price,
          startDate,
          totalSpend,
          type,
        },
        link,
      } = row;

      return (
        <React.Fragment key={index}>
          <li className={[cell, cellLeft, cellCampaign, className].join(' ')} title={type}>
            <span className={cellEllipsis}>{link ? <HashLink to={link}>{type}</HashLink> : type}</span>
          </li>
          <li className={cell} title={price}>
            <span className={cellEllipsis}>{price}</span>
          </li>
          <li className={[cell, cellLeft].join(' ')} title={startDate}>
            <span className={cellEllipsis}>{startDate}</span>
          </li>
          <li className={[cell, cellLeft].join(' ')} title={endDate}>
            <span className={cellEllipsis}>{endDate}</span>
          </li>
          <li className={[cell, cellLeft].join(' ')} title={daysAndTimes}>
            <span className={cellEllipsis}>{daysAndTimes}</span>
          </li>
          <li className={cell} title={totalSpend}>
            <span className={cellEllipsis}>{totalSpend}</span>
          </li>
          <li className={cell} title={covers}>
            <span className={cellEllipsis}>{covers}</span>
          </li>
          {this.state.isGuestColumnsEnabled && (
            <>
              <li className={cell} title={firstTimeGuests}>
                <span className={cellEllipsis}>{firstTimeGuests}</span>
              </li>
              <li className={cell} title={outOfTownGuests}>
                <span className={cellEllipsis}>{outOfTownGuests}</span>
              </li>
            </>
          )}
        </React.Fragment>
      );
    });

    const { sumCovers, sumFirstTimeGuests, sumOutOfTownGuests, sumTotalSpend } = formattedTotals as any;

    const totalsRow = (
      <React.Fragment key="totalsRow">
        <li className={[cell, cellLeft, cellOffsetLeft].join(' ')}>
          <FormattedMessage id="insights.table.total" tagName="strong" />
        </li>
        <li className={cell} />
        <li className={cell} />
        <li className={cell} />
        <li className={cell} />
        <li className={cell}>
          <strong>{sumTotalSpend}</strong>
        </li>
        <li className={cell}>
          <strong>{sumCovers}</strong>
        </li>
        {this.state.isGuestColumnsEnabled && (
          <>
            <li className={cell}>
              <strong>{sumFirstTimeGuests}</strong>
            </li>
            <li className={cell}>
              <strong>{sumOutOfTownGuests}</strong>
            </li>
          </>
        )}
      </React.Fragment>
    );

    return [gridRow, totalsRow];
  }
}

const mapStateToProps = (state: State): SP => {
  return {
    campaigns: getCampaignDetails(state),
  };
};

export default connect<SP, {}, {}>(mapStateToProps)(injectIntl(InsightsTable));
