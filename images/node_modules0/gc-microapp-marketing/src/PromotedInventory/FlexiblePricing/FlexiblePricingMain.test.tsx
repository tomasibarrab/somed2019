import { mount, shallow } from 'enzyme';
import React from 'react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { FlexiblePricingPageType } from '../../store/flexiblepricing/flexiblepricing.types';
import makeMockState from '../../store/flexiblepricing/makeMockState';
import FlexiblePricingMain from './FlexiblePricingMain';

jest.mock('./VisibilitySettings/VisibilitySettings', () => () => 'VisibilitySettingsMock');
jest.mock('./Summary/Summary', () => () => 'SummaryMock');
jest.mock('./Success/Success', () => () => 'SuccessMock');

describe('FlexiblePricingMain', () => {
  const scenarios = [
    {
      description: 'shows VisibilitySettings when pageType is VisibilitySettings',
      expected: 'VisibilitySettingsMock',
      pageType: FlexiblePricingPageType.VisibilitySettings,
    },
    {
      description: 'shows Summary when pageType is Summary',
      expected: 'SummaryMock',
      pageType: FlexiblePricingPageType.Summary,
    },
    {
      description: 'shows Success when pageType is SuccessRevert',
      expected: 'SuccessMock',
      pageType: FlexiblePricingPageType.SuccessRevert,
    },
    {
      description: 'shows Success when pageType is SuccessSignup',
      expected: 'SuccessMock',
      pageType: FlexiblePricingPageType.SuccessSignup,
    },
  ];

  scenarios.forEach(({ description, pageType, expected }) => {
    it(description, () => {
      const state = makeMockState();

      state.flexiblePricing.pageType = pageType;
      const store = configureMockStore([])(state);

      const component = mount(
        <Provider store={store}>
          <FlexiblePricingMain />
        </Provider>,
      );

      expect(component.text()).toEqual(expected);
    });
  });
});
