import clipboard from 'clipboard-polyfill';
import { Panel } from 'gca-react-components';
import { Button } from 'gca-react-components/src/components/Button/Button';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { copiedLinkTimeout } from '../constants';

interface State {
  hasError: boolean;
}

interface OP {
  hasError?: boolean;
}

type Props = OP & InjectedIntlProps;

class ErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
    };
  }

  public componentDidCatch(error: any, info: any) {
    // You can also log the error to an error reporting service
    // logErrorToMyService(error, info);
    this.setState({
      hasError: true,
    });
  }

  public render() {
    if (this.state.hasError || this.props.hasError) {
      // You can render any custom fallback UI
      const { formatMessage } = this.props.intl;
      return (
        <Panel title={formatMessage({ id: 'flexiblepricing.errorboundary.error' })}>
          <FormattedMessage tagName="h2" id="flexiblepricing.errorboundary.something_went_wrong" />
          <FormattedMessage
            tagName="h2"
            id="flexiblepricing.errorboundary.if_persists"
            values={{
              contactLink: (
                <a href={formatMessage({ id: 'flexiblepricing.errorboundary.support_link' })}>
                  {formatMessage({ id: 'flexiblepricing.errorboundary.contact_support' })}
                </a>
              ),
            }}
          />
        </Panel>
      );
    }

    return this.props.children;
  }
}

export default injectIntl<OP>(ErrorBoundary);
