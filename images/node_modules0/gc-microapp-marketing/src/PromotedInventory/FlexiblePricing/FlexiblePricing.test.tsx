import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import configureMockStore from 'redux-mock-store';
import { State } from '../../store/types';
import { keys } from '../../translations/bundles/marketing.json';
import FlexiblePricing, { Routes } from './FlexiblePricing';

jest.mock('./LandingPage/LandingPage', () => () => 'LandingPageMock');

describe('<FlexiblePricing />', () => {
  const state: Partial<State> = {
    flexiblePricing: {
      activeContract: {
        data: {},
        error: false,
      },
      pricingInfo: {
        data: {},
        error: false,
      },
      visibilitySettings: {
        data: {},
        error: false,
      },
    },
  };

  const props = {
    match: {
      url: Routes.LandingPage,
    },
  };

  it('should show LandingPage as default component', () => {
    const store = configureMockStore()(state);
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en" messages={keys}>
          <MemoryRouter>
            <FlexiblePricing {...props as any} />
          </MemoryRouter>
        </IntlProvider>
      </Provider>,
    );

    expect(wrapper.find('LandingPageMock')).toBeTruthy();
  });

  it('should show error boundary if state has error', () => {
    const stateWithError = {
      flexiblePricing: {
        pricingInfo: {
          data: {},
          error: true,
        },
        visibilitySettings: {
          data: {},
          error: false,
        },
      },
    };

    const store = configureMockStore()(stateWithError);
    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en" messages={keys}>
          <MemoryRouter>
            <FlexiblePricing {...props as any} />
          </MemoryRouter>
        </IntlProvider>
      </Provider>,
    );

    expect(wrapper.debug()).toMatchSnapshot();
  });
});
