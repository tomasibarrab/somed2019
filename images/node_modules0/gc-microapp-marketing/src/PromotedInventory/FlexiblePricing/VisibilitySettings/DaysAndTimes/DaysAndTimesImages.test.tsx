import DaysAndTimesImages from './DaysAndTimesImages';

import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { createEmptyFormSettings } from '../../../../store/flexiblepricing/createEmptyFormSettings';
import { VisibilityType } from '../../../../store/flexiblepricing/flexiblepricing.types';
import makeMockState, { mockDiscoveryPrices } from '../../../../store/flexiblepricing/makeMockState';
import { keys } from '../../../../translations/bundles/marketing.json';

const renderComponent = (props: any, state: any) => {
  const store = configureMockStore([])(state);
  return {
    store,
    wrapper: mount(
      <Provider store={store}>
        <IntlProvider messages={keys} locale="en-US">
          <DaysAndTimesImages {...props} />
        </IntlProvider>
      </Provider>,
    ),
  };
};

describe('<DaysAndTimesImages />', () => {
  test('it matches snapshot', () => {
    const state = makeMockState({
      formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
    });
    const { wrapper } = renderComponent({ visibilityType: VisibilityType.Increase }, state);
    expect(wrapper.debug()).toMatchSnapshot();
  });

  test('click to select day, select time, action dispatched to add time', () => {
    const state = makeMockState({
      formVisibilitySettings: createEmptyFormSettings(mockDiscoveryPrices),
    });
    const { wrapper, store } = renderComponent({ visibilityType: VisibilityType.Increase }, state);

    let tuesday = wrapper.find('[day="tuesday"]');
    expect(tuesday.prop('selected')).toEqual(false);

    tuesday.find('div.day-label-container').simulate('click');

    wrapper.update();

    tuesday = wrapper.find('[day="tuesday"]');
    expect(tuesday.prop('selected')).toEqual(true);

    const midDay = wrapper.find('[time="midDay"]');

    const checkbox = midDay
      .find('Time')
      .childAt(0)
      .childAt(0);

    checkbox.prop('onClick')();

    const actions = store.getActions();
    expect(actions.pop()).toMatchSnapshot();
  });

  test('selected day w/ times has check in day bar, deselect time, action dispatched to remove time', () => {
    const mockFormSettings = createEmptyFormSettings(mockDiscoveryPrices);
    mockFormSettings.reduce.schedule.wednesday.evening = true;
    const state = makeMockState({
      formVisibilitySettings: mockFormSettings,
    });
    const { wrapper, store } = renderComponent({ visibilityType: VisibilityType.Reduce }, state);

    const wednesday = wrapper.find('[day="wednesday"]');
    expect(wednesday.prop('selected')).toEqual(false);
    expect(wednesday.find('span.check-icon').length).toEqual(1);

    wednesday.find('div.day-label-container').simulate('click');

    const thursday = wrapper.find('[day="thursday"]');
    expect(thursday.find('span.check-icon').length).toEqual(0);
    wrapper.update();

    const evening = wrapper.find('[time="evening"]');

    const checkbox = evening
      .find('Time')
      .childAt(0)
      .childAt(0);

    checkbox.prop('onClick')();

    const actions = store.getActions();
    expect(actions.pop()).toMatchSnapshot();
  });
});
