import { get } from 'lodash';
import moment from 'moment';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect, MapDispatchToPropsFunction } from 'react-redux';
import { FormSection } from 'redux-form';
import { createEmptySchedule } from '../../../../store/flexiblepricing/createEmptyFormSettings';
import { setDayAndTimeForVisibilityType } from '../../../../store/flexiblepricing/flexiblepricing';
import {
  Days,
  Times as TimesType,
  VisibilitySchedule,
  VisibilityType,
} from '../../../../store/flexiblepricing/flexiblepricing.types';
import { getFormVisibilitySettings } from '../../../../store/flexiblepricing/selectors';
import { State } from '../../../../store/types';
import OTKitIcon from '../../Shared/OTKitIcon';
import './DaysAndTimes.scss';
import ImageDay from './ImageDay';
import Times from './Times';
import { SetDayAndTime, SetTime } from './types';

interface ComponentState {
  selected: Days;
}

interface SP {
  schedule: VisibilitySchedule;
}

interface DP {
  setDayAndTime: SetDayAndTime;
}

interface OP {
  visibilityType: VisibilityType;
}

type Props = SP & DP & OP & InjectedIntlProps;

class DaysAndTimesImages extends Component<Props, ComponentState> {
  private setTime: { [day in Days]: SetTime };

  constructor(props: Props) {
    super(props);
    this.state = {
      selected: Days.Sunday,
    };

    this.setTime = Object.values(Days).reduce(
      (acc: any, day: Days) => ({
        ...acc,
        [day]: (time: TimesType, value: boolean) => {
          this.props.setDayAndTime(day, time, value);
        },
      }),
      {},
    );
  }

  public render() {
    const { selected } = this.state;
    const { schedule, setDayAndTime, visibilityType } = this.props;
    return (
      <div className="image-daypicker-variant">
        <div className="day-bar">
          <div className="day-container">
            {Object.values(Days).map((day: Days) => (
              <ImageDay
                daySchedule={get(schedule, day, {})}
                selected={selected === day}
                day={day}
                key={day}
                onClickDay={() => this.onClickDay(day)}
              />
            ))}
          </div>
        </div>
        <div>
          <Times
            selectedIcon={
              <OTKitIcon
                name={
                  /* When package-izing this we can move selectedIcon
                  up to be an OwnProp of DaysAndTimesImages, and remove
                  DaysAndTimesImages' knowledge of visibility type */
                  visibilityType === VisibilityType.Increase ? 'icMetricChangeUp' : 'icMetricChangeDown'
                }
                fill="white"
                iconSize="32px"
              />
            }
            selectedDay={selected}
            setTime={this.setTime[selected]}
            daySchedule={get(schedule, selected, {})}
          />
        </div>
      </div>
    );
  }

  private onClickDay(key: Days) {
    this.setState(prevState => ({
      selected: key,
    }));
  }
}

const mapStateToProps = (state: State, { visibilityType }: OP) => {
  const formVisSettings = getFormVisibilitySettings(state);
  const forThisType = formVisSettings![visibilityType];

  return {
    schedule: forThisType!.schedule,
  };
};

const mapDispatchToProps: MapDispatchToPropsFunction<DP, OP> = (dispatch, props) => {
  return {
    setDayAndTime: (day, time, value) => {
      dispatch(
        setDayAndTimeForVisibilityType({
          day,
          time,
          value,
          visibilityType: props!.visibilityType,
        }),
      );
    },
  };
};

export default connect<SP, DP, OP>(
  mapStateToProps,
  mapDispatchToProps,
)(injectIntl<SP & DP & OP>(DaysAndTimesImages));
