import './VisibilitySettings.scss';

import classNames from 'classnames';
import { Button, Checkbox, Panel } from 'gca-react-components';
import { FeatureToggles } from 'gca-react-components/src/redux-modules/featureToggles';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';

import {
    clearForm, clickOrInteract, setDayAndTimeForVisibilityType, setFormVisibilityLevelEnabled,
    setPageType,
} from '../../../store/flexiblepricing/flexiblepricing';
import {
    ActiveContractPrices, ButtonType, FlexiblePricingPageType,
    FormVisibilitySettings as FormVisibilitySettingsType, PlanType, Price, PriceByPlan, PricingInfo,
    VisibilitySettingsBackButtonType, VisibilityType, VisibilityTypePrices,
} from '../../../store/flexiblepricing/flexiblepricing.types';
import {
    getCurrencyCode, getExpectedDiscoveryPrices, getFormVisibilitySettings,
    getInUseDiscoveryPriceRange, getShownFlexPrices, getVisibilitySettingsBackButtonType,
} from '../../../store/flexiblepricing/selectors';
import { State } from '../../../store/types';
import { formatCurrency } from '../../CampaignsList/helpers/format-number-locale';
import { Routes } from '../FlexiblePricing';
import { EducationPageType } from '../LandingPage/EducationPage';
import Footer from '../Shared/Footer';
import Legend, { LegendType, PriceRange } from '../Shared/Legend';
import ModalLearnMore from '../Shared/ModalLearnMore';
import OTKitIcon from '../Shared/OTKitIcon';
import DaysAndTimesImages from './DaysAndTimes/DaysAndTimesImages';
import ModalWhyLessDiners from './ModalWhyLessDiners';
import MonthlyBudget from './MonthlyBudget';

interface SP {
  activeContractPrices: ActiveContractPrices;
  currencyCode: string;
  featureToggles: FeatureToggles;
  inUseDiscoveryRange: PriceRange;
  prices: VisibilityTypePrices;
  settings: FormVisibilitySettingsType;
  backButtonType: VisibilitySettingsBackButtonType;
}

interface DP {
  setPageType: typeof setPageType;
  setFormVisibilityLevelEnabled: typeof setFormVisibilityLevelEnabled;
  clearForm: typeof clearForm;
  clickOrInteract: typeof clickOrInteract;
}

type NonIntlProps = SP & DP;

type Props = InjectedIntlProps & NonIntlProps;

interface ComponentState {
  showLearnMore: boolean;
  showWhyLessDiners: boolean;
}

class VisibilitySettings extends Component<Props, ComponentState> {
  public state = {
    showLearnMore: false,
    showWhyLessDiners: false,
  };

  public render() {
    const {
      intl: { formatMessage },
      activeContractPrices,
      inUseDiscoveryRange,
    } = this.props;
    const { showLearnMore, showWhyLessDiners } = this.state;

    return (
      <Panel
        headerContent={this.headerButtons()}
        title={formatMessage({ id: 'flexiblepricing.visibilitysettings.panel_title' })}
      >
        <div>
          <section className="visibility-settings">
            <FormattedMessage id="flexiblepricing.visibilitysettings.title" tagName="h1" />
            <FormattedMessage id="flexiblepricing.visibilitysettings.description" tagName="p" />
            <Legend
              prices={activeContractPrices}
              inUseDiscoveryRange={inUseDiscoveryRange}
              type={LegendType.VisibilitySettings}
            />
          </section>
          {this.renderSections()}
          <Footer onClick={() => this.setState({ showLearnMore: !showLearnMore })} />
        </div>
        {showLearnMore && (
          <ModalLearnMore
            onConfirm={() => {
              this.setState({ showLearnMore: !showLearnMore });
            }}
          />
        )}
        {showWhyLessDiners && (
          <ModalWhyLessDiners
            onConfirm={() => {
              this.setState({ showWhyLessDiners: !showWhyLessDiners });
            }}
          />
        )}
      </Panel>
    );
  }

  private headerButtons() {
    let howManyChecked = 1;
    const {
      settings: {
        enable: { increase, reduce },
      },
      backButtonType,
    } = this.props;
    howManyChecked += increase ? 1 : 0;
    howManyChecked += reduce ? 1 : 0;

    const backButton = (
      <Button onClick={this.onClickBack} value={ButtonType.Back}>
        <FormattedMessage id="flexiblepricing.visibilitysettings.back" />
      </Button>
    );

    return (
      <aside className="visibility-settings header-buttons">
        {backButtonType === VisibilitySettingsBackButtonType.ToEducationPage ? (
          <Link to={`${Routes.LandingPage}?type=${EducationPageType.DiscoveryExplanation}`}>{backButton}</Link>
        ) : (
          backButton
        )}
        {howManyChecked === 1 && (
          <Button onClick={this.onClick} theme="primary" value={ButtonType.Skip}>
            <FormattedMessage id="flexiblepricing.visibilitysettings.skip" />
          </Button>
        )}
        {howManyChecked > 1 && (
          <Button onClick={this.onClick} theme="primary" value={ButtonType.Summary}>
            <FormattedMessage id="flexiblepricing.visibilitysettings.summary" />
          </Button>
        )}
      </aside>
    );
  }

  private onClickBack = (ev: any) => {
    const { backButtonType } = this.props;
    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: 'Back',
        page: 'Schedule Picker',
      },
    });
    if (backButtonType === VisibilitySettingsBackButtonType.ToSummaryPage) {
      this.props.clearForm();
      this.props.setPageType(FlexiblePricingPageType.Summary);
    }
  };

  private onClick = (ev: any) => {
    this.props.clickOrInteract({
      action: 'Click',
      props: {
        name: 'Summary',
        page: 'Schedule Picker',
      },
    });
    this.props.setPageType(FlexiblePricingPageType.Summary);
  };

  private getCheckboxValues(type: VisibilityType) {
    const {
      settings: {
        enable: { increase, reduce },
      },
    } = this.props;
    if (type === VisibilityType.Increase) {
      return {
        checked: increase,
        disabled: false,
      };
    }
    if (type === VisibilityType.Reduce) {
      return {
        checked: reduce,
        disabled: false,
      };
    }

    return {
      checked: true,
      disabled: true,
    };
  }

  private renderSections() {
    const {
      currencyCode,
      featureToggles: { features },
      prices,
      intl: { formatMessage },
    } = this.props;
    const { showWhyLessDiners } = this.state;

    const sections: any = [];
    Object.entries(prices)
      .filter(([key]) => {
        if (!features.featureGcaPiFlexiblePricingReduceVisibility && key === VisibilityType.Reduce) {
          return false;
        }
        return true;
      })
      .forEach(([key, value]) => {
        const checkbox = this.getCheckboxValues(key as VisibilityType);
        sections.push(
          <section className={classNames('visibility-settings', 'visibility-type', key.toLowerCase())} key={key}>
            {!checkbox.disabled && (
              <Checkbox
                checked={checkbox.checked}
                disabled={false}
                onClick={() => {
                  const { checked } = checkbox;
                  this.props.setFormVisibilityLevelEnabled({
                    value: !checked,
                    visibilityType: key as any,
                  });
                }}
              />
            )}
            <article>
              <FormattedMessage
                id="flexiblepricing.visibilitysettings.type_visibility"
                tagName="h2"
                values={{ type: formatMessage({ id: `flexiblepricing.visibilitysettings.${key}.typename` }) }}
              />
              <FormattedMessage
                id={`flexiblepricing.visibilitysettings.description.${key.toLowerCase()}`}
                tagName="p"
              />
              {key === VisibilityType.Reduce && (
                <p className="why">
                  <OTKitIcon name="icQuestion" />{' '}
                  <Button
                    onClick={() => this.setState({ showWhyLessDiners: !showWhyLessDiners })}
                    theme="link"
                    value={ButtonType.WhyLessDiners}
                  >
                    <FormattedMessage id="flexiblepricing.visibilitysettings.why_less_diners" />
                  </Button>
                </p>
              )}
              {key !== VisibilityType.Standard && (
                <section className={classNames('section')}>
                  <DaysAndTimesImages visibilityType={key as VisibilityType} />
                  {key === VisibilityType.Increase && <MonthlyBudget />}
                  {!checkbox.checked && <div className="overlay" />}
                </section>
              )}
            </article>
            <FormattedMessage
              id="flexiblepricing.educationpage.common.price_per_cover"
              tagName="h3"
              values={{
                price: formatCurrency(value.amount, currencyCode),
              }}
            />
          </section>,
        );
      });
    return sections;
  }
}

const mapStateToProps = (state: State) => ({
  activeContractPrices: getShownFlexPrices(state),
  backButtonType: getVisibilitySettingsBackButtonType(state),
  currencyCode: getCurrencyCode(state),
  featureToggles: state.featureToggles,
  inUseDiscoveryRange: getInUseDiscoveryPriceRange(state),
  prices: getExpectedDiscoveryPrices(state),
  settings: getFormVisibilitySettings(state)!,
});

const mapDispatch = {
  clearForm,
  clickOrInteract,
  setFormVisibilityLevelEnabled,
  setPageType,
};

export default connect<SP, DP, {}>(
  mapStateToProps,
  mapDispatch,
)(injectIntl<NonIntlProps>(VisibilitySettings));
