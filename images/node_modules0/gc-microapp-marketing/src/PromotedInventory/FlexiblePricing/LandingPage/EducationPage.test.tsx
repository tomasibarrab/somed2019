import { mount } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import configureMockStore from 'redux-mock-store';
import makeMockState from '../../../store/flexiblepricing/makeMockState';
import { keys } from '../../../translations/bundles/marketing.json';
import findAndClick from '../findAndClick';
import EducationPage, { EducationPageType } from './EducationPage';

jest.mock('./EducationPages/BillDetailContent');
jest.mock('./EducationPages/DiscoveryExplanationContent', () => () => 'DiscoveryExplanationContentMock');
jest.mock('./EducationPages/IntroPricesContent', () => () => 'IntroPricesContentMock');

const enum TestId {
  btnNext = 'btnNext',
  btnPrevious = 'btnPrevious',
}

describe('<EducationPage />', () => {
  describe('IntroPrices', () => {
    it('shows "save up to" string when difference >= 1', () => {
      const state = makeMockState();
      const store = configureMockStore()(state);

      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <MemoryRouter>
              <EducationPage type={EducationPageType.IntroPrices} />
            </MemoryRouter>
          </IntlProvider>
        </Provider>,
      );

      expect(wrapper.find(`.${EducationPageType.IntroPrices}`).length).toEqual(1);
      expect(wrapper.find(EducationPage)).toMatchSnapshot();
    });

    it('shows "optimize your covers" string when difference < 1', () => {
      const state = makeMockState();
      state.flexiblePricing.pricingInfo.data.discovery.covers = 9999;
      const store = configureMockStore()(state);

      const wrapper = mount(
        <Provider store={store}>
          <IntlProvider locale="en-US" messages={keys}>
            <MemoryRouter>
              <EducationPage type={EducationPageType.IntroPrices} />
            </MemoryRouter>
          </IntlProvider>
        </Provider>,
      );

      expect(wrapper.find(`.${EducationPageType.IntroPrices}`).length).toEqual(1);
      expect(wrapper.find(EducationPage)).toMatchSnapshot();
    });
  });
});
