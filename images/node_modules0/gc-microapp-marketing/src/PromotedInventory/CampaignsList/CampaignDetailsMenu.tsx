import { EllipsisIcon } from 'gca-react-components';
import React, { Component, SFC } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import {
  CampaignState,
  CampaignType,
  CampaignTypes,
  OpenModalPayload,
  PatchActionPayload,
} from '../../store/campaigns/campaigns.types';
import campaignActions from './campaign-actions';

interface State {
  isOpen: boolean;
}

interface OP {
  campaign: CampaignType;
  openModal: (payload: OpenModalPayload) => void;
  patchCampaignRequest: (payload: PatchActionPayload) => void;
}

interface MenuProps {
  campaign: CampaignType;
  actions: any;
  openModal: (payload: OpenModalPayload) => void;
  patchCampaignRequest: (payload: PatchActionPayload) => void;
  setMenuRef: any;
}

const Menu: SFC<MenuProps & InjectedIntlProps> = ({
  actions: { handleCopyLink, handleEnd, handlePause, handleResume },
  campaign,
  setMenuRef,
  intl: { formatMessage },
  openModal,
  patchCampaignRequest,
}) => {
  const { state, isShortTerm, type, campaignId } = campaign;
  const menuItems = [];
  if (state === CampaignState.Live) {
    if (isShortTerm || type === CampaignTypes.Special) {
      menuItems.push(
        <li onClick={() => handleEnd(campaign, openModal)} key="a">
          {formatMessage({ id: 'guestcampaigns.list.end_campaign' })}
        </li>,
      );
    } else {
      menuItems.push(
        <li onClick={() => handlePause(campaign, openModal)} key="b">
          {formatMessage({ id: 'guestcampaigns.list.pause_campaign' })}
        </li>,
      );
    }
  }

  return (
    <ul ref={ref => setMenuRef(ref)}>
      {menuItems}
      {state === CampaignState.Paused && (
        <li onClick={() => handleResume(campaignId, patchCampaignRequest)}>
          {formatMessage({ id: 'guestcampaigns.list.resume_campaign' })}
        </li>
      )}
      <li onClick={() => handleCopyLink(campaignId)}>{formatMessage({ id: 'guestcampaigns.list.copy_link' })}</li>
    </ul>
  );
};

type Props = OP & InjectedIntlProps;

/* React.Component<P, S> ------ P is type/interface of props, S is type/interface of state */
class CampaignDetailsMenu extends Component<Props, State> {
  public state = {
    isOpen: false,
  };

  private menuRef: any;

  public render() {
    const { campaign, intl, openModal, patchCampaignRequest } = this.props;
    const { isOpen } = this.state;

    return (
      <div onClick={this.handleClick}>
        <EllipsisIcon />
        {isOpen && (
          <Menu
            actions={campaignActions}
            campaign={campaign}
            intl={intl}
            openModal={openModal}
            patchCampaignRequest={patchCampaignRequest}
            setMenuRef={(ref: any) => (this.menuRef = ref)}
          />
        )}
      </div>
    );
  }

  private setDocumentListener = () => {
    if (this.state.isOpen) {
      document.addEventListener('click', this.handleClick, false);
    } else {
      document.removeEventListener('click', this.handleClick, false);
    }
  };

  private handleClick = () => {
    this.setState(
      {
        isOpen: !this.state.isOpen,
      },
      this.setDocumentListener,
    );
  };
}

export default injectIntl(CampaignDetailsMenu);
export { CampaignDetailsMenu, Menu };
