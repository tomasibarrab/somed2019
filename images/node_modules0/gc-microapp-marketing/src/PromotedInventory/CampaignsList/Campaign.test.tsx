import { mount, shallow } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { create } from 'react-test-renderer';
import { keys } from '../../translations/bundles/marketing.json';
import Campaign from './Campaign';

describe('<Campaign />', () => {
  const suppressionDates = {
    custom: [
      {
        endDate: moment()
          .add(1, 'day')
          .toISOString(),
        label: 'test label',
        startDate: moment().toISOString(),
      },
    ],
    default: ['thanksgiving_day_us'],
  };

  const scenarios = [
    {
      description: 'live campaign',
      props: {
        campaign: {
          approvedByEmail: 'jest@example.com',
          campaignId: 'string',
          changedByUser: 'string',
          changedTimestamp: moment().toISOString(),
          createdByEmail: 'string',
          createdChannel: 'string',
          createdTimestamp: moment().toISOString(),
          currentVersion: 'string',
          draftTimestamp: moment().toISOString(),
          endDate: moment().add(1, 'day'),
          endTimestamp: null,
          incentives: [],
          isShortTerm: false,
          liveTimestamp: moment()
            .add(-1, 'day')
            .toISOString(),
          pauseUntil: moment().toISOString(),
          restaurantContactEmail: 'string',
          restaurantContactName: 'string',
          rid: 1,
          schedule: [],
          startDate: moment().toISOString(),
          state: 'live',
          suppressionDates,
          type: 'promoted_results',
        },
      },
    },
    {
      description: 'live Specials campaign',
      props: {
        campaign: {
          approvedByEmail: 'jest@example.com',
          campaignId: 'string',
          changedByUser: 'string',
          changedTimestamp: moment().toISOString(),
          createdByEmail: 'string',
          createdChannel: 'string',
          createdTimestamp: moment().toISOString(),
          currentVersion: 'string',
          draftTimestamp: moment().toISOString(),
          endDate: moment().add(1, 'day'),
          endTimestamp: null,
          incentives: [
            {
              description: 'desc',
              noteToDiners: '',
              title: 'title',
            },
          ],
          isShortTerm: false,
          liveTimestamp: moment()
            .add(-1, 'day')
            .toISOString(),
          pauseUntil: moment().toISOString(),
          restaurantContactEmail: 'string',
          restaurantContactName: 'string',
          rid: 1,
          schedule: [],
          startDate: moment().toISOString(),
          state: 'live',
          suppressionDates,
          type: 'display_offer',
        },
      },
    },
    {
      description: 'short term live campaign',
      props: {
        campaign: {
          approvedByEmail: null,
          campaignId: 'string',
          changedByUser: 'string',
          changedTimestamp: moment().toISOString(),
          createdByEmail: 'string',
          createdChannel: 'string',
          createdTimestamp: moment().toISOString(),
          currentVersion: 'string',
          draftTimestamp: moment().toISOString(),
          endDate: null,
          endTimestamp: null,
          incentives: [],
          isShortTerm: true,
          liveTimestamp: moment()
            .add(-1, 'day')
            .toISOString(),
          pauseUntil: moment().toISOString(),
          restaurantContactEmail: 'string',
          restaurantContactName: 'string',
          rid: 1,
          schedule: [],
          startDate: moment().toISOString(),
          state: 'live',
          suppressionDates,
          type: 'promoted_results',
        },
      },
    },
  ];

  scenarios.map(({ description, props }) => {
    test(`${description} to match snapshot`, () => {
      const component = create(
        <IntlProvider locale="en-US" messages={keys}>
          <Campaign {...props} />
        </IntlProvider>,
      );
      const tree = component.toJSON();
      expect(tree).toMatchSnapshot();
    });
  });

  test('show SpecialDetails when open w/ specials campaign', () => {
    const props = scenarios[1].props;
    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <table>
          <Campaign {...props} />
        </table>
      </IntlProvider>,
    );
    const specialsCampaign = shallow(wrapper.find('Campaign').get(0));
    const tr = specialsCampaign.find('tr').first();
    tr.simulate('click');
    specialsCampaign.update();
    /* Snapshots changed due to bug in enzyme's interaction with React 16
       Fragments and our new use of them. See https://github.com/airbnb/enzyme/issues/1213 */
    expect(specialsCampaign.getElement()).toMatchSnapshot();
  });

  test('handleClick should toggle isOpen state and classes', () => {
    const { campaign: baseCampaign } = scenarios[2].props;
    const campaignId = 'another campaign id to avoid window.location matching prev test';
    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <table>
          <Campaign campaign={{ ...baseCampaign, campaignId }} />
        </table>
      </IntlProvider>,
    );
    const campaign = shallow(wrapper.find('Campaign').get(0));
    const tr = campaign.find('tr').first();
    expect(campaign.state().isOpen).toBe(false);
    tr.simulate('click');
    campaign.update();
    expect(campaign.state().isOpen).toBe(true);
    expect(campaign.getElement()).toMatchSnapshot();
    tr.simulate('click');
    campaign.update();
    expect(campaign.state().isOpen).toBe(false);
    expect(campaign.getElement()).toMatchSnapshot();
  });
});
