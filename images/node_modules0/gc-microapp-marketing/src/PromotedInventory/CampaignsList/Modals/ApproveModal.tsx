import classNames from 'classnames';
import { Button, Modal, ModalHeader, ModalMain } from 'gca-react-components';
import React, { Component } from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { CampaignState, CampaignType, PatchActionPayload } from '../../../store/campaigns/campaigns.types';
import { LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1 } from '../../constants';
import TermsAndConditions, { TermsFVWithBrowserInfo } from '../../TermsAndConditions/TermsAndConditions';
import BigCheckmarkIcon from '../images/BigCheckmarkIcon';

interface OP {
  campaign: CampaignType;
  close: (success: boolean) => void;
  confirm: (payload: PatchActionPayload) => void;
}

type Props = OP & InjectedIntlProps;

interface State {
  success: boolean;
}

export class ApproveModal extends Component<Props, State> {
  private addLinkToTermsAndConfirm: (termsFVWithBrowserInfo: TermsFVWithBrowserInfo) => void;
  public constructor(props: Props) {
    super(props);

    const { confirm, campaign } = props;
    this.addLinkToTermsAndConfirm = (termsFVWithBrowserInfo: TermsFVWithBrowserInfo): void => {
      const { campaignId } = campaign;
      const approvalInfo = { ...termsFVWithBrowserInfo, linkToTerms: LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1 };

      this.setState({ success: true });
      confirm({ state: CampaignState.Live, approvalInfo, campaignId, refetchCampaigns: false });
    };

    this.state = { success: false };
  }

  public render() {
    const { close, intl, campaign } = this.props;
    const { success } = this.state;

    const closeWithSuccess = () => {
      close(success);
    };

    return (
      <Modal onClose={closeWithSuccess} modalClass="terms-modal">
        <ModalHeader
          onClose={closeWithSuccess}
          title={intl.formatMessage(
            { id: 'guestcampaigns.list.draft.approve_campaign_type' },
            { 'campaign-type': intl.formatMessage({ id: 'guestcampaigns.list.custom_promotions' }) },
          )}
        />
        {/* tslint:disable-next-line:object-literal-key-quotes */}
        <ModalMain className={classNames({ 'terms-modal-main': true, finished: success })}>
          {!success ? (
            <TermsAndConditions
              linkToTerms={{
                id: 'guestcampaigns.terms.custom_promotions_terms_and_conditions',
                link: LINK_TO_CUSTOM_PROMOTIONS_TERMS_V1,
              }}
              campaign={campaign}
              detailsOpen={false}
              confirm={this.addLinkToTermsAndConfirm}
              isApproval={true}
            />
          ) : (
            <>
              <BigCheckmarkIcon />
              <FormattedMessage
                id="guestcampaigns.list.draft.your_campaign_active"
                values={{ 'campaign-type': intl.formatMessage({ id: 'guestcampaigns.list.custom_promotions' }) }}
                tagName="p"
              />
              <Button theme="primary" onClick={closeWithSuccess}>
                <FormattedMessage id="guestcampaigns.list.button.got_it" />
              </Button>
            </>
          )}
        </ModalMain>
      </Modal>
    );
  }
}

export default injectIntl(ApproveModal);
