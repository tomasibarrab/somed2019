import { mount, shallow } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import configureMockStore from 'redux-mock-store';
import { CampaignState } from '../../../../store/campaigns/campaigns.types';
import { keys } from '../../../../translations/bundles/marketing.json';
import BlockedDatesPickerModal from './BlockedDatesPickerModal';

jest.mock('./BlockedDatesPicker', () => {
  return 'blocked-dates-picker-placeholder';
});

describe('BlockedDatesPickerModal', () => {
  const campaign = {
    campaignId: 'deadbeef-b0ba',
    status: 'live',
    suppressionDates: {
      custom: [
        {
          endDate: '02-01-2018',
          startDate: '02-01-2018',
        },
        {
          endDate: '02-06-2018',
          startDate: '02-06-2018',
        },
        {
          endDate: '02-09-2018',
          startDate: '02-09-2018',
        },
      ],
      default: [],
    },
  };

  it('should match snapshot w/ header and picker', () => {
    const component = create(
      <IntlProvider locale="en-US" messages={keys}>
        <BlockedDatesPickerModal confirm={jest.fn()} close={jest.fn()} campaign={campaign} />
      </IntlProvider>,
    );
    const tree = component.toJSON();
    expect(tree).toMatchSnapshot();
  });

  it('should translate map and call props.confirm w/ new dates, and close upon setSuppressionDates(map)', () => {
    const confirm = jest.fn();
    const close = jest.fn();
    const mockMap = new Map<string, any>([['2018-02-01', { isBlocked: true, isNew: true, isDefault: false }]]);
    const component = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <BlockedDatesPickerModal confirm={confirm} close={close} campaign={campaign} />
      </IntlProvider>,
    );
    component
      .find('BlockedDatesPickerModal')
      .first()
      .instance()
      .setSuppressionDates(mockMap);
    expect(confirm).toHaveBeenCalledWith({
      campaignId: 'deadbeef-b0ba',
      custom: [
        {
          endDate: '2018-02-01',
          startDate: '2018-02-01',
        },
      ],
      default: [],
    });
    expect(close).toHaveBeenCalled();
  });

  it('should close by calling props.close when X clicked', () => {
    const close = jest.fn();
    const wrapper = mount(
      <IntlProvider locale="en-US" messages={keys}>
        <BlockedDatesPickerModal confirm={jest.fn()} close={close} campaign={campaign} />
      </IntlProvider>,
    );
    const closeButton = wrapper.find('button').first();
    expect(close).not.toHaveBeenCalled();
    closeButton.simulate('click');
    expect(close).toHaveBeenCalled();
  });
});
