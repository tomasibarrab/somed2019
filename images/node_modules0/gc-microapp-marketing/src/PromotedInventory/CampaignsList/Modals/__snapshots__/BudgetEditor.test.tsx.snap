// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BudgetEditor /> should display error message when budget input is an empty value 1`] = `
"<section className={[undefined]} data-testid=\\"budget-section\\">
  <div className={[undefined]}>
    <label className={[undefined]}>
      <span className={[undefined]}>
        $
      </span>
      <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={false}>
        <div>
          <input data-testid=\\"budget-textbox\\" value=\\"\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"invalid\\" />
        </div>
      </Input>
    </label>
    <p data-testid=\\"total-covers-message\\" className=\\" \\">
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
        <span>
          Total for up to 
          <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
            <strong>
              0 covers
            </strong>
          </FormattedMessage>
           at $20/cover
        </span>
      </FormattedMessage>
    </p>
  </div>
  <div className={[undefined]}>
    <p className={[undefined]}>
      Please enter a number.
    </p>
    <p className={[undefined]}>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
        <span>
          Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
        </span>
      </FormattedMessage>
    </p>
  </div>
</section>"
`;

exports[`<BudgetEditor /> should display error message when budget input is blurred and value is unchanged from original amount 1`] = `
"<section className={[undefined]} data-testid=\\"budget-section\\">
  <div className={[undefined]}>
    <label className={[undefined]}>
      <span className={[undefined]}>
        $
      </span>
      <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={false}>
        <div>
          <input data-testid=\\"budget-textbox\\" value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"invalid\\" />
        </div>
      </Input>
    </label>
    <p data-testid=\\"total-covers-message\\" className=\\" \\">
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
        <span>
          Total for up to 
          <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
            <strong>
              25 covers
            </strong>
          </FormattedMessage>
           at $20/cover
        </span>
      </FormattedMessage>
    </p>
  </div>
  <div className={[undefined]}>
    <p className={[undefined]}>
      Monthly budget must be a different value than the original.
    </p>
    <p className={[undefined]}>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
        <span>
          Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
        </span>
      </FormattedMessage>
    </p>
  </div>
</section>"
`;

exports[`<BudgetEditor /> should display error message when budget input value is less than spend amount 1`] = `
"<section className={[undefined]} data-testid=\\"budget-section\\">
  <div className={[undefined]}>
    <label className={[undefined]}>
      <span className={[undefined]}>
        $
      </span>
      <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"400\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={true}>
        <div>
          <input data-testid=\\"budget-textbox\\" value=\\"400\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"\\" />
        </div>
      </Input>
    </label>
    <p data-testid=\\"total-covers-message\\" className={[undefined]}>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
        <span>
          Total for up to 
          <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
            <strong>
              20 covers
            </strong>
          </FormattedMessage>
           at $20/cover
        </span>
      </FormattedMessage>
    </p>
  </div>
  <div className={[undefined]}>
    <p className={[undefined]} />
    <p className={[undefined]}>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
        <span>
          Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
        </span>
      </FormattedMessage>
    </p>
  </div>
</section>"
`;

exports[`<BudgetEditor /> should display error message when non-numeric value is entered 1`] = `
"<section className={[undefined]} data-testid=\\"budget-section\\">
  <div className={[undefined]}>
    <label className={[undefined]}>
      <span className={[undefined]}>
        $
      </span>
      <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={false}>
        <div>
          <input data-testid=\\"budget-textbox\\" value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"invalid\\" />
        </div>
      </Input>
    </label>
    <p data-testid=\\"total-covers-message\\" className=\\" \\">
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
        <span>
          Total for up to 
          <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
            <strong>
              25 covers
            </strong>
          </FormattedMessage>
           at $20/cover
        </span>
      </FormattedMessage>
    </p>
  </div>
  <div className={[undefined]}>
    <p className={[undefined]}>
      Please enter a number.
    </p>
    <p className={[undefined]}>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
        <span>
          Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
        </span>
      </FormattedMessage>
    </p>
  </div>
</section>"
`;

exports[`<BudgetEditor /> should hide "Your spend so far" text when spend is unavailable 1`] = `
"<IntlProvider locale=\\"en-US\\" messages={{...}}>
  <InjectIntl(BudgetEditorImpl) campaignId=\\"mock-campaignid\\" confirm={[Function: mockConstructor]} currentBudget={{...}} currentUserEmail=\\"test@email.com\\">
    <BudgetEditorImpl campaignId=\\"mock-campaignid\\" confirm={[Function: mockConstructor]} currentBudget={{...}} currentUserEmail=\\"test@email.com\\" intl={{...}}>
      <p className={[undefined]}>
        <FormattedMessage id=\\"guestcampaigns.list.edit_budget.description\\" values={{...}}>
          <span>
            Adjust your monthly budget for this campaign.
          </span>
        </FormattedMessage>
      </p>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.monthly_budget\\" tagName=\\"strong\\" values={{...}}>
        <strong>
          Monthly budget
        </strong>
      </FormattedMessage>
      <section className={[undefined]} data-testid=\\"budget-section\\">
        <div className={[undefined]}>
          <label className={[undefined]}>
            <span className={[undefined]}>
              $
            </span>
            <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={true}>
              <div>
                <input data-testid=\\"budget-textbox\\" value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"\\" />
              </div>
            </Input>
          </label>
          <p data-testid=\\"total-covers-message\\" className={[undefined]}>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
              <span>
                Total for up to 
                <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
                  <strong>
                    25 covers
                  </strong>
                </FormattedMessage>
                 at $20/cover
              </span>
            </FormattedMessage>
          </p>
        </div>
        <div className={[undefined]}>
          <p className={[undefined]} />
          <p className={[undefined]}>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
              <span>
                Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
              </span>
            </FormattedMessage>
          </p>
        </div>
      </section>
      <ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} className={[undefined]} label={{...}} onClick={[Function: handleLimitChange]} checked={false}>
        <label className=\\"label\\" data-testid={[undefined]}>
          <ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} onClick={[Function: handleLimitChange]} checked={false} testId={[undefined]} className={[undefined]}>
            <input className=\\"hiddenCheckbox\\" data-testid={[undefined]} aria-checked=\\"false\\" disabled={[undefined]} id={[undefined]} onClick={[Function: handleLimitChange]} type=\\"checkbox\\" />
            <div className=\\"fakeCheckbox\\">
              <div className=\\"fakeCheckboxIcon\\" />
              <Icon iconId=\\"checkboxSelected\\" className=\\"fakeCheckboxSelected\\">
                <svg data-testid=\\"iconSvg\\" className=\\"fakeCheckboxSelected\\" viewBox=\\"0 0 24 24\\">
                  <use xlinkHref=\\"#svg-checkboxSelected\\" />
                </svg>
              </Icon>
            </div>
          </ForwardRef>
          <span>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.no_budget\\" values={{...}}>
              <span>
                No budget - keep bringing me guests!
              </span>
            </FormattedMessage>
            <br />
            <span className=\\" \\">
              <FormattedMessage id=\\"guestcampaigns.list.edit_budget.you_still_get_price_credits_in_month\\" values={{...}}>
                <span>
                  You still get up to 
                  <strong>
                    $200
                  </strong>
                   in credits in January.
                </span>
              </FormattedMessage>
            </span>
          </span>
        </label>
      </ForwardRef>
      <Button className={[undefined]} theme=\\"primary\\" onClick={[Function: handleSubmit]} disabled={true} data-testid=\\"apply-button\\" htmlType=\\"button\\" type=\\"button\\">
        <button className=\\"gca-button primary disabled\\" href={[undefined]} to={[undefined]} disabled={true} type=\\"button\\" onClick={[Function: handleSubmit]} data-testid=\\"apply-button\\">
          <span className=\\"button-content\\">
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.apply\\" values={{...}}>
              <span>
                Apply
              </span>
            </FormattedMessage>
          </span>
        </button>
      </Button>
    </BudgetEditorImpl>
  </InjectIntl(BudgetEditorImpl)>
</IntlProvider>"
`;

exports[`<BudgetEditor /> should hide credit text next to no budget checkbox when zero credits 1`] = `
"<ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} className={[undefined]} label={{...}} onClick={[Function: handleLimitChange]} checked={false}>
  <label className=\\"label\\" data-testid={[undefined]}>
    <ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} onClick={[Function: handleLimitChange]} checked={false} testId={[undefined]} className={[undefined]}>
      <input className=\\"hiddenCheckbox\\" data-testid={[undefined]} aria-checked=\\"false\\" disabled={[undefined]} id={[undefined]} onClick={[Function: handleLimitChange]} type=\\"checkbox\\" />
      <div className=\\"fakeCheckbox\\">
        <div className=\\"fakeCheckboxIcon\\" />
        <Icon iconId=\\"checkboxSelected\\" className=\\"fakeCheckboxSelected\\">
          <svg data-testid=\\"iconSvg\\" className=\\"fakeCheckboxSelected\\" viewBox=\\"0 0 24 24\\">
            <use xlinkHref=\\"#svg-checkboxSelected\\" />
          </svg>
        </Icon>
      </div>
    </ForwardRef>
    <span>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.no_budget\\" values={{...}}>
        <span>
          No budget - keep bringing me guests!
        </span>
      </FormattedMessage>
    </span>
  </label>
</ForwardRef>"
`;

exports[`<BudgetEditor /> should match snapshot when initial state 1`] = `
"<IntlProvider locale=\\"en-US\\" messages={{...}}>
  <InjectIntl(BudgetEditorImpl) campaignId=\\"mock-campaignid\\" confirm={[Function: mockConstructor]} currentBudget={{...}} currentUserEmail=\\"test@email.com\\">
    <BudgetEditorImpl campaignId=\\"mock-campaignid\\" confirm={[Function: mockConstructor]} currentBudget={{...}} currentUserEmail=\\"test@email.com\\" intl={{...}}>
      <p className={[undefined]}>
        <FormattedMessage id=\\"guestcampaigns.list.edit_budget.description\\" values={{...}}>
          <span>
            Adjust your monthly budget for this campaign.
          </span>
        </FormattedMessage>
      </p>
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.monthly_budget\\" tagName=\\"strong\\" values={{...}}>
        <strong>
          Monthly budget
        </strong>
      </FormattedMessage>
      <section className={[undefined]} data-testid=\\"budget-section\\">
        <div className={[undefined]}>
          <label className={[undefined]}>
            <span className={[undefined]}>
              $
            </span>
            <Input data-testid=\\"budget-textbox\\" className={[undefined]} value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" valid={true}>
              <div>
                <input data-testid=\\"budget-textbox\\" value=\\"500\\" onChange={[Function: handleChange]} onBlur={[Function: handleBlur]} disabled={false} maxLength={6} type=\\"text\\" pattern=\\"^\\\\\\\\d+$\\" className=\\"\\" />
              </div>
            </Input>
          </label>
          <p data-testid=\\"total-covers-message\\" className={[undefined]}>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
              <span>
                Total for up to 
                <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
                  <strong>
                    25 covers
                  </strong>
                </FormattedMessage>
                 at $20/cover
              </span>
            </FormattedMessage>
          </p>
        </div>
        <div className={[undefined]}>
          <p className={[undefined]} />
          <p className={[undefined]}>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_budget_may_be_exceeded\\" values={{...}}>
              <span>
                Your budget may be exceeded by up to 5% in order to account for no-shows and cancellations.
              </span>
            </FormattedMessage>
          </p>
        </div>
      </section>
      <p className={[undefined]}>
        <FormattedMessage id=\\"guestcampaigns.list.edit_budget.your_spend_so_far\\" values={{...}}>
          <span>
            Your spend so far is 
            <strong>
              $300
            </strong>
            , resulting in 
            <strong>
              <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}}>
                <span>
                  15 covers
                </span>
              </FormattedMessage>
            </strong>
            .
          </span>
        </FormattedMessage>
      </p>
      <ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} className={[undefined]} label={{...}} onClick={[Function: handleLimitChange]} checked={false}>
        <label className=\\"label\\" data-testid={[undefined]}>
          <ForwardRef data-testid=\\"no-budget-checkbox\\" id={[undefined]} onClick={[Function: handleLimitChange]} checked={false} testId={[undefined]} className={[undefined]}>
            <input className=\\"hiddenCheckbox\\" data-testid={[undefined]} aria-checked=\\"false\\" disabled={[undefined]} id={[undefined]} onClick={[Function: handleLimitChange]} type=\\"checkbox\\" />
            <div className=\\"fakeCheckbox\\">
              <div className=\\"fakeCheckboxIcon\\" />
              <Icon iconId=\\"checkboxSelected\\" className=\\"fakeCheckboxSelected\\">
                <svg data-testid=\\"iconSvg\\" className=\\"fakeCheckboxSelected\\" viewBox=\\"0 0 24 24\\">
                  <use xlinkHref=\\"#svg-checkboxSelected\\" />
                </svg>
              </Icon>
            </div>
          </ForwardRef>
          <span>
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.no_budget\\" values={{...}}>
              <span>
                No budget - keep bringing me guests!
              </span>
            </FormattedMessage>
            <br />
            <span className=\\" \\">
              <FormattedMessage id=\\"guestcampaigns.list.edit_budget.you_still_get_price_credits_in_month\\" values={{...}}>
                <span>
                  You still get up to 
                  <strong>
                    $200
                  </strong>
                   in credits in January.
                </span>
              </FormattedMessage>
            </span>
          </span>
        </label>
      </ForwardRef>
      <Button className={[undefined]} theme=\\"primary\\" onClick={[Function: handleSubmit]} disabled={true} data-testid=\\"apply-button\\" htmlType=\\"button\\" type=\\"button\\">
        <button className=\\"gca-button primary disabled\\" href={[undefined]} to={[undefined]} disabled={true} type=\\"button\\" onClick={[Function: handleSubmit]} data-testid=\\"apply-button\\">
          <span className=\\"button-content\\">
            <FormattedMessage id=\\"guestcampaigns.list.edit_budget.apply\\" values={{...}}>
              <span>
                Apply
              </span>
            </FormattedMessage>
          </span>
        </button>
      </Button>
    </BudgetEditorImpl>
  </InjectIntl(BudgetEditorImpl)>
</IntlProvider>"
`;

exports[`<BudgetEditor /> should update covers when budget input is changed 1`] = `
"<p data-testid=\\"total-covers-message\\" className={[undefined]}>
  <FormattedMessage id=\\"guestcampaigns.list.edit_budget.total_for_up_to\\" values={{...}}>
    <span>
      Total for up to 
      <FormattedMessage id=\\"guestcampaigns.list.edit_budget.num_covers\\" values={{...}} tagName=\\"strong\\">
        <strong>
          50 covers
        </strong>
      </FormattedMessage>
       at $20/cover
    </span>
  </FormattedMessage>
</p>"
`;
