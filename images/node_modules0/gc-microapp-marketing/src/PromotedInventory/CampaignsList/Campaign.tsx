import { Chevron } from 'gca-react-components';
import React from 'react';
import { CampaignState, CampaignType, CampaignTypes } from '../../store/campaigns/campaigns.types';
import CampaignTypeLabel from './CampaignTypeLabel';
import makeDaysAndTimes from './helpers/make-days-and-times';
import PromotedResultsDetails from './PromotedResultsDetails';
import SpecialDetails from './SpecialDetails';

interface OP {
  /* Own props */
  campaign: CampaignType;
}

type Props = OP;

interface State {
  isOpen: boolean;
}

/* React.Component<P, S> ------ P is type/interface of props, S is type/interface of state */
class Campaign extends React.Component<Props, State> {
  public state = {
    isOpen:
      typeof window.location.hash === 'string' && this.props.campaign.campaignId === window.location.hash.slice(1),
  };

  public render() {
    const { campaign } = this.props;
    const { campaignId, endDate, incentives, isShortTerm, pauseUntil, schedule, startDate, state, type } = campaign;

    const isOpen = this.isPending() || this.state.isOpen;

    return (
      <tbody>
        <tr id={campaignId} role="row" className={isOpen ? 'open' : ''} onClick={() => this.handleClick(campaignId)}>
          <CampaignTypeLabel
            startDate={startDate}
            endDate={endDate}
            incentives={incentives}
            isShortTerm={isShortTerm}
            pauseUntil={pauseUntil}
            state={state}
            type={type}
          />
          <td>
            <ul>{makeDaysAndTimes(schedule, type, isShortTerm, startDate, endDate)}</ul>
          </td>
          <td>{!this.isPending() && <Chevron direction={isOpen ? 'up' : 'down'} />}</td>
        </tr>
        {isOpen &&
          (type === CampaignTypes.Special ? (
            <tr>
              <SpecialDetails campaign={campaign} />
            </tr>
          ) : (
            <tr>
              <PromotedResultsDetails campaign={campaign} />
            </tr>
          ))}
      </tbody>
    );
  }

  private handleClick = (campaignId: string) => {
    const isOpen = !this.state.isOpen;
    if (isOpen) {
      window.location.hash = `#${campaignId}`;
    } else {
      window.location.hash = '#';
    }
    this.setState({
      isOpen,
    });
  };

  private isPending = () => this.props.campaign.state === CampaignState.Draft;
}

export default Campaign;
export { Campaign };
