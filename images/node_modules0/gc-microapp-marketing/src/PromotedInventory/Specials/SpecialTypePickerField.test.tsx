import { mount, shallow } from 'enzyme';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { create } from 'react-test-renderer';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { DisplaySpecialTypes } from '../../store/campaigns/campaigns.types';
import { keys } from '../../translations/bundles/marketing.json';
import SpecialTypePickerField from './SpecialTypePickerField';
import { ValidationErrors } from './validate-create-specials-form';

const makeWrapper = state => {
  const store = configureMockStore()(state);
  const Decorated = reduxForm({
    form: 'createSpecial',
  })(SpecialTypePickerField as any);

  const clickCallToAction = jest.fn();

  return {
    click: clickCallToAction,
    store,
    wrapper: mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <Decorated name="type" clickCallToAction={clickCallToAction} />
        </IntlProvider>
      </Provider>,
    ),
  };
};

describe('DaysAndTimesFieldArray', () => {
  const daysAndTimes = [
    {
      days: ['SUNDAY'],
      times: {
        end: '15:00',
        start: '17:00',
      },
    },
  ];
  const typeNotSelectedState = {
    form: {
      createSpecial: {
        values: {
          daysAndTimes,
        },
      },
    },
  };
  const submitFailedState = {
    form: {
      createSpecial: {
        submitFailed: true,
        syncErrors: {
          type: ValidationErrors.Required,
        },
        values: {
          daysAndTimes,
        },
      },
    },
  };

  it('should dispatch change and call clickCallToAction when clicked', () => {
    const { wrapper, store, click } = makeWrapper(typeNotSelectedState);

    const happyHourLi = wrapper.find('ul.special-type-picker li').first();
    expect(click).not.toHaveBeenCalled();
    happyHourLi.simulate('click');

    const actions = store.getActions();
    expect(actions.pop().type).toEqual('@@redux-form/CHANGE');
    expect(click).toHaveBeenCalledWith({ name: 'Type happy_hour', page: 'Create Special' });
  });

  it('should show validation errors when errors && submitFailed', () => {
    const { wrapper } = makeWrapper(submitFailedState);

    const validationMessage = wrapper.find('FormattedMessage[id="guestcampaigns.specials.form.validation.type"]');
    expect(validationMessage.length).toEqual(1);
  });
});
