import { mount, render } from 'enzyme';
import moment from 'moment';
import React from 'react';
import { IntlProvider } from 'react-intl';
import { Provider } from 'react-redux';
import { create } from 'react-test-renderer';
import { reduxForm } from 'redux-form';
import configureMockStore from 'redux-mock-store';
import { keys } from '../../translations/bundles/marketing.json';
import { CREATE_SPECIAL_FORM_NAME, dateFormat } from '../constants';
import DatePickerField from './DatePickerField';
import { ValidationErrors } from './validate-create-specials-form';

const makeWrapper = (state, props) => {
  const store = configureMockStore()(state);

  const Decorated = reduxForm<any, any>({
    form: CREATE_SPECIAL_FORM_NAME,
  })(DatePickerField);

  return render(
    <Provider store={store}>
      <IntlProvider locale="en-US" messages={keys}>
        <Decorated {...props} />
      </IntlProvider>
    </Provider>,
  );
};

describe('<DatePickerField />', () => {
  const scenarios = [
    {
      description: 'to match snapshot',
      props: { name: 'startDate' },
      state: {},
    },
    {
      description: 'to match snapshot with disabled days until 11/28 and validation error',
      props: { name: 'endDate', disableBefore: moment().add(2, 'day') },
      state: {
        form: {
          createSpecial: {
            submitFailed: true,
            syncErrors: {
              endDate: ValidationErrors.EndDateAfterStartDate,
            },
          },
        },
      },
    },
  ];

  scenarios.forEach(({ description, props, state }) => {
    it(description, () => {
      const wrapper = makeWrapper(state, props);
      expect(wrapper).toMatchSnapshot();
    });
  });

  test('select a day', () => {
    const store = configureMockStore()();

    const initialValues = {
      startDate: moment()
        .add(1, 'week')
        .format(dateFormat.MOMENT),
    };

    const Decorated = reduxForm<any, any>({
      form: CREATE_SPECIAL_FORM_NAME,
      initialValues,
    })(DatePickerField);

    const wrapper = mount(
      <Provider store={store}>
        <IntlProvider locale="en-US" messages={keys}>
          <Decorated name="startDate" />
        </IntlProvider>
      </Provider>,
    );

    const calendarDay = wrapper.find('td.CalendarDay').last();
    calendarDay.simulate('click'); // info: this triggers `parse` w/ value
    wrapper.update();
  });
});
