import { Fieldset, Input, TextArea } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntl, InjectedIntlProps, injectIntl } from 'react-intl';
import { Field, formValues, InjectedFormProps, reduxForm } from 'redux-form';
import { actions } from '../../store/campaigns/campaigns';
import { DisplaySpecialTypes, Pages } from '../../store/campaigns/campaigns.types';
import { CREATE_SPECIAL_FORM_NAME } from '../constants';
import './CreateSpecialForm.scss';
import { validate } from './validate-create-specials-form';

/* Custom Components */
import AlcoholWarning from './AlcoholWarning';
import BlockedDays from './BlockedDays';
import DaysAndTimesFieldArray from './DaysAndTimesFieldArray';
import ReservationDates from './ReservationDates';
import SpecialTypePickerField from './SpecialTypePickerField';
import TipsBox from './TipsBox';

interface FormProps {
  initialValues?: any;
}

interface OP {
  clickCallToAction: (data: any) => void;
}

type BaseProps = InjectedIntlProps & FormProps & OP;
type Props = BaseProps & InjectedFormProps<CreateSpecialForm, BaseProps>;
class CreateSpecialForm extends React.Component<Props, {}> {
  public render() {
    const { change, handleSubmit, intl, clickCallToAction } = this.props;
    return (
      <form onSubmit={handleSubmit} className="create-special-form">
        <Fieldset legend={getLegend('type', intl)} description={getDescription('type', intl)}>
          <SpecialTypePickerField name="type" clickCallToAction={clickCallToAction} />
        </Fieldset>
        <Fieldset legend={getLegend('title', intl)} description={getDescription('title', intl)}>
          <Field name="name" component={renderInputField as any} props={{ intl, fieldName: 'title' } as any} />
          <TipsBox additionalItems={<AlcoholWarning />}>
            <FormattedMessage id="guestcampaigns.specials.form.title.tips.1" />
            <FormattedMessage id="guestcampaigns.specials.form.title.tips.2" />
            <FormattedMessage id="guestcampaigns.specials.form.title.tips.3" />
          </TipsBox>
        </Fieldset>
        <Fieldset legend={getLegend('description', intl)} description={getDescription('description', intl)}>
          <Field
            name="description"
            component={renderInputField as any}
            props={{ intl, fieldName: 'description' } as any}
          />
          <TipsBox>
            <FormattedMessage id="guestcampaigns.specials.form.description.tips.1" />
            <FormattedMessage id="guestcampaigns.specials.form.description.tips.2" />
            <FormattedMessage id="guestcampaigns.specials.form.description.tips.3" />
          </TipsBox>
        </Fieldset>
        <ReservationDates
          change={change}
          description={{ startDate: getDescription('startdate', intl), endDate: getDescription('enddate', intl) }}
          legend={{ startDate: getLegend('startdate', intl), endDate: getLegend('enddate', intl) }}
        />
        <Fieldset legend={getLegend('daysandtimes', intl)} description={getDescription('daysandtimes', intl)}>
          <DaysAndTimesFieldArray name="daysAndTimes" />
        </Fieldset>
        <Fieldset legend={getLegend('blockeddays', intl)} description={getDescription('blockeddays', intl)}>
          <BlockedDays change={change} />
        </Fieldset>
        <Fieldset
          legend={getLegend('nextstep', intl)}
          description={
            <>
              {intl.formatMessage({ id: 'guestcampaigns.specials.form.nextstep.description.1' })}{' '}
              <strong>{intl.formatMessage({ id: 'guestcampaigns.specials.form.nextstep.description.2' })}</strong>
            </>
          }
          className="next-step"
        />
      </form>
    );
  }
}

const getPlaceholderMessage = (specialType: DisplaySpecialTypes, intl: InjectedIntl, field: 'title' | 'description') =>
  specialType ? intl.formatMessage({ id: `guestcampaigns.specials.form.${field}.placeholder.${specialType}` }) : '';

const getSidebarMessage = (fieldName: string, intl: InjectedIntl, field: 'title' | 'description') => {
  return intl.formatMessage({ id: `guestcampaigns.specials.form.${fieldName}.${field}` });
};

const getLegend = (fieldName: string, intl: InjectedIntl) => {
  return getSidebarMessage(fieldName, intl, 'title');
};

const getDescription = (fieldName: string, intl: InjectedIntl) => {
  return getSidebarMessage(fieldName, intl, 'description');
};

const renderInputField = formValues('type')(({ meta, input, type, intl, fieldName }: any) => {
  const { submitFailed, error } = meta;
  const placeholderMessage = getPlaceholderMessage(type, intl, fieldName as any);

  const commonProps = {
    ...input,
    autoComplete: 'off',
    className: fieldName,
    placeholder: placeholderMessage,
    valid: !(submitFailed && error),
  };
  return fieldName === 'title' ? <Input {...commonProps} /> : <TextArea {...commonProps} showLabels={false} />;
});

const DecoratedCreateSpecialForm = reduxForm<CreateSpecialForm, BaseProps>({
  form: CREATE_SPECIAL_FORM_NAME,
  onSubmit: (values, dispatch) => {
    dispatch(
      actions.openCreationTermsModal({
        formValuesSnapshot: values,
      }),
    );
  },
  validate,
})(CreateSpecialForm);

export default injectIntl(DecoratedCreateSpecialForm);
