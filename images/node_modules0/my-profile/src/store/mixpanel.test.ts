import { mixpanelMock } from 'gca-jest-config';
import { mixpanel as mp } from 'gca-react-components';
import configureMockStore from 'redux-mock-store';
import { actions } from './myProfile/myProfile';

import CurrentContextMock from '../../fixtures/CurrentContext.json';
import mixpanelMiddleware from './mixpanel';
// tslint:disable-next-line:ordered-imports
import { FAILURE, STARTED, SUCCESS } from './mixpanel';

describe('MixPanel events', () => {
  const mixpanel = mixpanelMock();
  const state = {
    currentContext: CurrentContextMock,
    myProfile: {
      user: {
        firstName: 'Jane',
        lastName: 'Bloe',
      },
    },
  };

  const mockStore = configureMockStore([mixpanelMiddleware]);
  let store;

  beforeEach(() => {
    mixpanel.reset();
    store = mockStore(state);
  });

  it('should generate a LoadPageEvent with info SUCCESS', () => {
    store.dispatch(actions.fetchUser.done({}));
    const { name, props } = mixpanel.events[0];
    const { feature, info } = props;
    expect(name).toBe(mp.eventNames.LOAD_PAGE);
    expect(feature).toBe('MyProfile');
    expect(info).toBe(SUCCESS);
  });

  it('should generate a LoadPageEvent with info FAILURE', () => {
    store.dispatch(actions.fetchUser.failed({}));
    const { name, props } = mixpanel.events[0];
    const { feature, info } = props;
    expect(name).toBe(mp.eventNames.LOAD_PAGE);
    expect(feature).toBe('MyProfile');
    expect(info).toBe(FAILURE);
  });

  it('should generate a PublishEvent with info FAILURE', () => {
    store.dispatch(actions.updateUser.failed({}));
    const { name, props } = mixpanel.events[0];
    const { feature, info } = props;
    expect(name).toBe(mp.eventNames.PUBLISH);
    expect(feature).toBe('MyProfile');
    expect(info).toBe(FAILURE);
  });

  it('should generate a PublishEvent with info STARTED', () => {
    const formData = {
      firstName: 'Joe',
      lastName: 'Bloe',
    };
    const mpEvents = mixpanel.events;
    store.dispatch(actions.updateUser.started({ ...formData }));
    expect(mpEvents[0].name).toBe(mp.eventNames.CUSTOM_ACTION);
    expect(mpEvents[0].props.action).toBe('Field changed');
    expect(mpEvents[0].props.feature).toBe('MyProfile');
    expect(mpEvents[0].props.fieldName).toBe('firstName');

    const { name, props } = mpEvents[1];
    const { feature, info } = props;
    expect(name).toBe(mp.eventNames.PUBLISH);
    expect(feature).toBe('MyProfile');
    expect(info).toBe(STARTED);
  });
});
