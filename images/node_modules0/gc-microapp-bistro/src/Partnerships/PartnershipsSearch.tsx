// tslint:disable: object-literal-sort-keys

import * as React from 'react';
import { RouteComponentProps, withRouter } from 'react-router-dom';

import { Button } from '@buffet/button';
import { Input } from '@buffet/input';
import { Panel } from '@buffet/panel';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

import { AsyncProgress, AsyncStatus } from 'shared-react-utils/useAsync';

import format from 'date-fns/format';
import * as api from '../api';
import DataDisplay from '../common/DataDisplay/DataDisplay';
import DataPartnerDisplay from '../common/DataDisplay/DataPartnerDisplay';
import strings from '../strings';
import './PartnershipsSearch.scss';

type Props = RouteComponentProps<any>;

interface State {
  apiStatus: AsyncStatus,
  data: any,
  fromDate: any,
  toDate: any
}

const initState: State = {
  apiStatus: { progress: AsyncProgress.Init },
  data: undefined,
  fromDate: undefined,
  toDate: undefined,
};

const DATE_FORMAT = 'yyyy-MM-dd';

class PartnershipsSearchImpl extends React.Component<Props, State> {

  constructor(props: any) {
    super(props);
    this.state = initState;
    this.handleChangeStart = this.handleChangeStart.bind(this);
    this.handleChangeEnd = this.handleChangeEnd.bind(this);
  }


  public handleChangeStart(date: any) {
    this.setState({
      fromDate: date,
    });
  }

  public handleChangeEnd(date: any) {
    this.setState({
      toDate: date,
    });
  }

  public componentDidMount() {
    this.fetchPartners(null, null)
  }

  public render() {
    const { apiStatus, data, fromDate, toDate } = this.state;
    const { handleDatePickerApply } = this;

    return (
      <Panel title={strings['partnerships.title']}>
        <div className="date-filter">
          <p className="filter-title">{strings['partnerships.filter.title']}</p>
          <DatePicker
            selected={this.state.fromDate}
            selectsStart
            startDate={this.state.fromDate}
            endDate={this.state.toDate}
            onChange={this.handleChangeStart}
            maxDate={new Date()}
            dateFormat="yyyy-MM-dd"
            placeholderText="From"
          />
          <DatePicker
            selected={this.state.toDate}
            selectsEnd
            startDate={this.state.fromDate}
            endDate={this.state.toDate}
            onChange={this.handleChangeEnd}
            minDate={this.state.fromDate}
            maxDate={new Date()}
            dateFormat="yyyy-MM-dd"
            placeholderText="To"
          />
          <Button type="button" theme="primary" onClick={() => handleDatePickerApply()}>
            {strings['partnerships.filter.button.apply']}
          </Button>
        </div>
        <div className="partnerships-dashboard">
          <DataDisplay status={apiStatus}>
            <DataPartnerDisplay data={data} />
          </DataDisplay>
        </div>
      </Panel>
    );
  }

  private fetchPartners(from: any, to: any) {
    this.setState((state: State) => ({
      apiStatus: { progress: AsyncProgress.Started },
    }));
    api.searchPartners(from, to).then(this.setData)
  }

  private setData = (data: any) => {
    if (data.statusCode >= 400) {
      this.setState({
        apiStatus: {
          progress: AsyncProgress.Failed,
          error: new Error(data.message || `Unknown error (#${data.statusCode})`) },
        },
      );
    } else {
      this.setState({
        apiStatus: { progress: AsyncProgress.Done },
        data,
      });
    }
  };

  private handleDatePickerApply = () => {
    if (this.state.fromDate != null && this.state.toDate != null) {
      this.fetchPartners(
        format(this.state.fromDate, DATE_FORMAT),
        format(this.state.toDate, DATE_FORMAT),
      );
    } else {
      alert('Please select From and To dates');
    }
  };
}

export const PartnershipsSearch = withRouter(PartnershipsSearchImpl);
