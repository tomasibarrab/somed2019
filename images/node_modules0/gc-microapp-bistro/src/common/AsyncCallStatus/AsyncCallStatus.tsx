import React from 'react';

import { AsyncProgress, AsyncStatus } from 'shared-react-utils/useAsync/useAsync';

import LoadingIcon from '../../common/LoadingIcon/LoadingIcon';
import CodeBlock from '../CodeBlock/CodeBlock';

import './AsyncCallStatus.scss';

interface AsyncCallStatusProps {
  message: string;
  status: AsyncStatus;
  errorMessage?: string;
  children: React.ReactNode;
}

export function AsyncCallStatus( { status, message, errorMessage, children }: AsyncCallStatusProps) {
  switch (status.progress) {
    case AsyncProgress.Failed:
      return (
        <div className="data-container">
          <h3>{status.error.toString()}</h3>
          <p>{errorMessage || ''}</p>
          <div className="data-spacer" />
        </div>
      );
    case AsyncProgress.Started:
      return (
        <div className="data-container">
          <div className="async-box">
            <span>{message}</span><LoadingIcon />
          </div>
        </div>
      )
    default:
      // in the future we may be able to remove the fragment element, right now TypeScript
      // complains if we just return the children.
      return <>{children}</>;
  }
}
