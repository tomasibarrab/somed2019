import { mount } from 'enzyme';
import React from 'react';

import { OperationalConfirm } from '../common/OperationalConfirm/OperationalConfirm';

describe('OperationalConfirm', () => {
  const confirmCb = jest.fn();
  const cancelCb = jest.fn();
  const setup = (show: boolean) => {
    const props = {
      id: '123',
      label: '',
      massages: [],
      onCancel: cancelCb,
      onConfirm: confirmCb,
      show,
    }
    const displayState = mount(<OperationalConfirm {...props} />);
    return { displayState, props };
  };

  it('OperationalConfirm confirm buttons exist and confirm is disabled', () => {
    const { displayState } = setup(true);
    const confirmBt = displayState.find('button.warning-confirm');
    const cancelBt = displayState.find('button.warning-cancel');
    expect(confirmBt.length).toBe(1);
    expect(cancelBt.length).toBe(1);
    expect(confirmBt.props().disabled).toBe(true);
  });

  it('OperationalConfirm confirm buttons is disabled if entering wrong RID', () => {
    const { displayState } = setup(true);
    const confirmBt = displayState.find('button.warning-confirm');
    const inputField = displayState.find('input');
    expect(confirmBt.length).toBe(1);
    expect(confirmBt.props().disabled).toBe(true);
    expect(inputField.length).toBe(1);
    inputField.simulate('change', { target: { value: 'abc' } });
    const confirmBtAfter = displayState.find('button.warning-confirm');
    expect(confirmBtAfter.props().disabled).toBe(true);
  });

  it('OperationalConfirm confirm buttons is enabled if entering right RID', () => {
    const { displayState } = setup(true);
    const confirmBt = displayState.find('button.warning-confirm');
    const inputField = displayState.find('input');
    expect(confirmBt.length).toBe(1);
    expect(confirmBt.props().disabled).toBe(true);
    expect(inputField.length).toBe(1);
    inputField.simulate('change', { target: { value: '123' } });
    displayState.update();
    const confirmBtAfter = displayState.find('button.warning-confirm');
    expect(confirmBtAfter.props().disabled).toBeFalsy();
  });

});
