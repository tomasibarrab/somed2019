import { any, compose, equals, not, pathOr } from 'ramda';
import React from 'react';
import { RouteComponentProps, withRouter } from 'react-router-dom';

import { Button } from '@buffet/button';
import { Panel } from '@buffet/panel';

import { AsyncProgress } from 'shared-react-utils/useAsync/useAsync';

import { AsyncCallStatus } from '../../common/AsyncCallStatus/AsyncCallStatus';
import DataKeyValueDisplay from '../../common/DataDisplay/DataKeyValueDisplay';
import { OperationalConfirm } from '../../common/OperationalConfirm/OperationalConfirm';
import strings from '../../strings';
import { RidData } from '../../types';
import { EverclearProgress } from './EverclearProgress';
import { RidSummary } from './RidSummary';
import { useGetReadyForEverclear } from './useGetReadyForEverclear';
import { usePerformEverclear } from './usePerformEverclear';

import './RestaurantEverclear.scss';

type RestaurantEverclearProps = RouteComponentProps<any>;

const reservations = pathOr(0, ['data', 'venueSummary', 'ReservationCount']);
const guests = pathOr(0, ['data', 'venueSummary', 'GuestCount']);

const records = (rest: RidData | undefined) => reservations(rest) +  guests(rest);

const anyInProgress = any(equals(AsyncProgress.Started));

/**
 * Component managing the prerequisite for everclear and the actual bulkDelete
 * action.
 */
export function RestaurantEverclearImpl({ match }: RestaurantEverclearProps) {
  const { rid } = match.params;
  const [ confirmEverclear, askToConfirmEverclear ] = React.useState(false);
  const { everclearStatus, triggerEverclearReadyCheck } = useGetReadyForEverclear(rid);
  const { statusEverclearCheck, statusEverclearProgress, triggerEverclear } = usePerformEverclear(rid);

  React.useEffect(triggerEverclearReadyCheck, [rid]);

  React.useEffect(() => {
    if (statusEverclearProgress && statusEverclearProgress.status === 'Complete') {
      triggerEverclearReadyCheck();
    }
  }, [statusEverclearProgress]);

  function submitEverclear() {
    askToConfirmEverclear(true);
  }

  function handleConfirmEverclear() {
    askToConfirmEverclear(false);
    triggerEverclear();
  }

  function handleCancelEverclear() {
    askToConfirmEverclear(false);
  }

  const statusSet = [
    everclearStatus.ridInfoStatus.progress,
    everclearStatus.ridDataStatus.progress,
    everclearStatus.ridWhitelistStatus.progress,
  ]
  const inProgress = anyInProgress(statusSet);
  const totRecords = records(everclearStatus.ridData);
  const tooManyRecords = totRecords > 500;
  const notEnoughRecords = totRecords <= 0;

  const everclearDisabled =
    inProgress ||
    tooManyRecords ||
    notEnoughRecords ||
    statusEverclearProgress !== undefined ||
    !everclearStatus.canEverclear;

  return (
    <Panel title={strings['rid.everclear.title']}>
      <div className="select-rid">
        <span className="label">{strings['rid.everclear.label']}</span>
        <span className="rid">{rid}</span>
        <Button theme="primary"
          type="button"
          onClick={submitEverclear}
          disabled={everclearDisabled}>
          {strings['rid.everclear.submit']}
        </Button>
        {!inProgress && tooManyRecords &&
          <span className="warning">{strings['rid.everclear.tomanyrecords']}</span>
        }
        {!inProgress && !everclearStatus.canEverclear &&
          <span className="warning">{strings['rid.everclear.notwhitelisted']}</span>
        }
      </div>
      <div className="info-panel">
        <AsyncCallStatus
          key="1"
          status={everclearStatus.ridInfoStatus}
          message={strings['rid.everclear.loading']}
          errorMessage={strings['rid.everclear.noinfo']}
        >
          <RidSummary data={everclearStatus.ridInfo} />
        </AsyncCallStatus>
        <AsyncCallStatus
          key="2"
          status={everclearStatus.ridDataStatus}
          message={strings['rid.everclear.loading']}
          errorMessage={strings['rid.everclear.noinfo']}
        >
          <DataKeyValueDisplay {...everclearStatus.ridData} />
        </AsyncCallStatus>
      </div>
      <EverclearProgress
        deleteStatus={statusEverclearProgress}
        fetchStatus={statusEverclearCheck}
      />
      <OperationalConfirm
        id={rid}
        massages={[ 'rid.everclear.confirm.message.1', 'rid.everclear.confirm.message.2' ]}
        label={'rid.everclear.confirm.label'}
        onConfirm={handleConfirmEverclear}
        onCancel={handleCancelEverclear}
        show={confirmEverclear}
      />
    </Panel>
  );
}

export const RestaurantEverclear = withRouter(RestaurantEverclearImpl);
