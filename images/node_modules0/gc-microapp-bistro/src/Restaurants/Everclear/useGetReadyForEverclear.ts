import React from 'react';

import { AsyncStatus, useAsync } from 'shared-react-utils/useAsync/useAsync';

import {
  getDataFetch,
  getRestaurantInfo,
  getRidBulkDeleteWhitelist,
} from '../../api';
import { Restaurant, RidData } from '../../types';
import { simpleAsyncSequence } from '../../utils';

interface CanEverclearStatus {
  canEverclear: boolean;
  ridData: RidData | undefined;
  ridInfo: Restaurant | undefined;
  ridDataStatus: AsyncStatus;
  ridInfoStatus: AsyncStatus;
  ridWhitelistStatus: AsyncStatus;
};

export interface ReadyEverclear {
  everclearStatus: CanEverclearStatus;
  triggerEverclearReadyCheck: () => void;
};

/**
 * Custom hook (used by RestaurantEverclear) loading RID information required for
 * checking everclear preconditions.
 * @param rid
 */
export function useGetReadyForEverclear(rid: string): ReadyEverclear {
  const [ ridData, setRidData ] = React.useState<RidData>();
  const [ ridInfo, setRidInfo ] = React.useState<Restaurant>();
  const [ canEverclear , setRidWhitelist] = React.useState(false);

  const [ ridWhitelistStatus, getRidWhitelist ] = useAsync(getRidBulkDeleteWhitelist);
  const [ ridInfoStatus, getRidInfo ] = useAsync(getRestaurantInfo);
  const [ ridDataStatus, getRidData ] = useAsync(getDataFetch(rid, 'ImportStatus'));

  const triggerEverclearReadyCheck = React.useCallback(() => {
    const asyncSequence = [
      () => getRidInfo(rid)
         .then(setRidInfo),
      () => getRidData()
        .then(setRidData),
      () => getRidWhitelist(rid)
        .then(setRidWhitelist),
    ];
    simpleAsyncSequence(asyncSequence);
  }, [ rid ]);

  return {
    everclearStatus: {
      canEverclear,
      ridData,
      ridDataStatus,
      ridInfo,
      ridInfoStatus,
      ridWhitelistStatus,
    },
    triggerEverclearReadyCheck,
  };
}
