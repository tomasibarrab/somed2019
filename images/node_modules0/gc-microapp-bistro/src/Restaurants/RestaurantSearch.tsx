import pathOr from 'ramda/src/pathOr';
import React from 'react';
import { RouteComponentProps, withRouter } from 'react-router-dom';

import { Button } from '@buffet/button';
import { LabeledCheckbox } from '@buffet/checkbox';
import { Panel } from '@buffet/panel';

import { AsyncProgress } from 'shared-react-utils/useAsync';

import * as api from '../api';
import { useHistorySearch } from '../common/Hooks/usehistorysearch';
import { SearchInfo } from '../common/SearchInfo/SearchInfo';
import { SearchInput } from '../common/SearchInput/SearchInput';
import strings from '../strings';
import { headerButtonStyle } from '../styles';

import { RestaurantResult } from './RestaurantResult';

import './RestaurantsSearch.scss';

type Props = RouteComponentProps<any>;

const defaultSearch = {
  query: '',
  withDiscrepancies: 'false',
}

const AddNewTestRid = ({onClick}: { onClick: () => void }) => (
  <Button type="button" theme="primary" onClick={onClick} >
    {strings['restaurant.add.new']}
  </Button>
)

export function RestaurantsSearchImpl(props: Props) {
  const [ search, setSearch ] = useHistorySearch(api.searchRestaurants, defaultSearch, props);

  // Trigger a search when the search input changes
  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {
    const query = pathOr('', ['target', 'value'], e);
    const value = search.value;
    setSearch({ ...value, query });
  };

  function handleWithDiscrepanciesCheck() {
    const { value } = search;
    setSearch({ ...value, withDiscrepancies: (value.withDiscrepancies === 'false').toString() })
  }

  function handleNewTestRidClick() {
    alert('Not yet implemented');
  }

  return (
    <Panel
      title={strings['restaurant.title']}
      headerContent={<AddNewTestRid onClick={handleNewTestRidClick} />}
      customHeaderStyle={headerButtonStyle}
    >
      <SearchInput
        label={strings['restaurant.search.label']}
        value={search.value.query}
        onChange={handleChange}
      />
      <SearchInfo status={search.status} result={search.result} >
        <LabeledCheckbox
            disabled={search.status.progress === AsyncProgress.Started}
            id="search-internal-check"
            checked={search.value.withDiscrepancies === 'true'}
            label="With Discrepancies"
            onClick={handleWithDiscrepanciesCheck} />
      </SearchInfo>
      {search.result && <RestaurantResult restaurants={search.result.items || []} />}
    </Panel>
  );
}

export const RestaurantSearch = withRouter(RestaurantsSearchImpl);
