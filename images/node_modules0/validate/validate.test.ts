import {
  compose,
  create,
  email,
  maxChars,
  minChars,
  required,
} from './validate';

describe('validate validators', () => {

  describe('required validator', () => {

    it('should fail with undefined', () => {
      expect(required()(undefined)).toBeTruthy();
    });

    it('should fail with empty string', () => {
      expect(required()('')).toBeTruthy();
    });

    it('should succeed with 0', () => {
      expect(required()(0)).toBeUndefined();
    });

    it('should succeed with a non-empty string', () => {
      expect(required()('abc')).toBeUndefined();
    });
  });

  describe('email validators', () => {
    it('should pass email with dots', () => {
      expect(email()('jane123.doe456@reso.co.uk')).toBeUndefined();
    });

    it('should fail email with 2 @ signs', () => {
      expect(email()('jane123.doe456@reso@co.uk')).toBeTruthy();
    });

    it('should pass all these emails', () => {
      expect(email()('pass@-doe.com')).toBeUndefined();
      expect(email()('pass@do-e.com')).toBeUndefined();
      expect(email()('pass@do.e.com')).toBeUndefined();
      expect(email()('"pass"@doe.com')).toBeUndefined();
      expect(email()('email@domain.co.jp')).toBeUndefined();
    });

    it('should fail invalid emails', () => {
      expect(email()('jane@')).toBeTruthy();
      expect(email()('jane@doe')).toBeTruthy();
      expect(email()('jane.com')).toBeTruthy();
      expect(email()('jane@doe.')).toBeTruthy();
      expect(email()('@doe.com')).toBeTruthy();
      expect(email()('@doe')).toBeTruthy();
      expect(email()('.fail@doe.com')).toBeTruthy();
      expect(email()('fail.@doe.com')).toBeTruthy();
      expect(email()('fail@doe..com')).toBeTruthy();
      expect(email()('fail@doe.com (text after')).toBeTruthy();
      expect(email()('Joe Smith <email@domain.com>')).toBeTruthy();
      expect(email()('ema(il@domain.com')).toBeTruthy();
    });
  });

  describe('min chars validator', () => {
    const minChars3 = minChars(3);

    it('should fail for undefined string', () => {
      expect(minChars3(undefined)).toBeTruthy();
    });

    it('should fail for 0 chars', () => {
      expect(minChars3('')).toBeTruthy();
    });

    it('should fail for 1 chars', () => {
      expect(minChars3('a')).toBeTruthy();
    });

    it('should succeed for 3 chars', () => {
      expect(minChars3('abc')).toBeUndefined();
    });

    it('should succeed for 4 chars', () => {
      expect(minChars3('abcd')).toBeUndefined();
    });
  });

  describe('max chars validator', () => {
    const maxChars3 = maxChars(3);

    it('should fail for undefined string', () => {
      expect(maxChars3(undefined)).toBeTruthy();
    });

    it('should fail for 4 chars', () => {
      expect(maxChars3('abcd')).toBeTruthy();
    });

    it('should succeed for 0 chars', () => {
      expect(maxChars3('')).toBeUndefined();
    });

    it('should succeed for 1 chars', () => {
      expect(maxChars3('a')).toBeUndefined();
    });

    it('should succeed for 3 chars', () => {
      expect(maxChars3('abc')).toBeUndefined();
    });
  });

  describe('compose', () => {
    const minChars3 = minChars(3);
    const maxChars5 = maxChars(5);
    const minChars3MaxChars5 = compose(minChars3, maxChars5);

    it('should fail for 2 chars', () => {
      expect(minChars3MaxChars5('ab')).toBeTruthy();
    });

    it('should succeed for 3 chars', () => {
      expect(minChars3MaxChars5('abc')).toBeUndefined();
    });

    it('should succeed for 5 chars', () => {
      expect(minChars3MaxChars5('abcde')).toBeUndefined();
    });

    it('should fail for 6 chars', () => {
      expect(minChars3MaxChars5('abcdef')).toBeTruthy();
    });
  });

  // tslint:disable:object-literal-sort-keys
  describe('create', () => {
    const validators = {
      requiredField: required(),
      min3Field: minChars(3),
      max5Field: maxChars(5),
    };

    const formValidator = create(validators);

    it('should succeed for valid values', () => {
      const values = {
        requiredField: 'something',
        min3Field: 'abc',
        max5Field: 'abcde',
      };

      expect(formValidator(values)).toMatchObject({});
    });

    it('should fail for an invalid value', () => {
      const values = {
        min3Field: 'abc',
        max5Field: 'abcde',
      };

      const errors = formValidator(values);

      expect(errors.requiredField).toBeTruthy();
      expect(errors.min3Field).toBeUndefined();
      expect(errors.max5Field).toBeUndefined();
    });
  });
  // tslint:enable:object-literal-sort-keys
});
