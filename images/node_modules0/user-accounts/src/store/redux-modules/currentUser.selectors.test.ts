
import { User } from '../types';
import { selectors } from './currentUser';

const mockedUser: User = {
  email: 'foo@foo.com',
  enable2FA: false,
  firstName: 'John',
  gdprNotificationReceiver: false,
  id: '123',
  lastActive: '',
  lastName: 'Smith',
  newUser: false,
  phone: '01234345667',
  role: 'urn:ot.rest.perms:marketing',
  roles: [ 'urn:ot.rest.perms:marketing', 'urn:ot.rest.perms:analytics' ],
  title: 'Guest_Center_Title_Chef',
  urn: 'test-user-urn',
};

const state = {
  appRoles: {
    roles: [{
      permissions: ['test-1', 'test-2'],
      urn: 'test-role',
    }],
  },
  currentContext: {
    restaurant: {
      address : {
        countryCode: 'en-us',
      },
      productType: 'guest_center',
      rid: 123,
    },
  },
  currentUser: {
    id: '123',
    status: {
      fetch: 'started',
      save: 'started',
    },
    user: mockedUser,
  },
};

describe('CurrentUser selectors', () => {

  it('should return if the create user has completed', () => {
    const selection = selectors.createHasCompleted(state);
    expect(selection).toBe(false);
  });

  it('should return if saving a user failed', () => {
    const selection = selectors.hasFailed(state);
    expect(selection).toBe(false);
  });

  it('should return if a currentUser is new', () => {
    const selection = selectors.isNewUser(state);
    expect(selection).toBe(false);
  });

  it('should return if we are saving a user', () => {
    const selection = selectors.isSaving(state);
    expect(selection).toBe(true);
  });

  it('should return if an update has complete', () => {
    const selection = selectors.updateHasCompleted(state);
    expect(selection).toBe(false);
  });

  it('should return the current user data plus rid related info', () => {
    const selection = selectors.saveUser(state, mockedUser);
    expect(selection.id).toBe(mockedUser.id);
    expect(selection.product).toBe(state.currentContext.restaurant.productType);
    expect(selection.countryCode).toBe(state.currentContext.restaurant.address.countryCode);
  });

});
