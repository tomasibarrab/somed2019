import { pathOr } from 'ramda';
import { Observable } from 'rxjs/Observable';
import {
  ajaxDelete,
  ajaxGetJSON,
  ajaxPost,
  ajaxPut,
  AjaxResponse,
} from 'rxjs/observable/dom/AjaxObservable';

import {
  GuestCenterScope,
  PermissionWithMetadata,
  Role,
  SortOrder,
  User,
} from './types';

export interface PermissionResponse {
  principal: string;
  context: string;
  permissions: PermissionWithMetadata[];
}

export interface RoleResponse {
  context?: string,
  roles: Role[];
}

export interface SearchPayload {
  query?: string;
  sort?: string;
  order?: SortOrder;
  skip: number;
  count: number;
  includeRelatedContexts?: boolean;
}

export interface UACApi {
  addUser: ({ user }: { user: any }) => Observable<AjaxResponse>;
  deleteUser: ({ id, recursively }: { id: string, recursively: boolean }) => Observable<AjaxResponse>;
  getAnyUserByEmail: ({ email }: { email: string}) => Observable<User>;
  getPermissions: () => Observable<PermissionResponse>;
  getRoles: () =>  Observable<RoleResponse>;
  getUser: ({ id, getRelatedProfiles }: { id: string, getRelatedProfiles: boolean }) => Observable<User>;
  searchUsers: (payload: SearchPayload) => Observable<AjaxResponse>;
  updateRole: ({ role }: { role: Role }) => Observable<AjaxResponse>;
  updateUser: ({ user }: { user: any }) =>  Observable<AjaxResponse>;
}

const defaultHeaders = {
  'Content-Type': 'application/json',
};

const csrfheader = {
  'X-CSRF-TOKEN': pathOr('', ['hydronator', 'microapp', 'csrfToken'], window),
};

// =============================== API factories =============================================

export type SpecificApiCreator = (scope: GuestCenterScope, useCommonApi?: boolean) => UACApi;

/**
 * Build an API object with functions pointing to the Group back end.
 * This API proxy fully use URNs, so it can handle both Group and Restaurant calls.
 */
export function commonApiEndpoints(scope: GuestCenterScope): UACApi {
  const { apiBasenameCommon } = scope;

  return {
    addUser: ({ user }) => {
      return ajaxPost(
        `${apiBasenameCommon}/users`,
        {
          ...user,
          id: undefined,
          rid: undefined,
          role: undefined,
        },
        { ...defaultHeaders, ...csrfheader },
      );
    },
    deleteUser: ({ id, recursively = false }) => {
      return ajaxDelete(
        `${apiBasenameCommon}/users/${id}${recursively ? '?deleteRelatedProfiles=true' : ''}`,
        { ...defaultHeaders, ...csrfheader },
      );
    },
    getAnyUserByEmail: ({ email }) => {
      return ajaxGetJSON(`${apiBasenameCommon}/users/any/${email}`);
    },
    getPermissions: () => {
      return ajaxGetJSON(`${apiBasenameCommon}/permissions`);
    },
    getRoles: () => {
      return ajaxGetJSON(`${apiBasenameCommon}/roles`);
    },
    getUser: ({ id, getRelatedProfiles = false }) => {
      return ajaxGetJSON(`${apiBasenameCommon}/users/${id}${getRelatedProfiles ? '?getRelatedProfiles=true' : ''}`);
    },
    searchUsers: (searchPayload) => {
      return ajaxPost(
        `${apiBasenameCommon}/users/search`,
        searchPayload,
        defaultHeaders,
      );
    },
    updateRole: ({ role }) => {
      return ajaxPut(
        `${apiBasenameCommon}/roles/${role.urn}`,
        {
          ...role,
          editingPermissions: undefined,
          hiddenPermissions: undefined,
          status: undefined,
        },
        { ...defaultHeaders, ...csrfheader },
      );
    },
    updateUser: ({ user }) => {
      return ajaxPut(
        `${apiBasenameCommon}/users/${user.urn}`,
        {
          ...user,
          id: undefined,
          rid: undefined,
          role: undefined,
        },
        { ...defaultHeaders, ...csrfheader },
      );
    },
  };
}
