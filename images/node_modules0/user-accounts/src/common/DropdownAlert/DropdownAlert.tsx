import { AlertMessage } from '@buffet/alert-message';
import { Notify } from '@buffet/notify'
import React, { useEffect, useState } from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';


interface DropdownAlertOwnProps {
  drop: boolean;
  msg: string;
  type: 'success' | 'error';
  onClose?: () => void;
}

type DropdownAlertProps = DropdownAlertOwnProps & InjectedIntlProps;

const getIcon = (type: 'success' | 'error'): string => {
  switch (type) {
    case 'success': return 'success';
    case 'error': return 'negative';
    default:
      return '';
  }
};

function DropdownAlertImpl({ msg, type, drop, onClose }: DropdownAlertOwnProps) {
  const [ showAlert, setShowAlert ] = useState(() => drop);

  useEffect(() => {
    setShowAlert(drop)
  }, [drop]);

  function closeAlert() {
    setShowAlert(false);

    if (onClose) {
      onClose();
    }
  }

  return (
    <Notify
      show={showAlert}
      autohide={false}
      delay={0}
    >
      <AlertMessage
        id="AlertMessage"
        iconId={getIcon(type)}
        type={type}
        message={msg}
        onClose={closeAlert}
      />
    </Notify>
  );
}

export const DropdownAlert = injectIntl<DropdownAlertProps>(DropdownAlertImpl);
// export { DropdownAlertImpl as PureDropdownAlertl };
