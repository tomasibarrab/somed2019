import React from 'react';
import { FieldArrayRenderProps } from 'react-final-form-arrays';
import { InjectedIntl } from 'react-intl';

import { CheckboxFinalField } from 'shared-react-atomic-ui/finalform-fields';

import {
  isGroupAccessType,
  isGroupPermission,
  isRestaurantAccessType,
  isRestaurantPermission,
} from '../utils/contextHelpers';
import PermissionsList from './PermissionsList';

import { Role } from '../store/types';
import { isRoleAllAccess } from '../utils/rolesHelpers';


interface UserFormRolesParams {
  disabled: boolean;
  intl: InjectedIntl;
  scopeType: string;
  values: any;
  filterFields?: boolean;
  forceDisabled?: boolean;
}

type UserFormRolesRenderer = (params: UserFormRolesParams) => React.FunctionComponent<FieldArrayRenderProps>;

// This function returns a renderProp that will map all the files passed to React components
const userFormRolesRenderer: UserFormRolesRenderer = ({
  disabled,
  intl,
  scopeType,
  values,
  filterFields = false,
  forceDisabled = false,
}) => {
  return ({ fields }) => {
    // Display the list of roles as a collection of checkbox.
    return (
      <>
        {fields
          .map((roleSet, idx) => ({
            role: values[fields.name][idx] as Role,
            roleSet,
          }))
          .filter(({ role }: { role: Role }) => {
            // in a Group context
            if (filterFields) {
              // filter either Group or Restaurant roles
              return (scopeType === 'group') ? isGroupAccessType(role) : isRestaurantAccessType(role);
            }

            return true;
          })
          .map(({ role, roleSet }: { role: Role, roleSet: string }) => {
            let disabledClassName = '';
            if (filterFields && forceDisabled) {
              disabledClassName = disabled ? 'disabled' : '';
            } else {
              disabledClassName = isRoleAllAccess(role.urn) || !disabled ? '' : 'disabled';
            }

            return (
              <li
                key={role.urn}
                className={`${disabledClassName} ${scopeType === 'group' ? 'compact' : ''}`}
              >
                <CheckboxFinalField
                  id={`checkbox-${role.urn}`}
                  name={`${roleSet}.set`}
                  label={intl.formatMessage({ id: role.urn })}
                  disabled={!!disabledClassName}
                />
                {scopeType === 'group'
                  ? <div className="role-features">
                      <p id={`role-group-features-${role.urn}`} >
                        <strong>{intl.formatMessage({ id: 'userAccounts.group' })}: </strong>
                        <PermissionsList permissions={role.permissions.filter(isGroupPermission)} />
                      </p>
                      <p id={`role-restaurant-features-${role.urn}`}>
                        <strong>{intl.formatMessage({ id: 'userAccounts.rest' })}: </strong>
                        <PermissionsList permissions={role.permissions.filter(isRestaurantPermission)} />
                      </p>
                    </div>
                  : <div className="role-features">
                      <p id={`role-restaurant-features-${role.urn}`}>
                        <PermissionsList permissions={role.permissions} />
                      </p>
                    </div>
                }
              </li>
            );
          })
        }
      </>
    );
  };
};

export default userFormRolesRenderer;
