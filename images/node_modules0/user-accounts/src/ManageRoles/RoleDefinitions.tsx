import { Button } from '@buffet/button';
import React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';

import { Chevron } from 'gca-react-components';

import './RoleDefinitions.scss';

interface RoleDefinitionState {
  show: boolean;
}

interface RoleDefinitionsOwnProps {
  type: string;
}

type RoleDefinitionsProps = RoleDefinitionsOwnProps & InjectedIntlProps;

class RoleDefinitionsImpl extends React.Component<RoleDefinitionsProps, RoleDefinitionState> {

  constructor(p: RoleDefinitionsProps) {
    super(p);
    this.state = {
      show: false,
    }
  }

  public renderGroupPermissionInfo = () => {
    const { intl } = this.props;
    return (
      <>
        <h2>{intl.formatMessage({ id: 'manageRoles.group.features' })}</h2>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.group.perms:centralreservations' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.group.perms:centralreservations.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.group.perms:report' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.group.perms:reporting.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.group.perms:accounts' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.group.perms:accounts.definition' })}
        </p>
     </>
    );
  };

  public renderRestaurantPermissionInfo = () => {
    const { intl } = this.props;
    return (
      <>
        <h2>{intl.formatMessage({ id: 'manageRoles.rest.features' })}</h2>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:foh' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:foh.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:availability' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:availability.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:reporting' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:reporting.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:restaurantsettings' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:restaurantsettings.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:partnerservices' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:partnerservices.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:restprofile' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:restprofile.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:marketing' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:marketing.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:billing' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:billing.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:accounts' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:accounts.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:reviews' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:reviews.definition' })}
        </p>
        <p>
          <strong>{intl.formatMessage({ id: 'urn:ot.rest.perms:guestComm' })}</strong>
          <span>: </span>
          {intl.formatMessage({ id: 'urn:ot.rest.perms:guestComm.definition' })}
        </p>
      </>
    );
  };

  public render() {
    const { intl, type } = this.props;
    const { show } = this.state;
    return (
      <div id={`role-definitions-${type}`} className="gca-role-definitions">
        <Button
          className="show-def-bt"
          type="button"
          theme="link"
          size="xsmall"
          onClick={this.handleClick}
        >
          <span>
            {intl.formatMessage({ id: show ? 'manageRoles.hide.definitions' : 'manageRoles.show.definitions'})}
          </span>
          <Chevron direction={show ? 'up' : 'down'} color="#4a90e2"/>
        </Button>
        <div className={`content ${type === 'group' ? 'large' : 'small'} ${show ? 'show' : 'hide'}`}>
          {type === 'group'
            ? this.renderGroupPermissionInfo()
            : null
          }
          {this.renderRestaurantPermissionInfo()}
        </div>
      </div>
    )
  }

  private handleClick = () => {
    this.setState({ show: !this.state.show });
  }
}

export const RoleDefinitions = injectIntl<RoleDefinitionsProps>(RoleDefinitionsImpl);
export { RoleDefinitionsImpl as PureRoleDefinitions };
