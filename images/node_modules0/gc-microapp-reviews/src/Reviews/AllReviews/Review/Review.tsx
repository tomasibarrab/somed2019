import { FeatureToggle } from 'gca-react-components';
import { selectors } from 'gca-react-components/src/redux-modules/languageProvider';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { Review } from '../../../store/allReviews/allReviews';
import { State } from '../../../store/types';
import Replies from '../Replies/Replies';
import RespondToReview from '../RespondToReview/RespondToReview';
import ReviewBody from '../ReviewBody/ReviewBody';
import ReviewHeader from '../ReviewHeader/ReviewHeader';
import ReviewSummary from '../ReviewSummary/ReviewSummary';

import './Review.scss';

const formatDateOptions = {
  day: 'numeric',
  month: 'numeric',
  year: 'numeric',
};

interface SP {
  locale: string;
  review: Review;
}

interface OP {
  reviewId: string;
}

interface BaseProps extends SP, OP {}
interface Props extends BaseProps, InjectedIntlProps {}

function ShowReview({ review, intl }: Props) {
  const replies = review.Replies || [];
  const rejected = review.SimplifiedModerationState === 'REJECTED';
  const rejectedTag = rejected ? (
    <div className="rejected-tag">
      <FormattedMessage id="reviews.allReviews.rejected" />
      <div className="tooltip">
        <FormattedMessage tagName="p" id="reviews.allReviews.rejectedTooltip" />
      </div>
    </div>
  ) : (
    ''
  );

  const formattedReview = {
    ...review,
    DinedDateTime: intl.formatDate(review.DinedDateTime, formatDateOptions),
    SubmissionDateTimeUtc: intl.formatDate(review.SubmissionDateTimeUtc, formatDateOptions),
  };

  return (
    <div className="gca-review-container">
      <ReviewSummary ratings={review.Rating} rejected={rejected} />
      <div className="gca-review-main-container">
        {rejectedTag}
        <ReviewHeader review={formattedReview} />
        <ReviewBody review={review} />
        <FeatureToggle featureId="featureGcaRespondToReviews">
          <Replies replies={replies} />
        </FeatureToggle>
        <FeatureToggle featureId="featureGcaRespondToReviews">
          <RespondToReview reviewId={review.ReviewId} form={`replyToReview-${review.ReviewId}`} />
        </FeatureToggle>
      </div>
    </div>
  );
}

function mapStateToProps(state: State, ownProps: OP) {
  return {
    locale: selectors.locale(state),
    review: state.allReviews.reviews[ownProps.reviewId],
  };
}

export default connect<SP, {}, OP>(mapStateToProps)(injectIntl<BaseProps>(ShowReview));
export { ShowReview as PureReview };
