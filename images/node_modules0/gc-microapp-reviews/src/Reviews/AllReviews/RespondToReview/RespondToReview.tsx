import classNames from 'classnames';
import { AlertMessage, Button, TextAreaField } from 'gca-react-components';
import * as React from 'react';
import { InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { Field, getFormMeta, InjectedFormProps, reduxForm } from 'redux-form';

import { resetStatus } from '../../../store/reviewReplies/reviewReplies';
import { sendReviewReply } from '../../../store/sharedActions';
import { State, Status } from '../../../store/types';

import './RespondToReview.scss';

export interface RespondToReviewsData {
  message: string;
}

export const enum Fields {
  Message = 'Message',
}

interface SP {
  active: boolean;
  status?: Status;
}

interface DP {
  resetStatus(reviewId: string): void;
  send(payload: { reviewId: string; message: string }): void;
}

interface OP {
  form: string;
  reviewId: string;
}

interface ConnectedProps extends SP, DP, OP {}
interface IntlProps extends ConnectedProps, InjectedIntlProps {}
interface FormProps extends IntlProps, InjectedFormProps<RespondToReviewsData, IntlProps> {}

class RespondToReviews extends React.Component<FormProps> {
  public render() {
    const { active, dirty, handleSubmit, intl, invalid, pristine, status } = this.props;
    const expanded = active || dirty;

    // Ugly side-effect. If you think of a better way to do this, have at it!
    if (status === Status.Done) {
      this.reset();
    }

    return (
      <form onSubmit={handleSubmit} className={classNames('respond-to-review-form', { expanded })}>
        <TextAreaField
          placeholder={intl.formatMessage({ id: 'reviews.replies.form.placeholder' })}
          name={Fields.Message}
          max={500}
          showLabels={expanded}
        />
        <Button
          htmlType="submit"
          theme="primary"
          disabled={pristine || invalid}
          busy={status === Status.Started}
          className="send"
        >
          {intl.formatMessage({ id: 'reviews.replies.form.send' })}
        </Button>
        <Button disabled={status === Status.Started} onClick={this.reset}>
          {intl.formatMessage({ id: 'reviews.replies.form.cancel' })}
        </Button>
        <AlertMessage display="block" active={status === Status.Failed} type="warn">
          {intl.formatMessage({ id: 'reviews.replies.form.error' })}
        </AlertMessage>
      </form>
    );
  }

  private reset = () => {
    this.props.resetStatus(this.props.reviewId);
    this.props.reset();
  };
}

const ReduxRespondToReviews = reduxForm<RespondToReviewsData, IntlProps>({
  onSubmit(values, dispatch, props) {
    props.send({ reviewId: props.reviewId, message: (values as any)[Fields.Message] });
  },
})(RespondToReviews);

const mapState = (state: State, ownProps: OP) => {
  const meta: any = getFormMeta(ownProps.form)(state);

  return {
    active: meta && meta[Fields.Message] && meta[Fields.Message].active,
    status: state.reviewReplies.statusList[ownProps.reviewId],
  };
};

const mapDispatch = {
  resetStatus,
  send: sendReviewReply.started,
};

export default connect<SP, DP, OP>(mapState, mapDispatch)(injectIntl<ConnectedProps>(ReduxRespondToReviews));
