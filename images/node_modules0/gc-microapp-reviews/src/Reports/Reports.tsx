import { AsyncContent, Button, Panel } from 'gca-react-components';
import React from 'react';
import { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';
import { connect } from 'react-redux';

import { editNewReportToggle, fetchReports } from '../store/reports/reports';
import './Reports.scss';
import ReportsList from './ReportsList/ReportsList';

interface SP {
  isFetching: boolean;
  reportIds: string[];
  fetchFailed: boolean;
  isCreating: boolean;
  editActiveId: string;
}

interface DP {
  fetchReportsRequest(): void;
  editNewReportToggle(): void;
}

interface BaseProps extends SP, DP {}
interface Props extends BaseProps, InjectedIntlProps {}

class Reports extends React.Component<Props> {
  public componentDidMount() {
    this.props.fetchReportsRequest();
  }

  public render() {
    const headerContent = (
      <div className="gca-reports-header-content">
        <Button theme="bare" onClick={this.props.editNewReportToggle} disabled={this.props.isCreating}>
          <span>+ </span>
          <FormattedMessage id="reports.addNewReport" />
        </Button>
      </div>
    );

    return (
      <Panel title={this.props.intl.formatMessage({ id: 'reports.title' })} headerContent={headerContent}>
        <AsyncContent
          isLoading={this.props.isFetching}
          isError={this.props.fetchFailed}
          errorTitle={this.props.intl.formatMessage({ id: 'app.errorTitle' })}
          errorMessage={this.props.intl.formatMessage({ id: 'app.errorMessage' })}
        >
          <ReportsList
            reportIds={this.props.reportIds}
            isCreating={this.props.isCreating}
            editActiveId={this.props.editActiveId}
          />
        </AsyncContent>
      </Panel>
    );
  }
}

function mapStateToProps(state: any) {
  return {
    editActiveId: state.reports.editActiveId,
    fetchFailed: state.reports.fetchFailed,
    isCreating: state.reports.isCreating,
    isFetching: state.reports.isFetching,
    reportIds: state.reports.reportIds,
  };
}

const mapDispatch = { fetchReportsRequest: fetchReports.started, editNewReportToggle };

export default connect<SP, DP, {}>(mapStateToProps, mapDispatch)(injectIntl<BaseProps>(Reports));

// this export is so we can unit test Reports without the store
export { Reports as PureReports };
