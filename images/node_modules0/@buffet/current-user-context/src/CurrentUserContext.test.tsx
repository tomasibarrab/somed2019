import React from 'react';
import { render, wait } from 'react-testing-library';
import { CurrentUserConsumer, CurrentUserProvider, State, USER_CONTEXT_URL } from './CurrentUserContext';
import mock from 'xhr-mock';
import userContextFixture from '../fixtures/userContext';

async function renderScenario({ waitForResponse = true, resultSuccess = true }) {
  mock.setup();

  if (resultSuccess) {
    mock.get(USER_CONTEXT_URL, {
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userContextFixture)
    });
  } else {
    mock.get(USER_CONTEXT_URL, () => Promise.reject(new Error()));
  }

  let data: State = undefined as any;

  render(
    <CurrentUserProvider>
      <CurrentUserConsumer>
        {userState => {
          data = userState;
          return null;
        }}
      </CurrentUserConsumer>
    </CurrentUserProvider>
  );

  if (waitForResponse) {
    await wait();
  }

  return data;
}

describe('CurrentUserProvider & CurrentUserConsumer', async () => {
  it('Should set status to started when mounted', async () => {
    const data = await renderScenario({ waitForResponse: false });

    expect(data && data.status === 'started').toBe(true);
  });

  it('Should set status to done when API call finishes', async () => {
    const data = await renderScenario({});
    expect(data && data.status === 'done').toBe(true);
  });

  it('Should provide context data when API call succeeds', async () => {
    const data = await renderScenario({});

    expect(data && data.status === 'done' && data.data).toEqual(userContextFixture);
  });

  it('Should set status to failed when API call fails', async () => {
    const realConsoleError = console.error;
    const mockConsoleError = jest.fn();
    console.error = mockConsoleError;
    const data = await renderScenario({ resultSuccess: false });

    expect(data && data.status === 'failed').toBe(true);
    console.error = realConsoleError;
  });

  it('Should copy data to session storage when API call succeeds', async () => {
    const data = await renderScenario({});
    const expected = data.data;

    expect(JSON.parse(sessionStorage.getItem('user') || '')).toEqual(expected);
  });
});
