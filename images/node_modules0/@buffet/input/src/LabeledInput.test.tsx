import React from 'react';
import { render, cleanup, act } from 'react-testing-library';
import { LabeledInput, LabeledInputProps } from './LabeledInput';

async function renderScenario(override = {}) {
  const { statusText, disabled, value } = override as LabeledInputProps;
  const props: LabeledInputProps = {
    disabled,
    label: 'test label',
    onChange: jest.fn(),
    statusText,
    value
  };
  const labeledInput = render(<LabeledInput {...props} />);

  return { labeledInput, props };
}

describe('a labeled input', () => {
  beforeAll(() => {
    jest.useFakeTimers();
  });
  afterEach(() => {
    cleanup();
  });
  it('should render a react component for status text', async () => {
    const link = <a href="some.url">a link</a>;
    const { labeledInput } = await renderScenario({
      statusText: <p>{link} to some url</p>
    });

    expect(labeledInput.getByText('a link').getAttribute('href')).toBe('some.url');
  });

  it('should animate the status text in and out', async () => {
    const { labeledInput, props } = await renderScenario();
    expect(labeledInput.queryByText('testing status code')).toBeNull();

    labeledInput.rerender(<LabeledInput {...props} statusText="testing status code" />);
    expect(labeledInput.getByText('testing status code')).toBeTruthy();

    labeledInput.rerender(<LabeledInput {...props} />);
    act(() => jest.runAllTimers());
    expect(labeledInput.queryByText('testing status code')).toBeNull();
  });

  it('should be disabled', async () => {
    const { labeledInput } = await renderScenario({ disabled: true, value: 'disabled text' });

    expect(labeledInput.getByLabelText('test label').hasAttribute('disabled')).toBeTruthy();
  });
});
