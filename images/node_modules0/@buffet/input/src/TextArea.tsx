import React from 'react';
import classnames from 'classnames/bind';
import styles from './TextArea.css';

const cx = classnames.bind(styles);

export interface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  errorText?: string;
  valid?: boolean;

  onChange(e: React.ChangeEvent<HTMLTextAreaElement>): void;
}

export class TextArea extends React.Component<TextAreaProps> {
  static defaultProps = {
    maxLength: 500,
    rows: 5
  };

  setFocus = (el: HTMLTextAreaElement) => {
    if (this.props.autoFocus && el) {
      el.focus();
    }
  };

  render() {
    const { className, valid, errorText, ...rest } = this.props;

    return (
      <div>
        <textarea
          {...rest}
          ref={this.setFocus}
          className={cx(styles.gcaInput, { invalid: !valid, disabled: this.props.disabled }, className)}
        />
        {errorText && <div className={styles.validationError}>{errorText}</div>}
      </div>
    );
  }
}
