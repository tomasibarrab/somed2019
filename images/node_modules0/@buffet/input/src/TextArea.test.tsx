import React from 'react';
import { render, cleanup } from 'react-testing-library';
import { TextArea, TextAreaProps } from './TextArea';

function renderScenario(props: Partial<TextAreaProps> = {}) {
  const defaultProps = {
    onChange: jest.fn()
  };

  const mergedProps = {
    ...defaultProps,
    ...props
  };

  return render(<TextArea {...mergedProps} />);
}

function getTextAreaElement(props: Partial<TextAreaProps> = {}) {
  const ariaLabel = 'input';
  const { getByLabelText } = renderScenario({ ...props, 'aria-label': ariaLabel });
  const inputElement = getByLabelText(ariaLabel) as HTMLTextAreaElement;

  return inputElement;
}

describe('TextArea', async () => {
  afterEach(() => {
    cleanup();
  });

  it('Should set placeholder on the TextArea element', async () => {
    const textAreaElement = getTextAreaElement({ placeholder: 'foo' });
    expect(textAreaElement.placeholder).toBe('foo');
  });

  it('Should set value on the TextArea element', async () => {
    const textAreaElement = getTextAreaElement({ value: 'foo' });
    expect(textAreaElement.value).toBe('foo');
  });

  it('Should set disabled on the TextArea element', async () => {
    const textAreaElement = getTextAreaElement({ disabled: true });
    expect(textAreaElement.disabled).toBe(true);
  });

  it("Should append a passed className to the end of the TextArea element's className list", async () => {
    const textAreaElement = getTextAreaElement({ className: 'customClass' });
    const classes = textAreaElement.className.split(' ');
    expect(classes[classes.length - 1]).toBe('customClass');
  });

  it('Should show error text if present', async () => {
    const { getByText } = renderScenario({ errorText: 'error' });
    expect(getByText('error')).toBeDefined();
  });

  it('Should focus the element when autoFocus is true', async () => {
    const textAreaElement = getTextAreaElement({ autoFocus: true });
    expect(document.activeElement).toEqual(textAreaElement);
  });
});
