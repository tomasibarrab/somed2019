import React from 'react';
import moment from 'moment';
import './initDateRangeTheme';
import { DayPickerSingleDateController, DayPickerSingleDateControllerShape, isInclusivelyBeforeDay } from 'react-dates';
import classNames from 'classnames/bind';
import styles from './DateRangeSelector.css';

const cx = classNames.bind(styles);

interface ButtonProps {
  id: string;
  label: string;
  action(e: any): void;
}

export interface DatePickerProps {
  date: moment.Moment;
  updateDate: (date: any) => void;
  startRange?: moment.Moment;
  endRange?: moment.Moment;
  title?: string;
  showSelectedDates?: boolean;
  locale?: string;
  dateRangeRules?: any;
  applyButton?: ButtonProps;
}

export class DatePicker extends React.Component<DatePickerProps> {
  static defaultProps = {
    showSelectedDates: true,
    dateRangeRules: {
      unit: null,
      inclusivity: '()' // momentjs default
    }
  };

  isOutsideRange = (day: any) =>
    !day.isBetween(
      this.props.startRange,
      this.props.endRange,
      this.props.dateRangeRules.unit,
      this.props.dateRangeRules.inclusivity
    );

  render() {
    /* istanbul ignore next */
    const onFocusChange = () => {};

    let dayPickerProps: DayPickerSingleDateControllerShape = {
      date: this.props.date,
      focused: true,
      onDateChange: day => {
        this.props.updateDate(day);
      },
      onFocusChange,
      numberOfMonths: 1,
      isOutsideRange: day => false,
      keepOpenOnDateSelect: true,
      hideKeyboardShortcutsPanel: true,
      noBorder: true
    };

    if (this.props.startRange && this.props.endRange) {
      dayPickerProps = {
        ...dayPickerProps,
        isOutsideRange: this.isOutsideRange
      };
    }

    const locale = this.props.locale ? this.props.locale : 'en-US';

    return (
      <div className={cx('single-date-selection')}>
        {(this.props.title || this.props.showSelectedDates) && (
          <div className={cx('header')}>
            {this.props.title && <div className={cx('title')}>{this.props.title}</div>}
            {this.props.showSelectedDates && (
              <div className={cx('selected-dates')}>
                <button className={cx('start-date', 'is-active')}>
                  {this.props.date && this.props.date.locale(locale).format('L')}
                </button>
              </div>
            )}
          </div>
        )}
        <DayPickerSingleDateController {...dayPickerProps} />
        {this.props.applyButton && (
          <div className={cx('apply-wrapper')}>
            <button className={cx('apply-button')} onClick={this.props.applyButton.action}>
              {this.props.applyButton.label}
            </button>
          </div>
        )}
      </div>
    );
  }
}
