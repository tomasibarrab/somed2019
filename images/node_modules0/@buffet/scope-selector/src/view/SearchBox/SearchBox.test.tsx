import React from 'react';
import { render, fireEvent, waitForElement, wait } from 'react-testing-library';
import { Props, SearchBox } from './SearchBox';
import { IntlProvider, registerMessages } from '@buffet/intl';

const messages = require('../../../translations/en-US/scope-selector.json');

async function renderScenario(props: Partial<Props>) {
  return render(
    <IntlProvider>
      <SearchBox onChange={jest.fn()} value="" {...props} />
    </IntlProvider>
  );
}

describe('SearchBox', async () => {
  beforeAll(() => {
    registerMessages({ ['en-US']: messages });
    jest.useFakeTimers();
  });

  it('Should have placeholder text', async () => {
    const result = await renderScenario({});
    expect(result.getByPlaceholderText('Search by name, location, or ID')).toBeTruthy();
  });

  it('Should show value', async () => {
    const result = await renderScenario({ value: 'foo' });
    expect((result.getByLabelText('Search', { exact: false }) as any).value).toBe('foo');

    result.rerender(
      <IntlProvider>
        <SearchBox onChange={jest.fn()} value="bar" />
      </IntlProvider>
    );

    expect((result.getByLabelText('Search', { exact: false }) as any).value).toBe('bar');
  });

  it('Should hide cancel button when value is empty', async () => {
    const result = await renderScenario({});
    expect(() => result.getByText('Cancel')).toThrow();
  });

  it('Should show cancel button when value is not empty', async () => {
    const result = await renderScenario({ value: 'foo' });
    expect(result.getByText('Cancel')).toBeTruthy();
  });

  it('Should call onChange when value changes', async () => {
    const onChange = jest.fn();
    const result = await renderScenario({ onChange });
    const input = result.getByLabelText('Search', { exact: false });

    expect((input as any).value).toBe('');

    fireEvent.change(input, {
      target: { value: 'foo' }
    });

    expect((input as any).value).toBe('foo');

    jest.runAllTimers();
    expect(onChange).toBeCalledWith('foo');
  });

  it('Should call onChange with an empty string when cancel is clicked', async () => {
    const onChange = jest.fn();
    const result = await renderScenario({ onChange, value: 'foo' });
    const cancelButton = result.getByText('Cancel');

    fireEvent.click(cancelButton);

    jest.runAllTimers();
    expect(onChange).toBeCalledWith('');
  });
});
