/* istanbul ignore file */
import React, { useLayoutEffect, useRef } from 'react';
import { createPortal } from 'react-dom';


// todo: move this in core utils ?
/**
 * Creates a root div that will hold all portals with the same id.
 * @param id
 */
function getOrCreateElement(id: string): HTMLElement | undefined {
  if (!document) {
    return undefined;
  }

  let root = document.getElementById(id);

  if (!root) {
    root = document.createElement('div');
    root.id = id;
    document.body.appendChild(root);
  }

  return root;
}

// todo: move this in core utils ?
/**
 * Creates a render root for a single Portal instance, that's appended to a specific root.
 * @param id
 */
function createRenderRoot(id: string): HTMLElement | undefined {
  const root = getOrCreateElement(id);

  if (!root || !document) {
    return undefined;
  }

  const renderRoot = document.createElement('div');
  root.appendChild(renderRoot);

  return renderRoot;
}

/**
 * Custom Hook to create a render root that will be used by the portal renderer.
 * @param id
 */
function useRenderRootFor(id: string) {
  const renderRoot = useRef<HTMLElement>();

  // create an single instance of the render root
  if (!renderRoot.current) {
    renderRoot.current = createRenderRoot(id);
  }

  // clean-up the render root
  useLayoutEffect(() => {
    return function removeFromParentRoot() {
      if (renderRoot.current && renderRoot.current.parentNode) {
        renderRoot.current.parentNode.removeChild(renderRoot.current);
        renderRoot.current = undefined;
      }
    };
  }, []);

  return renderRoot.current;
}

interface PortalProps {
  id: string;
  children: any;
}

// todo: make this a standalone component
/**
 * Portal renderer: renders the children in a Portal instance, that's of a specific type (id).
 * @param id
 * @param children
 * @constructor
 */
function Portal({ id, children }: PortalProps) {
  const renderRoot = useRenderRootFor(id);

  return renderRoot ? createPortal(children, renderRoot) : null;
}

export default Portal;
