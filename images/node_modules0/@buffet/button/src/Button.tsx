import React from 'react';
import classNames from 'classnames/bind';
import { Link, LinkProps as LinkType } from 'react-router-dom';
import styles from './Button.css';
import { BusyIcon } from './BusyIcon';

const cx = classNames.bind(styles);

/**
 * A button component with included styles for disabled and busy states.
 * Can be used as either a 'button' or a 'link'.
 */

export type Theme = 'bare' | 'primary' | 'default' | 'publish' | 'hollow' | 'link';

interface BaseProps {
  busy?: boolean;
  className?: string;
  disabled?: boolean;
  theme?: Theme;
  size?: 'large' | 'small' | 'xsmall';
  testId?: string;
}

interface ButtonProps extends BaseProps {
  type: 'button';
  htmltype?: 'button' | 'reset' | 'submit';
  onClick(event: React.MouseEvent<HTMLButtonElement>): void;
}

interface LinkProps extends BaseProps, LinkType {
  type: 'link';
}

interface AnchorProps extends BaseProps {
  type: 'a';
  href: string;
  target?: string;
  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
}

export type Props = ButtonProps | LinkProps | AnchorProps;

export const Button: React.StatelessComponent<Props> = props => {
  const { busy, children, className, disabled, theme, type, size, testId, ...rest } = props;
  const isDisabled = disabled || busy;
  const busyIcon = busy && <BusyIcon className={cx('busyIcon', `busyIcon-${size}`)} type={theme} size={size} />;

  const buttonContent = !props.busy && (
    <span className={cx('buttonContent')} data-testid="buttonContent">
      {children}
    </span>
  );

  const commonProps = {
    className: cx('button', className, theme, size, {
      buttonLink: type === 'link',
      busy,
      disabled
    }),
    disabled: isDisabled,
    ['data-testid']: testId
  };

  switch (props.type) {
    case 'link':
      return (
        <Link to={props.to} {...commonProps}>
          {buttonContent}
          {busyIcon}
        </Link>
      );
    case 'button':
      return (
        <button type={props.htmltype} onClick={props.onClick} {...commonProps}>
          {buttonContent}
          {busyIcon}
        </button>
      );
    case 'a':
      return (
        <a href={props.href} target={props.target} {...commonProps}>
          {buttonContent}
          {busyIcon}
        </a>
      );
  }
};

Button.defaultProps = {
  disabled: false,
  htmltype: 'button',
  theme: 'default',
  type: 'button',
  size: 'large'
};
